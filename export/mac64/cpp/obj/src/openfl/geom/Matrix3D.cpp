// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

static const Float _hx_array_data_0[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
static const Float _hx_array_data_4[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
namespace openfl{
namespace geom{

void Matrix3D_obj::__construct(::Array< Float > v){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","new",0xe0591fd8,"openfl.geom.Matrix3D.new","openfl/geom/Matrix3D.hx",20,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  20)		Bool _hx_tmp;
HXDLIN(  20)		Bool _hx_tmp1 = hx::IsNotNull( v );
HXDLIN(  20)		if (_hx_tmp1) {
HXLINE(  20)			_hx_tmp = (v->length == (int)16);
            		}
            		else {
HXLINE(  20)			_hx_tmp = false;
            		}
HXDLIN(  20)		if (_hx_tmp) {
HXLINE(  22)			this->rawData = v;
            		}
            		else {
HXLINE(  26)			this->rawData = ::Array_obj< Float >::fromData( _hx_array_data_0,16);
            		}
            	}

Dynamic Matrix3D_obj::__CreateEmpty() { return new Matrix3D_obj; }

hx::ObjectPtr< Matrix3D_obj > Matrix3D_obj::__new(::Array< Float > v)
{
	hx::ObjectPtr< Matrix3D_obj > _hx_result = new Matrix3D_obj();
	_hx_result->__construct(v);
	return _hx_result;
}

Dynamic Matrix3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix3D_obj > _hx_result = new Matrix3D_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Matrix3D_obj::append( ::openfl::geom::Matrix3D lhs){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","append",0x481b8d62,"openfl.geom.Matrix3D.append","openfl/geom/Matrix3D.hx",33,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lhs,"lhs")
HXLINE(  35)		HX_VARI( Float,m111) = this->rawData->__get((int)0);
HXDLIN(  35)		HX_VARI( Float,m121) = this->rawData->__get((int)4);
HXDLIN(  35)		HX_VARI( Float,m131) = this->rawData->__get((int)8);
HXDLIN(  35)		HX_VARI( Float,m141) = this->rawData->__get((int)12);
HXDLIN(  35)		HX_VARI( Float,m112) = this->rawData->__get((int)1);
HXDLIN(  35)		HX_VARI( Float,m122) = this->rawData->__get((int)5);
HXDLIN(  35)		HX_VARI( Float,m132) = this->rawData->__get((int)9);
HXDLIN(  35)		HX_VARI( Float,m142) = this->rawData->__get((int)13);
HXDLIN(  35)		HX_VARI( Float,m113) = this->rawData->__get((int)2);
HXDLIN(  35)		HX_VARI( Float,m123) = this->rawData->__get((int)6);
HXDLIN(  35)		HX_VARI( Float,m133) = this->rawData->__get((int)10);
HXDLIN(  35)		HX_VARI( Float,m143) = this->rawData->__get((int)14);
HXDLIN(  35)		HX_VARI( Float,m114) = this->rawData->__get((int)3);
HXDLIN(  35)		HX_VARI( Float,m124) = this->rawData->__get((int)7);
HXDLIN(  35)		HX_VARI( Float,m134) = this->rawData->__get((int)11);
HXDLIN(  35)		HX_VARI( Float,m144) = this->rawData->__get((int)15);
HXDLIN(  35)		HX_VARI( Float,m211) = lhs->rawData->__get((int)0);
HXDLIN(  35)		HX_VARI( Float,m221) = lhs->rawData->__get((int)4);
HXDLIN(  35)		HX_VARI( Float,m231) = lhs->rawData->__get((int)8);
HXDLIN(  35)		HX_VARI( Float,m241) = lhs->rawData->__get((int)12);
HXDLIN(  35)		HX_VARI( Float,m212) = lhs->rawData->__get((int)1);
HXDLIN(  35)		HX_VARI( Float,m222) = lhs->rawData->__get((int)5);
HXDLIN(  35)		HX_VARI( Float,m232) = lhs->rawData->__get((int)9);
HXDLIN(  35)		HX_VARI( Float,m242) = lhs->rawData->__get((int)13);
HXDLIN(  35)		HX_VARI( Float,m213) = lhs->rawData->__get((int)2);
HXDLIN(  35)		HX_VARI( Float,m223) = lhs->rawData->__get((int)6);
HXDLIN(  35)		HX_VARI( Float,m233) = lhs->rawData->__get((int)10);
HXDLIN(  35)		HX_VARI( Float,m243) = lhs->rawData->__get((int)14);
HXDLIN(  35)		HX_VARI( Float,m214) = lhs->rawData->__get((int)3);
HXDLIN(  35)		HX_VARI( Float,m224) = lhs->rawData->__get((int)7);
HXDLIN(  35)		HX_VARI( Float,m234) = lhs->rawData->__get((int)11);
HXDLIN(  35)		HX_VARI( Float,m244) = lhs->rawData->__get((int)15);
HXLINE(  44)		this->rawData[(int)0] = ((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241));
HXLINE(  45)		this->rawData[(int)1] = ((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242));
HXLINE(  46)		this->rawData[(int)2] = ((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243));
HXLINE(  47)		this->rawData[(int)3] = ((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244));
HXLINE(  49)		this->rawData[(int)4] = ((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241));
HXLINE(  50)		this->rawData[(int)5] = ((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242));
HXLINE(  51)		this->rawData[(int)6] = ((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243));
HXLINE(  52)		this->rawData[(int)7] = ((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244));
HXLINE(  54)		this->rawData[(int)8] = ((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241));
HXLINE(  55)		this->rawData[(int)9] = ((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242));
HXLINE(  56)		this->rawData[(int)10] = ((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243));
HXLINE(  57)		this->rawData[(int)11] = ((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244));
HXLINE(  59)		this->rawData[(int)12] = ((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241));
HXLINE(  60)		this->rawData[(int)13] = ((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242));
HXLINE(  61)		this->rawData[(int)14] = ((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243));
HXLINE(  62)		this->rawData[(int)15] = ((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,append,(void))

void Matrix3D_obj::appendRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","appendRotation",0xf492b8c0,"openfl.geom.Matrix3D.appendRotation","openfl/geom/Matrix3D.hx",67,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE(  69)		HX_VARI(  ::openfl::geom::Matrix3D,m) = ::openfl::geom::Matrix3D_obj::_hx___getAxisRotation(axis->x,axis->y,axis->z,degrees);
HXLINE(  71)		Bool _hx_tmp = hx::IsNotNull( pivotPoint );
HXDLIN(  71)		if (_hx_tmp) {
HXLINE(  74)			m->appendTranslation(pivotPoint->x,pivotPoint->y,pivotPoint->z);
            		}
HXLINE(  78)		this->append(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendRotation,(void))

void Matrix3D_obj::appendScale(Float xScale,Float yScale,Float zScale){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","appendScale",0x02daedc8,"openfl.geom.Matrix3D.appendScale","openfl/geom/Matrix3D.hx",85,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE(  85)		this->append( ::openfl::geom::Matrix3D_obj::__new(::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0))));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendScale,(void))

void Matrix3D_obj::appendTranslation(Float x,Float y,Float z){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","appendTranslation",0x514252af,"openfl.geom.Matrix3D.appendTranslation","openfl/geom/Matrix3D.hx",90,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(  92)		Float _hx_tmp = (this->rawData->__get((int)12) + x);
HXDLIN(  92)		this->rawData[(int)12] = _hx_tmp;
HXLINE(  93)		Float _hx_tmp1 = (this->rawData->__get((int)13) + y);
HXDLIN(  93)		this->rawData[(int)13] = _hx_tmp1;
HXLINE(  94)		Float _hx_tmp2 = (this->rawData->__get((int)14) + z);
HXDLIN(  94)		this->rawData[(int)14] = _hx_tmp2;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendTranslation,(void))

 ::openfl::geom::Matrix3D Matrix3D_obj::clone(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","clone",0x2ff530d5,"openfl.geom.Matrix3D.clone","openfl/geom/Matrix3D.hx",101,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 101)		return  ::openfl::geom::Matrix3D_obj::__new(this->rawData->copy());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,clone,return )

void Matrix3D_obj::copyColumnFrom(Int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyColumnFrom",0x63600afd,"openfl.geom.Matrix3D.copyColumnFrom","openfl/geom/Matrix3D.hx",108,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 108)		switch((int)(column)){
            			case (int)0: {
HXLINE( 112)				{
HXLINE( 112)					Float value = vector3D->x;
HXDLIN( 112)					this->rawData[(int)0] = value;
            				}
HXLINE( 113)				{
HXLINE( 113)					Float value1 = vector3D->y;
HXDLIN( 113)					this->rawData[(int)1] = value1;
            				}
HXLINE( 114)				{
HXLINE( 114)					Float value2 = vector3D->z;
HXDLIN( 114)					this->rawData[(int)2] = value2;
            				}
HXLINE( 115)				{
HXLINE( 115)					Float value3 = vector3D->w;
HXDLIN( 115)					this->rawData[(int)3] = value3;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 119)				{
HXLINE( 119)					Float value4 = vector3D->x;
HXDLIN( 119)					this->rawData[(int)4] = value4;
            				}
HXLINE( 120)				{
HXLINE( 120)					Float value5 = vector3D->y;
HXDLIN( 120)					this->rawData[(int)5] = value5;
            				}
HXLINE( 121)				{
HXLINE( 121)					Float value6 = vector3D->z;
HXDLIN( 121)					this->rawData[(int)6] = value6;
            				}
HXLINE( 122)				{
HXLINE( 122)					Float value7 = vector3D->w;
HXDLIN( 122)					this->rawData[(int)7] = value7;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 126)				{
HXLINE( 126)					Float value8 = vector3D->x;
HXDLIN( 126)					this->rawData[(int)8] = value8;
            				}
HXLINE( 127)				{
HXLINE( 127)					Float value9 = vector3D->y;
HXDLIN( 127)					this->rawData[(int)9] = value9;
            				}
HXLINE( 128)				{
HXLINE( 128)					Float value10 = vector3D->z;
HXDLIN( 128)					this->rawData[(int)10] = value10;
            				}
HXLINE( 129)				{
HXLINE( 129)					Float value11 = vector3D->w;
HXDLIN( 129)					this->rawData[(int)11] = value11;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 133)				{
HXLINE( 133)					Float value12 = vector3D->x;
HXDLIN( 133)					this->rawData[(int)12] = value12;
            				}
HXLINE( 134)				{
HXLINE( 134)					Float value13 = vector3D->y;
HXDLIN( 134)					this->rawData[(int)13] = value13;
            				}
HXLINE( 135)				{
HXLINE( 135)					Float value14 = vector3D->z;
HXDLIN( 135)					this->rawData[(int)14] = value14;
            				}
HXLINE( 136)				{
HXLINE( 136)					Float value15 = vector3D->w;
HXDLIN( 136)					this->rawData[(int)15] = value15;
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnFrom,(void))

void Matrix3D_obj::copyColumnTo(Int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyColumnTo",0x8c37304e,"openfl.geom.Matrix3D.copyColumnTo","openfl/geom/Matrix3D.hx",147,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 147)		switch((int)(column)){
            			case (int)0: {
HXLINE( 151)				vector3D->x = this->rawData->__get((int)0);
HXLINE( 152)				vector3D->y = this->rawData->__get((int)1);
HXLINE( 153)				vector3D->z = this->rawData->__get((int)2);
HXLINE( 154)				vector3D->w = this->rawData->__get((int)3);
            			}
            			break;
            			case (int)1: {
HXLINE( 158)				vector3D->x = this->rawData->__get((int)4);
HXLINE( 159)				vector3D->y = this->rawData->__get((int)5);
HXLINE( 160)				vector3D->z = this->rawData->__get((int)6);
HXLINE( 161)				vector3D->w = this->rawData->__get((int)7);
            			}
            			break;
            			case (int)2: {
HXLINE( 165)				vector3D->x = this->rawData->__get((int)8);
HXLINE( 166)				vector3D->y = this->rawData->__get((int)9);
HXLINE( 167)				vector3D->z = this->rawData->__get((int)10);
HXLINE( 168)				vector3D->w = this->rawData->__get((int)11);
            			}
            			break;
            			case (int)3: {
HXLINE( 172)				vector3D->x = this->rawData->__get((int)12);
HXLINE( 173)				vector3D->y = this->rawData->__get((int)13);
HXLINE( 174)				vector3D->z = this->rawData->__get((int)14);
HXLINE( 175)				vector3D->w = this->rawData->__get((int)15);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnTo,(void))

void Matrix3D_obj::copyFrom( ::openfl::geom::Matrix3D other){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyFrom",0xe290a947,"openfl.geom.Matrix3D.copyFrom","openfl/geom/Matrix3D.hx",186,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE( 186)		this->rawData = other->rawData->copy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyFrom,(void))

void Matrix3D_obj::copyRawDataFrom(::Array< Float > vector,hx::Null< Int >  __o_index,hx::Null< Bool >  __o_transpose){
Int index = __o_index.Default(0);
Bool transpose = __o_transpose.Default(false);
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyRawDataFrom",0x9938207f,"openfl.geom.Matrix3D.copyRawDataFrom","openfl/geom/Matrix3D.hx",191,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vector,"vector")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transpose,"transpose")
HXLINE( 193)		if (transpose) {
HXLINE( 195)			this->transpose();
            		}
HXLINE( 199)		HX_VARI( Int,length) = (vector->length - index);
HXLINE( 201)		{
HXLINE( 201)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 201)			HX_VARI( Int,_g) = length;
HXDLIN( 201)			while((_g1 < _g)){
HXLINE( 201)				HX_VARI( Int,i) = _g1++;
HXLINE( 203)				this->rawData[i] = vector->__get((i + index));
            			}
            		}
HXLINE( 207)		if (transpose) {
HXLINE( 209)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataFrom,(void))

void Matrix3D_obj::copyRawDataTo(::Array< Float > vector,hx::Null< Int >  __o_index,hx::Null< Bool >  __o_transpose){
Int index = __o_index.Default(0);
Bool transpose = __o_transpose.Default(false);
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyRawDataTo",0xac978150,"openfl.geom.Matrix3D.copyRawDataTo","openfl/geom/Matrix3D.hx",216,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vector,"vector")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transpose,"transpose")
HXLINE( 218)		if (transpose) {
HXLINE( 220)			this->transpose();
            		}
HXLINE( 224)		{
HXLINE( 224)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 224)			HX_VARI( Int,_g) = this->rawData->length;
HXDLIN( 224)			while((_g1 < _g)){
HXLINE( 224)				HX_VARI( Int,i) = _g1++;
HXLINE( 226)				vector[(i + index)] = this->rawData->__get(i);
            			}
            		}
HXLINE( 230)		if (transpose) {
HXLINE( 232)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataTo,(void))

void Matrix3D_obj::copyRowFrom(Int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyRowFrom",0x3d20cce7,"openfl.geom.Matrix3D.copyRowFrom","openfl/geom/Matrix3D.hx",241,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 241)		switch((int)(row)){
            			case (int)0: {
HXLINE( 245)				{
HXLINE( 245)					Float value = vector3D->x;
HXDLIN( 245)					this->rawData[(int)0] = value;
            				}
HXLINE( 246)				{
HXLINE( 246)					Float value1 = vector3D->y;
HXDLIN( 246)					this->rawData[(int)4] = value1;
            				}
HXLINE( 247)				{
HXLINE( 247)					Float value2 = vector3D->z;
HXDLIN( 247)					this->rawData[(int)8] = value2;
            				}
HXLINE( 248)				{
HXLINE( 248)					Float value3 = vector3D->w;
HXDLIN( 248)					this->rawData[(int)12] = value3;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 252)				{
HXLINE( 252)					Float value4 = vector3D->x;
HXDLIN( 252)					this->rawData[(int)1] = value4;
            				}
HXLINE( 253)				{
HXLINE( 253)					Float value5 = vector3D->y;
HXDLIN( 253)					this->rawData[(int)5] = value5;
            				}
HXLINE( 254)				{
HXLINE( 254)					Float value6 = vector3D->z;
HXDLIN( 254)					this->rawData[(int)9] = value6;
            				}
HXLINE( 255)				{
HXLINE( 255)					Float value7 = vector3D->w;
HXDLIN( 255)					this->rawData[(int)13] = value7;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 259)				{
HXLINE( 259)					Float value8 = vector3D->x;
HXDLIN( 259)					this->rawData[(int)2] = value8;
            				}
HXLINE( 260)				{
HXLINE( 260)					Float value9 = vector3D->y;
HXDLIN( 260)					this->rawData[(int)6] = value9;
            				}
HXLINE( 261)				{
HXLINE( 261)					Float value10 = vector3D->z;
HXDLIN( 261)					this->rawData[(int)10] = value10;
            				}
HXLINE( 262)				{
HXLINE( 262)					Float value11 = vector3D->w;
HXDLIN( 262)					this->rawData[(int)14] = value11;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 266)				{
HXLINE( 266)					Float value12 = vector3D->x;
HXDLIN( 266)					this->rawData[(int)3] = value12;
            				}
HXLINE( 267)				{
HXLINE( 267)					Float value13 = vector3D->y;
HXDLIN( 267)					this->rawData[(int)7] = value13;
            				}
HXLINE( 268)				{
HXLINE( 268)					Float value14 = vector3D->z;
HXDLIN( 268)					this->rawData[(int)11] = value14;
            				}
HXLINE( 269)				{
HXLINE( 269)					Float value15 = vector3D->w;
HXDLIN( 269)					this->rawData[(int)15] = value15;
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowFrom,(void))

void Matrix3D_obj::copyRowTo(Int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyRowTo",0x42dcc3b8,"openfl.geom.Matrix3D.copyRowTo","openfl/geom/Matrix3D.hx",280,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 280)		switch((int)(row)){
            			case (int)0: {
HXLINE( 284)				vector3D->x = this->rawData->__get((int)0);
HXLINE( 285)				vector3D->y = this->rawData->__get((int)4);
HXLINE( 286)				vector3D->z = this->rawData->__get((int)8);
HXLINE( 287)				vector3D->w = this->rawData->__get((int)12);
            			}
            			break;
            			case (int)1: {
HXLINE( 291)				vector3D->x = this->rawData->__get((int)1);
HXLINE( 292)				vector3D->y = this->rawData->__get((int)5);
HXLINE( 293)				vector3D->z = this->rawData->__get((int)9);
HXLINE( 294)				vector3D->w = this->rawData->__get((int)13);
            			}
            			break;
            			case (int)2: {
HXLINE( 298)				vector3D->x = this->rawData->__get((int)2);
HXLINE( 299)				vector3D->y = this->rawData->__get((int)6);
HXLINE( 300)				vector3D->z = this->rawData->__get((int)10);
HXLINE( 301)				vector3D->w = this->rawData->__get((int)14);
            			}
            			break;
            			case (int)3: {
HXLINE( 305)				vector3D->x = this->rawData->__get((int)3);
HXLINE( 306)				vector3D->y = this->rawData->__get((int)7);
HXLINE( 307)				vector3D->z = this->rawData->__get((int)11);
HXLINE( 308)				vector3D->w = this->rawData->__get((int)15);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowTo,(void))

void Matrix3D_obj::copyToMatrix3D( ::openfl::geom::Matrix3D other){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyToMatrix3D",0x2cc9916a,"openfl.geom.Matrix3D.copyToMatrix3D","openfl/geom/Matrix3D.hx",319,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE( 319)		other->rawData = this->rawData->copy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyToMatrix3D,(void))

::Array< ::Dynamic> Matrix3D_obj::decompose( ::Dynamic orientationStyle){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","decompose",0x4a21fd29,"openfl.geom.Matrix3D.decompose","openfl/geom/Matrix3D.hx",353,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(orientationStyle,"orientationStyle")
HXLINE( 355)		Bool _hx_tmp = hx::IsNull( orientationStyle );
HXDLIN( 355)		if (_hx_tmp) {
HXLINE( 357)			orientationStyle = (int)1;
            		}
HXLINE( 361)		HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 361)		this1->__SetSizeExact(null());
HXDLIN( 361)		HX_VARI( ::Array< ::Dynamic>,vec) = this1;
HXLINE( 362)		HX_VARI(  ::openfl::geom::Matrix3D,m) = this->clone();
HXLINE( 363)		HX_VARI( ::Array< Float >,mr) = m->rawData->copy();
HXLINE( 365)		HX_VARI(  ::openfl::geom::Vector3D,pos) =  ::openfl::geom::Vector3D_obj::__new(mr->__get((int)12),mr->__get((int)13),mr->__get((int)14),null());
HXLINE( 366)		mr[(int)12] = (int)0;
HXLINE( 367)		mr[(int)13] = (int)0;
HXLINE( 368)		mr[(int)14] = (int)0;
HXLINE( 370)		HX_VARI(  ::openfl::geom::Vector3D,scale) =  ::openfl::geom::Vector3D_obj::__new(null(),null(),null(),null());
HXLINE( 372)		Float _hx_tmp1 = (((mr->__get((int)0) * mr->__get((int)0)) + (mr->__get((int)1) * mr->__get((int)1))) + (mr->__get((int)2) * mr->__get((int)2)));
HXDLIN( 372)		scale->x = ::Math_obj::sqrt(_hx_tmp1);
HXLINE( 373)		Float _hx_tmp2 = (((mr->__get((int)4) * mr->__get((int)4)) + (mr->__get((int)5) * mr->__get((int)5))) + (mr->__get((int)6) * mr->__get((int)6)));
HXDLIN( 373)		scale->y = ::Math_obj::sqrt(_hx_tmp2);
HXLINE( 374)		Float _hx_tmp3 = (((mr->__get((int)8) * mr->__get((int)8)) + (mr->__get((int)9) * mr->__get((int)9))) + (mr->__get((int)10) * mr->__get((int)10)));
HXDLIN( 374)		scale->z = ::Math_obj::sqrt(_hx_tmp3);
HXLINE( 376)		Float _hx_tmp4 = (((mr->__get((int)0) * ((mr->__get((int)5) * mr->__get((int)10)) - (mr->__get((int)6) * mr->__get((int)9)))) - (mr->__get((int)1) * ((mr->__get((int)4) * mr->__get((int)10)) - (mr->__get((int)6) * mr->__get((int)8))))) + (mr->__get((int)2) * ((mr->__get((int)4) * mr->__get((int)9)) - (mr->__get((int)5) * mr->__get((int)8)))));
HXDLIN( 376)		if ((_hx_tmp4 < (int)0)) {
HXLINE( 378)			scale->z = -(scale->z);
            		}
HXLINE( 382)		{
HXLINE( 382)			Float value = ((Float)mr->__get((int)0) / (Float)scale->x);
HXDLIN( 382)			mr[(int)0] = value;
            		}
HXLINE( 383)		{
HXLINE( 383)			Float value1 = ((Float)mr->__get((int)1) / (Float)scale->x);
HXDLIN( 383)			mr[(int)1] = value1;
            		}
HXLINE( 384)		{
HXLINE( 384)			Float value2 = ((Float)mr->__get((int)2) / (Float)scale->x);
HXDLIN( 384)			mr[(int)2] = value2;
            		}
HXLINE( 385)		{
HXLINE( 385)			Float value3 = ((Float)mr->__get((int)4) / (Float)scale->y);
HXDLIN( 385)			mr[(int)4] = value3;
            		}
HXLINE( 386)		{
HXLINE( 386)			Float value4 = ((Float)mr->__get((int)5) / (Float)scale->y);
HXDLIN( 386)			mr[(int)5] = value4;
            		}
HXLINE( 387)		{
HXLINE( 387)			Float value5 = ((Float)mr->__get((int)6) / (Float)scale->y);
HXDLIN( 387)			mr[(int)6] = value5;
            		}
HXLINE( 388)		{
HXLINE( 388)			Float value6 = ((Float)mr->__get((int)8) / (Float)scale->z);
HXDLIN( 388)			mr[(int)8] = value6;
            		}
HXLINE( 389)		{
HXLINE( 389)			Float value7 = ((Float)mr->__get((int)9) / (Float)scale->z);
HXDLIN( 389)			mr[(int)9] = value7;
            		}
HXLINE( 390)		{
HXLINE( 390)			Float value8 = ((Float)mr->__get((int)10) / (Float)scale->z);
HXDLIN( 390)			mr[(int)10] = value8;
            		}
HXLINE( 392)		HX_VARI(  ::openfl::geom::Vector3D,rot) =  ::openfl::geom::Vector3D_obj::__new(null(),null(),null(),null());
HXLINE( 394)		 ::Dynamic _hx_switch_0 = orientationStyle;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 398)			Float _hx_tmp5 = ((Float)(((mr->__get((int)0) + mr->__get((int)5)) + mr->__get((int)10)) - (int)1) / (Float)(int)2);
HXDLIN( 398)			rot->w = ::Math_obj::acos(_hx_tmp5);
HXLINE( 400)			Float _hx_tmp6 = (((mr->__get((int)6) - mr->__get((int)9)) * (mr->__get((int)6) - mr->__get((int)9))) + ((mr->__get((int)8) - mr->__get((int)2)) * (mr->__get((int)8) - mr->__get((int)2))));
HXDLIN( 400)			Float _hx_tmp7 = ((mr->__get((int)1) - mr->__get((int)4)) * (mr->__get((int)1) - mr->__get((int)4)));
HXDLIN( 400)			HX_VARI( Float,len) = ::Math_obj::sqrt((_hx_tmp6 + _hx_tmp7));
HXLINE( 402)			if ((len != (int)0)) {
HXLINE( 404)				Float _hx_tmp8 = (mr->__get((int)6) - mr->__get((int)9));
HXDLIN( 404)				rot->x = ((Float)_hx_tmp8 / (Float)len);
HXLINE( 405)				Float _hx_tmp9 = (mr->__get((int)8) - mr->__get((int)2));
HXDLIN( 405)				rot->y = ((Float)_hx_tmp9 / (Float)len);
HXLINE( 406)				Float _hx_tmp10 = (mr->__get((int)1) - mr->__get((int)4));
HXDLIN( 406)				rot->z = ((Float)_hx_tmp10 / (Float)len);
            			}
            			else {
HXLINE( 410)				rot->x = (rot->y = (rot->z = (int)0));
            			}
HXLINE( 396)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 454)			rot->y = ::Math_obj::asin(-(mr->__get((int)2)));
HXLINE( 456)			Bool _hx_tmp11;
HXDLIN( 456)			if ((mr->__get((int)2) != (int)1)) {
HXLINE( 456)				_hx_tmp11 = (mr->__get((int)2) != (int)-1);
            			}
            			else {
HXLINE( 456)				_hx_tmp11 = false;
            			}
HXDLIN( 456)			if (_hx_tmp11) {
HXLINE( 458)				rot->x = ::Math_obj::atan2(mr->__get((int)6),mr->__get((int)10));
HXLINE( 459)				rot->z = ::Math_obj::atan2(mr->__get((int)1),mr->__get((int)0));
            			}
            			else {
HXLINE( 463)				rot->z = (int)0;
HXLINE( 464)				rot->x = ::Math_obj::atan2(mr->__get((int)4),mr->__get((int)5));
            			}
HXLINE( 452)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 416)			HX_VARI( Float,tr) = ((mr->__get((int)0) + mr->__get((int)5)) + mr->__get((int)10));
HXLINE( 418)			if ((tr > (int)0)) {
HXLINE( 420)				Float _hx_tmp12 = ::Math_obj::sqrt(((int)1 + tr));
HXDLIN( 420)				rot->w = ((Float)_hx_tmp12 / (Float)(int)2);
HXLINE( 422)				Float _hx_tmp13 = (mr->__get((int)6) - mr->__get((int)9));
HXDLIN( 422)				Float _hx_tmp14 = ((int)4 * rot->w);
HXDLIN( 422)				rot->x = ((Float)_hx_tmp13 / (Float)_hx_tmp14);
HXLINE( 423)				Float _hx_tmp15 = (mr->__get((int)8) - mr->__get((int)2));
HXDLIN( 423)				Float _hx_tmp16 = ((int)4 * rot->w);
HXDLIN( 423)				rot->y = ((Float)_hx_tmp15 / (Float)_hx_tmp16);
HXLINE( 424)				Float _hx_tmp17 = (mr->__get((int)1) - mr->__get((int)4));
HXDLIN( 424)				Float _hx_tmp18 = ((int)4 * rot->w);
HXDLIN( 424)				rot->z = ((Float)_hx_tmp17 / (Float)_hx_tmp18);
            			}
            			else {
HXLINE( 426)				Bool _hx_tmp19;
HXDLIN( 426)				if ((mr->__get((int)0) > mr->__get((int)5))) {
HXLINE( 426)					_hx_tmp19 = (mr->__get((int)0) > mr->__get((int)10));
            				}
            				else {
HXLINE( 426)					_hx_tmp19 = false;
            				}
HXDLIN( 426)				if (_hx_tmp19) {
HXLINE( 428)					Float _hx_tmp20 = ((((int)1 + mr->__get((int)0)) - mr->__get((int)5)) - mr->__get((int)10));
HXDLIN( 428)					Float _hx_tmp21 = ::Math_obj::sqrt(_hx_tmp20);
HXDLIN( 428)					rot->x = ((Float)_hx_tmp21 / (Float)(int)2);
HXLINE( 430)					Float _hx_tmp22 = (mr->__get((int)6) - mr->__get((int)9));
HXDLIN( 430)					Float _hx_tmp23 = ((int)4 * rot->x);
HXDLIN( 430)					rot->w = ((Float)_hx_tmp22 / (Float)_hx_tmp23);
HXLINE( 431)					Float _hx_tmp24 = (mr->__get((int)1) + mr->__get((int)4));
HXDLIN( 431)					Float _hx_tmp25 = ((int)4 * rot->x);
HXDLIN( 431)					rot->y = ((Float)_hx_tmp24 / (Float)_hx_tmp25);
HXLINE( 432)					Float _hx_tmp26 = (mr->__get((int)8) + mr->__get((int)2));
HXDLIN( 432)					Float _hx_tmp27 = ((int)4 * rot->x);
HXDLIN( 432)					rot->z = ((Float)_hx_tmp26 / (Float)_hx_tmp27);
            				}
            				else {
HXLINE( 434)					Bool _hx_tmp28 = (mr->__get((int)5) > mr->__get((int)10));
HXDLIN( 434)					if (_hx_tmp28) {
HXLINE( 436)						Float _hx_tmp29 = ((((int)1 + mr->__get((int)5)) - mr->__get((int)0)) - mr->__get((int)10));
HXDLIN( 436)						Float _hx_tmp30 = ::Math_obj::sqrt(_hx_tmp29);
HXDLIN( 436)						rot->y = ((Float)_hx_tmp30 / (Float)(int)2);
HXLINE( 438)						Float _hx_tmp31 = (mr->__get((int)1) + mr->__get((int)4));
HXDLIN( 438)						Float _hx_tmp32 = ((int)4 * rot->y);
HXDLIN( 438)						rot->x = ((Float)_hx_tmp31 / (Float)_hx_tmp32);
HXLINE( 439)						Float _hx_tmp33 = (mr->__get((int)8) - mr->__get((int)2));
HXDLIN( 439)						Float _hx_tmp34 = ((int)4 * rot->y);
HXDLIN( 439)						rot->w = ((Float)_hx_tmp33 / (Float)_hx_tmp34);
HXLINE( 440)						Float _hx_tmp35 = (mr->__get((int)6) + mr->__get((int)9));
HXDLIN( 440)						Float _hx_tmp36 = ((int)4 * rot->y);
HXDLIN( 440)						rot->z = ((Float)_hx_tmp35 / (Float)_hx_tmp36);
            					}
            					else {
HXLINE( 444)						Float _hx_tmp37 = ((((int)1 + mr->__get((int)10)) - mr->__get((int)0)) - mr->__get((int)5));
HXDLIN( 444)						Float _hx_tmp38 = ::Math_obj::sqrt(_hx_tmp37);
HXDLIN( 444)						rot->z = ((Float)_hx_tmp38 / (Float)(int)2);
HXLINE( 446)						Float _hx_tmp39 = (mr->__get((int)8) + mr->__get((int)2));
HXDLIN( 446)						Float _hx_tmp40 = ((int)4 * rot->z);
HXDLIN( 446)						rot->x = ((Float)_hx_tmp39 / (Float)_hx_tmp40);
HXLINE( 447)						Float _hx_tmp41 = (mr->__get((int)6) + mr->__get((int)9));
HXDLIN( 447)						Float _hx_tmp42 = ((int)4 * rot->z);
HXDLIN( 447)						rot->y = ((Float)_hx_tmp41 / (Float)_hx_tmp42);
HXLINE( 448)						Float _hx_tmp43 = (mr->__get((int)1) - mr->__get((int)4));
HXDLIN( 448)						Float _hx_tmp44 = ((int)4 * rot->z);
HXDLIN( 448)						rot->w = ((Float)_hx_tmp43 / (Float)_hx_tmp44);
            					}
            				}
            			}
HXLINE( 414)			goto _hx_goto_3;
            		}
            		_hx_goto_3:;
HXLINE( 470)		vec->push(pos);
HXLINE( 471)		vec->push(rot);
HXLINE( 472)		vec->push(scale);
HXLINE( 474)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,decompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::deltaTransformVector( ::openfl::geom::Vector3D v){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","deltaTransformVector",0x0285cbbf,"openfl.geom.Matrix3D.deltaTransformVector","openfl/geom/Matrix3D.hx",479,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 481)		HX_VARI( Float,x) = v->x;
HXDLIN( 481)		HX_VARI( Float,y) = v->y;
HXDLIN( 481)		HX_VARI( Float,z) = v->z;
HXLINE( 483)		return  ::openfl::geom::Vector3D_obj::__new(((((x * this->rawData->__get((int)0)) + (y * this->rawData->__get((int)4))) + (z * this->rawData->__get((int)8))) + this->rawData->__get((int)3)),((((x * this->rawData->__get((int)1)) + (y * this->rawData->__get((int)5))) + (z * this->rawData->__get((int)9))) + this->rawData->__get((int)7)),((((x * this->rawData->__get((int)2)) + (y * this->rawData->__get((int)6))) + (z * this->rawData->__get((int)10))) + this->rawData->__get((int)11)),(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,deltaTransformVector,return )

void Matrix3D_obj::identity(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","identity",0xd35ee2c6,"openfl.geom.Matrix3D.identity","openfl/geom/Matrix3D.hx",490,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 490)		this->rawData = ::Array_obj< Float >::fromData( _hx_array_data_4,16);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,identity,(void))

void Matrix3D_obj::interpolateTo( ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","interpolateTo",0x74c2e614,"openfl.geom.Matrix3D.interpolateTo","openfl/geom/Matrix3D.hx",512,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 512)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 512)		while((_g < (int)16)){
HXLINE( 512)			HX_VARI( Int,i) = _g++;
HXLINE( 514)			Float _hx_tmp = (this->rawData->__get(i) + ((toMat->rawData->__get(i) - this->rawData->__get(i)) * percent));
HXDLIN( 514)			this->rawData[i] = _hx_tmp;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,interpolateTo,(void))

Bool Matrix3D_obj::invert(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","invert",0x5820929e,"openfl.geom.Matrix3D.invert","openfl/geom/Matrix3D.hx",521,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 523)		HX_VARI( Float,d) = this->get_determinant();
HXLINE( 524)		Float _hx_tmp = ::Math_obj::abs(d);
HXDLIN( 524)		HX_VARI( Bool,invertable) = (_hx_tmp > ((Float)0.00000000001));
HXLINE( 526)		if (invertable) {
HXLINE( 528)			d = ((Float)(int)1 / (Float)d);
HXLINE( 530)			HX_VARI( Float,m11) = this->rawData->__get((int)0);
HXDLIN( 530)			HX_VARI( Float,m21) = this->rawData->__get((int)4);
HXDLIN( 530)			HX_VARI( Float,m31) = this->rawData->__get((int)8);
HXDLIN( 530)			HX_VARI( Float,m41) = this->rawData->__get((int)12);
HXLINE( 531)			HX_VARI( Float,m12) = this->rawData->__get((int)1);
HXDLIN( 531)			HX_VARI( Float,m22) = this->rawData->__get((int)5);
HXDLIN( 531)			HX_VARI( Float,m32) = this->rawData->__get((int)9);
HXDLIN( 531)			HX_VARI( Float,m42) = this->rawData->__get((int)13);
HXLINE( 532)			HX_VARI( Float,m13) = this->rawData->__get((int)2);
HXDLIN( 532)			HX_VARI( Float,m23) = this->rawData->__get((int)6);
HXDLIN( 532)			HX_VARI( Float,m33) = this->rawData->__get((int)10);
HXDLIN( 532)			HX_VARI( Float,m43) = this->rawData->__get((int)14);
HXLINE( 533)			HX_VARI( Float,m14) = this->rawData->__get((int)3);
HXDLIN( 533)			HX_VARI( Float,m24) = this->rawData->__get((int)7);
HXDLIN( 533)			HX_VARI( Float,m34) = this->rawData->__get((int)11);
HXDLIN( 533)			HX_VARI( Float,m44) = this->rawData->__get((int)15);
HXLINE( 535)			this->rawData[(int)0] = (d * (((m22 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m23 * m44) - (m43 * m24)))) + (m42 * ((m23 * m34) - (m33 * m24)))));
HXLINE( 536)			this->rawData[(int)1] = (-(d) * (((m12 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m34) - (m33 * m14)))));
HXLINE( 537)			this->rawData[(int)2] = (d * (((m12 * ((m23 * m44) - (m43 * m24))) - (m22 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m24) - (m23 * m14)))));
HXLINE( 538)			this->rawData[(int)3] = (-(d) * (((m12 * ((m23 * m34) - (m33 * m24))) - (m22 * ((m13 * m34) - (m33 * m14)))) + (m32 * ((m13 * m24) - (m23 * m14)))));
HXLINE( 539)			this->rawData[(int)4] = (-(d) * (((m21 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m23 * m44) - (m43 * m24)))) + (m41 * ((m23 * m34) - (m33 * m24)))));
HXLINE( 540)			this->rawData[(int)5] = (d * (((m11 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m34) - (m33 * m14)))));
HXLINE( 541)			this->rawData[(int)6] = (-(d) * (((m11 * ((m23 * m44) - (m43 * m24))) - (m21 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m24) - (m23 * m14)))));
HXLINE( 542)			this->rawData[(int)7] = (d * (((m11 * ((m23 * m34) - (m33 * m24))) - (m21 * ((m13 * m34) - (m33 * m14)))) + (m31 * ((m13 * m24) - (m23 * m14)))));
HXLINE( 543)			this->rawData[(int)8] = (d * (((m21 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m22 * m44) - (m42 * m24)))) + (m41 * ((m22 * m34) - (m32 * m24)))));
HXLINE( 544)			this->rawData[(int)9] = (-(d) * (((m11 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m34) - (m32 * m14)))));
HXLINE( 545)			this->rawData[(int)10] = (d * (((m11 * ((m22 * m44) - (m42 * m24))) - (m21 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m24) - (m22 * m14)))));
HXLINE( 546)			this->rawData[(int)11] = (-(d) * (((m11 * ((m22 * m34) - (m32 * m24))) - (m21 * ((m12 * m34) - (m32 * m14)))) + (m31 * ((m12 * m24) - (m22 * m14)))));
HXLINE( 547)			this->rawData[(int)12] = (-(d) * (((m21 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m22 * m43) - (m42 * m23)))) + (m41 * ((m22 * m33) - (m32 * m23)))));
HXLINE( 548)			this->rawData[(int)13] = (d * (((m11 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m33) - (m32 * m13)))));
HXLINE( 549)			this->rawData[(int)14] = (-(d) * (((m11 * ((m22 * m43) - (m42 * m23))) - (m21 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m23) - (m22 * m13)))));
HXLINE( 550)			this->rawData[(int)15] = (d * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13)))));
            		}
HXLINE( 554)		return invertable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,invert,return )

void Matrix3D_obj::pointAt( ::openfl::geom::Vector3D pos, ::openfl::geom::Vector3D at, ::openfl::geom::Vector3D up){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","pointAt",0xd7900cdb,"openfl.geom.Matrix3D.pointAt","openfl/geom/Matrix3D.hx",559,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(at,"at")
            	HX_STACK_ARG(up,"up")
HXLINE( 561)		Bool _hx_tmp = hx::IsNull( at );
HXDLIN( 561)		if (_hx_tmp) {
HXLINE( 563)			at =  ::openfl::geom::Vector3D_obj::__new((int)0,(int)0,(int)-1,null());
            		}
HXLINE( 567)		Bool _hx_tmp1 = hx::IsNull( up );
HXDLIN( 567)		if (_hx_tmp1) {
HXLINE( 569)			up =  ::openfl::geom::Vector3D_obj::__new((int)0,(int)-1,(int)0,null());
            		}
HXLINE( 573)		HX_VARI(  ::openfl::geom::Vector3D,dir) = at->subtract(pos);
HXLINE( 574)		HX_VARI(  ::openfl::geom::Vector3D,vup) = up->clone();
HXLINE( 575)		HX_VAR(  ::openfl::geom::Vector3D,right);
HXLINE( 577)		dir->normalize();
HXLINE( 578)		vup->normalize();
HXLINE( 580)		HX_VARI(  ::openfl::geom::Vector3D,dir2) = dir->clone();
HXLINE( 581)		Float _hx_tmp2 = vup->dotProduct(dir);
HXDLIN( 581)		dir2->scaleBy(_hx_tmp2);
HXLINE( 583)		vup = vup->subtract(dir2);
HXLINE( 585)		Float _hx_tmp3 = vup->get_length();
HXDLIN( 585)		if ((_hx_tmp3 > (int)0)) {
HXLINE( 587)			vup->normalize();
            		}
            		else {
HXLINE( 591)			if ((dir->x != (int)0)) {
HXLINE( 593)				vup =  ::openfl::geom::Vector3D_obj::__new(-(dir->y),dir->x,(int)0,null());
            			}
            			else {
HXLINE( 597)				vup =  ::openfl::geom::Vector3D_obj::__new((int)1,(int)0,(int)0,null());
            			}
            		}
HXLINE( 603)		right = vup->crossProduct(dir);
HXLINE( 604)		right->normalize();
HXLINE( 606)		{
HXLINE( 606)			Float value = right->x;
HXDLIN( 606)			this->rawData[(int)0] = value;
            		}
HXLINE( 607)		{
HXLINE( 607)			Float value1 = right->y;
HXDLIN( 607)			this->rawData[(int)4] = value1;
            		}
HXLINE( 608)		{
HXLINE( 608)			Float value2 = right->z;
HXDLIN( 608)			this->rawData[(int)8] = value2;
            		}
HXLINE( 609)		this->rawData[(int)12] = ((Float)0.0);
HXLINE( 610)		{
HXLINE( 610)			Float value3 = vup->x;
HXDLIN( 610)			this->rawData[(int)1] = value3;
            		}
HXLINE( 611)		{
HXLINE( 611)			Float value4 = vup->y;
HXDLIN( 611)			this->rawData[(int)5] = value4;
            		}
HXLINE( 612)		{
HXLINE( 612)			Float value5 = vup->z;
HXDLIN( 612)			this->rawData[(int)9] = value5;
            		}
HXLINE( 613)		this->rawData[(int)13] = ((Float)0.0);
HXLINE( 614)		{
HXLINE( 614)			Float value6 = dir->x;
HXDLIN( 614)			this->rawData[(int)2] = value6;
            		}
HXLINE( 615)		{
HXLINE( 615)			Float value7 = dir->y;
HXDLIN( 615)			this->rawData[(int)6] = value7;
            		}
HXLINE( 616)		{
HXLINE( 616)			Float value8 = dir->z;
HXDLIN( 616)			this->rawData[(int)10] = value8;
            		}
HXLINE( 617)		this->rawData[(int)14] = ((Float)0.0);
HXLINE( 618)		{
HXLINE( 618)			Float value9 = pos->x;
HXDLIN( 618)			this->rawData[(int)3] = value9;
            		}
HXLINE( 619)		{
HXLINE( 619)			Float value10 = pos->y;
HXDLIN( 619)			this->rawData[(int)7] = value10;
            		}
HXLINE( 620)		{
HXLINE( 620)			Float value11 = pos->z;
HXDLIN( 620)			this->rawData[(int)11] = value11;
            		}
HXLINE( 621)		this->rawData[(int)15] = ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,pointAt,(void))

void Matrix3D_obj::prepend( ::openfl::geom::Matrix3D rhs){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","prepend",0xbe4f0286,"openfl.geom.Matrix3D.prepend","openfl/geom/Matrix3D.hx",626,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rhs,"rhs")
HXLINE( 628)		HX_VARI( Float,m111) = rhs->rawData->__get((int)0);
HXDLIN( 628)		HX_VARI( Float,m121) = rhs->rawData->__get((int)4);
HXDLIN( 628)		HX_VARI( Float,m131) = rhs->rawData->__get((int)8);
HXDLIN( 628)		HX_VARI( Float,m141) = rhs->rawData->__get((int)12);
HXDLIN( 628)		HX_VARI( Float,m112) = rhs->rawData->__get((int)1);
HXDLIN( 628)		HX_VARI( Float,m122) = rhs->rawData->__get((int)5);
HXDLIN( 628)		HX_VARI( Float,m132) = rhs->rawData->__get((int)9);
HXDLIN( 628)		HX_VARI( Float,m142) = rhs->rawData->__get((int)13);
HXDLIN( 628)		HX_VARI( Float,m113) = rhs->rawData->__get((int)2);
HXDLIN( 628)		HX_VARI( Float,m123) = rhs->rawData->__get((int)6);
HXDLIN( 628)		HX_VARI( Float,m133) = rhs->rawData->__get((int)10);
HXDLIN( 628)		HX_VARI( Float,m143) = rhs->rawData->__get((int)14);
HXDLIN( 628)		HX_VARI( Float,m114) = rhs->rawData->__get((int)3);
HXDLIN( 628)		HX_VARI( Float,m124) = rhs->rawData->__get((int)7);
HXDLIN( 628)		HX_VARI( Float,m134) = rhs->rawData->__get((int)11);
HXDLIN( 628)		HX_VARI( Float,m144) = rhs->rawData->__get((int)15);
HXDLIN( 628)		HX_VARI( Float,m211) = this->rawData->__get((int)0);
HXDLIN( 628)		HX_VARI( Float,m221) = this->rawData->__get((int)4);
HXDLIN( 628)		HX_VARI( Float,m231) = this->rawData->__get((int)8);
HXDLIN( 628)		HX_VARI( Float,m241) = this->rawData->__get((int)12);
HXDLIN( 628)		HX_VARI( Float,m212) = this->rawData->__get((int)1);
HXDLIN( 628)		HX_VARI( Float,m222) = this->rawData->__get((int)5);
HXDLIN( 628)		HX_VARI( Float,m232) = this->rawData->__get((int)9);
HXDLIN( 628)		HX_VARI( Float,m242) = this->rawData->__get((int)13);
HXDLIN( 628)		HX_VARI( Float,m213) = this->rawData->__get((int)2);
HXDLIN( 628)		HX_VARI( Float,m223) = this->rawData->__get((int)6);
HXDLIN( 628)		HX_VARI( Float,m233) = this->rawData->__get((int)10);
HXDLIN( 628)		HX_VARI( Float,m243) = this->rawData->__get((int)14);
HXDLIN( 628)		HX_VARI( Float,m214) = this->rawData->__get((int)3);
HXDLIN( 628)		HX_VARI( Float,m224) = this->rawData->__get((int)7);
HXDLIN( 628)		HX_VARI( Float,m234) = this->rawData->__get((int)11);
HXDLIN( 628)		HX_VARI( Float,m244) = this->rawData->__get((int)15);
HXLINE( 637)		this->rawData[(int)0] = ((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241));
HXLINE( 638)		this->rawData[(int)1] = ((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242));
HXLINE( 639)		this->rawData[(int)2] = ((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243));
HXLINE( 640)		this->rawData[(int)3] = ((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244));
HXLINE( 642)		this->rawData[(int)4] = ((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241));
HXLINE( 643)		this->rawData[(int)5] = ((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242));
HXLINE( 644)		this->rawData[(int)6] = ((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243));
HXLINE( 645)		this->rawData[(int)7] = ((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244));
HXLINE( 647)		this->rawData[(int)8] = ((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241));
HXLINE( 648)		this->rawData[(int)9] = ((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242));
HXLINE( 649)		this->rawData[(int)10] = ((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243));
HXLINE( 650)		this->rawData[(int)11] = ((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244));
HXLINE( 652)		this->rawData[(int)12] = ((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241));
HXLINE( 653)		this->rawData[(int)13] = ((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242));
HXLINE( 654)		this->rawData[(int)14] = ((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243));
HXLINE( 655)		this->rawData[(int)15] = ((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,prepend,(void))

void Matrix3D_obj::prependRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","prependRotation",0x54b5f1e4,"openfl.geom.Matrix3D.prependRotation","openfl/geom/Matrix3D.hx",660,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE( 662)		HX_VARI(  ::openfl::geom::Matrix3D,m) = ::openfl::geom::Matrix3D_obj::_hx___getAxisRotation(axis->x,axis->y,axis->z,degrees);
HXLINE( 664)		Bool _hx_tmp = hx::IsNotNull( pivotPoint );
HXDLIN( 664)		if (_hx_tmp) {
HXLINE( 667)			m->appendTranslation(pivotPoint->x,pivotPoint->y,pivotPoint->z);
            		}
HXLINE( 671)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependRotation,(void))

void Matrix3D_obj::prependScale(Float xScale,Float yScale,Float zScale){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","prependScale",0x59d85624,"openfl.geom.Matrix3D.prependScale","openfl/geom/Matrix3D.hx",678,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE( 678)		this->prepend( ::openfl::geom::Matrix3D_obj::__new(::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0))));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependScale,(void))

void Matrix3D_obj::prependTranslation(Float x,Float y,Float z){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","prependTranslation",0x2df4680b,"openfl.geom.Matrix3D.prependTranslation","openfl/geom/Matrix3D.hx",683,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 685)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__new(null());
HXLINE( 686)		m->set_position( ::openfl::geom::Vector3D_obj::__new(x,y,z,null()));
HXLINE( 687)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependTranslation,(void))

Bool Matrix3D_obj::recompose(::Array< ::Dynamic> components, ::Dynamic orientationStyle){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","recompose",0xd355bb37,"openfl.geom.Matrix3D.recompose","openfl/geom/Matrix3D.hx",692,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(components,"components")
            	HX_STACK_ARG(orientationStyle,"orientationStyle")
HXLINE( 694)		Bool _hx_tmp;
HXDLIN( 694)		Bool _hx_tmp1;
HXDLIN( 694)		Bool _hx_tmp2;
HXDLIN( 694)		if ((components->length >= (int)3)) {
HXLINE( 694)			_hx_tmp2 = (components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x == (int)0);
            		}
            		else {
HXLINE( 694)			_hx_tmp2 = true;
            		}
HXDLIN( 694)		if (!(_hx_tmp2)) {
HXLINE( 694)			_hx_tmp1 = (components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
            		}
            		else {
HXLINE( 694)			_hx_tmp1 = true;
            		}
HXDLIN( 694)		if (!(_hx_tmp1)) {
HXLINE( 694)			_hx_tmp = (components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->z == (int)0);
            		}
            		else {
HXLINE( 694)			_hx_tmp = true;
            		}
HXDLIN( 694)		if (_hx_tmp) {
HXLINE( 696)			return false;
            		}
HXLINE( 700)		Bool _hx_tmp3 = hx::IsNull( orientationStyle );
HXDLIN( 700)		if (_hx_tmp3) {
HXLINE( 702)			orientationStyle = (int)1;
            		}
HXLINE( 706)		this->identity();
HXLINE( 708)		HX_VARI( ::Array< Float >,scale) = ::Array_obj< Float >::__new(0);
HXLINE( 709)		Float _hx_tmp4 = (scale[(int)1] = (scale[(int)2] = components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x));
HXDLIN( 709)		scale[(int)0] = _hx_tmp4;
HXLINE( 710)		Float _hx_tmp5 = (scale[(int)5] = (scale[(int)6] = components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y));
HXDLIN( 710)		scale[(int)4] = _hx_tmp5;
HXLINE( 711)		Float _hx_tmp6 = (scale[(int)9] = (scale[(int)10] = components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->z));
HXDLIN( 711)		scale[(int)8] = _hx_tmp6;
HXLINE( 713)		Bool _hx_tmp7 = hx::IsNull( orientationStyle );
HXDLIN( 713)		if (_hx_tmp7) {
HXLINE( 743)			HX_VARI( Float,x) = components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXLINE( 744)			HX_VARI( Float,y) = components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXLINE( 745)			HX_VARI( Float,z) = components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXLINE( 746)			HX_VARI( Float,w) = components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->w;
HXLINE( 748)			if (::Type_obj::enumEq(orientationStyle,(int)0)) {
HXLINE( 750)				Float _hx_tmp8 = ::Math_obj::sin(((Float)w / (Float)(int)2));
HXDLIN( 750)				hx::MultEq(x,_hx_tmp8);
HXLINE( 751)				Float _hx_tmp9 = ::Math_obj::sin(((Float)w / (Float)(int)2));
HXDLIN( 751)				hx::MultEq(y,_hx_tmp9);
HXLINE( 752)				Float _hx_tmp10 = ::Math_obj::sin(((Float)w / (Float)(int)2));
HXDLIN( 752)				hx::MultEq(z,_hx_tmp10);
HXLINE( 753)				w = ::Math_obj::cos(((Float)w / (Float)(int)2));
            			}
HXLINE( 757)			Float _hx_tmp11 = ((((int)1 - (((int)2 * y) * y)) - (((int)2 * z) * z)) * scale->__get((int)0));
HXDLIN( 757)			this->rawData[(int)0] = _hx_tmp11;
HXLINE( 758)			Float _hx_tmp12 = (((((int)2 * x) * y) + (((int)2 * w) * z)) * scale->__get((int)1));
HXDLIN( 758)			this->rawData[(int)1] = _hx_tmp12;
HXLINE( 759)			Float _hx_tmp13 = (((((int)2 * x) * z) - (((int)2 * w) * y)) * scale->__get((int)2));
HXDLIN( 759)			this->rawData[(int)2] = _hx_tmp13;
HXLINE( 760)			this->rawData[(int)3] = (int)0;
HXLINE( 761)			Float _hx_tmp14 = (((((int)2 * x) * y) - (((int)2 * w) * z)) * scale->__get((int)4));
HXDLIN( 761)			this->rawData[(int)4] = _hx_tmp14;
HXLINE( 762)			Float _hx_tmp15 = ((((int)1 - (((int)2 * x) * x)) - (((int)2 * z) * z)) * scale->__get((int)5));
HXDLIN( 762)			this->rawData[(int)5] = _hx_tmp15;
HXLINE( 763)			Float _hx_tmp16 = (((((int)2 * y) * z) + (((int)2 * w) * x)) * scale->__get((int)6));
HXDLIN( 763)			this->rawData[(int)6] = _hx_tmp16;
HXLINE( 764)			this->rawData[(int)7] = (int)0;
HXLINE( 765)			Float _hx_tmp17 = (((((int)2 * x) * z) + (((int)2 * w) * y)) * scale->__get((int)8));
HXDLIN( 765)			this->rawData[(int)8] = _hx_tmp17;
HXLINE( 766)			Float _hx_tmp18 = (((((int)2 * y) * z) - (((int)2 * w) * x)) * scale->__get((int)9));
HXDLIN( 766)			this->rawData[(int)9] = _hx_tmp18;
HXLINE( 767)			Float _hx_tmp19 = ((((int)1 - (((int)2 * x) * x)) - (((int)2 * y) * y)) * scale->__get((int)10));
HXDLIN( 767)			this->rawData[(int)10] = _hx_tmp19;
HXLINE( 768)			this->rawData[(int)11] = (int)0;
HXLINE( 769)			{
HXLINE( 769)				Float value = components->__get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXDLIN( 769)				this->rawData[(int)12] = value;
            			}
HXLINE( 770)			{
HXLINE( 770)				Float value1 = components->__get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXDLIN( 770)				this->rawData[(int)13] = value1;
            			}
HXLINE( 771)			{
HXLINE( 771)				Float value2 = components->__get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXDLIN( 771)				this->rawData[(int)14] = value2;
            			}
HXLINE( 772)			this->rawData[(int)15] = (int)1;
            		}
            		else {
HXLINE( 713)			if (hx::IsEq( orientationStyle,(int)1 )) {
HXLINE( 717)				HX_VARI( Float,cx) = ::Math_obj::cos(components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE( 718)				HX_VARI( Float,cy) = ::Math_obj::cos(components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE( 719)				HX_VARI( Float,cz) = ::Math_obj::cos(components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE( 720)				HX_VARI( Float,sx) = ::Math_obj::sin(components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE( 721)				HX_VARI( Float,sy) = ::Math_obj::sin(components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE( 722)				HX_VARI( Float,sz) = ::Math_obj::sin(components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE( 724)				Float _hx_tmp20 = ((cy * cz) * scale->__get((int)0));
HXDLIN( 724)				this->rawData[(int)0] = _hx_tmp20;
HXLINE( 725)				Float _hx_tmp21 = ((cy * sz) * scale->__get((int)1));
HXDLIN( 725)				this->rawData[(int)1] = _hx_tmp21;
HXLINE( 726)				Float _hx_tmp22 = (-(sy) * scale->__get((int)2));
HXDLIN( 726)				this->rawData[(int)2] = _hx_tmp22;
HXLINE( 727)				this->rawData[(int)3] = (int)0;
HXLINE( 728)				Float _hx_tmp23 = ((((sx * sy) * cz) - (cx * sz)) * scale->__get((int)4));
HXDLIN( 728)				this->rawData[(int)4] = _hx_tmp23;
HXLINE( 729)				Float _hx_tmp24 = ((((sx * sy) * sz) + (cx * cz)) * scale->__get((int)5));
HXDLIN( 729)				this->rawData[(int)5] = _hx_tmp24;
HXLINE( 730)				Float _hx_tmp25 = ((sx * cy) * scale->__get((int)6));
HXDLIN( 730)				this->rawData[(int)6] = _hx_tmp25;
HXLINE( 731)				this->rawData[(int)7] = (int)0;
HXLINE( 732)				Float _hx_tmp26 = ((((cx * sy) * cz) + (sx * sz)) * scale->__get((int)8));
HXDLIN( 732)				this->rawData[(int)8] = _hx_tmp26;
HXLINE( 733)				Float _hx_tmp27 = ((((cx * sy) * sz) - (sx * cz)) * scale->__get((int)9));
HXDLIN( 733)				this->rawData[(int)9] = _hx_tmp27;
HXLINE( 734)				Float _hx_tmp28 = ((cx * cy) * scale->__get((int)10));
HXDLIN( 734)				this->rawData[(int)10] = _hx_tmp28;
HXLINE( 735)				this->rawData[(int)11] = (int)0;
HXLINE( 736)				{
HXLINE( 736)					Float value3 = components->__get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXDLIN( 736)					this->rawData[(int)12] = value3;
            				}
HXLINE( 737)				{
HXLINE( 737)					Float value4 = components->__get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXDLIN( 737)					this->rawData[(int)13] = value4;
            				}
HXLINE( 738)				{
HXLINE( 738)					Float value5 = components->__get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXDLIN( 738)					this->rawData[(int)14] = value5;
            				}
HXLINE( 739)				this->rawData[(int)15] = (int)1;
            			}
            			else {
HXLINE( 743)				HX_VARI_NAME( Float,x1,"x") = components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXLINE( 744)				HX_VARI_NAME( Float,y1,"y") = components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXLINE( 745)				HX_VARI_NAME( Float,z1,"z") = components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXLINE( 746)				HX_VARI_NAME( Float,w1,"w") = components->__get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->w;
HXLINE( 748)				if (::Type_obj::enumEq(orientationStyle,(int)0)) {
HXLINE( 750)					Float _hx_tmp29 = ::Math_obj::sin(((Float)w1 / (Float)(int)2));
HXDLIN( 750)					hx::MultEq(x1,_hx_tmp29);
HXLINE( 751)					Float _hx_tmp30 = ::Math_obj::sin(((Float)w1 / (Float)(int)2));
HXDLIN( 751)					hx::MultEq(y1,_hx_tmp30);
HXLINE( 752)					Float _hx_tmp31 = ::Math_obj::sin(((Float)w1 / (Float)(int)2));
HXDLIN( 752)					hx::MultEq(z1,_hx_tmp31);
HXLINE( 753)					w1 = ::Math_obj::cos(((Float)w1 / (Float)(int)2));
            				}
HXLINE( 757)				Float _hx_tmp32 = ((((int)1 - (((int)2 * y1) * y1)) - (((int)2 * z1) * z1)) * scale->__get((int)0));
HXDLIN( 757)				this->rawData[(int)0] = _hx_tmp32;
HXLINE( 758)				Float _hx_tmp33 = (((((int)2 * x1) * y1) + (((int)2 * w1) * z1)) * scale->__get((int)1));
HXDLIN( 758)				this->rawData[(int)1] = _hx_tmp33;
HXLINE( 759)				Float _hx_tmp34 = (((((int)2 * x1) * z1) - (((int)2 * w1) * y1)) * scale->__get((int)2));
HXDLIN( 759)				this->rawData[(int)2] = _hx_tmp34;
HXLINE( 760)				this->rawData[(int)3] = (int)0;
HXLINE( 761)				Float _hx_tmp35 = (((((int)2 * x1) * y1) - (((int)2 * w1) * z1)) * scale->__get((int)4));
HXDLIN( 761)				this->rawData[(int)4] = _hx_tmp35;
HXLINE( 762)				Float _hx_tmp36 = ((((int)1 - (((int)2 * x1) * x1)) - (((int)2 * z1) * z1)) * scale->__get((int)5));
HXDLIN( 762)				this->rawData[(int)5] = _hx_tmp36;
HXLINE( 763)				Float _hx_tmp37 = (((((int)2 * y1) * z1) + (((int)2 * w1) * x1)) * scale->__get((int)6));
HXDLIN( 763)				this->rawData[(int)6] = _hx_tmp37;
HXLINE( 764)				this->rawData[(int)7] = (int)0;
HXLINE( 765)				Float _hx_tmp38 = (((((int)2 * x1) * z1) + (((int)2 * w1) * y1)) * scale->__get((int)8));
HXDLIN( 765)				this->rawData[(int)8] = _hx_tmp38;
HXLINE( 766)				Float _hx_tmp39 = (((((int)2 * y1) * z1) - (((int)2 * w1) * x1)) * scale->__get((int)9));
HXDLIN( 766)				this->rawData[(int)9] = _hx_tmp39;
HXLINE( 767)				Float _hx_tmp40 = ((((int)1 - (((int)2 * x1) * x1)) - (((int)2 * y1) * y1)) * scale->__get((int)10));
HXDLIN( 767)				this->rawData[(int)10] = _hx_tmp40;
HXLINE( 768)				this->rawData[(int)11] = (int)0;
HXLINE( 769)				{
HXLINE( 769)					Float value6 = components->__get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXDLIN( 769)					this->rawData[(int)12] = value6;
            				}
HXLINE( 770)				{
HXLINE( 770)					Float value7 = components->__get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXDLIN( 770)					this->rawData[(int)13] = value7;
            				}
HXLINE( 771)				{
HXLINE( 771)					Float value8 = components->__get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXDLIN( 771)					this->rawData[(int)14] = value8;
            				}
HXLINE( 772)				this->rawData[(int)15] = (int)1;
            			}
            		}
HXLINE( 776)		Bool _hx_tmp41 = (components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x == (int)0);
HXDLIN( 776)		if (_hx_tmp41) {
HXLINE( 778)			this->rawData[(int)0] = ((Float)1e-15);
            		}
HXLINE( 782)		Bool _hx_tmp42 = (components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
HXDLIN( 782)		if (_hx_tmp42) {
HXLINE( 784)			this->rawData[(int)5] = ((Float)1e-15);
            		}
HXLINE( 788)		Bool _hx_tmp43 = (components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->z == (int)0);
HXDLIN( 788)		if (_hx_tmp43) {
HXLINE( 790)			this->rawData[(int)10] = ((Float)1e-15);
            		}
HXLINE( 794)		Bool _hx_tmp44;
HXDLIN( 794)		Bool _hx_tmp45;
HXDLIN( 794)		if ((components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x != (int)0)) {
HXLINE( 794)			_hx_tmp45 = (components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
            		}
            		else {
HXLINE( 794)			_hx_tmp45 = true;
            		}
HXDLIN( 794)		if (!(_hx_tmp45)) {
HXLINE( 794)			_hx_tmp44 = (components->__get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
            		}
            		else {
HXLINE( 794)			_hx_tmp44 = true;
            		}
HXDLIN( 794)		return !(_hx_tmp44);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,recompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::transformVector( ::openfl::geom::Vector3D v){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","transformVector",0x3f2dcec7,"openfl.geom.Matrix3D.transformVector","openfl/geom/Matrix3D.hx",799,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 801)		HX_VARI( Float,x) = v->x;
HXLINE( 802)		HX_VARI( Float,y) = v->y;
HXLINE( 803)		HX_VARI( Float,z) = v->z;
HXLINE( 805)		return  ::openfl::geom::Vector3D_obj::__new(((((x * this->rawData->__get((int)0)) + (y * this->rawData->__get((int)4))) + (z * this->rawData->__get((int)8))) + this->rawData->__get((int)12)),((((x * this->rawData->__get((int)1)) + (y * this->rawData->__get((int)5))) + (z * this->rawData->__get((int)9))) + this->rawData->__get((int)13)),((((x * this->rawData->__get((int)2)) + (y * this->rawData->__get((int)6))) + (z * this->rawData->__get((int)10))) + this->rawData->__get((int)14)),((((x * this->rawData->__get((int)3)) + (y * this->rawData->__get((int)7))) + (z * this->rawData->__get((int)11))) + this->rawData->__get((int)15)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,transformVector,return )

void Matrix3D_obj::transformVectors(::Array< Float > vin,::Array< Float > vout){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","transformVectors",0x08e71fcc,"openfl.geom.Matrix3D.transformVectors","openfl/geom/Matrix3D.hx",810,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vin,"vin")
            	HX_STACK_ARG(vout,"vout")
HXLINE( 812)		HX_VARI( Int,i) = (int)0;
HXLINE( 813)		HX_VAR(  ::Dynamic,x);
HXDLIN( 813)		HX_VAR(  ::Dynamic,y);
HXDLIN( 813)		HX_VAR(  ::Dynamic,z);
HXLINE( 815)		while(((i + (int)3) <= vin->length)){
HXLINE( 817)			x = vin->__get(i);
HXLINE( 818)			y = vin->__get((i + (int)1));
HXLINE( 819)			z = vin->__get((i + (int)2));
HXLINE( 821)			Float _hx_tmp = ((((x * this->rawData->__get((int)0)) + (y * this->rawData->__get((int)4))) + (z * this->rawData->__get((int)8))) + this->rawData->__get((int)12));
HXDLIN( 821)			vout[i] = _hx_tmp;
HXLINE( 822)			Int _hx_tmp1 = (i + (int)1);
HXDLIN( 822)			Float _hx_tmp2 = ((((x * this->rawData->__get((int)1)) + (y * this->rawData->__get((int)5))) + (z * this->rawData->__get((int)9))) + this->rawData->__get((int)13));
HXDLIN( 822)			vout[_hx_tmp1] = _hx_tmp2;
HXLINE( 823)			Int _hx_tmp3 = (i + (int)2);
HXDLIN( 823)			Float _hx_tmp4 = ((((x * this->rawData->__get((int)2)) + (y * this->rawData->__get((int)6))) + (z * this->rawData->__get((int)10))) + this->rawData->__get((int)14));
HXDLIN( 823)			vout[_hx_tmp3] = _hx_tmp4;
HXLINE( 825)			hx::AddEq(i,(int)3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,transformVectors,(void))

void Matrix3D_obj::transpose(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","transpose",0x1ba989f1,"openfl.geom.Matrix3D.transpose","openfl/geom/Matrix3D.hx",832,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 834)		HX_VARI( ::Array< Float >,oRawData) = this->rawData->copy();
HXLINE( 835)		this->rawData[(int)1] = oRawData->__get((int)4);
HXLINE( 836)		this->rawData[(int)2] = oRawData->__get((int)8);
HXLINE( 837)		this->rawData[(int)3] = oRawData->__get((int)12);
HXLINE( 838)		this->rawData[(int)4] = oRawData->__get((int)1);
HXLINE( 839)		this->rawData[(int)6] = oRawData->__get((int)9);
HXLINE( 840)		this->rawData[(int)7] = oRawData->__get((int)13);
HXLINE( 841)		this->rawData[(int)8] = oRawData->__get((int)2);
HXLINE( 842)		this->rawData[(int)9] = oRawData->__get((int)6);
HXLINE( 843)		this->rawData[(int)11] = oRawData->__get((int)14);
HXLINE( 844)		this->rawData[(int)12] = oRawData->__get((int)3);
HXLINE( 845)		this->rawData[(int)13] = oRawData->__get((int)7);
HXLINE( 846)		this->rawData[(int)14] = oRawData->__get((int)11);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,transpose,(void))

Float Matrix3D_obj::get_determinant(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","get_determinant",0x5f71b8a4,"openfl.geom.Matrix3D.get_determinant","openfl/geom/Matrix3D.hx",892,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 892)		return ((((((((this->rawData->__get((int)0) * this->rawData->__get((int)5)) - (this->rawData->__get((int)4) * this->rawData->__get((int)1))) * ((this->rawData->__get((int)10) * this->rawData->__get((int)15)) - (this->rawData->__get((int)14) * this->rawData->__get((int)11)))) - (((this->rawData->__get((int)0) * this->rawData->__get((int)9)) - (this->rawData->__get((int)8) * this->rawData->__get((int)1))) * ((this->rawData->__get((int)6) * this->rawData->__get((int)15)) - (this->rawData->__get((int)14) * this->rawData->__get((int)7))))) + (((this->rawData->__get((int)0) * this->rawData->__get((int)13)) - (this->rawData->__get((int)12) * this->rawData->__get((int)1))) * ((this->rawData->__get((int)6) * this->rawData->__get((int)11)) - (this->rawData->__get((int)10) * this->rawData->__get((int)7))))) + (((this->rawData->__get((int)4) * this->rawData->__get((int)9)) - (this->rawData->__get((int)8) * this->rawData->__get((int)5))) * ((this->rawData->__get((int)2) * this->rawData->__get((int)15)) - (this->rawData->__get((int)14) * this->rawData->__get((int)3))))) - (((this->rawData->__get((int)4) * this->rawData->__get((int)13)) - (this->rawData->__get((int)12) * this->rawData->__get((int)5))) * ((this->rawData->__get((int)2) * this->rawData->__get((int)11)) - (this->rawData->__get((int)10) * this->rawData->__get((int)3))))) + (((this->rawData->__get((int)8) * this->rawData->__get((int)13)) - (this->rawData->__get((int)12) * this->rawData->__get((int)9))) * ((this->rawData->__get((int)2) * this->rawData->__get((int)7)) - (this->rawData->__get((int)6) * this->rawData->__get((int)3)))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_determinant,return )

 ::openfl::geom::Vector3D Matrix3D_obj::get_position(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","get_position",0x1555563a,"openfl.geom.Matrix3D.get_position","openfl/geom/Matrix3D.hx",904,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 904)		return  ::openfl::geom::Vector3D_obj::__new(this->rawData->__get((int)12),this->rawData->__get((int)13),this->rawData->__get((int)14),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_position,return )

 ::openfl::geom::Vector3D Matrix3D_obj::set_position( ::openfl::geom::Vector3D val){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","set_position",0x2a4e79ae,"openfl.geom.Matrix3D.set_position","openfl/geom/Matrix3D.hx",909,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(val,"val")
HXLINE( 911)		{
HXLINE( 911)			Float value = val->x;
HXDLIN( 911)			this->rawData[(int)12] = value;
            		}
HXLINE( 912)		{
HXLINE( 912)			Float value1 = val->y;
HXDLIN( 912)			this->rawData[(int)13] = value1;
            		}
HXLINE( 913)		{
HXLINE( 913)			Float value2 = val->z;
HXDLIN( 913)			this->rawData[(int)14] = value2;
            		}
HXLINE( 914)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,set_position,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::create2D(Float x,Float y,hx::Null< Float >  __o_scale,hx::Null< Float >  __o_rotation){
Float scale = __o_scale.Default(1);
Float rotation = __o_rotation.Default(0);
            	HX_STACK_FRAME("openfl.geom.Matrix3D","create2D",0x4623e756,"openfl.geom.Matrix3D.create2D","openfl/geom/Matrix3D.hx",324,0x3acce238)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(scale,"scale")
            	HX_STACK_ARG(rotation,"rotation")
HXLINE( 326)		HX_VARI( Float,theta) = ((Float)(rotation * ::Math_obj::PI) / (Float)((Float)180.0));
HXLINE( 327)		HX_VARI( Float,c) = ::Math_obj::cos(theta);
HXLINE( 328)		HX_VARI( Float,s) = ::Math_obj::sin(theta);
HXLINE( 330)		return  ::openfl::geom::Matrix3D_obj::__new(::Array_obj< Float >::__new(16)->init(0,(c * scale))->init(1,(-(s) * scale))->init(2,(int)0)->init(3,(int)0)->init(4,(s * scale))->init(5,(c * scale))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,x)->init(13,y)->init(14,(int)0)->init(15,(int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,create2D,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createABCD(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","createABCD",0x0e55d246,"openfl.geom.Matrix3D.createABCD","openfl/geom/Matrix3D.hx",337,0x3acce238)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 337)		return  ::openfl::geom::Matrix3D_obj::__new(::Array_obj< Float >::__new(16)->init(0,a)->init(1,b)->init(2,(int)0)->init(3,(int)0)->init(4,c)->init(5,d)->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,tx)->init(13,ty)->init(14,(int)0)->init(15,(int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createABCD,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createOrtho(Float x0,Float x1,Float y0,Float y1,Float zNear,Float zFar){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","createOrtho",0xac3dd614,"openfl.geom.Matrix3D.createOrtho","openfl/geom/Matrix3D.hx",342,0x3acce238)
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(zNear,"zNear")
            	HX_STACK_ARG(zFar,"zFar")
HXLINE( 344)		HX_VARI( Float,sx) = ((Float)((Float)1.0) / (Float)(x1 - x0));
HXLINE( 345)		HX_VARI( Float,sy) = ((Float)((Float)1.0) / (Float)(y1 - y0));
HXLINE( 346)		HX_VARI( Float,sz) = ((Float)((Float)1.0) / (Float)(zFar - zNear));
HXLINE( 348)		return  ::openfl::geom::Matrix3D_obj::__new(::Array_obj< Float >::__new(16)->init(0,(((Float)2.0) * sx))->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,(int)0)->init(5,(((Float)2.0) * sy))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(((Float)-2.) * sz))->init(11,(int)0)->init(12,(-((x0 + x1)) * sx))->init(13,(-((y0 + y1)) * sy))->init(14,(-((zNear + zFar)) * sz))->init(15,(int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createOrtho,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::interpolate( ::openfl::geom::Matrix3D thisMat, ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","interpolate",0x6cc85c39,"openfl.geom.Matrix3D.interpolate","openfl/geom/Matrix3D.hx",495,0x3acce238)
            	HX_STACK_ARG(thisMat,"thisMat")
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 497)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__new(null());
HXLINE( 499)		{
HXLINE( 499)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 499)			while((_g < (int)16)){
HXLINE( 499)				HX_VARI( Int,i) = _g++;
HXLINE( 501)				Float _hx_tmp = (thisMat->rawData->__get(i) + ((toMat->rawData->__get(i) - thisMat->rawData->__get(i)) * percent));
HXDLIN( 501)				m->rawData[i] = _hx_tmp;
            			}
            		}
HXLINE( 505)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,interpolate,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::_hx___getAxisRotation(Float x,Float y,Float z,Float degrees){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","__getAxisRotation",0xf649170d,"openfl.geom.Matrix3D.__getAxisRotation","openfl/geom/Matrix3D.hx",851,0x3acce238)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(degrees,"degrees")
HXLINE( 853)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__new(null());
HXLINE( 855)		HX_VARI(  ::openfl::geom::Vector3D,a1) =  ::openfl::geom::Vector3D_obj::__new(x,y,z,null());
HXLINE( 856)		HX_VARI( Float,rad) = (-(degrees) * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 857)		HX_VARI( Float,c) = ::Math_obj::cos(rad);
HXLINE( 858)		HX_VARI( Float,s) = ::Math_obj::sin(rad);
HXLINE( 859)		HX_VARI( Float,t) = (((Float)1.0) - c);
HXLINE( 861)		{
HXLINE( 861)			Float _hx_tmp = ((a1->x * a1->x) * t);
HXDLIN( 861)			m->rawData[(int)0] = (c + _hx_tmp);
            		}
HXLINE( 862)		{
HXLINE( 862)			Float _hx_tmp1 = ((a1->y * a1->y) * t);
HXDLIN( 862)			m->rawData[(int)5] = (c + _hx_tmp1);
            		}
HXLINE( 863)		{
HXLINE( 863)			Float _hx_tmp2 = ((a1->z * a1->z) * t);
HXDLIN( 863)			m->rawData[(int)10] = (c + _hx_tmp2);
            		}
HXLINE( 865)		HX_VARI( Float,tmp1) = ((a1->x * a1->y) * t);
HXLINE( 866)		HX_VARI( Float,tmp2) = (a1->z * s);
HXLINE( 867)		m->rawData[(int)4] = (tmp1 + tmp2);
HXLINE( 868)		m->rawData[(int)1] = (tmp1 - tmp2);
HXLINE( 869)		tmp1 = ((a1->x * a1->z) * t);
HXLINE( 870)		tmp2 = (a1->y * s);
HXLINE( 871)		m->rawData[(int)8] = (tmp1 - tmp2);
HXLINE( 872)		m->rawData[(int)2] = (tmp1 + tmp2);
HXLINE( 873)		tmp1 = ((a1->y * a1->z) * t);
HXLINE( 874)		tmp2 = (a1->x * s);
HXLINE( 875)		m->rawData[(int)9] = (tmp1 + tmp2);
HXLINE( 876)		m->rawData[(int)6] = (tmp1 - tmp2);
HXLINE( 878)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,_hx___getAxisRotation,return )


Matrix3D_obj::Matrix3D_obj()
{
}

void Matrix3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Matrix3D);
	HX_MARK_MEMBER_NAME(determinant,"determinant");
	HX_MARK_MEMBER_NAME(rawData,"rawData");
	HX_MARK_END_CLASS();
}

void Matrix3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(determinant,"determinant");
	HX_VISIT_MEMBER_NAME(rawData,"rawData");
}

hx::Val Matrix3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { return hx::Val( append_dyn()); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { return hx::Val( rawData); }
		if (HX_FIELD_EQ(inName,"pointAt") ) { return hx::Val( pointAt_dyn()); }
		if (HX_FIELD_EQ(inName,"prepend") ) { return hx::Val( prepend_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_position()); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { return hx::Val( copyRowTo_dyn()); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn()); }
		if (HX_FIELD_EQ(inName,"recompose") ) { return hx::Val( recompose_dyn()); }
		if (HX_FIELD_EQ(inName,"transpose") ) { return hx::Val( transpose_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"determinant") ) { return hx::Val( inCallProp == hx::paccAlways ? get_determinant() : determinant); }
		if (HX_FIELD_EQ(inName,"appendScale") ) { return hx::Val( appendScale_dyn()); }
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { return hx::Val( copyRowFrom_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { return hx::Val( copyColumnTo_dyn()); }
		if (HX_FIELD_EQ(inName,"prependScale") ) { return hx::Val( prependScale_dyn()); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn()); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyRawDataTo") ) { return hx::Val( copyRawDataTo_dyn()); }
		if (HX_FIELD_EQ(inName,"interpolateTo") ) { return hx::Val( interpolateTo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"appendRotation") ) { return hx::Val( appendRotation_dyn()); }
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { return hx::Val( copyColumnFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"copyToMatrix3D") ) { return hx::Val( copyToMatrix3D_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"copyRawDataFrom") ) { return hx::Val( copyRawDataFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"prependRotation") ) { return hx::Val( prependRotation_dyn()); }
		if (HX_FIELD_EQ(inName,"transformVector") ) { return hx::Val( transformVector_dyn()); }
		if (HX_FIELD_EQ(inName,"get_determinant") ) { return hx::Val( get_determinant_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformVectors") ) { return hx::Val( transformVectors_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"appendTranslation") ) { return hx::Val( appendTranslation_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { return hx::Val( prependTranslation_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { return hx::Val( deltaTransformVector_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"create2D") ) { outValue = create2D_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createABCD") ) { outValue = createABCD_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createOrtho") ) { outValue = createOrtho_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__getAxisRotation") ) { outValue = _hx___getAxisRotation_dyn(); return true; }
	}
	return false;
}

hx::Val Matrix3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { rawData=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"determinant") ) { determinant=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Matrix3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("determinant","\x95","\x5d","\x15","\x32"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix3D_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Matrix3D_obj,determinant),HX_HCSTRING("determinant","\x95","\x5d","\x15","\x32")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(Matrix3D_obj,rawData),HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Matrix3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Matrix3D_obj_sMemberFields[] = {
	HX_HCSTRING("determinant","\x95","\x5d","\x15","\x32"),
	HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("appendRotation","\x38","\x45","\xe8","\xcb"),
	HX_HCSTRING("appendScale","\x50","\x66","\x45","\xb5"),
	HX_HCSTRING("appendTranslation","\x37","\xe1","\x3d","\xd6"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyRawDataFrom","\x07","\x7d","\xbd","\x2c"),
	HX_HCSTRING("copyRawDataTo","\xd8","\x2b","\xf7","\xa8"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("copyToMatrix3D","\xe2","\x1d","\x1f","\x04"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("deltaTransformVector","\x37","\x02","\x9c","\xc2"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("interpolateTo","\x9c","\x90","\x22","\x71"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("pointAt","\x63","\xa1","\x21","\x51"),
	HX_HCSTRING("prepend","\x0e","\x97","\xe0","\x37"),
	HX_HCSTRING("prependRotation","\x6c","\x4e","\x3b","\xe8"),
	HX_HCSTRING("prependScale","\x9c","\x54","\x97","\xc4"),
	HX_HCSTRING("prependTranslation","\x83","\x90","\x15","\x05"),
	HX_HCSTRING("recompose","\xbf","\x81","\xdb","\x03"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("transformVectors","\x44","\xba","\x12","\x8a"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("get_determinant","\x2c","\x15","\xf7","\xf2"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	::String(null()) };

static void Matrix3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix3D_obj::__mClass,"__mClass");
};

#endif

hx::Class Matrix3D_obj::__mClass;

static ::String Matrix3D_obj_sStaticFields[] = {
	HX_HCSTRING("create2D","\xce","\x49","\xf4","\x2b"),
	HX_HCSTRING("createABCD","\xbe","\xc2","\xdd","\x52"),
	HX_HCSTRING("createOrtho","\x9c","\x4e","\xa8","\x5e"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("__getAxisRotation","\x95","\xa5","\x44","\x7b"),
	::String(null())
};

void Matrix3D_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Matrix3D","\xe6","\x93","\x2e","\x3d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix3D_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace geom
