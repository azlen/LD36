// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ArrayBufferView
#include <openfl/_legacy/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_Float32Array
#include <openfl/_legacy/utils/Float32Array.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif

namespace openfl{
namespace _legacy{
namespace utils{

void Float32Array_obj::__construct( ::Dynamic bufferOrArray,hx::Null< Int >  __o_start, ::Dynamic elements){
Int start = __o_start.Default(0);
            	HX_STACK_FRAME("openfl._legacy.utils.Float32Array","new",0xd627f831,"openfl._legacy.utils.Float32Array.new","openfl/_legacy/utils/Float32Array.hx",21,0x72368d3c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bufferOrArray,"bufferOrArray")
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(elements,"elements")
HXLINE(  23)		this->BYTES_PER_ELEMENT = (int)4;
HXLINE(  25)		Bool _hx_tmp = ::Std_obj::is(bufferOrArray,hx::ClassOf< ::Int >());
HXDLIN(  25)		if (_hx_tmp) {
HXLINE(  27)			Int _hx_tmp1 = ::Std_obj::_hx_int(bufferOrArray);
HXDLIN(  27)			Int _hx_tmp2 = (_hx_tmp1 * this->BYTES_PER_ELEMENT);
HXDLIN(  27)			super::__construct(_hx_tmp2,null(),null());
HXLINE(  28)			this->length = ::Std_obj::_hx_int(bufferOrArray);
            		}
            		else {
HXLINE(  30)			Bool _hx_tmp3 = ::Std_obj::is(bufferOrArray,hx::ArrayBase::__mClass);
HXDLIN(  30)			if (_hx_tmp3) {
HXLINE(  32)				HX_VARI( ::Array< Float >,floats) = ( (::Array< Float >)(bufferOrArray) );
HXLINE(  34)				Bool _hx_tmp4 = hx::IsNotNull( elements );
HXDLIN(  34)				if (_hx_tmp4) {
HXLINE(  36)					this->length = elements;
            				}
            				else {
HXLINE(  40)					this->length = (floats->length - start);
            				}
HXLINE(  44)				Int _hx_tmp5 = ((int)this->length << (int)(int)2);
HXDLIN(  44)				super::__construct(_hx_tmp5,null(),null());
HXLINE(  50)				{
HXLINE(  50)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(  50)					HX_VARI( Int,_g) = this->length;
HXDLIN(  50)					while((_g1 < _g)){
HXLINE(  50)						HX_VARI( Int,i) = _g1++;
HXLINE(  53)						Int _hx_tmp6 = ((int)i << (int)(int)2);
HXDLIN(  53)						Float _hx_tmp7 = floats->__get(i);
HXDLIN(  53)						::__hxcpp_memory_set_float(this->bytes,_hx_tmp6,_hx_tmp7);
            					}
            				}
            			}
            			else {
HXLINE(  96)				 ::Dynamic _hx_tmp8;
HXDLIN(  96)				Bool _hx_tmp9 = hx::IsNotNull( elements );
HXDLIN(  96)				if (_hx_tmp9) {
HXLINE(  96)					_hx_tmp8 = (elements * (int)4);
            				}
            				else {
HXLINE(  96)					_hx_tmp8 = null();
            				}
HXDLIN(  96)				super::__construct(bufferOrArray,start,_hx_tmp8);
HXLINE(  98)				if ((((int)this->byteLength & (int)(int)3) > (int)0)) {
HXLINE( 100)					HX_STACK_DO_THROW(HX_("Invalid array size",51,8f,9a,6e));
            				}
HXLINE( 104)				this->length = ((int)this->byteLength >> (int)(int)2);
HXLINE( 106)				if ((((int)this->length << (int)(int)2) != this->byteLength)) {
HXLINE( 108)					HX_STACK_DO_THROW(HX_("Invalid length multiple",41,25,0f,e4));
            				}
            			}
            		}
            	}

Dynamic Float32Array_obj::__CreateEmpty() { return new Float32Array_obj; }

hx::ObjectPtr< Float32Array_obj > Float32Array_obj::__new( ::Dynamic bufferOrArray,hx::Null< Int >  __o_start, ::Dynamic elements)
{
	hx::ObjectPtr< Float32Array_obj > _hx_result = new Float32Array_obj();
	_hx_result->__construct(bufferOrArray,__o_start,elements);
	return _hx_result;
}

Dynamic Float32Array_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Float32Array_obj > _hx_result = new Float32Array_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void Float32Array_obj::_hx___setLength(Int nbFloat){
            	HX_STACK_FRAME("openfl._legacy.utils.Float32Array","__setLength",0xf4c533d9,"openfl._legacy.utils.Float32Array.__setLength","openfl/_legacy/utils/Float32Array.hx",116,0x72368d3c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(nbFloat,"nbFloat")
HXLINE( 117)		this->length = nbFloat;
HXLINE( 118)		this->byteLength = ((int)nbFloat << (int)(int)2);
HXLINE( 119)		this->buffer->setLength(this->byteLength);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Float32Array_obj,_hx___setLength,(void))

Float Float32Array_obj::__get(Int index){
            	HX_STACK_FRAME("openfl._legacy.utils.Float32Array","__get",0x03355f87,"openfl._legacy.utils.Float32Array.__get","openfl/_legacy/utils/Float32Array.hx",129,0x72368d3c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 129)		Int _hx_tmp = (((int)index << (int)(int)2) + this->byteOffset);
HXDLIN( 129)		return ::__hxcpp_memory_get_float(this->bytes,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Float32Array_obj,__get,return )

void Float32Array_obj::__set(Int index,Float value){
            	HX_STACK_FRAME("openfl._legacy.utils.Float32Array","__set",0x033e7a93,"openfl._legacy.utils.Float32Array.__set","openfl/_legacy/utils/Float32Array.hx",130,0x72368d3c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(value,"value")
HXLINE( 130)		Int _hx_tmp = (((int)index << (int)(int)2) + this->byteOffset);
HXDLIN( 130)		::__hxcpp_memory_set_float(this->bytes,_hx_tmp,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Float32Array_obj,__set,(void))

Int Float32Array_obj::SBYTES_PER_ELEMENT;

 ::openfl::_legacy::utils::Float32Array Float32Array_obj::fromMatrix( ::openfl::geom::Matrix3D matrix){
            	HX_STACK_FRAME("openfl._legacy.utils.Float32Array","fromMatrix",0xad4a1f9a,"openfl._legacy.utils.Float32Array.fromMatrix","openfl/_legacy/utils/Float32Array.hx",124,0x72368d3c)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 124)		return  ::openfl::_legacy::utils::Float32Array_obj::__new(matrix->rawData,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Array_obj,fromMatrix,return )


Float32Array_obj::Float32Array_obj()
{
}

hx::Val Float32Array_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__get") ) { return hx::Val( __get_dyn()); }
		if (HX_FIELD_EQ(inName,"__set") ) { return hx::Val( __set_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__setLength") ) { return hx::Val( _hx___setLength_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"BYTES_PER_ELEMENT") ) { return hx::Val( BYTES_PER_ELEMENT); }
	}
	return super::__Field(inName,inCallProp);
}

bool Float32Array_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromMatrix") ) { outValue = fromMatrix_dyn(); return true; }
	}
	return false;
}

hx::Val Float32Array_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"BYTES_PER_ELEMENT") ) { BYTES_PER_ELEMENT=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Float32Array_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("BYTES_PER_ELEMENT","\xa6","\x04","\x1d","\xcc"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Float32Array_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Float32Array_obj,BYTES_PER_ELEMENT),HX_HCSTRING("BYTES_PER_ELEMENT","\xa6","\x04","\x1d","\xcc")},
	{hx::fsInt,(int)offsetof(Float32Array_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Float32Array_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Float32Array_obj::SBYTES_PER_ELEMENT,HX_HCSTRING("SBYTES_PER_ELEMENT","\xf3","\x76","\x83","\xc2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Float32Array_obj_sMemberFields[] = {
	HX_HCSTRING("BYTES_PER_ELEMENT","\xa6","\x04","\x1d","\xcc"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("__setLength","\x08","\x53","\xdb","\x2c"),
	HX_HCSTRING("__get","\x76","\xe1","\x2a","\xf2"),
	HX_HCSTRING("__set","\x82","\xfc","\x33","\xf2"),
	::String(null()) };

static void Float32Array_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Float32Array_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Float32Array_obj::SBYTES_PER_ELEMENT,"SBYTES_PER_ELEMENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Float32Array_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Float32Array_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Float32Array_obj::SBYTES_PER_ELEMENT,"SBYTES_PER_ELEMENT");
};

#endif

hx::Class Float32Array_obj::__mClass;

static ::String Float32Array_obj_sStaticFields[] = {
	HX_HCSTRING("SBYTES_PER_ELEMENT","\xf3","\x76","\x83","\xc2"),
	HX_HCSTRING("fromMatrix","\x4b","\x3b","\x0c","\xff"),
	::String(null())
};

void Float32Array_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.utils.Float32Array","\xbf","\x0b","\x82","\xec");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Float32Array_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Float32Array_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Float32Array_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Float32Array_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Float32Array_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Float32Array_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Float32Array_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Float32Array_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Float32Array_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._legacy.utils.Float32Array","boot",0x84ea3341,"openfl._legacy.utils.Float32Array.boot","openfl/_legacy/utils/Float32Array.hx",15,0x72368d3c)
HXLINE(  15)		SBYTES_PER_ELEMENT = (int)4;
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace utils
