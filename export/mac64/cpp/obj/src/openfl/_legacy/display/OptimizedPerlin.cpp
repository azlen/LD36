// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_OptimizedPerlin
#include <openfl/_legacy/display/OptimizedPerlin.h>
#endif

static const Int _hx_array_data_4[] = {
	(Int)151,(Int)160,(Int)137,(Int)91,(Int)90,(Int)15,(Int)131,(Int)13,(Int)201,(Int)95,(Int)96,(Int)53,(Int)194,(Int)233,(Int)7,(Int)225,(Int)140,(Int)36,(Int)103,(Int)30,(Int)69,(Int)142,(Int)8,(Int)99,(Int)37,(Int)240,(Int)21,(Int)10,(Int)23,(Int)190,(Int)6,(Int)148,(Int)247,(Int)120,(Int)234,(Int)75,(Int)0,(Int)26,(Int)197,(Int)62,(Int)94,(Int)252,(Int)219,(Int)203,(Int)117,(Int)35,(Int)11,(Int)32,(Int)57,(Int)177,(Int)33,(Int)88,(Int)237,(Int)149,(Int)56,(Int)87,(Int)174,(Int)20,(Int)125,(Int)136,(Int)171,(Int)168,(Int)68,(Int)175,(Int)74,(Int)165,(Int)71,(Int)134,(Int)139,(Int)48,(Int)27,(Int)166,(Int)77,(Int)146,(Int)158,(Int)231,(Int)83,(Int)111,(Int)229,(Int)122,(Int)60,(Int)211,(Int)133,(Int)230,(Int)220,(Int)105,(Int)92,(Int)41,(Int)55,(Int)46,(Int)245,(Int)40,(Int)244,(Int)102,(Int)143,(Int)54,(Int)65,(Int)25,(Int)63,(Int)161,(Int)1,(Int)216,(Int)80,(Int)73,(Int)209,(Int)76,(Int)132,(Int)187,(Int)208,(Int)89,(Int)18,(Int)169,(Int)200,(Int)196,(Int)135,(Int)130,(Int)116,(Int)188,(Int)159,(Int)86,(Int)164,(Int)100,(Int)109,(Int)198,(Int)173,(Int)186,(Int)3,(Int)64,(Int)52,(Int)217,(Int)226,(Int)250,(Int)124,(Int)123,(Int)5,(Int)202,(Int)38,(Int)147,(Int)118,(Int)126,(Int)255,(Int)82,(Int)85,(Int)212,(Int)207,(Int)206,(Int)59,(Int)227,(Int)47,(Int)16,(Int)58,(Int)17,(Int)182,(Int)189,(Int)28,(Int)42,(Int)223,(Int)183,(Int)170,(Int)213,(Int)119,(Int)248,(Int)152,(Int)2,(Int)44,(Int)154,(Int)163,(Int)70,(Int)221,(Int)153,(Int)101,(Int)155,(Int)167,(Int)43,(Int)172,(Int)9,(Int)129,(Int)22,(Int)39,(Int)253,(Int)19,(Int)98,(Int)108,(Int)110,(Int)79,(Int)113,(Int)224,(Int)232,(Int)178,(Int)185,(Int)112,(Int)104,(Int)218,(Int)246,(Int)97,(Int)228,(Int)251,(Int)34,(Int)242,(Int)193,(Int)238,(Int)210,(Int)144,(Int)12,(Int)191,(Int)179,(Int)162,(Int)241,(Int)81,(Int)51,(Int)145,(Int)235,(Int)249,(Int)14,(Int)239,(Int)107,(Int)49,(Int)192,(Int)214,(Int)31,(Int)181,(Int)199,(Int)106,(Int)157,(Int)184,(Int)84,(Int)204,(Int)176,(Int)115,(Int)121,(Int)50,(Int)45,(Int)127,(Int)4,(Int)150,(Int)254,(Int)138,(Int)236,(Int)205,(Int)93,(Int)222,(Int)114,(Int)67,(Int)29,(Int)24,(Int)72,(Int)243,(Int)141,(Int)128,(Int)195,(Int)78,(Int)66,(Int)215,(Int)61,(Int)156,(Int)180,(Int)151,(Int)160,(Int)137,(Int)91,(Int)90,(Int)15,(Int)131,(Int)13,(Int)201,(Int)95,(Int)96,(Int)53,(Int)194,(Int)233,(Int)7,(Int)225,(Int)140,(Int)36,(Int)103,(Int)30,(Int)69,(Int)142,(Int)8,(Int)99,(Int)37,(Int)240,(Int)21,(Int)10,(Int)23,(Int)190,(Int)6,(Int)148,(Int)247,(Int)120,(Int)234,(Int)75,(Int)0,(Int)26,(Int)197,(Int)62,(Int)94,(Int)252,(Int)219,(Int)203,(Int)117,(Int)35,(Int)11,(Int)32,(Int)57,(Int)177,(Int)33,(Int)88,(Int)237,(Int)149,(Int)56,(Int)87,(Int)174,(Int)20,(Int)125,(Int)136,(Int)171,(Int)168,(Int)68,(Int)175,(Int)74,(Int)165,(Int)71,(Int)134,(Int)139,(Int)48,(Int)27,(Int)166,(Int)77,(Int)146,(Int)158,(Int)231,(Int)83,(Int)111,(Int)229,(Int)122,(Int)60,(Int)211,(Int)133,(Int)230,(Int)220,(Int)105,(Int)92,(Int)41,(Int)55,(Int)46,(Int)245,(Int)40,(Int)244,(Int)102,(Int)143,(Int)54,(Int)65,(Int)25,(Int)63,(Int)161,(Int)1,(Int)216,(Int)80,(Int)73,(Int)209,(Int)76,(Int)132,(Int)187,(Int)208,(Int)89,(Int)18,(Int)169,(Int)200,(Int)196,(Int)135,(Int)130,(Int)116,(Int)188,(Int)159,(Int)86,(Int)164,(Int)100,(Int)109,(Int)198,(Int)173,(Int)186,(Int)3,(Int)64,(Int)52,(Int)217,(Int)226,(Int)250,(Int)124,(Int)123,(Int)5,(Int)202,(Int)38,(Int)147,(Int)118,(Int)126,(Int)255,(Int)82,(Int)85,(Int)212,(Int)207,(Int)206,(Int)59,(Int)227,(Int)47,(Int)16,(Int)58,(Int)17,(Int)182,(Int)189,(Int)28,(Int)42,(Int)223,(Int)183,(Int)170,(Int)213,(Int)119,(Int)248,(Int)152,(Int)2,(Int)44,(Int)154,(Int)163,(Int)70,(Int)221,(Int)153,(Int)101,(Int)155,(Int)167,(Int)43,(Int)172,(Int)9,(Int)129,(Int)22,(Int)39,(Int)253,(Int)19,(Int)98,(Int)108,(Int)110,(Int)79,(Int)113,(Int)224,(Int)232,(Int)178,(Int)185,(Int)112,(Int)104,(Int)218,(Int)246,(Int)97,(Int)228,(Int)251,(Int)34,(Int)242,(Int)193,(Int)238,(Int)210,(Int)144,(Int)12,(Int)191,(Int)179,(Int)162,(Int)241,(Int)81,(Int)51,(Int)145,(Int)235,(Int)249,(Int)14,(Int)239,(Int)107,(Int)49,(Int)192,(Int)214,(Int)31,(Int)181,(Int)199,(Int)106,(Int)157,(Int)184,(Int)84,(Int)204,(Int)176,(Int)115,(Int)121,(Int)50,(Int)45,(Int)127,(Int)4,(Int)150,(Int)254,(Int)138,(Int)236,(Int)205,(Int)93,(Int)222,(Int)114,(Int)67,(Int)29,(Int)24,(Int)72,(Int)243,(Int)141,(Int)128,(Int)195,(Int)78,(Int)66,(Int)215,(Int)61,(Int)156,(Int)180,
};
namespace openfl{
namespace _legacy{
namespace display{

void OptimizedPerlin_obj::__construct(hx::Null< Int >  __o_seed,hx::Null< Int >  __o_numOctaves,hx::Null< Float >  __o_falloff){
Int seed = __o_seed.Default(123);
Int numOctaves = __o_numOctaves.Default(4);
Float falloff = __o_falloff.Default(((Float)0.5));
            	HX_STACK_FRAME("openfl._legacy.display.OptimizedPerlin","new",0x2e02d39d,"openfl._legacy.display.OptimizedPerlin.new","openfl/_legacy/display/BitmapData.hx",967,0x0b92a012)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(seed,"seed")
            	HX_STACK_ARG(numOctaves,"numOctaves")
            	HX_STACK_ARG(falloff,"falloff")
HXLINE( 969)		this->baseFactor = ((Float)0.015625);
HXLINE( 970)		this->octaves = numOctaves;
HXLINE( 971)		this->seedOffset(seed);
HXLINE( 972)		this->octFreqPers(falloff);
            	}

Dynamic OptimizedPerlin_obj::__CreateEmpty() { return new OptimizedPerlin_obj; }

hx::ObjectPtr< OptimizedPerlin_obj > OptimizedPerlin_obj::__new(hx::Null< Int >  __o_seed,hx::Null< Int >  __o_numOctaves,hx::Null< Float >  __o_falloff)
{
	hx::ObjectPtr< OptimizedPerlin_obj > _hx_result = new OptimizedPerlin_obj();
	_hx_result->__construct(__o_seed,__o_numOctaves,__o_falloff);
	return _hx_result;
}

Dynamic OptimizedPerlin_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OptimizedPerlin_obj > _hx_result = new OptimizedPerlin_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void OptimizedPerlin_obj::fill( ::openfl::_legacy::display::BitmapData bitmap,Float _x,Float _y,Float _z, ::Dynamic _){
            	HX_STACK_FRAME("openfl._legacy.display.OptimizedPerlin","fill",0x0f2fa0a6,"openfl._legacy.display.OptimizedPerlin.fill","openfl/_legacy/display/BitmapData.hx",977,0x0b92a012)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(_x,"_x")
            	HX_STACK_ARG(_y,"_y")
            	HX_STACK_ARG(_z,"_z")
            	HX_STACK_ARG(_,"_")
HXLINE( 979)		HX_VARI( Float,baseX) = ((_x * this->baseFactor) + this->iXoffset);
HXLINE( 982)		Float _hx_tmp = (_y * this->baseFactor);
HXDLIN( 982)		_y = (_hx_tmp + this->iYoffset);
HXLINE( 983)		Float _hx_tmp1 = (_z * this->baseFactor);
HXDLIN( 983)		_z = (_hx_tmp1 + this->iZoffset);
HXLINE( 985)		HX_VARI( Int,width) = bitmap->get_width();
HXLINE( 986)		HX_VARI( Int,height) = bitmap->get_height();
HXLINE( 988)		HX_VARI( ::Array< Int >,p) = ::openfl::_legacy::display::OptimizedPerlin_obj::P;
HXLINE( 989)		HX_VARI( Int,octaves) = this->octaves;
HXLINE( 990)		HX_VARI( ::Array< Float >,aOctFreq) = this->aOctFreq;
HXLINE( 991)		HX_VARI( ::Array< Float >,aOctPers) = this->aOctPers;
HXLINE( 993)		HX_VAR( Float,s);
HXDLIN( 993)		HX_VAR( Float,fFreq);
HXDLIN( 993)		HX_VAR( Float,fPers);
HXDLIN( 993)		HX_VAR( Float,x);
HXDLIN( 993)		HX_VAR( Float,y);
HXDLIN( 993)		HX_VAR( Float,z);
HXDLIN( 993)		HX_VAR( Float,xf);
HXDLIN( 993)		HX_VAR( Float,yf);
HXDLIN( 993)		HX_VAR( Float,zf);
HXDLIN( 993)		HX_VAR( Int,X);
HXDLIN( 993)		HX_VAR( Int,Y);
HXDLIN( 993)		HX_VAR( Int,Z);
HXDLIN( 993)		HX_VAR( Float,u);
HXDLIN( 993)		HX_VAR( Float,v);
HXDLIN( 993)		HX_VAR( Float,w);
HXDLIN( 993)		HX_VAR( Int,A);
HXDLIN( 993)		HX_VAR( Int,AA);
HXDLIN( 993)		HX_VAR( Int,AB);
HXDLIN( 993)		HX_VAR( Int,B);
HXDLIN( 993)		HX_VAR( Int,BA);
HXDLIN( 993)		HX_VAR( Int,BB);
HXDLIN( 993)		HX_VAR( Float,x1);
HXDLIN( 993)		HX_VAR( Float,y1);
HXDLIN( 993)		HX_VAR( Float,z1);
HXDLIN( 993)		HX_VAR( Int,hash);
HXDLIN( 993)		HX_VAR( Float,g1);
HXDLIN( 993)		HX_VAR( Float,g2);
HXDLIN( 993)		HX_VAR( Float,g3);
HXDLIN( 993)		HX_VAR( Float,g4);
HXDLIN( 993)		HX_VAR( Float,g5);
HXDLIN( 993)		HX_VAR( Float,g6);
HXDLIN( 993)		HX_VAR( Float,g7);
HXDLIN( 993)		HX_VAR( Float,g8);
HXDLIN( 993)		HX_VAR( Int,color);
HXDLIN( 993)		HX_VAR( Int,pixel);
HXLINE( 995)		{
HXLINE( 995)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 995)			while((_g1 < height)){
HXLINE( 995)				HX_VARI( Int,py) = _g1++;
HXLINE( 997)				_x = baseX;
HXLINE( 999)				{
HXLINE( 999)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 999)					while((_g3 < width)){
HXLINE( 999)						HX_VARI( Int,px) = _g3++;
HXLINE(1001)						s = ((Float)0.);
HXLINE(1003)						{
HXLINE(1003)							HX_VARI( Int,_g5) = (int)0;
HXDLIN(1003)							while((_g5 < octaves)){
HXLINE(1003)								HX_VARI( Int,i) = _g5++;
HXLINE(1005)								fFreq = aOctFreq->__get(i);
HXLINE(1006)								fPers = aOctPers->__get(i);
HXLINE(1008)								x = (_x * fFreq);
HXLINE(1009)								y = (_y * fFreq);
HXLINE(1010)								z = (_z * fFreq);
HXLINE(1012)								xf = (x - hx::Mod(x,(int)1));
HXLINE(1013)								yf = (y - hx::Mod(y,(int)1));
HXLINE(1014)								zf = (z - hx::Mod(z,(int)1));
HXLINE(1016)								Int _hx_tmp2 = ::Std_obj::_hx_int(xf);
HXDLIN(1016)								X = ((int)_hx_tmp2 & (int)(int)255);
HXLINE(1017)								Int _hx_tmp3 = ::Std_obj::_hx_int(yf);
HXDLIN(1017)								Y = ((int)_hx_tmp3 & (int)(int)255);
HXLINE(1018)								Int _hx_tmp4 = ::Std_obj::_hx_int(zf);
HXDLIN(1018)								Z = ((int)_hx_tmp4 & (int)(int)255);
HXLINE(1020)								hx::SubEq(x,xf);
HXLINE(1021)								hx::SubEq(y,yf);
HXLINE(1022)								hx::SubEq(z,zf);
HXLINE(1024)								u = (((x * x) * x) * ((x * ((x * (int)6) - (int)15)) + (int)10));
HXLINE(1025)								v = (((y * y) * y) * ((y * ((y * (int)6) - (int)15)) + (int)10));
HXLINE(1026)								w = (((z * z) * z) * ((z * ((z * (int)6) - (int)15)) + (int)10));
HXLINE(1028)								A = (p->__get(X) + Y);
HXLINE(1029)								AA = (p->__get(A) + Z);
HXLINE(1030)								AB = (p->__get((A + (int)1)) + Z);
HXLINE(1031)								B = (p->__get((X + (int)1)) + Y);
HXLINE(1032)								BA = (p->__get(B) + Z);
HXLINE(1033)								BB = (p->__get((B + (int)1)) + Z);
HXLINE(1035)								x1 = (x - (int)1);
HXLINE(1036)								y1 = (y - (int)1);
HXLINE(1037)								z1 = (z - (int)1);
HXLINE(1039)								hash = ((int)p->__get((BB + (int)1)) & (int)(int)15);
HXLINE(1040)								Float _hx_tmp5;
HXDLIN(1040)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1040)									if ((hash < (int)8)) {
HXLINE(1040)										_hx_tmp5 = x1;
            									}
            									else {
HXLINE(1040)										_hx_tmp5 = y1;
            									}
            								}
            								else {
HXLINE(1040)									if ((hash < (int)8)) {
HXLINE(1040)										_hx_tmp5 = -(x1);
            									}
            									else {
HXLINE(1040)										_hx_tmp5 = -(y1);
            									}
            								}
HXDLIN(1040)								Float _hx_tmp6;
HXDLIN(1040)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1040)									if ((hash < (int)4)) {
HXLINE(1040)										_hx_tmp6 = y1;
            									}
            									else {
HXLINE(1040)										if ((hash == (int)12)) {
HXLINE(1040)											_hx_tmp6 = x1;
            										}
            										else {
HXLINE(1040)											_hx_tmp6 = z1;
            										}
            									}
            								}
            								else {
HXLINE(1040)									if ((hash < (int)4)) {
HXLINE(1040)										_hx_tmp6 = -(y1);
            									}
            									else {
HXLINE(1040)										if ((hash == (int)14)) {
HXLINE(1040)											_hx_tmp6 = -(x1);
            										}
            										else {
HXLINE(1040)											_hx_tmp6 = -(z1);
            										}
            									}
            								}
HXDLIN(1040)								g1 = (_hx_tmp5 + _hx_tmp6);
HXLINE(1042)								hash = ((int)p->__get((AB + (int)1)) & (int)(int)15);
HXLINE(1043)								Float _hx_tmp7;
HXDLIN(1043)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1043)									if ((hash < (int)8)) {
HXLINE(1043)										_hx_tmp7 = x;
            									}
            									else {
HXLINE(1043)										_hx_tmp7 = y1;
            									}
            								}
            								else {
HXLINE(1043)									if ((hash < (int)8)) {
HXLINE(1043)										_hx_tmp7 = -(x);
            									}
            									else {
HXLINE(1043)										_hx_tmp7 = -(y1);
            									}
            								}
HXDLIN(1043)								Float _hx_tmp8;
HXDLIN(1043)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1043)									if ((hash < (int)4)) {
HXLINE(1043)										_hx_tmp8 = y1;
            									}
            									else {
HXLINE(1043)										if ((hash == (int)12)) {
HXLINE(1043)											_hx_tmp8 = x;
            										}
            										else {
HXLINE(1043)											_hx_tmp8 = z1;
            										}
            									}
            								}
            								else {
HXLINE(1043)									if ((hash < (int)4)) {
HXLINE(1043)										_hx_tmp8 = -(y1);
            									}
            									else {
HXLINE(1043)										if ((hash == (int)14)) {
HXLINE(1043)											_hx_tmp8 = -(x);
            										}
            										else {
HXLINE(1043)											_hx_tmp8 = -(z1);
            										}
            									}
            								}
HXDLIN(1043)								g2 = (_hx_tmp7 + _hx_tmp8);
HXLINE(1045)								hash = ((int)p->__get((BA + (int)1)) & (int)(int)15);
HXLINE(1046)								Float _hx_tmp9;
HXDLIN(1046)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1046)									if ((hash < (int)8)) {
HXLINE(1046)										_hx_tmp9 = x1;
            									}
            									else {
HXLINE(1046)										_hx_tmp9 = y;
            									}
            								}
            								else {
HXLINE(1046)									if ((hash < (int)8)) {
HXLINE(1046)										_hx_tmp9 = -(x1);
            									}
            									else {
HXLINE(1046)										_hx_tmp9 = -(y);
            									}
            								}
HXDLIN(1046)								Float _hx_tmp10;
HXDLIN(1046)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1046)									if ((hash < (int)4)) {
HXLINE(1046)										_hx_tmp10 = y;
            									}
            									else {
HXLINE(1046)										if ((hash == (int)12)) {
HXLINE(1046)											_hx_tmp10 = x1;
            										}
            										else {
HXLINE(1046)											_hx_tmp10 = z1;
            										}
            									}
            								}
            								else {
HXLINE(1046)									if ((hash < (int)4)) {
HXLINE(1046)										_hx_tmp10 = -(y);
            									}
            									else {
HXLINE(1046)										if ((hash == (int)14)) {
HXLINE(1046)											_hx_tmp10 = -(x1);
            										}
            										else {
HXLINE(1046)											_hx_tmp10 = -(z1);
            										}
            									}
            								}
HXDLIN(1046)								g3 = (_hx_tmp9 + _hx_tmp10);
HXLINE(1048)								hash = ((int)p->__get((AA + (int)1)) & (int)(int)15);
HXLINE(1049)								Float _hx_tmp11;
HXDLIN(1049)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1049)									if ((hash < (int)8)) {
HXLINE(1049)										_hx_tmp11 = x;
            									}
            									else {
HXLINE(1049)										_hx_tmp11 = y;
            									}
            								}
            								else {
HXLINE(1049)									if ((hash < (int)8)) {
HXLINE(1049)										_hx_tmp11 = -(x);
            									}
            									else {
HXLINE(1049)										_hx_tmp11 = -(y);
            									}
            								}
HXDLIN(1049)								Float _hx_tmp12;
HXDLIN(1049)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1049)									if ((hash < (int)4)) {
HXLINE(1049)										_hx_tmp12 = y;
            									}
            									else {
HXLINE(1049)										if ((hash == (int)12)) {
HXLINE(1049)											_hx_tmp12 = x;
            										}
            										else {
HXLINE(1049)											_hx_tmp12 = z1;
            										}
            									}
            								}
            								else {
HXLINE(1049)									if ((hash < (int)4)) {
HXLINE(1049)										_hx_tmp12 = -(y);
            									}
            									else {
HXLINE(1049)										if ((hash == (int)14)) {
HXLINE(1049)											_hx_tmp12 = -(x);
            										}
            										else {
HXLINE(1049)											_hx_tmp12 = -(z1);
            										}
            									}
            								}
HXDLIN(1049)								g4 = (_hx_tmp11 + _hx_tmp12);
HXLINE(1051)								hash = ((int)p->__get(BB) & (int)(int)15);
HXLINE(1052)								Float _hx_tmp13;
HXDLIN(1052)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1052)									if ((hash < (int)8)) {
HXLINE(1052)										_hx_tmp13 = x1;
            									}
            									else {
HXLINE(1052)										_hx_tmp13 = y1;
            									}
            								}
            								else {
HXLINE(1052)									if ((hash < (int)8)) {
HXLINE(1052)										_hx_tmp13 = -(x1);
            									}
            									else {
HXLINE(1052)										_hx_tmp13 = -(y1);
            									}
            								}
HXDLIN(1052)								Float _hx_tmp14;
HXDLIN(1052)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1052)									if ((hash < (int)4)) {
HXLINE(1052)										_hx_tmp14 = y1;
            									}
            									else {
HXLINE(1052)										if ((hash == (int)12)) {
HXLINE(1052)											_hx_tmp14 = x1;
            										}
            										else {
HXLINE(1052)											_hx_tmp14 = z;
            										}
            									}
            								}
            								else {
HXLINE(1052)									if ((hash < (int)4)) {
HXLINE(1052)										_hx_tmp14 = -(y1);
            									}
            									else {
HXLINE(1052)										if ((hash == (int)14)) {
HXLINE(1052)											_hx_tmp14 = -(x1);
            										}
            										else {
HXLINE(1052)											_hx_tmp14 = -(z);
            										}
            									}
            								}
HXDLIN(1052)								g5 = (_hx_tmp13 + _hx_tmp14);
HXLINE(1054)								hash = ((int)p->__get(AB) & (int)(int)15);
HXLINE(1055)								Float _hx_tmp15;
HXDLIN(1055)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1055)									if ((hash < (int)8)) {
HXLINE(1055)										_hx_tmp15 = x;
            									}
            									else {
HXLINE(1055)										_hx_tmp15 = y1;
            									}
            								}
            								else {
HXLINE(1055)									if ((hash < (int)8)) {
HXLINE(1055)										_hx_tmp15 = -(x);
            									}
            									else {
HXLINE(1055)										_hx_tmp15 = -(y1);
            									}
            								}
HXDLIN(1055)								Float _hx_tmp16;
HXDLIN(1055)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1055)									if ((hash < (int)4)) {
HXLINE(1055)										_hx_tmp16 = y1;
            									}
            									else {
HXLINE(1055)										if ((hash == (int)12)) {
HXLINE(1055)											_hx_tmp16 = x;
            										}
            										else {
HXLINE(1055)											_hx_tmp16 = z;
            										}
            									}
            								}
            								else {
HXLINE(1055)									if ((hash < (int)4)) {
HXLINE(1055)										_hx_tmp16 = -(y1);
            									}
            									else {
HXLINE(1055)										if ((hash == (int)14)) {
HXLINE(1055)											_hx_tmp16 = -(x);
            										}
            										else {
HXLINE(1055)											_hx_tmp16 = -(z);
            										}
            									}
            								}
HXDLIN(1055)								g6 = (_hx_tmp15 + _hx_tmp16);
HXLINE(1057)								hash = ((int)p->__get(BA) & (int)(int)15);
HXLINE(1058)								Float _hx_tmp17;
HXDLIN(1058)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1058)									if ((hash < (int)8)) {
HXLINE(1058)										_hx_tmp17 = x1;
            									}
            									else {
HXLINE(1058)										_hx_tmp17 = y;
            									}
            								}
            								else {
HXLINE(1058)									if ((hash < (int)8)) {
HXLINE(1058)										_hx_tmp17 = -(x1);
            									}
            									else {
HXLINE(1058)										_hx_tmp17 = -(y);
            									}
            								}
HXDLIN(1058)								Float _hx_tmp18;
HXDLIN(1058)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1058)									if ((hash < (int)4)) {
HXLINE(1058)										_hx_tmp18 = y;
            									}
            									else {
HXLINE(1058)										if ((hash == (int)12)) {
HXLINE(1058)											_hx_tmp18 = x1;
            										}
            										else {
HXLINE(1058)											_hx_tmp18 = z;
            										}
            									}
            								}
            								else {
HXLINE(1058)									if ((hash < (int)4)) {
HXLINE(1058)										_hx_tmp18 = -(y);
            									}
            									else {
HXLINE(1058)										if ((hash == (int)14)) {
HXLINE(1058)											_hx_tmp18 = -(x1);
            										}
            										else {
HXLINE(1058)											_hx_tmp18 = -(z);
            										}
            									}
            								}
HXDLIN(1058)								g7 = (_hx_tmp17 + _hx_tmp18);
HXLINE(1060)								hash = ((int)p->__get(AA) & (int)(int)15);
HXLINE(1061)								Float _hx_tmp19;
HXDLIN(1061)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE(1061)									if ((hash < (int)8)) {
HXLINE(1061)										_hx_tmp19 = x;
            									}
            									else {
HXLINE(1061)										_hx_tmp19 = y;
            									}
            								}
            								else {
HXLINE(1061)									if ((hash < (int)8)) {
HXLINE(1061)										_hx_tmp19 = -(x);
            									}
            									else {
HXLINE(1061)										_hx_tmp19 = -(y);
            									}
            								}
HXDLIN(1061)								Float _hx_tmp20;
HXDLIN(1061)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE(1061)									if ((hash < (int)4)) {
HXLINE(1061)										_hx_tmp20 = y;
            									}
            									else {
HXLINE(1061)										if ((hash == (int)12)) {
HXLINE(1061)											_hx_tmp20 = x;
            										}
            										else {
HXLINE(1061)											_hx_tmp20 = z;
            										}
            									}
            								}
            								else {
HXLINE(1061)									if ((hash < (int)4)) {
HXLINE(1061)										_hx_tmp20 = -(y);
            									}
            									else {
HXLINE(1061)										if ((hash == (int)14)) {
HXLINE(1061)											_hx_tmp20 = -(x);
            										}
            										else {
HXLINE(1061)											_hx_tmp20 = -(z);
            										}
            									}
            								}
HXDLIN(1061)								g8 = (_hx_tmp19 + _hx_tmp20);
HXLINE(1063)								Float _hx_tmp21 = (u * (g1 - g2));
HXDLIN(1063)								hx::AddEq(g2,_hx_tmp21);
HXLINE(1064)								Float _hx_tmp22 = (u * (g3 - g4));
HXDLIN(1064)								hx::AddEq(g4,_hx_tmp22);
HXLINE(1065)								Float _hx_tmp23 = (u * (g5 - g6));
HXDLIN(1065)								hx::AddEq(g6,_hx_tmp23);
HXLINE(1066)								Float _hx_tmp24 = (u * (g7 - g8));
HXDLIN(1066)								hx::AddEq(g8,_hx_tmp24);
HXLINE(1068)								Float _hx_tmp25 = (v * (g2 - g4));
HXDLIN(1068)								hx::AddEq(g4,_hx_tmp25);
HXLINE(1069)								Float _hx_tmp26 = (v * (g6 - g8));
HXDLIN(1069)								hx::AddEq(g8,_hx_tmp26);
HXLINE(1071)								hx::AddEq(s,((g8 + (w * (g4 - g8))) * fPers));
            							}
            						}
HXLINE(1075)						Float _hx_tmp27 = ((s * this->fPersMax) + (int)1);
HXDLIN(1075)						color = ::Std_obj::_hx_int((_hx_tmp27 * (int)128));
HXLINE(1076)						pixel = ((int)((int)((int)(int)-16777216 | (int)((int)color << (int)(int)16)) | (int)((int)color << (int)(int)8)) | (int)color);
HXLINE(1078)						bitmap->setPixel32(px,py,pixel);
HXLINE(1080)						hx::AddEq(_x,this->baseFactor);
            					}
            				}
HXLINE(1084)				hx::AddEq(_y,this->baseFactor);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(OptimizedPerlin_obj,fill,(void))

void OptimizedPerlin_obj::octFreqPers(Float fPersistence){
            	HX_STACK_FRAME("openfl._legacy.display.OptimizedPerlin","octFreqPers",0xaeeba70b,"openfl._legacy.display.OptimizedPerlin.octFreqPers","openfl/_legacy/display/BitmapData.hx",1091,0x0b92a012)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fPersistence,"fPersistence")
HXLINE(1093)		HX_VAR( Float,fFreq);
HXDLIN(1093)		HX_VAR( Float,fPers);
HXLINE(1095)		this->aOctFreq = ::Array_obj< Float >::__new(0);
HXLINE(1096)		this->aOctPers = ::Array_obj< Float >::__new(0);
HXLINE(1097)		this->fPersMax = (int)0;
HXLINE(1099)		{
HXLINE(1099)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1099)			HX_VARI( Int,_g) = this->octaves;
HXDLIN(1099)			while((_g1 < _g)){
HXLINE(1099)				HX_VARI( Int,i) = _g1++;
HXLINE(1101)				fFreq = ::Math_obj::pow((int)2,i);
HXLINE(1102)				fPers = ::Math_obj::pow(fPersistence,i);
HXLINE(1103)				hx::AddEq(this->fPersMax,fPers);
HXLINE(1104)				this->aOctFreq->push(fFreq);
HXLINE(1105)				this->aOctPers->push(fPers);
            			}
            		}
HXLINE(1109)		this->fPersMax = ((Float)(int)1 / (Float)this->fPersMax);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptimizedPerlin_obj,octFreqPers,(void))

void OptimizedPerlin_obj::seedOffset(Int iSeed){
            	HX_STACK_FRAME("openfl._legacy.display.OptimizedPerlin","seedOffset",0xad5c4a47,"openfl._legacy.display.OptimizedPerlin.seedOffset","openfl/_legacy/display/BitmapData.hx",1114,0x0b92a012)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(iSeed,"iSeed")
HXLINE(1116)		iSeed = ::Std_obj::_hx_int(hx::Mod((iSeed * ((Float)16807.)),(int)2147483647));
HXDLIN(1116)		this->iXoffset = iSeed;
HXLINE(1117)		iSeed = ::Std_obj::_hx_int(hx::Mod((iSeed * ((Float)16807.)),(int)2147483647));
HXDLIN(1117)		this->iYoffset = iSeed;
HXLINE(1118)		iSeed = ::Std_obj::_hx_int(hx::Mod((iSeed * ((Float)16807.)),(int)2147483647));
HXDLIN(1118)		this->iZoffset = iSeed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptimizedPerlin_obj,seedOffset,(void))

::Array< Int > OptimizedPerlin_obj::P;


OptimizedPerlin_obj::OptimizedPerlin_obj()
{
}

void OptimizedPerlin_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptimizedPerlin);
	HX_MARK_MEMBER_NAME(octaves,"octaves");
	HX_MARK_MEMBER_NAME(aOctFreq,"aOctFreq");
	HX_MARK_MEMBER_NAME(aOctPers,"aOctPers");
	HX_MARK_MEMBER_NAME(fPersMax,"fPersMax");
	HX_MARK_MEMBER_NAME(iXoffset,"iXoffset");
	HX_MARK_MEMBER_NAME(iYoffset,"iYoffset");
	HX_MARK_MEMBER_NAME(iZoffset,"iZoffset");
	HX_MARK_MEMBER_NAME(baseFactor,"baseFactor");
	HX_MARK_END_CLASS();
}

void OptimizedPerlin_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(octaves,"octaves");
	HX_VISIT_MEMBER_NAME(aOctFreq,"aOctFreq");
	HX_VISIT_MEMBER_NAME(aOctPers,"aOctPers");
	HX_VISIT_MEMBER_NAME(fPersMax,"fPersMax");
	HX_VISIT_MEMBER_NAME(iXoffset,"iXoffset");
	HX_VISIT_MEMBER_NAME(iYoffset,"iYoffset");
	HX_VISIT_MEMBER_NAME(iZoffset,"iZoffset");
	HX_VISIT_MEMBER_NAME(baseFactor,"baseFactor");
}

hx::Val OptimizedPerlin_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"octaves") ) { return hx::Val( octaves); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"aOctFreq") ) { return hx::Val( aOctFreq); }
		if (HX_FIELD_EQ(inName,"aOctPers") ) { return hx::Val( aOctPers); }
		if (HX_FIELD_EQ(inName,"fPersMax") ) { return hx::Val( fPersMax); }
		if (HX_FIELD_EQ(inName,"iXoffset") ) { return hx::Val( iXoffset); }
		if (HX_FIELD_EQ(inName,"iYoffset") ) { return hx::Val( iYoffset); }
		if (HX_FIELD_EQ(inName,"iZoffset") ) { return hx::Val( iZoffset); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"baseFactor") ) { return hx::Val( baseFactor); }
		if (HX_FIELD_EQ(inName,"seedOffset") ) { return hx::Val( seedOffset_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"octFreqPers") ) { return hx::Val( octFreqPers_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool OptimizedPerlin_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { outValue = P; return true; }
	}
	return false;
}

hx::Val OptimizedPerlin_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"octaves") ) { octaves=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"aOctFreq") ) { aOctFreq=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aOctPers") ) { aOctPers=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fPersMax") ) { fPersMax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iXoffset") ) { iXoffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iYoffset") ) { iYoffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iZoffset") ) { iZoffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"baseFactor") ) { baseFactor=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool OptimizedPerlin_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { P=ioValue.Cast< ::Array< Int > >(); return true; }
	}
	return false;
}

void OptimizedPerlin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("octaves","\x83","\x15","\x16","\xa8"));
	outFields->push(HX_HCSTRING("aOctFreq","\x57","\xaf","\xa8","\x0f"));
	outFields->push(HX_HCSTRING("aOctPers","\x95","\xff","\x3a","\x16"));
	outFields->push(HX_HCSTRING("fPersMax","\x88","\x73","\xc6","\x1a"));
	outFields->push(HX_HCSTRING("iXoffset","\xa2","\x38","\x51","\x21"));
	outFields->push(HX_HCSTRING("iYoffset","\x63","\xaf","\xe6","\x4a"));
	outFields->push(HX_HCSTRING("iZoffset","\x24","\x26","\x7c","\x74"));
	outFields->push(HX_HCSTRING("baseFactor","\xc0","\xd7","\x3d","\xbc"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OptimizedPerlin_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(OptimizedPerlin_obj,octaves),HX_HCSTRING("octaves","\x83","\x15","\x16","\xa8")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(OptimizedPerlin_obj,aOctFreq),HX_HCSTRING("aOctFreq","\x57","\xaf","\xa8","\x0f")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(OptimizedPerlin_obj,aOctPers),HX_HCSTRING("aOctPers","\x95","\xff","\x3a","\x16")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,fPersMax),HX_HCSTRING("fPersMax","\x88","\x73","\xc6","\x1a")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,iXoffset),HX_HCSTRING("iXoffset","\xa2","\x38","\x51","\x21")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,iYoffset),HX_HCSTRING("iYoffset","\x63","\xaf","\xe6","\x4a")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,iZoffset),HX_HCSTRING("iZoffset","\x24","\x26","\x7c","\x74")},
	{hx::fsFloat,(int)offsetof(OptimizedPerlin_obj,baseFactor),HX_HCSTRING("baseFactor","\xc0","\xd7","\x3d","\xbc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo OptimizedPerlin_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(void *) &OptimizedPerlin_obj::P,HX_HCSTRING("P","\x50","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String OptimizedPerlin_obj_sMemberFields[] = {
	HX_HCSTRING("octaves","\x83","\x15","\x16","\xa8"),
	HX_HCSTRING("aOctFreq","\x57","\xaf","\xa8","\x0f"),
	HX_HCSTRING("aOctPers","\x95","\xff","\x3a","\x16"),
	HX_HCSTRING("fPersMax","\x88","\x73","\xc6","\x1a"),
	HX_HCSTRING("iXoffset","\xa2","\x38","\x51","\x21"),
	HX_HCSTRING("iYoffset","\x63","\xaf","\xe6","\x4a"),
	HX_HCSTRING("iZoffset","\x24","\x26","\x7c","\x74"),
	HX_HCSTRING("baseFactor","\xc0","\xd7","\x3d","\xbc"),
	HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"),
	HX_HCSTRING("octFreqPers","\xce","\x9e","\x7b","\xa2"),
	HX_HCSTRING("seedOffset","\xe4","\xbb","\xcf","\xfe"),
	::String(null()) };

static void OptimizedPerlin_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OptimizedPerlin_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(OptimizedPerlin_obj::P,"P");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OptimizedPerlin_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OptimizedPerlin_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(OptimizedPerlin_obj::P,"P");
};

#endif

hx::Class OptimizedPerlin_obj::__mClass;

static ::String OptimizedPerlin_obj_sStaticFields[] = {
	HX_HCSTRING("P","\x50","\x00","\x00","\x00"),
	::String(null())
};

void OptimizedPerlin_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.display.OptimizedPerlin","\x2b","\xc1","\x97","\xdf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OptimizedPerlin_obj::__GetStatic;
	__mClass->mSetStaticField = &OptimizedPerlin_obj::__SetStatic;
	__mClass->mMarkFunc = OptimizedPerlin_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(OptimizedPerlin_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OptimizedPerlin_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OptimizedPerlin_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OptimizedPerlin_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptimizedPerlin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptimizedPerlin_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void OptimizedPerlin_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._legacy.display.OptimizedPerlin","boot",0x0c8f5655,"openfl._legacy.display.OptimizedPerlin.boot","openfl/_legacy/display/BitmapData.hx",898,0x0b92a012)
HXLINE( 898)		P = ::Array_obj< Int >::fromData( _hx_array_data_4,512);
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace display
