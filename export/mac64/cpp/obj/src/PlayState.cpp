// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EndState
#include <EndState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

static const Int _hx_array_data_4[] = {
	(Int)-15712691,(Int)-13818806,
};
static const Int _hx_array_data_5[] = {
	(Int)11,
};
static const Bool _hx_array_data_6[] = {
	0,1,
};
static const Bool _hx_array_data_7[] = {
	0,1,
};
static const Bool _hx_array_data_8[] = {
	0,1,
};
static const Bool _hx_array_data_9[] = {
	0,1,
};

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACK_FRAME("PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",22,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  29)		this->_children = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  22)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(MaxSize);
	return _hx_result;
}

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void PlayState_obj::create(){
            	HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",33,0xb30d7781)
            	HX_STACK_THIS(this)
HXLINE(  35)		::Reg_obj::state = hx::ObjectPtr<OBJ_>(this);
HXLINE(  36)		::Reg_obj::children = (int)0;
HXLINE(  37)		::Reg_obj::timer = (::Reg_obj::totalTime = (int)60);
HXLINE(  39)		HX_VARI(  ::flixel::FlxSprite,_gradient) = ::flixel::util::FlxGradient_obj::createGradientFlxSprite((int)1080,(int)675,::Array_obj< Int >::fromData( _hx_array_data_4,2),null(),null(),null());
HXLINE(  40)		_gradient->scrollFactor->set((int)0,(int)0);
HXLINE(  41)		this->add(_gradient);
HXLINE(  43)		this->_timer =  ::flixel::text::FlxText_obj::__new((int)40,(int)20,(int)1000,null(),null(),null());
HXLINE(  44)		this->_timer->set_text(HX_("5:00",a5,7b,34,23));
HXLINE(  45)		this->_timer->scrollFactor->set((int)0,(int)0);
HXLINE(  46)		this->_timer->setFormat(HX_("assets/Metamorphous-Regular.ttf",9d,32,10,d5),(int)42,(int)-16777216,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  47)		this->add(this->_timer);
HXLINE(  49)		this->_random =  ::flixel::math::FlxRandom_obj::__new(null());
HXLINE(  51)		this->_moon =  ::flixel::FlxSprite_obj::__new((int)800,(int)40,null());
HXLINE(  52)		this->_moon->loadGraphic(HX_("assets/images/moon.png",67,89,e2,f6),null(),null(),null(),null(),null());
HXLINE(  53)		this->_moon->scale->set(((Float)0.7),((Float)0.7));
HXLINE(  54)		this->_moon->scrollFactor->set(((Float)0.018),((Float)0.3));
HXLINE(  55)		this->add(this->_moon);
HXLINE(  58)		{
HXLINE(  58)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  58)			while((_g < (int)500)){
HXLINE(  58)				HX_VARI( Int,i) = _g++;
HXLINE(  60)				Int _hx_tmp = (i * (int)100);
HXDLIN(  60)				Int _hx_tmp1 = this->_random->_hx_int((int)-100,(int)100,null());
HXDLIN(  60)				HX_VARI(  ::flixel::FlxSprite,_cloud) =  ::flixel::FlxSprite_obj::__new(_hx_tmp,_hx_tmp1,null());
HXLINE(  61)				HX_VARI( Int,_n) = this->_random->_hx_int((int)1,(int)11,::Array_obj< Int >::fromData( _hx_array_data_5,1));
HXLINE(  62)				::String _hx_tmp2 = ::Std_obj::string(_n);
HXDLIN(  62)				_cloud->loadGraphic(((HX_("assets/images/clouds/cloud",ef,32,2b,4b) + _hx_tmp2) + HX_(".png",3b,2d,bd,1e)),null(),null(),null(),null(),null());
HXLINE(  63)				HX_VARI( Float,_scale) = this->_random->_hx_float(((Float)0.35),((Float)0.65),null());
HXLINE(  64)				_cloud->scale->set(_scale,_scale);
HXLINE(  65)				Float _hx_tmp3 = this->_random->_hx_float(((Float)0.2),((Float)0.5),null());
HXDLIN(  65)				_cloud->set_alpha(_hx_tmp3);
HXLINE(  66)				Float _hx_tmp4 = this->_random->_hx_float(((Float)0.2),((Float)0.7),null());
HXDLIN(  66)				Float _hx_tmp5 = this->_random->_hx_float(((Float)0.2),((Float)0.7),null());
HXDLIN(  66)				_cloud->scrollFactor->set(_hx_tmp4,_hx_tmp5);
HXLINE(  67)				Int _hx_tmp6 = this->_random->_hx_int((int)0,(int)1,null());
HXDLIN(  67)				Bool _hx_tmp7 = ::Array_obj< Bool >::fromData( _hx_array_data_6,2)->__get(_hx_tmp6);
HXDLIN(  67)				_cloud->set_flipX(_hx_tmp7);
HXLINE(  68)				this->add(_cloud);
            			}
            		}
HXLINE(  72)		this->_killSound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/child.wav",5b,63,40,35),null(),null(),null(),null(),null(),null(),null());
HXLINE(  92)		HX_VARI(  ::flixel::FlxSprite,_ground2) =  ::flixel::FlxSprite_obj::__new((int)0,(int)390,null());
HXLINE(  93)		_ground2->makeGraphic((int)1080,(int)999,(int)-16777216,null(),null());
HXLINE(  94)		_ground2->scrollFactor->set((int)0,(int)1);
HXLINE(  95)		this->add(_ground2);
HXLINE(  97)		HX_VARI(  ::flixel::group::FlxTypedSpriteGroup,_trees) =  ::flixel::group::FlxTypedSpriteGroup_obj::__new((int)0,(int)0,null());
HXLINE(  98)		HX_VARI( Int,_last) = (int)0;
HXLINE(  99)		{
HXLINE(  99)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN(  99)			while((_g1 < (int)200)){
HXLINE(  99)				HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 101)				Int _hx_tmp8 = this->_random->_hx_int((int)1,(int)5,null());
HXDLIN( 101)				if ((_hx_tmp8 == (int)1)) {
HXLINE( 102)					continue;
            				}
HXLINE( 103)				HX_VARI(  ::flixel::FlxSprite,_tree) =  ::flixel::FlxSprite_obj::__new((i1 * (int)200),(int)-530,null());
HXLINE( 104)				HX_VARI_NAME( Int,_n1,"_n") = this->_random->_hx_int((int)1,(int)9,::Array_obj< Int >::__new(1)->init(0,_last));
HXLINE( 105)				_last = _n1;
HXLINE( 106)				::String _hx_tmp9 = ::Std_obj::string(_n1);
HXDLIN( 106)				_tree->loadGraphic(((HX_("assets/images/trees/tree",03,fb,dc,91) + _hx_tmp9) + HX_(".png",3b,2d,bd,1e)),null(),null(),null(),null(),null());
HXLINE( 107)				_tree->scale->set(((Float)0.5625),((Float)0.5625));
HXLINE( 108)				Int _hx_tmp10 = this->_random->_hx_int((int)0,(int)1,null());
HXDLIN( 108)				Bool _hx_tmp11 = ::Array_obj< Bool >::fromData( _hx_array_data_7,2)->__get(_hx_tmp10);
HXDLIN( 108)				_tree->set_flipX(_hx_tmp11);
HXLINE( 109)				_trees->add(_tree).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE( 111)		this->add(_trees);
HXLINE( 113)		{
HXLINE( 113)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 113)			while((_g2 < (int)700)){
HXLINE( 113)				HX_VARI_NAME( Int,i2,"i") = _g2++;
HXLINE( 115)				Int _hx_tmp12 = this->_random->_hx_int((int)1,(int)5,null());
HXDLIN( 115)				if ((_hx_tmp12 == (int)1)) {
HXLINE( 116)					continue;
            				}
HXLINE( 117)				HX_VARI_NAME(  ::flixel::FlxSprite,_tree1,"_tree") =  ::flixel::FlxSprite_obj::__new((i2 * (int)100),(int)-370,null());
HXLINE( 118)				HX_VARI_NAME( Int,_n2,"_n") = this->_random->_hx_int((int)1,(int)9,::Array_obj< Int >::__new(1)->init(0,_last));
HXLINE( 119)				_last = _n2;
HXLINE( 120)				::String _hx_tmp13 = ::Std_obj::string(_n2);
HXDLIN( 120)				_tree1->loadGraphic(((HX_("assets/images/trees/tree",03,fb,dc,91) + _hx_tmp13) + HX_(".png",3b,2d,bd,1e)),null(),null(),null(),null(),null());
HXLINE( 121)				_tree1->set_alpha(((Float)0.5));
HXLINE( 122)				Float _hx_tmp14 = this->_random->_hx_float(((Float)0.4),((Float)0.6),null());
HXDLIN( 122)				_tree1->scrollFactor->set(_hx_tmp14,((Float)0.9));
HXLINE( 123)				Int _hx_tmp15 = this->_random->_hx_int((int)0,(int)1,null());
HXDLIN( 123)				Bool _hx_tmp16 = ::Array_obj< Bool >::fromData( _hx_array_data_8,2)->__get(_hx_tmp15);
HXDLIN( 123)				_tree1->set_flipX(_hx_tmp16);
HXLINE( 124)				_tree1->scale->set(((Float)0.3),((Float)0.3));
HXLINE( 125)				this->add(_tree1);
            			}
            		}
HXLINE( 130)		this->_player =  ::Player_obj::__new((int)20,(int)20);
HXLINE( 131)		this->add(this->_player);
HXLINE( 134)		{
HXLINE( 134)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 134)			while((_g3 < (int)20)){
HXLINE( 134)				HX_VARI_NAME( Int,i3,"i") = _g3++;
HXLINE( 136)				Int _hx_tmp17 = this->_random->_hx_int((int)1,(int)3,null());
HXDLIN( 136)				if ((_hx_tmp17 < (int)3)) {
HXLINE( 137)					continue;
            				}
HXLINE( 138)				HX_VARI(  ::flixel::FlxSprite,_child) =  ::flixel::FlxSprite_obj::__new(((int)1080 + (i3 * (int)1300)),(int)200,null());
HXLINE( 139)				HX_VARI_NAME( Int,_n3,"_n") = this->_random->_hx_int((int)1,(int)2,::Array_obj< Int >::__new(1)->init(0,_last));
HXLINE( 140)				_last = _n3;
HXLINE( 141)				::String _hx_tmp18 = ::Std_obj::string(_n3);
HXDLIN( 141)				_child->loadGraphic(((HX_("assets/images/children/child",77,ee,37,5b) + _hx_tmp18) + HX_(".png",3b,2d,bd,1e)),null(),null(),null(),null(),null());
HXLINE( 142)				Int _hx_tmp19 = this->_random->_hx_int((int)0,(int)1,null());
HXDLIN( 142)				Bool _hx_tmp20 = ::Array_obj< Bool >::fromData( _hx_array_data_9,2)->__get(_hx_tmp19);
HXDLIN( 142)				_child->set_flipX(_hx_tmp20);
HXLINE( 143)				_child->scale->set(((Float)0.3),((Float)0.3));
HXLINE( 144)				this->_children[i3] = _child;
HXLINE( 145)				_child->updateHitbox();
HXLINE( 146)				this->add(_child);
            			}
            		}
HXLINE( 150)		::flixel::FlxG_obj::camera->follow(this->_player,::flixel::FlxCameraFollowStyle_obj::PLATFORMER_dyn(),(int)1);
HXLINE( 151)		::flixel::FlxG_obj::camera->setScrollBoundsRect((int)0,(int)-1000,(int)40000,(int)1500,true);
HXLINE( 154)		::flixel::FlxG_obj::camera->set_antialiasing(true);
HXLINE( 155)		::flixel::FlxG_obj::camera->bgColor = (int)-13818806;
HXLINE( 158)		this->super::create();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACK_FRAME("PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",162,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 166)		hx::SubEq(::Reg_obj::timer,elapsed);
HXLINE( 167)		Bool _hx_tmp = (::Reg_obj::timer < (int)0);
HXDLIN( 167)		if (_hx_tmp) {
HXLINE( 169)			::Reg_obj::timer = (int)0;
HXLINE( 170)			{
HXLINE( 170)				HX_VARI(  ::flixel::FlxState,nextState) =  ::EndState_obj::__new(null());
HXDLIN( 170)				Bool _hx_tmp1 = ::flixel::FlxG_obj::game->_state->switchTo(nextState);
HXDLIN( 170)				if (_hx_tmp1) {
HXLINE( 170)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 173)		Float _hx_tmp2 = hx::Mod(::Reg_obj::timer,(int)60);
HXDLIN( 173)		Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 173)		HX_VARI( ::String,_seconds) = ::Std_obj::string(_hx_tmp3);
HXLINE( 174)		Bool _hx_tmp4 = (_seconds.length == (int)1);
HXDLIN( 174)		if (_hx_tmp4) {
HXLINE( 174)			_seconds = (HX_("0",30,00,00,00) + _seconds);
            		}
HXLINE( 175)		Float _hx_tmp5 = ((Float)::Reg_obj::timer / (Float)(int)60);
HXDLIN( 175)		Int _hx_tmp6 = ::Std_obj::_hx_int(_hx_tmp5);
HXDLIN( 175)		::String _hx_tmp7 = ::Std_obj::string(_hx_tmp6);
HXDLIN( 175)		this->_timer->set_text(((_hx_tmp7 + HX_(":",3a,00,00,00)) + _seconds));
HXLINE( 177)		Float _hx_tmp8 = ((int)40 + (((int)1 - ((Float)::Reg_obj::timer / (Float)::Reg_obj::totalTime)) * (int)200));
HXDLIN( 177)		this->_moon->set_y(_hx_tmp8);
HXLINE( 179)		{
HXLINE( 179)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 179)			HX_VARI( Int,_g) = (this->_children->length - (int)1);
HXDLIN( 179)			while((_g1 < _g)){
HXLINE( 179)				HX_VARI( Int,i) = _g1++;
HXLINE( 182)				 ::flixel::FlxSprite _hx_tmp9 = this->_children->__get(i).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 182)				Bool _hx_tmp10 = ::flixel::FlxG_obj::overlap(this->_player,_hx_tmp9,null(),null());
HXDLIN( 182)				if (_hx_tmp10) {
HXLINE( 184)					HX_VARI(  ::flixel::FlxSprite,_temp) = this->_children->__get(i).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 185)					this->_children->remove(_temp);
HXLINE( 186)					_temp->destroy();
HXLINE( 188)					this->_killSound->play(null(),null());
HXLINE( 190)					hx::AddEq(::Reg_obj::children,(int)1);
            				}
            			}
            		}
HXLINE( 194)		this->super::update(elapsed);
            	}



PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(_ground,"_ground");
	HX_MARK_MEMBER_NAME(_random,"_random");
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	HX_MARK_MEMBER_NAME(_player,"_player");
	HX_MARK_MEMBER_NAME(_moon,"_moon");
	HX_MARK_MEMBER_NAME(_children,"_children");
	HX_MARK_MEMBER_NAME(_killSound,"_killSound");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_ground,"_ground");
	HX_VISIT_MEMBER_NAME(_random,"_random");
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	HX_VISIT_MEMBER_NAME(_player,"_player");
	HX_VISIT_MEMBER_NAME(_moon,"_moon");
	HX_VISIT_MEMBER_NAME(_children,"_children");
	HX_VISIT_MEMBER_NAME(_killSound,"_killSound");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_moon") ) { return hx::Val( _moon); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_timer") ) { return hx::Val( _timer); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_ground") ) { return hx::Val( _ground); }
		if (HX_FIELD_EQ(inName,"_random") ) { return hx::Val( _random); }
		if (HX_FIELD_EQ(inName,"_player") ) { return hx::Val( _player); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_children") ) { return hx::Val( _children); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_killSound") ) { return hx::Val( _killSound); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_moon") ) { _moon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_ground") ) { _ground=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_random") ) { _random=inValue.Cast<  ::flixel::math::FlxRandom >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_player") ) { _player=inValue.Cast<  ::Player >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_children") ) { _children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_killSound") ) { _killSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_ground","\x26","\x34","\x9f","\x8a"));
	outFields->push(HX_HCSTRING("_random","\xa2","\x33","\x06","\x26"));
	outFields->push(HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"));
	outFields->push(HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"));
	outFields->push(HX_HCSTRING("_moon","\xe0","\xf8","\x71","\xfb"));
	outFields->push(HX_HCSTRING("_children","\x9e","\x10","\x00","\xb8"));
	outFields->push(HX_HCSTRING("_killSound","\x12","\x3c","\xcd","\xc9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,_ground),HX_HCSTRING("_ground","\x26","\x34","\x9f","\x8a")},
	{hx::fsObject /*::flixel::math::FlxRandom*/ ,(int)offsetof(PlayState_obj,_random),HX_HCSTRING("_random","\xa2","\x33","\x06","\x26")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,_timer),HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c")},
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,_player),HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,_moon),HX_HCSTRING("_moon","\xe0","\xf8","\x71","\xfb")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(PlayState_obj,_children),HX_HCSTRING("_children","\x9e","\x10","\x00","\xb8")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,_killSound),HX_HCSTRING("_killSound","\x12","\x3c","\xcd","\xc9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("_ground","\x26","\x34","\x9f","\x8a"),
	HX_HCSTRING("_random","\xa2","\x33","\x06","\x26"),
	HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"),
	HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"),
	HX_HCSTRING("_moon","\xe0","\xf8","\x71","\xfb"),
	HX_HCSTRING("_children","\x9e","\x10","\x00","\xb8"),
	HX_HCSTRING("_killSound","\x12","\x3c","\xcd","\xc9"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

