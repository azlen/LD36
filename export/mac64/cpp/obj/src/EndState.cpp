// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EndState
#include <EndState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif


void EndState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACK_FRAME("EndState","new",0xed9e4848,"EndState.new","EndState.hx",21,0xfb535828)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  21)		super::__construct(MaxSize);
            	}

Dynamic EndState_obj::__CreateEmpty() { return new EndState_obj; }

hx::ObjectPtr< EndState_obj > EndState_obj::__new( ::Dynamic MaxSize)
{
	hx::ObjectPtr< EndState_obj > _hx_result = new EndState_obj();
	_hx_result->__construct(MaxSize);
	return _hx_result;
}

Dynamic EndState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EndState_obj > _hx_result = new EndState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void EndState_obj::create(){
            	HX_STACK_FRAME("EndState","create",0xbac2d014,"EndState.create","EndState.hx",24,0xfb535828)
            	HX_STACK_THIS(this)
HXLINE(  25)		HX_VARI(  ::flixel::text::FlxText,_gameover) =  ::flixel::text::FlxText_obj::__new((int)40,(int)100,(int)1000,null(),null(),null());
HXLINE(  26)		_gameover->set_text(HX_("Game Over",42,ac,24,e5));
HXLINE(  27)		_gameover->scrollFactor->set((int)0,(int)0);
HXLINE(  28)		_gameover->setFormat(HX_("assets/Metamorphous-Regular.ttf",9d,32,10,d5),(int)100,(int)-16777216,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  29)		this->add(_gameover);
HXLINE(  31)		HX_VARI(  ::flixel::text::FlxText,_gameover2) =  ::flixel::text::FlxText_obj::__new((int)40,(int)300,(int)1000,null(),null(),null());
HXLINE(  32)		::String _hx_tmp = ::Std_obj::string(::Reg_obj::children);
HXDLIN(  32)		_gameover2->set_text(((HX_("Delicious! you captured ",19,d9,0f,ec) + _hx_tmp) + HX_(" children.",ef,f9,ba,f5)));
HXLINE(  33)		_gameover2->scrollFactor->set((int)0,(int)0);
HXLINE(  34)		_gameover2->setFormat(HX_("assets/Metamorphous-Regular.ttf",9d,32,10,d5),(int)32,(int)-16777216,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  35)		this->add(_gameover2);
HXLINE(  37)		HX_VARI(  ::flixel::ui::FlxButton,_menuBtn) =  ::flixel::ui::FlxButton_obj::__new((int)520,((Float)455.625),HX_("Menu",bf,71,32,33),this->clickMenu_dyn());
HXLINE(  41)		_menuBtn->onOver->sound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/playbtn_hover.wav",24,0b,3b,c4),null(),null(),null(),null(),null(),null(),null());
HXLINE(  42)		_menuBtn->onDown->sound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/playbtn_click.wav",b0,d7,d0,08),null(),null(),null(),null(),null(),null(),null());
HXLINE(  44)		this->add(_menuBtn);
HXLINE(  46)		::flixel::FlxG_obj::camera->bgColor = (int)-11305598;
HXLINE(  47)		this->super::create();
            	}


void EndState_obj::update(Float elapsed){
            	HX_STACK_FRAME("EndState","update",0xc5b8ef21,"EndState.update","EndState.hx",52,0xfb535828)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  52)		this->super::update(elapsed);
            	}


void EndState_obj::clickMenu(){
            	HX_STACK_FRAME("EndState","clickMenu",0x51ca07ef,"EndState.clickMenu","EndState.hx",56,0xfb535828)
            	HX_STACK_THIS(this)
HXLINE(  56)		HX_VARI(  ::flixel::FlxState,nextState) =  ::MenuState_obj::__new(null());
HXDLIN(  56)		Bool _hx_tmp = ::flixel::FlxG_obj::game->_state->switchTo(nextState);
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  56)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EndState_obj,clickMenu,(void))


EndState_obj::EndState_obj()
{
}

hx::Val EndState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clickMenu") ) { return hx::Val( clickMenu_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *EndState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *EndState_obj_sStaticStorageInfo = 0;
#endif

static ::String EndState_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("clickMenu","\x07","\xb2","\x58","\x27"),
	::String(null()) };

static void EndState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EndState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EndState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EndState_obj::__mClass,"__mClass");
};

#endif

hx::Class EndState_obj::__mClass;

void EndState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("EndState","\x56","\xc4","\xba","\x5b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EndState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EndState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EndState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EndState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EndState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EndState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

