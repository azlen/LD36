// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Parser
#include <haxe/xml/Parser.h>
#endif
#ifndef INCLUDED_haxe_xml_XmlParserException
#include <haxe/xml/XmlParserException.h>
#endif

namespace haxe{
namespace xml{

void Parser_obj::__construct() { }

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

hx::ObjectPtr< Parser_obj > Parser_obj::__new()
{
	hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Parser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::haxe::ds::StringMap Parser_obj::escapes;

 ::Xml Parser_obj::parse(::String str,hx::Null< Bool >  __o_strict){
Bool strict = __o_strict.Default(false);
            	HX_STACK_FRAME("haxe.xml.Parser","parse",0x937905c3,"haxe.xml.Parser.parse","/usr/local/lib/haxe/std/haxe/xml/Parser.hx",120,0x9bd139bb)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(strict,"strict")
HXLINE( 121)		HX_VARI(  ::Xml,doc) = ::Xml_obj::createDocument();
HXLINE( 122)		::haxe::xml::Parser_obj::doParse(str,strict,(int)0,doc);
HXLINE( 123)		return doc;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parse,return )

Int Parser_obj::doParse(::String str,Bool strict,hx::Null< Int >  __o_p, ::Xml parent){
Int p = __o_p.Default(0);
            	HX_STACK_FRAME("haxe.xml.Parser","doParse",0x2e9a6a38,"haxe.xml.Parser.doParse","/usr/local/lib/haxe/std/haxe/xml/Parser.hx",127,0x9bd139bb)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(strict,"strict")
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(parent,"parent")
HXLINE( 128)		HX_VARI(  ::Xml,xml) = null();
HXLINE( 129)		HX_VARI( Int,state) = (int)1;
HXLINE( 130)		HX_VARI( Int,next) = (int)1;
HXLINE( 131)		HX_VARI( ::String,aname) = null();
HXLINE( 132)		HX_VARI( Int,start) = (int)0;
HXLINE( 133)		HX_VARI( Int,nsubs) = (int)0;
HXLINE( 134)		HX_VARI( Int,nbrackets) = (int)0;
HXLINE( 135)		HX_VARI( Int,c) = str.cca(p);
HXLINE( 136)		HX_VARI(  ::StringBuf,buf) =  ::StringBuf_obj::__new();
HXLINE( 138)		HX_VARI( Int,escapeNext) = (int)1;
HXLINE( 139)		HX_VARI( Int,attrValQuote) = (int)-1;
HXLINE( 144)		while((c != (int)0)){
HXLINE( 146)			switch((int)(state)){
            				case (int)0: {
HXLINE( 149)					switch((int)(c)){
            						case (int)9: case (int)10: case (int)13: case (int)32: {
            						}
            						break;
            						default:{
HXLINE( 157)							state = next;
HXLINE( 158)							continue;
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 161)					if ((c == (int)60)) {
HXLINE( 164)						state = (int)0;
HXLINE( 165)						next = (int)2;
            					}
            					else {
HXLINE( 167)						start = p;
HXLINE( 168)						state = (int)13;
HXLINE( 169)						continue;
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 195)					switch((int)(c)){
            						case (int)33: {
HXLINE( 198)							Int _hx_tmp = str.cca((p + (int)1));
HXDLIN( 198)							if ((_hx_tmp == (int)91)) {
HXLINE( 200)								hx::AddEq(p,(int)2);
HXLINE( 201)								::String _hx_tmp1 = str.substr(p,(int)6).toUpperCase();
HXDLIN( 201)								if ((_hx_tmp1 != HX_("CDATA[",ce,73,5f,1c))) {
HXLINE( 202)									HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected <![CDATA[",1c,11,1f,2d),str,p));
            								}
HXLINE( 203)								hx::AddEq(p,(int)5);
HXLINE( 204)								state = (int)17;
HXLINE( 205)								start = (p + (int)1);
            							}
            							else {
HXLINE( 207)								Bool _hx_tmp2;
HXDLIN( 207)								Int _hx_tmp3 = str.cca((p + (int)1));
HXDLIN( 207)								if ((_hx_tmp3 != (int)68)) {
HXLINE( 207)									Int _hx_tmp4 = str.cca((p + (int)1));
HXDLIN( 207)									_hx_tmp2 = (_hx_tmp4 == (int)100);
            								}
            								else {
HXLINE( 207)									_hx_tmp2 = true;
            								}
HXDLIN( 207)								if (_hx_tmp2) {
HXLINE( 209)									::String _hx_tmp5 = str.substr((p + (int)2),(int)6).toUpperCase();
HXDLIN( 209)									if ((_hx_tmp5 != HX_("OCTYPE",ce,19,d4,61))) {
HXLINE( 210)										HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected <!DOCTYPE",c5,0b,26,b6),str,p));
            									}
HXLINE( 211)									hx::AddEq(p,(int)8);
HXLINE( 212)									state = (int)16;
HXLINE( 213)									start = (p + (int)1);
            								}
            								else {
HXLINE( 215)									Bool _hx_tmp6;
HXDLIN( 215)									Int _hx_tmp7 = str.cca((p + (int)1));
HXDLIN( 215)									if ((_hx_tmp7 == (int)45)) {
HXLINE( 215)										Int _hx_tmp8 = str.cca((p + (int)2));
HXDLIN( 215)										_hx_tmp6 = (_hx_tmp8 != (int)45);
            									}
            									else {
HXLINE( 215)										_hx_tmp6 = true;
            									}
HXDLIN( 215)									if (_hx_tmp6) {
HXLINE( 216)										HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected <!--",8d,3d,c1,53),str,p));
            									}
            									else {
HXLINE( 219)										hx::AddEq(p,(int)2);
HXLINE( 220)										state = (int)15;
HXLINE( 221)										start = (p + (int)1);
            									}
            								}
            							}
            						}
            						break;
            						case (int)47: {
HXLINE( 227)							Bool _hx_tmp9 = hx::IsNull( parent );
HXDLIN( 227)							if (_hx_tmp9) {
HXLINE( 228)								HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected node name",a1,85,63,3f),str,p));
            							}
HXLINE( 229)							start = (p + (int)1);
HXLINE( 230)							state = (int)0;
HXLINE( 231)							next = (int)10;
            						}
            						break;
            						case (int)63: {
HXLINE( 224)							state = (int)14;
HXLINE( 225)							start = p;
            						}
            						break;
            						default:{
HXLINE( 233)							state = (int)3;
HXLINE( 234)							start = p;
HXLINE( 235)							continue;
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 238)					Bool _hx_tmp10;
HXDLIN( 238)					Bool _hx_tmp11;
HXDLIN( 238)					Bool _hx_tmp12;
HXDLIN( 238)					Bool _hx_tmp13;
HXDLIN( 238)					Bool _hx_tmp14;
HXDLIN( 238)					Bool _hx_tmp15;
HXDLIN( 238)					Bool _hx_tmp16;
HXDLIN( 238)					if ((c >= (int)97)) {
HXLINE( 238)						_hx_tmp16 = (c <= (int)122);
            					}
            					else {
HXLINE( 238)						_hx_tmp16 = false;
            					}
HXDLIN( 238)					if (!(_hx_tmp16)) {
HXLINE( 238)						if ((c >= (int)65)) {
HXLINE( 238)							_hx_tmp15 = (c <= (int)90);
            						}
            						else {
HXLINE( 238)							_hx_tmp15 = false;
            						}
            					}
            					else {
HXLINE( 238)						_hx_tmp15 = true;
            					}
HXDLIN( 238)					if (!(_hx_tmp15)) {
HXLINE( 238)						if ((c >= (int)48)) {
HXLINE( 238)							_hx_tmp14 = (c <= (int)57);
            						}
            						else {
HXLINE( 238)							_hx_tmp14 = false;
            						}
            					}
            					else {
HXLINE( 238)						_hx_tmp14 = true;
            					}
HXDLIN( 238)					if (!(_hx_tmp14)) {
HXLINE( 238)						_hx_tmp13 = (c == (int)58);
            					}
            					else {
HXLINE( 238)						_hx_tmp13 = true;
            					}
HXDLIN( 238)					if (!(_hx_tmp13)) {
HXLINE( 238)						_hx_tmp12 = (c == (int)46);
            					}
            					else {
HXLINE( 238)						_hx_tmp12 = true;
            					}
HXDLIN( 238)					if (!(_hx_tmp12)) {
HXLINE( 238)						_hx_tmp11 = (c == (int)95);
            					}
            					else {
HXLINE( 238)						_hx_tmp11 = true;
            					}
HXDLIN( 238)					if (!(_hx_tmp11)) {
HXLINE( 238)						_hx_tmp10 = (c == (int)45);
            					}
            					else {
HXLINE( 238)						_hx_tmp10 = true;
            					}
HXDLIN( 238)					if (!(_hx_tmp10)) {
HXLINE( 240)						if ((p == start)) {
HXLINE( 241)							HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected node name",a1,85,63,3f),str,p));
            						}
HXLINE( 242)						::String _hx_tmp17 = str.substr(start,(p - start));
HXDLIN( 242)						xml = ::Xml_obj::createElement(_hx_tmp17);
HXLINE( 243)						{
HXLINE( 243)							parent->addChild(xml);
HXDLIN( 243)							++nsubs;
            						}
HXLINE( 244)						state = (int)0;
HXLINE( 245)						next = (int)4;
HXLINE( 246)						continue;
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 249)					switch((int)(c)){
            						case (int)47: {
HXLINE( 252)							state = (int)11;
            						}
            						break;
            						case (int)62: {
HXLINE( 254)							state = (int)9;
            						}
            						break;
            						default:{
HXLINE( 256)							state = (int)5;
HXLINE( 257)							start = p;
HXLINE( 258)							continue;
            						}
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 261)					Bool _hx_tmp18;
HXDLIN( 261)					Bool _hx_tmp19;
HXDLIN( 261)					Bool _hx_tmp20;
HXDLIN( 261)					Bool _hx_tmp21;
HXDLIN( 261)					Bool _hx_tmp22;
HXDLIN( 261)					Bool _hx_tmp23;
HXDLIN( 261)					Bool _hx_tmp24;
HXDLIN( 261)					if ((c >= (int)97)) {
HXLINE( 261)						_hx_tmp24 = (c <= (int)122);
            					}
            					else {
HXLINE( 261)						_hx_tmp24 = false;
            					}
HXDLIN( 261)					if (!(_hx_tmp24)) {
HXLINE( 261)						if ((c >= (int)65)) {
HXLINE( 261)							_hx_tmp23 = (c <= (int)90);
            						}
            						else {
HXLINE( 261)							_hx_tmp23 = false;
            						}
            					}
            					else {
HXLINE( 261)						_hx_tmp23 = true;
            					}
HXDLIN( 261)					if (!(_hx_tmp23)) {
HXLINE( 261)						if ((c >= (int)48)) {
HXLINE( 261)							_hx_tmp22 = (c <= (int)57);
            						}
            						else {
HXLINE( 261)							_hx_tmp22 = false;
            						}
            					}
            					else {
HXLINE( 261)						_hx_tmp22 = true;
            					}
HXDLIN( 261)					if (!(_hx_tmp22)) {
HXLINE( 261)						_hx_tmp21 = (c == (int)58);
            					}
            					else {
HXLINE( 261)						_hx_tmp21 = true;
            					}
HXDLIN( 261)					if (!(_hx_tmp21)) {
HXLINE( 261)						_hx_tmp20 = (c == (int)46);
            					}
            					else {
HXLINE( 261)						_hx_tmp20 = true;
            					}
HXDLIN( 261)					if (!(_hx_tmp20)) {
HXLINE( 261)						_hx_tmp19 = (c == (int)95);
            					}
            					else {
HXLINE( 261)						_hx_tmp19 = true;
            					}
HXDLIN( 261)					if (!(_hx_tmp19)) {
HXLINE( 261)						_hx_tmp18 = (c == (int)45);
            					}
            					else {
HXLINE( 261)						_hx_tmp18 = true;
            					}
HXDLIN( 261)					if (!(_hx_tmp18)) {
HXLINE( 263)						HX_VAR( ::String,tmp);
HXLINE( 264)						if ((start == p)) {
HXLINE( 265)							HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected attribute name",57,65,2b,54),str,p));
            						}
HXLINE( 266)						tmp = str.substr(start,(p - start));
HXLINE( 267)						aname = tmp;
HXLINE( 268)						Bool _hx_tmp25 = xml->exists(tmp);
HXDLIN( 268)						if (_hx_tmp25) {
HXLINE( 269)							HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(((HX_("Duplicate attribute [",22,75,cb,05) + tmp) + HX_("]",5d,00,00,00)),str,p));
            						}
HXLINE( 270)						state = (int)0;
HXLINE( 271)						next = (int)6;
HXLINE( 272)						continue;
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 275)					if ((c == (int)61)) {
HXLINE( 278)						state = (int)0;
HXLINE( 279)						next = (int)7;
            					}
            					else {
HXLINE( 281)						HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected =",b5,dc,23,c6),str,p));
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 284)					switch((int)(c)){
            						case (int)34: case (int)39: {
HXLINE( 287)							buf =  ::StringBuf_obj::__new();
HXLINE( 288)							state = (int)8;
HXLINE( 289)							start = (p + (int)1);
HXLINE( 290)							attrValQuote = c;
            						}
            						break;
            						default:{
HXLINE( 292)							HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected \"",9a,dc,23,c6),str,p));
            						}
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 295)					switch((int)(c)){
            						case (int)38: {
HXLINE( 297)							{
HXLINE( 297)								Bool _hx_tmp26 = hx::IsNotNull( buf->charBuf );
HXDLIN( 297)								if (_hx_tmp26) {
HXLINE( 297)									buf->flush();
            								}
HXDLIN( 297)								::String _hx_tmp27 = str.substr(start,(p - start));
HXDLIN( 297)								buf->b->push(_hx_tmp27);
            							}
HXLINE( 298)							state = (int)18;
HXLINE( 299)							escapeNext = (int)8;
HXLINE( 300)							start = (p + (int)1);
            						}
            						break;
            						case (int)60: case (int)62: {
HXLINE( 301)							if (strict) {
HXLINE( 303)								HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(((HX_("Invalid unescaped ",ff,da,cb,cc) + ::String::fromCharCode(c)) + HX_(" in attribute value",52,5a,ca,13)),str,p));
            							}
            							else {
HXLINE( 304)								if ((c == attrValQuote)) {
HXLINE( 305)									{
HXLINE( 305)										Bool _hx_tmp28 = hx::IsNotNull( buf->charBuf );
HXDLIN( 305)										if (_hx_tmp28) {
HXLINE( 305)											buf->flush();
            										}
HXDLIN( 305)										::String _hx_tmp29 = str.substr(start,(p - start));
HXDLIN( 305)										buf->b->push(_hx_tmp29);
            									}
HXLINE( 306)									Bool _hx_tmp30 = hx::IsNotNull( buf->charBuf );
HXDLIN( 306)									if (_hx_tmp30) {
HXLINE( 306)										buf->flush();
            									}
HXDLIN( 306)									HX_VARI( ::String,val) = buf->b->join(HX_("",00,00,00,00));
HXLINE( 307)									buf =  ::StringBuf_obj::__new();
HXLINE( 308)									xml->set(aname,val);
HXLINE( 309)									state = (int)0;
HXLINE( 310)									next = (int)4;
            								}
            							}
            						}
            						break;
            						default:{
HXLINE( 304)							if ((c == attrValQuote)) {
HXLINE( 305)								{
HXLINE( 305)									Bool _hx_tmp31 = hx::IsNotNull( buf->charBuf );
HXDLIN( 305)									if (_hx_tmp31) {
HXLINE( 305)										buf->flush();
            									}
HXDLIN( 305)									::String _hx_tmp32 = str.substr(start,(p - start));
HXDLIN( 305)									buf->b->push(_hx_tmp32);
            								}
HXLINE( 306)								Bool _hx_tmp33 = hx::IsNotNull( buf->charBuf );
HXDLIN( 306)								if (_hx_tmp33) {
HXLINE( 306)									buf->flush();
            								}
HXDLIN( 306)								HX_VARI_NAME( ::String,val1,"val") = buf->b->join(HX_("",00,00,00,00));
HXLINE( 307)								buf =  ::StringBuf_obj::__new();
HXLINE( 308)								xml->set(aname,val1);
HXLINE( 309)								state = (int)0;
HXLINE( 310)								next = (int)4;
            							}
            						}
            					}
            				}
            				break;
            				case (int)9: {
HXLINE( 313)					p = ::haxe::xml::Parser_obj::doParse(str,strict,p,xml);
HXLINE( 314)					start = p;
HXLINE( 315)					state = (int)1;
            				}
            				break;
            				case (int)10: {
HXLINE( 335)					Bool _hx_tmp34;
HXDLIN( 335)					Bool _hx_tmp35;
HXDLIN( 335)					Bool _hx_tmp36;
HXDLIN( 335)					Bool _hx_tmp37;
HXDLIN( 335)					Bool _hx_tmp38;
HXDLIN( 335)					Bool _hx_tmp39;
HXDLIN( 335)					Bool _hx_tmp40;
HXDLIN( 335)					if ((c >= (int)97)) {
HXLINE( 335)						_hx_tmp40 = (c <= (int)122);
            					}
            					else {
HXLINE( 335)						_hx_tmp40 = false;
            					}
HXDLIN( 335)					if (!(_hx_tmp40)) {
HXLINE( 335)						if ((c >= (int)65)) {
HXLINE( 335)							_hx_tmp39 = (c <= (int)90);
            						}
            						else {
HXLINE( 335)							_hx_tmp39 = false;
            						}
            					}
            					else {
HXLINE( 335)						_hx_tmp39 = true;
            					}
HXDLIN( 335)					if (!(_hx_tmp39)) {
HXLINE( 335)						if ((c >= (int)48)) {
HXLINE( 335)							_hx_tmp38 = (c <= (int)57);
            						}
            						else {
HXLINE( 335)							_hx_tmp38 = false;
            						}
            					}
            					else {
HXLINE( 335)						_hx_tmp38 = true;
            					}
HXDLIN( 335)					if (!(_hx_tmp38)) {
HXLINE( 335)						_hx_tmp37 = (c == (int)58);
            					}
            					else {
HXLINE( 335)						_hx_tmp37 = true;
            					}
HXDLIN( 335)					if (!(_hx_tmp37)) {
HXLINE( 335)						_hx_tmp36 = (c == (int)46);
            					}
            					else {
HXLINE( 335)						_hx_tmp36 = true;
            					}
HXDLIN( 335)					if (!(_hx_tmp36)) {
HXLINE( 335)						_hx_tmp35 = (c == (int)95);
            					}
            					else {
HXLINE( 335)						_hx_tmp35 = true;
            					}
HXDLIN( 335)					if (!(_hx_tmp35)) {
HXLINE( 335)						_hx_tmp34 = (c == (int)45);
            					}
            					else {
HXLINE( 335)						_hx_tmp34 = true;
            					}
HXDLIN( 335)					if (!(_hx_tmp34)) {
HXLINE( 337)						if ((start == p)) {
HXLINE( 338)							HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected node name",a1,85,63,3f),str,p));
            						}
HXLINE( 340)						HX_VARI( ::String,v) = str.substr(start,(p - start));
HXLINE( 341)						if ((parent->nodeType != ::Xml_obj::Element)) {
HXLINE( 341)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + parent->nodeType));
            						}
HXDLIN( 341)						if ((v != parent->nodeName)) {
HXLINE( 342)							if ((parent->nodeType != ::Xml_obj::Element)) {
HXLINE( 342)								HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + parent->nodeType));
            							}
HXDLIN( 342)							HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(((HX_("Expected </",fb,40,3d,99) + parent->nodeName) + HX_(">",3e,00,00,00)),str,p));
            						}
HXLINE( 344)						state = (int)0;
HXLINE( 345)						next = (int)12;
HXLINE( 346)						continue;
            					}
            				}
            				break;
            				case (int)11: {
HXLINE( 317)					if ((c == (int)62)) {
HXLINE( 320)						state = (int)1;
            					}
            					else {
HXLINE( 322)						HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected >",b6,dc,23,c6),str,p));
            					}
            				}
            				break;
            				case (int)12: {
HXLINE( 325)					if ((c == (int)62)) {
HXLINE( 328)						if ((nsubs == (int)0)) {
HXLINE( 329)							 ::Xml _hx_tmp41 = ::Xml_obj::createPCData(HX_("",00,00,00,00));
HXDLIN( 329)							parent->addChild(_hx_tmp41);
            						}
HXLINE( 330)						return p;
            					}
            					else {
HXLINE( 332)						HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Expected >",b6,dc,23,c6),str,p));
            					}
            				}
            				break;
            				case (int)13: {
HXLINE( 172)					if ((c == (int)60)) {
HXLINE( 174)						{
HXLINE( 174)							Bool _hx_tmp42 = hx::IsNotNull( buf->charBuf );
HXDLIN( 174)							if (_hx_tmp42) {
HXLINE( 174)								buf->flush();
            							}
HXDLIN( 174)							::String _hx_tmp43 = str.substr(start,(p - start));
HXDLIN( 174)							buf->b->push(_hx_tmp43);
            						}
HXLINE( 175)						Bool _hx_tmp44 = hx::IsNotNull( buf->charBuf );
HXDLIN( 175)						if (_hx_tmp44) {
HXLINE( 175)							buf->flush();
            						}
HXDLIN( 175)						::String _hx_tmp45 = buf->b->join(HX_("",00,00,00,00));
HXDLIN( 175)						HX_VARI(  ::Xml,child) = ::Xml_obj::createPCData(_hx_tmp45);
HXLINE( 176)						buf =  ::StringBuf_obj::__new();
HXLINE( 177)						{
HXLINE( 177)							parent->addChild(child);
HXDLIN( 177)							++nsubs;
            						}
HXLINE( 178)						state = (int)0;
HXLINE( 179)						next = (int)2;
            					}
            					else {
HXLINE( 180)						if ((c == (int)38)) {
HXLINE( 181)							{
HXLINE( 181)								Bool _hx_tmp46 = hx::IsNotNull( buf->charBuf );
HXDLIN( 181)								if (_hx_tmp46) {
HXLINE( 181)									buf->flush();
            								}
HXDLIN( 181)								::String _hx_tmp47 = str.substr(start,(p - start));
HXDLIN( 181)								buf->b->push(_hx_tmp47);
            							}
HXLINE( 182)							state = (int)18;
HXLINE( 183)							escapeNext = (int)13;
HXLINE( 184)							start = (p + (int)1);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE( 366)					Bool _hx_tmp48;
HXDLIN( 366)					if ((c == (int)63)) {
HXLINE( 366)						Int _hx_tmp49 = str.cca((p + (int)1));
HXDLIN( 366)						_hx_tmp48 = (_hx_tmp49 == (int)62);
            					}
            					else {
HXLINE( 366)						_hx_tmp48 = false;
            					}
HXDLIN( 366)					if (_hx_tmp48) {
HXLINE( 368)						++p;
HXLINE( 369)						HX_VARI_NAME( ::String,str1,"str") = str.substr((start + (int)1),((p - start) - (int)2));
HXLINE( 370)						{
HXLINE( 370)							 ::Xml xml1 = ::Xml_obj::createProcessingInstruction(str1);
HXDLIN( 370)							parent->addChild(xml1);
HXDLIN( 370)							++nsubs;
            						}
HXLINE( 371)						state = (int)1;
            					}
            				}
            				break;
            				case (int)15: {
HXLINE( 349)					Bool _hx_tmp50;
HXDLIN( 349)					Bool _hx_tmp51;
HXDLIN( 349)					if ((c == (int)45)) {
HXLINE( 349)						Int _hx_tmp52 = str.cca((p + (int)1));
HXDLIN( 349)						_hx_tmp51 = (_hx_tmp52 == (int)45);
            					}
            					else {
HXLINE( 349)						_hx_tmp51 = false;
            					}
HXDLIN( 349)					if (_hx_tmp51) {
HXLINE( 349)						Int _hx_tmp53 = str.cca((p + (int)2));
HXDLIN( 349)						_hx_tmp50 = (_hx_tmp53 == (int)62);
            					}
            					else {
HXLINE( 349)						_hx_tmp50 = false;
            					}
HXDLIN( 349)					if (_hx_tmp50) {
HXLINE( 351)						{
HXLINE( 351)							::String _hx_tmp54 = str.substr(start,(p - start));
HXDLIN( 351)							 ::Xml xml2 = ::Xml_obj::createComment(_hx_tmp54);
HXDLIN( 351)							parent->addChild(xml2);
HXDLIN( 351)							++nsubs;
            						}
HXLINE( 352)						hx::AddEq(p,(int)2);
HXLINE( 353)						state = (int)1;
            					}
            				}
            				break;
            				case (int)16: {
HXLINE( 356)					if ((c == (int)91)) {
HXLINE( 357)						++nbrackets;
            					}
            					else {
HXLINE( 358)						if ((c == (int)93)) {
HXLINE( 359)							--nbrackets;
            						}
            						else {
HXLINE( 360)							Bool _hx_tmp55;
HXDLIN( 360)							if ((c == (int)62)) {
HXLINE( 360)								_hx_tmp55 = (nbrackets == (int)0);
            							}
            							else {
HXLINE( 360)								_hx_tmp55 = false;
            							}
HXDLIN( 360)							if (_hx_tmp55) {
HXLINE( 362)								{
HXLINE( 362)									::String _hx_tmp56 = str.substr(start,(p - start));
HXDLIN( 362)									 ::Xml xml3 = ::Xml_obj::createDocType(_hx_tmp56);
HXDLIN( 362)									parent->addChild(xml3);
HXDLIN( 362)									++nsubs;
            								}
HXLINE( 363)								state = (int)1;
            							}
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE( 187)					Bool _hx_tmp57;
HXDLIN( 187)					Bool _hx_tmp58;
HXDLIN( 187)					if ((c == (int)93)) {
HXLINE( 187)						Int _hx_tmp59 = str.cca((p + (int)1));
HXDLIN( 187)						_hx_tmp58 = (_hx_tmp59 == (int)93);
            					}
            					else {
HXLINE( 187)						_hx_tmp58 = false;
            					}
HXDLIN( 187)					if (_hx_tmp58) {
HXLINE( 187)						Int _hx_tmp60 = str.cca((p + (int)2));
HXDLIN( 187)						_hx_tmp57 = (_hx_tmp60 == (int)62);
            					}
            					else {
HXLINE( 187)						_hx_tmp57 = false;
            					}
HXDLIN( 187)					if (_hx_tmp57) {
HXLINE( 189)						::String _hx_tmp61 = str.substr(start,(p - start));
HXDLIN( 189)						HX_VARI_NAME(  ::Xml,child1,"child") = ::Xml_obj::createCData(_hx_tmp61);
HXLINE( 190)						{
HXLINE( 190)							parent->addChild(child1);
HXDLIN( 190)							++nsubs;
            						}
HXLINE( 191)						hx::AddEq(p,(int)2);
HXLINE( 192)						state = (int)1;
            					}
            				}
            				break;
            				case (int)18: {
HXLINE( 374)					if ((c == (int)59)) {
HXLINE( 376)						HX_VARI( ::String,s) = str.substr(start,(p - start));
HXLINE( 377)						Int _hx_tmp62 = s.cca((int)0);
HXDLIN( 377)						if ((_hx_tmp62 == (int)35)) {
HXLINE( 378)							HX_VAR_NAME(  ::Dynamic,c1,"c");
HXDLIN( 378)							Int _hx_tmp63 = s.cca((int)1);
HXDLIN( 378)							if ((_hx_tmp63 == (int)120)) {
HXLINE( 379)								Int _hx_tmp64 = (s.length - (int)1);
HXDLIN( 379)								::String _hx_tmp65 = s.substr((int)1,_hx_tmp64);
HXLINE( 378)								c1 = ::Std_obj::parseInt((HX_("0",30,00,00,00) + _hx_tmp65));
            							}
            							else {
HXLINE( 380)								Int _hx_tmp66 = (s.length - (int)1);
HXDLIN( 380)								::String _hx_tmp67 = s.substr((int)1,_hx_tmp66);
HXLINE( 378)								c1 = ::Std_obj::parseInt(_hx_tmp67);
            							}
HXLINE( 382)							if (hx::IsGreaterEq( c1,(int)128 )) {
HXLINE( 384)								if (hx::IsLessEq( c1,(int)2047 )) {
HXLINE( 385)									{
HXLINE( 385)										Bool _hx_tmp68 = hx::IsNull( buf->charBuf );
HXDLIN( 385)										if (_hx_tmp68) {
HXLINE( 385)											buf->charBuf = ::Array_obj< char >::__new();
            										}
HXDLIN( 385)										buf->charBuf->push(((int)(int)192 | (int)((int)c1 >> (int)(int)6)));
            									}
HXLINE( 386)									{
HXLINE( 386)										Bool _hx_tmp69 = hx::IsNull( buf->charBuf );
HXDLIN( 386)										if (_hx_tmp69) {
HXLINE( 386)											buf->charBuf = ::Array_obj< char >::__new();
            										}
HXDLIN( 386)										buf->charBuf->push(((int)(int)128 | (int)((int)c1 & (int)(int)63)));
            									}
            								}
            								else {
HXLINE( 387)									if (hx::IsLessEq( c1,(int)65535 )) {
HXLINE( 388)										{
HXLINE( 388)											Bool _hx_tmp70 = hx::IsNull( buf->charBuf );
HXDLIN( 388)											if (_hx_tmp70) {
HXLINE( 388)												buf->charBuf = ::Array_obj< char >::__new();
            											}
HXDLIN( 388)											buf->charBuf->push(((int)(int)224 | (int)((int)c1 >> (int)(int)12)));
            										}
HXLINE( 389)										{
HXLINE( 389)											Bool _hx_tmp71 = hx::IsNull( buf->charBuf );
HXDLIN( 389)											if (_hx_tmp71) {
HXLINE( 389)												buf->charBuf = ::Array_obj< char >::__new();
            											}
HXDLIN( 389)											buf->charBuf->push(((int)(int)128 | (int)((int)((int)c1 >> (int)(int)6) & (int)(int)63)));
            										}
HXLINE( 390)										{
HXLINE( 390)											Bool _hx_tmp72 = hx::IsNull( buf->charBuf );
HXDLIN( 390)											if (_hx_tmp72) {
HXLINE( 390)												buf->charBuf = ::Array_obj< char >::__new();
            											}
HXDLIN( 390)											buf->charBuf->push(((int)(int)128 | (int)((int)c1 & (int)(int)63)));
            										}
            									}
            									else {
HXLINE( 391)										if (hx::IsLessEq( c1,(int)1114111 )) {
HXLINE( 392)											{
HXLINE( 392)												Bool _hx_tmp73 = hx::IsNull( buf->charBuf );
HXDLIN( 392)												if (_hx_tmp73) {
HXLINE( 392)													buf->charBuf = ::Array_obj< char >::__new();
            												}
HXDLIN( 392)												buf->charBuf->push(((int)(int)240 | (int)((int)c1 >> (int)(int)18)));
            											}
HXLINE( 393)											{
HXLINE( 393)												Bool _hx_tmp74 = hx::IsNull( buf->charBuf );
HXDLIN( 393)												if (_hx_tmp74) {
HXLINE( 393)													buf->charBuf = ::Array_obj< char >::__new();
            												}
HXDLIN( 393)												buf->charBuf->push(((int)(int)128 | (int)((int)((int)c1 >> (int)(int)12) & (int)(int)63)));
            											}
HXLINE( 394)											{
HXLINE( 394)												Bool _hx_tmp75 = hx::IsNull( buf->charBuf );
HXDLIN( 394)												if (_hx_tmp75) {
HXLINE( 394)													buf->charBuf = ::Array_obj< char >::__new();
            												}
HXDLIN( 394)												buf->charBuf->push(((int)(int)128 | (int)((int)((int)c1 >> (int)(int)6) & (int)(int)63)));
            											}
HXLINE( 395)											{
HXLINE( 395)												Bool _hx_tmp76 = hx::IsNull( buf->charBuf );
HXDLIN( 395)												if (_hx_tmp76) {
HXLINE( 395)													buf->charBuf = ::Array_obj< char >::__new();
            												}
HXDLIN( 395)												buf->charBuf->push(((int)(int)128 | (int)((int)c1 & (int)(int)63)));
            											}
            										}
            										else {
HXLINE( 397)											HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new((HX_("Cannot encode UTF8-char ",db,8e,93,f7) + c1),str,p));
            										}
            									}
            								}
            							}
            							else {
HXLINE( 400)								Int c2 = c1;
HXDLIN( 400)								Bool _hx_tmp77 = hx::IsNull( buf->charBuf );
HXDLIN( 400)								if (_hx_tmp77) {
HXLINE( 400)									buf->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN( 400)								buf->charBuf->push(c2);
            							}
            						}
            						else {
HXLINE( 401)							Bool _hx_tmp78 = !(::haxe::xml::Parser_obj::escapes->exists(s));
HXDLIN( 401)							if (_hx_tmp78) {
HXLINE( 402)								if (strict) {
HXLINE( 403)									HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new((HX_("Undefined entity: ",39,48,f2,48) + s),str,p));
            								}
HXLINE( 404)								{
HXLINE( 404)									Bool _hx_tmp79 = hx::IsNotNull( buf->charBuf );
HXDLIN( 404)									if (_hx_tmp79) {
HXLINE( 404)										buf->flush();
            									}
HXDLIN( 404)									::String _hx_tmp80 = ::Std_obj::string(((HX_("&",26,00,00,00) + s) + HX_(";",3b,00,00,00)));
HXDLIN( 404)									buf->b->push(_hx_tmp80);
            								}
            							}
            							else {
HXLINE( 406)								::String x = ( (::String)(::haxe::xml::Parser_obj::escapes->get(s)) );
HXDLIN( 406)								Bool _hx_tmp81 = hx::IsNotNull( buf->charBuf );
HXDLIN( 406)								if (_hx_tmp81) {
HXLINE( 406)									buf->flush();
            								}
HXDLIN( 406)								::String _hx_tmp82 = ::Std_obj::string(x);
HXDLIN( 406)								buf->b->push(_hx_tmp82);
            							}
            						}
HXLINE( 408)						start = (p + (int)1);
HXLINE( 409)						state = escapeNext;
            					}
            					else {
HXLINE( 410)						Bool _hx_tmp83;
HXDLIN( 410)						Bool _hx_tmp84;
HXDLIN( 410)						Bool _hx_tmp85;
HXDLIN( 410)						Bool _hx_tmp86;
HXDLIN( 410)						Bool _hx_tmp87;
HXDLIN( 410)						Bool _hx_tmp88;
HXDLIN( 410)						Bool _hx_tmp89;
HXDLIN( 410)						Bool _hx_tmp90;
HXDLIN( 410)						if ((c >= (int)97)) {
HXLINE( 410)							_hx_tmp90 = (c <= (int)122);
            						}
            						else {
HXLINE( 410)							_hx_tmp90 = false;
            						}
HXDLIN( 410)						if (!(_hx_tmp90)) {
HXLINE( 410)							if ((c >= (int)65)) {
HXLINE( 410)								_hx_tmp89 = (c <= (int)90);
            							}
            							else {
HXLINE( 410)								_hx_tmp89 = false;
            							}
            						}
            						else {
HXLINE( 410)							_hx_tmp89 = true;
            						}
HXDLIN( 410)						if (!(_hx_tmp89)) {
HXLINE( 410)							if ((c >= (int)48)) {
HXLINE( 410)								_hx_tmp88 = (c <= (int)57);
            							}
            							else {
HXLINE( 410)								_hx_tmp88 = false;
            							}
            						}
            						else {
HXLINE( 410)							_hx_tmp88 = true;
            						}
HXDLIN( 410)						if (!(_hx_tmp88)) {
HXLINE( 410)							_hx_tmp87 = (c == (int)58);
            						}
            						else {
HXLINE( 410)							_hx_tmp87 = true;
            						}
HXDLIN( 410)						if (!(_hx_tmp87)) {
HXLINE( 410)							_hx_tmp86 = (c == (int)46);
            						}
            						else {
HXLINE( 410)							_hx_tmp86 = true;
            						}
HXDLIN( 410)						if (!(_hx_tmp86)) {
HXLINE( 410)							_hx_tmp85 = (c == (int)95);
            						}
            						else {
HXLINE( 410)							_hx_tmp85 = true;
            						}
HXDLIN( 410)						if (!(_hx_tmp85)) {
HXLINE( 410)							_hx_tmp84 = (c == (int)45);
            						}
            						else {
HXLINE( 410)							_hx_tmp84 = true;
            						}
HXDLIN( 410)						if (!(_hx_tmp84)) {
HXLINE( 410)							_hx_tmp83 = (c != (int)35);
            						}
            						else {
HXLINE( 410)							_hx_tmp83 = false;
            						}
HXDLIN( 410)						if (_hx_tmp83) {
HXLINE( 411)							if (strict) {
HXLINE( 412)								HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new((HX_("Invalid character in entity: ",24,85,11,30) + ::String::fromCharCode(c)),str,p));
            							}
HXLINE( 413)							{
HXLINE( 413)								Bool _hx_tmp91 = hx::IsNull( buf->charBuf );
HXDLIN( 413)								if (_hx_tmp91) {
HXLINE( 413)									buf->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN( 413)								buf->charBuf->push((int)38);
            							}
HXLINE( 414)							{
HXLINE( 414)								Bool _hx_tmp92 = hx::IsNotNull( buf->charBuf );
HXDLIN( 414)								if (_hx_tmp92) {
HXLINE( 414)									buf->flush();
            								}
HXDLIN( 414)								::String _hx_tmp93 = str.substr(start,(p - start));
HXDLIN( 414)								buf->b->push(_hx_tmp93);
            							}
HXLINE( 416)							start = p--;
HXLINE( 417)							state = escapeNext;
            						}
            					}
            				}
            				break;
            			}
HXLINE( 420)			Int index = ++p;
HXDLIN( 420)			c = str.cca(index);
            		}
HXLINE( 423)		Bool _hx_tmp94 = (state == (int)1);
HXDLIN( 423)		if (_hx_tmp94) {
HXLINE( 425)			start = p;
HXLINE( 426)			state = (int)13;
            		}
HXLINE( 429)		if ((state == (int)13)) {
HXLINE( 431)			Bool _hx_tmp95;
HXDLIN( 431)			if ((p == start)) {
HXLINE( 431)				_hx_tmp95 = (nsubs == (int)0);
            			}
            			else {
HXLINE( 431)				_hx_tmp95 = true;
            			}
HXDLIN( 431)			if (_hx_tmp95) {
HXLINE( 432)				{
HXLINE( 432)					Bool _hx_tmp96 = hx::IsNotNull( buf->charBuf );
HXDLIN( 432)					if (_hx_tmp96) {
HXLINE( 432)						buf->flush();
            					}
HXDLIN( 432)					::String _hx_tmp97 = str.substr(start,(p - start));
HXDLIN( 432)					buf->b->push(_hx_tmp97);
            				}
HXLINE( 433)				{
HXLINE( 433)					Bool _hx_tmp98 = hx::IsNotNull( buf->charBuf );
HXDLIN( 433)					if (_hx_tmp98) {
HXLINE( 433)						buf->flush();
            					}
HXDLIN( 433)					::String _hx_tmp99 = buf->b->join(HX_("",00,00,00,00));
HXDLIN( 433)					 ::Xml xml4 = ::Xml_obj::createPCData(_hx_tmp99);
HXDLIN( 433)					parent->addChild(xml4);
            				}
            			}
HXLINE( 435)			return p;
            		}
HXLINE( 438)		Bool _hx_tmp100;
HXDLIN( 438)		Bool _hx_tmp101;
HXDLIN( 438)		if (!(strict)) {
HXLINE( 438)			_hx_tmp101 = (state == (int)18);
            		}
            		else {
HXLINE( 438)			_hx_tmp101 = false;
            		}
HXDLIN( 438)		if (_hx_tmp101) {
HXLINE( 438)			_hx_tmp100 = (escapeNext == (int)13);
            		}
            		else {
HXLINE( 438)			_hx_tmp100 = false;
            		}
HXDLIN( 438)		if (_hx_tmp100) {
HXLINE( 439)			{
HXLINE( 439)				Bool _hx_tmp102 = hx::IsNull( buf->charBuf );
HXDLIN( 439)				if (_hx_tmp102) {
HXLINE( 439)					buf->charBuf = ::Array_obj< char >::__new();
            				}
HXDLIN( 439)				buf->charBuf->push((int)38);
            			}
HXLINE( 440)			{
HXLINE( 440)				Bool _hx_tmp103 = hx::IsNotNull( buf->charBuf );
HXDLIN( 440)				if (_hx_tmp103) {
HXLINE( 440)					buf->flush();
            				}
HXDLIN( 440)				::String _hx_tmp104 = str.substr(start,(p - start));
HXDLIN( 440)				buf->b->push(_hx_tmp104);
            			}
HXLINE( 441)			{
HXLINE( 441)				Bool _hx_tmp105 = hx::IsNotNull( buf->charBuf );
HXDLIN( 441)				if (_hx_tmp105) {
HXLINE( 441)					buf->flush();
            				}
HXDLIN( 441)				::String _hx_tmp106 = buf->b->join(HX_("",00,00,00,00));
HXDLIN( 441)				 ::Xml xml5 = ::Xml_obj::createPCData(_hx_tmp106);
HXDLIN( 441)				parent->addChild(xml5);
            			}
HXLINE( 442)			return p;
            		}
HXLINE( 445)		HX_STACK_DO_THROW( ::haxe::xml::XmlParserException_obj::__new(HX_("Unexpected end",2c,3e,ab,50),str,p));
HXDLIN( 445)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Parser_obj,doParse,return )


Parser_obj::Parser_obj()
{
}

bool Parser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"escapes") ) { outValue = escapes; return true; }
		if (HX_FIELD_EQ(inName,"doParse") ) { outValue = doParse_dyn(); return true; }
	}
	return false;
}

bool Parser_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"escapes") ) { escapes=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Parser_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Parser_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Parser_obj::escapes,HX_HCSTRING("escapes","\xd2","\xcd","\x20","\xa4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Parser_obj::escapes,"escapes");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Parser_obj::escapes,"escapes");
};

#endif

hx::Class Parser_obj::__mClass;

static ::String Parser_obj_sStaticFields[] = {
	HX_HCSTRING("escapes","\xd2","\xcd","\x20","\xa4"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("doParse","\xa8","\x70","\x82","\xf0"),
	::String(null())
};

void Parser_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.xml.Parser","\xfe","\x49","\x90","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Parser_obj::__GetStatic;
	__mClass->mSetStaticField = &Parser_obj::__SetStatic;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Parser_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Parser_obj::__boot()
{
{
            	HX_STACK_FRAME("haxe.xml.Parser","boot",0x0af6f0a2,"haxe.xml.Parser.boot","/usr/local/lib/haxe/std/haxe/xml/Parser.hx",104,0x9bd139bb)
HXLINE( 105)		HX_VARI(  ::haxe::ds::StringMap,h) =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 106)		h->set(HX_("lt",88,5e,00,00),HX_("<",3c,00,00,00));
HXLINE( 107)		h->set(HX_("gt",2d,5a,00,00),HX_(">",3e,00,00,00));
HXLINE( 108)		h->set(HX_("amp",04,fa,49,00),HX_("&",26,00,00,00));
HXLINE( 109)		h->set(HX_("quot",09,45,0a,4b),HX_("\"",22,00,00,00));
HXLINE( 110)		h->set(HX_("apos",d3,0f,73,40),HX_("'",27,00,00,00));
HXLINE( 111)		escapes = h;
            	}
}

} // end namespace haxe
} // end namespace xml
