// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

namespace flixel{
namespace group{

void FlxTypedGroup_obj::__construct(hx::Null< Int >  __o_MaxSize){
Int MaxSize = __o_MaxSize.Default(0);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","new",0x9772c4d8,"flixel.group.FlxTypedGroup.new","flixel/group/FlxGroup.hx",16,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  79)		this->_marker = (int)0;
HXLINE(  75)		this->length = (int)0;
HXLINE(  86)		super::__construct();
HXLINE(  88)		this->members = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  89)		Float _hx_tmp = ::Math_obj::abs(MaxSize);
HXDLIN(  89)		Int _hx_tmp1 = ::Std_obj::_hx_int(_hx_tmp);
HXDLIN(  89)		this->set_maxSize(_hx_tmp1);
HXLINE(  90)		this->flixelType = (int)2;
            	}

Dynamic FlxTypedGroup_obj::__CreateEmpty() { return new FlxTypedGroup_obj; }

hx::ObjectPtr< FlxTypedGroup_obj > FlxTypedGroup_obj::__new(hx::Null< Int >  __o_MaxSize)
{
	hx::ObjectPtr< FlxTypedGroup_obj > _hx_result = new FlxTypedGroup_obj();
	_hx_result->__construct(__o_MaxSize);
	return _hx_result;
}

Dynamic FlxTypedGroup_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypedGroup_obj > _hx_result = new FlxTypedGroup_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void FlxTypedGroup_obj::destroy(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","destroy",0x8044bd72,"flixel.group.FlxTypedGroup.destroy","flixel/group/FlxGroup.hx",100,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 101)		this->super::destroy();
HXLINE( 103)		Bool _hx_tmp = hx::IsNotNull( this->members );
HXDLIN( 103)		if (_hx_tmp) {
HXLINE( 105)			HX_VARI( Int,i) = (int)0;
HXLINE( 106)			HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 108)			while((i < this->length)){
HXLINE( 110)				Int _hx_tmp1 = i++;
HXDLIN( 110)				basic = this->members->__get(_hx_tmp1);
HXLINE( 112)				Bool _hx_tmp2 = hx::IsNotNull( basic );
HXDLIN( 112)				if (_hx_tmp2) {
HXLINE( 113)					basic->destroy();
            				}
            			}
HXLINE( 116)			this->members = null();
            		}
            	}


void FlxTypedGroup_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","update",0x4e08ac91,"flixel.group.FlxTypedGroup.update","flixel/group/FlxGroup.hx",124,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 125)		HX_VARI( Int,i) = (int)0;
HXLINE( 126)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 128)		while((i < this->length)){
HXLINE( 130)			Int _hx_tmp = i++;
HXDLIN( 130)			basic = this->members->__get(_hx_tmp);
HXLINE( 132)			Bool _hx_tmp1;
HXDLIN( 132)			Bool _hx_tmp2;
HXDLIN( 132)			Bool _hx_tmp3 = hx::IsNotNull( basic );
HXDLIN( 132)			if (_hx_tmp3) {
HXLINE( 132)				_hx_tmp2 = basic->exists;
            			}
            			else {
HXLINE( 132)				_hx_tmp2 = false;
            			}
HXDLIN( 132)			if (_hx_tmp2) {
HXLINE( 132)				_hx_tmp1 = basic->active;
            			}
            			else {
HXLINE( 132)				_hx_tmp1 = false;
            			}
HXDLIN( 132)			if (_hx_tmp1) {
HXLINE( 134)				basic->update(elapsed);
            			}
            		}
            	}


void FlxTypedGroup_obj::draw(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","draw",0xe667208c,"flixel.group.FlxTypedGroup.draw","flixel/group/FlxGroup.hx",143,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 144)		HX_VARI( Int,i) = (int)0;
HXLINE( 145)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 147)		while((i < this->length)){
HXLINE( 149)			Int _hx_tmp = i++;
HXDLIN( 149)			basic = this->members->__get(_hx_tmp);
HXLINE( 151)			Bool _hx_tmp1;
HXDLIN( 151)			Bool _hx_tmp2;
HXDLIN( 151)			Bool _hx_tmp3 = hx::IsNotNull( basic );
HXDLIN( 151)			if (_hx_tmp3) {
HXLINE( 151)				_hx_tmp2 = basic->exists;
            			}
            			else {
HXLINE( 151)				_hx_tmp2 = false;
            			}
HXDLIN( 151)			if (_hx_tmp2) {
HXLINE( 151)				_hx_tmp1 = basic->visible;
            			}
            			else {
HXLINE( 151)				_hx_tmp1 = false;
            			}
HXDLIN( 151)			if (_hx_tmp1) {
HXLINE( 153)				basic->draw();
            			}
            		}
            	}


 ::Dynamic FlxTypedGroup_obj::add( ::Dynamic Object){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","add",0x9768e699,"flixel.group.FlxTypedGroup.add","flixel/group/FlxGroup.hx",169,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Object,"Object")
HXLINE( 170)		Bool _hx_tmp = hx::IsNull( Object );
HXDLIN( 170)		if (_hx_tmp) {
HXLINE( 173)			return null();
            		}
HXLINE( 177)		Int _hx_tmp1 = this->members->indexOf(Object,null());
HXDLIN( 177)		if ((_hx_tmp1 >= (int)0)) {
HXLINE( 179)			return Object;
            		}
HXLINE( 183)		HX_VARI( Int,index) = this->getFirstNull();
HXLINE( 184)		if ((index != (int)-1)) {
HXLINE( 186)			this->members->set(index,Object);
HXLINE( 188)			Bool _hx_tmp2 = (index >= this->length);
HXDLIN( 188)			if (_hx_tmp2) {
HXLINE( 190)				this->length = (index + (int)1);
            			}
HXLINE( 193)			return Object;
            		}
HXLINE( 197)		Bool _hx_tmp3;
HXDLIN( 197)		if ((this->maxSize > (int)0)) {
HXLINE( 197)			_hx_tmp3 = (this->length >= this->maxSize);
            		}
            		else {
HXLINE( 197)			_hx_tmp3 = false;
            		}
HXDLIN( 197)		if (_hx_tmp3) {
HXLINE( 199)			return Object;
            		}
HXLINE( 203)		this->members->push(Object);
HXLINE( 204)		this->length++;
HXLINE( 206)		return Object;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,add,return )

 ::Dynamic FlxTypedGroup_obj::insert(Int position, ::Dynamic object){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","insert",0x64e069c1,"flixel.group.FlxTypedGroup.insert","flixel/group/FlxGroup.hx",221,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(position,"position")
            	HX_STACK_ARG(object,"object")
HXLINE( 222)		Bool _hx_tmp = hx::IsNull( object );
HXDLIN( 222)		if (_hx_tmp) {
HXLINE( 225)			return null();
            		}
HXLINE( 229)		Int _hx_tmp1 = this->members->indexOf(object,null());
HXDLIN( 229)		if ((_hx_tmp1 >= (int)0)) {
HXLINE( 231)			return object;
            		}
HXLINE( 235)		Bool _hx_tmp2;
HXDLIN( 235)		if ((position < this->length)) {
HXLINE( 235)			_hx_tmp2 = hx::IsNull( this->members->__get(position) );
            		}
            		else {
HXLINE( 235)			_hx_tmp2 = false;
            		}
HXDLIN( 235)		if (_hx_tmp2) {
HXLINE( 237)			this->members->set(position,object);
HXLINE( 238)			return object;
            		}
HXLINE( 242)		Bool _hx_tmp3;
HXDLIN( 242)		if ((this->maxSize > (int)0)) {
HXLINE( 242)			_hx_tmp3 = (this->length >= this->maxSize);
            		}
            		else {
HXLINE( 242)			_hx_tmp3 = false;
            		}
HXDLIN( 242)		if (_hx_tmp3) {
HXLINE( 244)			return object;
            		}
HXLINE( 248)		this->members->insert(position,object);
HXLINE( 249)		this->length++;
HXLINE( 251)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,insert,return )

 ::Dynamic FlxTypedGroup_obj::recycle(hx::Class ObjectClass, ::Dynamic ObjectFactory,hx::Null< Bool >  __o_Force,hx::Null< Bool >  __o_Revive){
Bool Force = __o_Force.Default(false);
Bool Revive = __o_Revive.Default(true);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","recycle",0x934aa08b,"flixel.group.FlxTypedGroup.recycle","flixel/group/FlxGroup.hx",277,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(ObjectFactory,"ObjectFactory")
            	HX_STACK_ARG(Force,"Force")
            	HX_STACK_ARG(Revive,"Revive")
HXLINE( 278)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 281)		Bool _hx_tmp = (this->maxSize > (int)0);
HXDLIN( 281)		if (_hx_tmp) {
HXLINE( 284)			Bool _hx_tmp1 = (this->length < this->maxSize);
HXDLIN( 284)			if (_hx_tmp1) {
HXLINE( 286)				HX_VARI(  ::Dynamic,object) = null();
HXDLIN( 286)				Bool _hx_tmp2 = hx::IsNotNull( ObjectFactory );
HXDLIN( 286)				if (_hx_tmp2) {
HXLINE( 286)					object = ObjectFactory();
HXDLIN( 286)					this->add(object);
            				}
            				else {
HXLINE( 286)					Bool _hx_tmp3 = hx::IsNotNull( ObjectClass );
HXDLIN( 286)					if (_hx_tmp3) {
HXLINE( 286)						object = ::Type_obj::createInstance(ObjectClass,::cpp::VirtualArray_obj::__new(0));
HXDLIN( 286)						this->add(object);
            					}
            				}
HXDLIN( 286)				return object;
            			}
            			else {
HXLINE( 291)				basic = this->members->__get(this->_marker++);
HXLINE( 293)				Bool _hx_tmp4 = (this->_marker >= this->maxSize);
HXDLIN( 293)				if (_hx_tmp4) {
HXLINE( 295)					this->_marker = (int)0;
            				}
HXLINE( 298)				if (Revive) {
HXLINE( 300)					basic->revive();
            				}
HXLINE( 303)				return basic;
            			}
            		}
            		else {
HXLINE( 309)			basic = this->getFirstAvailable(ObjectClass,Force);
HXLINE( 311)			Bool _hx_tmp5 = hx::IsNotNull( basic );
HXDLIN( 311)			if (_hx_tmp5) {
HXLINE( 313)				if (Revive) {
HXLINE( 315)					basic->revive();
            				}
HXLINE( 317)				return basic;
            			}
HXLINE( 320)			HX_VARI_NAME(  ::Dynamic,object1,"object") = null();
HXDLIN( 320)			Bool _hx_tmp6 = hx::IsNotNull( ObjectFactory );
HXDLIN( 320)			if (_hx_tmp6) {
HXLINE( 320)				object1 = ObjectFactory();
HXDLIN( 320)				this->add(object1);
            			}
            			else {
HXLINE( 320)				Bool _hx_tmp7 = hx::IsNotNull( ObjectClass );
HXDLIN( 320)				if (_hx_tmp7) {
HXLINE( 320)					object1 = ::Type_obj::createInstance(ObjectClass,::cpp::VirtualArray_obj::__new(0));
HXDLIN( 320)					this->add(object1);
            				}
            			}
HXDLIN( 320)			return object1;
            		}
HXLINE( 281)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTypedGroup_obj,recycle,return )

 ::Dynamic FlxTypedGroup_obj::recycleCreateObject(hx::Class ObjectClass, ::Dynamic ObjectFactory){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","recycleCreateObject",0x87e5d006,"flixel.group.FlxTypedGroup.recycleCreateObject","flixel/group/FlxGroup.hx",325,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(ObjectFactory,"ObjectFactory")
HXLINE( 326)		HX_VARI(  ::Dynamic,object) = null();
HXLINE( 328)		Bool _hx_tmp = hx::IsNotNull( ObjectFactory );
HXDLIN( 328)		if (_hx_tmp) {
HXLINE( 330)			object = ObjectFactory();
HXDLIN( 330)			this->add(object);
            		}
            		else {
HXLINE( 332)			Bool _hx_tmp1 = hx::IsNotNull( ObjectClass );
HXDLIN( 332)			if (_hx_tmp1) {
HXLINE( 334)				object = ::Type_obj::createInstance(ObjectClass,::cpp::VirtualArray_obj::__new(0));
HXDLIN( 334)				this->add(object);
            			}
            		}
HXLINE( 337)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,recycleCreateObject,return )

 ::Dynamic FlxTypedGroup_obj::remove( ::Dynamic Object,hx::Null< Bool >  __o_Splice){
Bool Splice = __o_Splice.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","remove",0xcb8bc2cc,"flixel.group.FlxTypedGroup.remove","flixel/group/FlxGroup.hx",348,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(Splice,"Splice")
HXLINE( 349)		Bool _hx_tmp = hx::IsNull( this->members );
HXDLIN( 349)		if (_hx_tmp) {
HXLINE( 350)			return null();
            		}
HXLINE( 352)		HX_VARI( Int,index) = this->members->indexOf(Object,null());
HXLINE( 354)		if ((index < (int)0)) {
HXLINE( 355)			return null();
            		}
HXLINE( 357)		if (Splice) {
HXLINE( 358)			this->members->splice(index,(int)1);
            		}
            		else {
HXLINE( 360)			this->members->set(index,null());
            		}
HXLINE( 362)		return Object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,remove,return )

 ::Dynamic FlxTypedGroup_obj::replace( ::Dynamic OldObject, ::Dynamic NewObject){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","replace",0x06e6d8ac,"flixel.group.FlxTypedGroup.replace","flixel/group/FlxGroup.hx",374,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(OldObject,"OldObject")
            	HX_STACK_ARG(NewObject,"NewObject")
HXLINE( 375)		HX_VARI( Int,index) = this->members->indexOf(OldObject,null());
HXLINE( 377)		if ((index < (int)0)) {
HXLINE( 378)			return null();
            		}
HXLINE( 380)		this->members->set(index,NewObject);
HXLINE( 382)		return NewObject;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,replace,return )

void FlxTypedGroup_obj::sort( ::Dynamic Function,hx::Null< Int >  __o_Order){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f,Int,a1) HXARGC(2)
            		Int _hx_run( ::Dynamic a2, ::Dynamic a3){
            			HX_STACK_FRAME("flixel.group.FlxTypedGroup","sort",0xf04f1be6,"flixel.group.FlxTypedGroup.sort","flixel/group/FlxGroup.hx",394,0x1e89d58e)
            			HX_STACK_ARG(a2,"a2")
            			HX_STACK_ARG(a3,"a3")
HXLINE( 394)			return ( (Int)(f(a1,a2,a3)) );
            		}
            		HX_END_LOCAL_FUNC2(return)

Int Order = __o_Order.Default(-1);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","sort",0xf04f1be6,"flixel.group.FlxTypedGroup.sort","flixel/group/FlxGroup.hx",394,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Order,"Order")
HXLINE( 394)		 ::Dynamic f = Function;
HXDLIN( 394)		Int a1 = Order;
HXDLIN( 394)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 394)		this->members->sort(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,sort,(void))

 ::Dynamic FlxTypedGroup_obj::getFirstAvailable(hx::Class ObjectClass,hx::Null< Bool >  __o_Force){
Bool Force = __o_Force.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","getFirstAvailable",0x3f88c127,"flixel.group.FlxTypedGroup.getFirstAvailable","flixel/group/FlxGroup.hx",406,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(Force,"Force")
HXLINE( 407)		HX_VARI( Int,i) = (int)0;
HXLINE( 408)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 410)		while((i < this->length)){
HXLINE( 412)			Int _hx_tmp = i++;
HXDLIN( 412)			basic = this->members->__get(_hx_tmp);
HXLINE( 414)			Bool _hx_tmp1;
HXDLIN( 414)			Bool _hx_tmp2;
HXDLIN( 414)			Bool _hx_tmp3 = hx::IsNotNull( basic );
HXDLIN( 414)			if (_hx_tmp3) {
HXLINE( 414)				_hx_tmp2 = !(basic->exists);
            			}
            			else {
HXLINE( 414)				_hx_tmp2 = false;
            			}
HXDLIN( 414)			if (_hx_tmp2) {
HXLINE( 414)				Bool _hx_tmp4 = hx::IsNotNull( ObjectClass );
HXDLIN( 414)				if (_hx_tmp4) {
HXLINE( 414)					_hx_tmp1 = ::Std_obj::is(basic,ObjectClass);
            				}
            				else {
HXLINE( 414)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE( 414)				_hx_tmp1 = false;
            			}
HXDLIN( 414)			if (_hx_tmp1) {
HXLINE( 416)				Bool _hx_tmp5;
HXDLIN( 416)				if (Force) {
HXLINE( 416)					hx::Class _hx_tmp6 = ::Type_obj::getClass(basic);
HXDLIN( 416)					_hx_tmp5 = (::Type_obj::getClassName(_hx_tmp6) != ::Type_obj::getClassName(ObjectClass));
            				}
            				else {
HXLINE( 416)					_hx_tmp5 = false;
            				}
HXDLIN( 416)				if (_hx_tmp5) {
HXLINE( 418)					continue;
            				}
HXLINE( 420)				return this->members->__get((i - (int)1));
            			}
            		}
HXLINE( 424)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,getFirstAvailable,return )

Int FlxTypedGroup_obj::getFirstNull(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","getFirstNull",0xc17e73e9,"flixel.group.FlxTypedGroup.getFirstNull","flixel/group/FlxGroup.hx",434,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 435)		HX_VARI( Int,i) = (int)0;
HXLINE( 437)		while((i < this->length)){
HXLINE( 439)			Bool _hx_tmp = hx::IsNull( this->members->__get(i) );
HXDLIN( 439)			if (_hx_tmp) {
HXLINE( 441)				return i;
            			}
HXLINE( 443)			++i;
            		}
HXLINE( 446)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstNull,return )

 ::Dynamic FlxTypedGroup_obj::getFirstExisting(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","getFirstExisting",0x314444ed,"flixel.group.FlxTypedGroup.getFirstExisting","flixel/group/FlxGroup.hx",456,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 457)		HX_VARI( Int,i) = (int)0;
HXLINE( 458)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 460)		while((i < this->length)){
HXLINE( 462)			Int _hx_tmp = i++;
HXDLIN( 462)			basic = this->members->__get(_hx_tmp);
HXLINE( 464)			Bool _hx_tmp1;
HXDLIN( 464)			Bool _hx_tmp2 = hx::IsNotNull( basic );
HXDLIN( 464)			if (_hx_tmp2) {
HXLINE( 464)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 464)				_hx_tmp1 = false;
            			}
HXDLIN( 464)			if (_hx_tmp1) {
HXLINE( 466)				return basic;
            			}
            		}
HXLINE( 470)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstExisting,return )

 ::Dynamic FlxTypedGroup_obj::getFirstAlive(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","getFirstAlive",0x0afc442b,"flixel.group.FlxTypedGroup.getFirstAlive","flixel/group/FlxGroup.hx",480,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 481)		HX_VARI( Int,i) = (int)0;
HXLINE( 482)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 484)		while((i < this->length)){
HXLINE( 486)			Int _hx_tmp = i++;
HXDLIN( 486)			basic = this->members->__get(_hx_tmp);
HXLINE( 488)			Bool _hx_tmp1;
HXDLIN( 488)			Bool _hx_tmp2;
HXDLIN( 488)			Bool _hx_tmp3 = hx::IsNotNull( basic );
HXDLIN( 488)			if (_hx_tmp3) {
HXLINE( 488)				_hx_tmp2 = basic->exists;
            			}
            			else {
HXLINE( 488)				_hx_tmp2 = false;
            			}
HXDLIN( 488)			if (_hx_tmp2) {
HXLINE( 488)				_hx_tmp1 = basic->alive;
            			}
            			else {
HXLINE( 488)				_hx_tmp1 = false;
            			}
HXDLIN( 488)			if (_hx_tmp1) {
HXLINE( 490)				return basic;
            			}
            		}
HXLINE( 494)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstAlive,return )

 ::Dynamic FlxTypedGroup_obj::getFirstDead(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","getFirstDead",0xbad62406,"flixel.group.FlxTypedGroup.getFirstDead","flixel/group/FlxGroup.hx",504,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 505)		HX_VARI( Int,i) = (int)0;
HXLINE( 506)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 508)		while((i < this->length)){
HXLINE( 510)			Int _hx_tmp = i++;
HXDLIN( 510)			basic = this->members->__get(_hx_tmp);
HXLINE( 512)			Bool _hx_tmp1;
HXDLIN( 512)			Bool _hx_tmp2 = hx::IsNotNull( basic );
HXDLIN( 512)			if (_hx_tmp2) {
HXLINE( 512)				_hx_tmp1 = !(basic->alive);
            			}
            			else {
HXLINE( 512)				_hx_tmp1 = false;
            			}
HXDLIN( 512)			if (_hx_tmp1) {
HXLINE( 514)				return basic;
            			}
            		}
HXLINE( 518)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstDead,return )

Int FlxTypedGroup_obj::countLiving(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","countLiving",0x0ee705d0,"flixel.group.FlxTypedGroup.countLiving","flixel/group/FlxGroup.hx",527,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 528)		HX_VARI( Int,i) = (int)0;
HXLINE( 529)		HX_VARI( Int,count) = (int)-1;
HXLINE( 530)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 532)		while((i < this->length)){
HXLINE( 534)			Int _hx_tmp = i++;
HXDLIN( 534)			basic = this->members->__get(_hx_tmp);
HXLINE( 536)			Bool _hx_tmp1 = hx::IsNotNull( basic );
HXDLIN( 536)			if (_hx_tmp1) {
HXLINE( 538)				Bool _hx_tmp2 = (count < (int)0);
HXDLIN( 538)				if (_hx_tmp2) {
HXLINE( 540)					count = (int)0;
            				}
HXLINE( 542)				Bool _hx_tmp3;
HXDLIN( 542)				if (basic->exists) {
HXLINE( 542)					_hx_tmp3 = basic->alive;
            				}
            				else {
HXLINE( 542)					_hx_tmp3 = false;
            				}
HXDLIN( 542)				if (_hx_tmp3) {
HXLINE( 544)					++count;
            				}
            			}
            		}
HXLINE( 549)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,countLiving,return )

Int FlxTypedGroup_obj::countDead(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","countDead",0x0964718b,"flixel.group.FlxTypedGroup.countDead","flixel/group/FlxGroup.hx",558,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 559)		HX_VARI( Int,i) = (int)0;
HXLINE( 560)		HX_VARI( Int,count) = (int)-1;
HXLINE( 561)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 563)		while((i < this->length)){
HXLINE( 565)			Int _hx_tmp = i++;
HXDLIN( 565)			basic = this->members->__get(_hx_tmp);
HXLINE( 567)			Bool _hx_tmp1 = hx::IsNotNull( basic );
HXDLIN( 567)			if (_hx_tmp1) {
HXLINE( 569)				Bool _hx_tmp2 = (count < (int)0);
HXDLIN( 569)				if (_hx_tmp2) {
HXLINE( 571)					count = (int)0;
            				}
HXLINE( 573)				if (!(basic->alive)) {
HXLINE( 575)					++count;
            				}
            			}
            		}
HXLINE( 580)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,countDead,return )

 ::Dynamic FlxTypedGroup_obj::getRandom(hx::Null< Int >  __o_StartIndex,hx::Null< Int >  __o_Length){
Int StartIndex = __o_StartIndex.Default(0);
Int Length = __o_Length.Default(0);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","getRandom",0xe8c349b1,"flixel.group.FlxTypedGroup.getRandom","flixel/group/FlxGroup.hx",591,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(StartIndex,"StartIndex")
            	HX_STACK_ARG(Length,"Length")
HXLINE( 592)		Bool _hx_tmp = (StartIndex < (int)0);
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 594)			StartIndex = (int)0;
            		}
HXLINE( 596)		Bool _hx_tmp1 = (Length <= (int)0);
HXDLIN( 596)		if (_hx_tmp1) {
HXLINE( 598)			Length = this->length;
            		}
HXLINE( 601)		return ::flixel::FlxG_obj::random->getObject_flixel_group_FlxTypedGroup_T(this->members,null(),StartIndex,Length);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,getRandom,return )

void FlxTypedGroup_obj::clear(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","clear",0x1c7a7405,"flixel.group.FlxTypedGroup.clear","flixel/group/FlxGroup.hx",609,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 610)		this->length = (int)0;
HXLINE( 611)		::flixel::util::FlxArrayUtil_obj::clearArray(this->members,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,clear,(void))

void FlxTypedGroup_obj::kill(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","kill",0xeb00d426,"flixel.group.FlxTypedGroup.kill","flixel/group/FlxGroup.hx",619,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 620)		HX_VARI( Int,i) = (int)0;
HXLINE( 621)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 623)		while((i < this->length)){
HXLINE( 625)			Int _hx_tmp = i++;
HXDLIN( 625)			basic = this->members->__get(_hx_tmp);
HXLINE( 627)			Bool _hx_tmp1;
HXDLIN( 627)			Bool _hx_tmp2 = hx::IsNotNull( basic );
HXDLIN( 627)			if (_hx_tmp2) {
HXLINE( 627)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 627)				_hx_tmp1 = false;
            			}
HXDLIN( 627)			if (_hx_tmp1) {
HXLINE( 629)				basic->kill();
            			}
            		}
HXLINE( 633)		this->super::kill();
            	}


void FlxTypedGroup_obj::revive(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","revive",0xd17a20dd,"flixel.group.FlxTypedGroup.revive","flixel/group/FlxGroup.hx",640,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 641)		HX_VARI( Int,i) = (int)0;
HXLINE( 642)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 644)		while((i < this->length)){
HXLINE( 646)			Int _hx_tmp = i++;
HXDLIN( 646)			basic = this->members->__get(_hx_tmp);
HXLINE( 648)			Bool _hx_tmp1;
HXDLIN( 648)			Bool _hx_tmp2 = hx::IsNotNull( basic );
HXDLIN( 648)			if (_hx_tmp2) {
HXLINE( 648)				_hx_tmp1 = !(basic->exists);
            			}
            			else {
HXLINE( 648)				_hx_tmp1 = false;
            			}
HXDLIN( 648)			if (_hx_tmp1) {
HXLINE( 650)				basic->revive();
            			}
            		}
HXLINE( 654)		this->super::revive();
            	}


 ::flixel::group::FlxTypedGroupIterator FlxTypedGroup_obj::iterator( ::Dynamic filter){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","iterator",0x7e9a2276,"flixel.group.FlxTypedGroup.iterator","flixel/group/FlxGroup.hx",662,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE( 662)		return  ::flixel::group::FlxTypedGroupIterator_obj::__new(this->members,filter);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,iterator,return )

void FlxTypedGroup_obj::forEach( ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","forEach",0x207cba22,"flixel.group.FlxTypedGroup.forEach","flixel/group/FlxGroup.hx",672,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 673)		HX_VARI( Int,i) = (int)0;
HXLINE( 674)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 676)		while((i < this->length)){
HXLINE( 678)			Int _hx_tmp = i++;
HXDLIN( 678)			basic = this->members->__get(_hx_tmp);
HXLINE( 680)			Bool _hx_tmp1 = hx::IsNotNull( basic );
HXDLIN( 680)			if (_hx_tmp1) {
HXLINE( 682)				if (Recurse) {
HXLINE( 684)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 685)					Bool _hx_tmp2 = hx::IsNotNull( group );
HXDLIN( 685)					if (_hx_tmp2) {
HXLINE( 687)						group->forEach(Function,Recurse);
            					}
            				}
HXLINE( 691)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEach,(void))

void FlxTypedGroup_obj::forEachAlive( ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","forEachAlive",0x4c021e4b,"flixel.group.FlxTypedGroup.forEachAlive","flixel/group/FlxGroup.hx",703,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 704)		HX_VARI( Int,i) = (int)0;
HXLINE( 705)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 707)		while((i < this->length)){
HXLINE( 709)			Int _hx_tmp = i++;
HXDLIN( 709)			basic = this->members->__get(_hx_tmp);
HXLINE( 711)			Bool _hx_tmp1;
HXDLIN( 711)			Bool _hx_tmp2;
HXDLIN( 711)			Bool _hx_tmp3 = hx::IsNotNull( basic );
HXDLIN( 711)			if (_hx_tmp3) {
HXLINE( 711)				_hx_tmp2 = basic->exists;
            			}
            			else {
HXLINE( 711)				_hx_tmp2 = false;
            			}
HXDLIN( 711)			if (_hx_tmp2) {
HXLINE( 711)				_hx_tmp1 = basic->alive;
            			}
            			else {
HXLINE( 711)				_hx_tmp1 = false;
            			}
HXDLIN( 711)			if (_hx_tmp1) {
HXLINE( 713)				if (Recurse) {
HXLINE( 715)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 716)					Bool _hx_tmp4 = hx::IsNotNull( group );
HXDLIN( 716)					if (_hx_tmp4) {
HXLINE( 718)						group->forEachAlive(Function,Recurse);
            					}
            				}
HXLINE( 722)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEachAlive,(void))

void FlxTypedGroup_obj::forEachDead( ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","forEachDead",0x5740ede6,"flixel.group.FlxTypedGroup.forEachDead","flixel/group/FlxGroup.hx",734,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 735)		HX_VARI( Int,i) = (int)0;
HXLINE( 736)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 738)		while((i < this->length)){
HXLINE( 740)			Int _hx_tmp = i++;
HXDLIN( 740)			basic = this->members->__get(_hx_tmp);
HXLINE( 742)			Bool _hx_tmp1;
HXDLIN( 742)			Bool _hx_tmp2 = hx::IsNotNull( basic );
HXDLIN( 742)			if (_hx_tmp2) {
HXLINE( 742)				_hx_tmp1 = !(basic->alive);
            			}
            			else {
HXLINE( 742)				_hx_tmp1 = false;
            			}
HXDLIN( 742)			if (_hx_tmp1) {
HXLINE( 744)				if (Recurse) {
HXLINE( 746)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 747)					Bool _hx_tmp3 = hx::IsNotNull( group );
HXDLIN( 747)					if (_hx_tmp3) {
HXLINE( 749)						group->forEachDead(Function,Recurse);
            					}
            				}
HXLINE( 753)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEachDead,(void))

void FlxTypedGroup_obj::forEachExists( ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","forEachExists",0xb812919e,"flixel.group.FlxTypedGroup.forEachExists","flixel/group/FlxGroup.hx",765,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 766)		HX_VARI( Int,i) = (int)0;
HXLINE( 767)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 769)		while((i < this->length)){
HXLINE( 771)			Int _hx_tmp = i++;
HXDLIN( 771)			basic = this->members->__get(_hx_tmp);
HXLINE( 773)			Bool _hx_tmp1;
HXDLIN( 773)			Bool _hx_tmp2 = hx::IsNotNull( basic );
HXDLIN( 773)			if (_hx_tmp2) {
HXLINE( 773)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 773)				_hx_tmp1 = false;
            			}
HXDLIN( 773)			if (_hx_tmp1) {
HXLINE( 775)				if (Recurse) {
HXLINE( 777)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 778)					Bool _hx_tmp3 = hx::IsNotNull( group );
HXDLIN( 778)					if (_hx_tmp3) {
HXLINE( 780)						group->forEachExists(Function,Recurse);
            					}
            				}
HXLINE( 784)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEachExists,(void))

void FlxTypedGroup_obj::forEachOfType(hx::Class ObjectClass, ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","forEachOfType",0x4c90cb33,"flixel.group.FlxTypedGroup.forEachOfType","flixel/group/FlxGroup.hx",797,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 798)		HX_VARI( Int,i) = (int)0;
HXLINE( 799)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 801)		while((i < this->length)){
HXLINE( 803)			Int _hx_tmp = i++;
HXDLIN( 803)			basic = this->members->__get(_hx_tmp);
HXLINE( 805)			Bool _hx_tmp1 = hx::IsNotNull( basic );
HXDLIN( 805)			if (_hx_tmp1) {
HXLINE( 807)				if (Recurse) {
HXLINE( 809)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 810)					Bool _hx_tmp2 = hx::IsNotNull( group );
HXDLIN( 810)					if (_hx_tmp2) {
HXLINE( 812)						group->forEachOfType(ObjectClass,Function,Recurse);
            					}
            				}
HXLINE( 816)				Bool _hx_tmp3 = ::Std_obj::is(basic,ObjectClass);
HXDLIN( 816)				if (_hx_tmp3) {
HXLINE( 817)					Function(basic);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTypedGroup_obj,forEachOfType,(void))

Int FlxTypedGroup_obj::set_maxSize(Int Size){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","set_maxSize",0x3b478d20,"flixel.group.FlxTypedGroup.set_maxSize","flixel/group/FlxGroup.hx",823,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Size,"Size")
HXLINE( 824)		Float _hx_tmp = ::Math_obj::abs(Size);
HXDLIN( 824)		this->maxSize = ::Std_obj::_hx_int(_hx_tmp);
HXLINE( 826)		Bool _hx_tmp1 = (this->_marker >= this->maxSize);
HXDLIN( 826)		if (_hx_tmp1) {
HXLINE( 828)			this->_marker = (int)0;
            		}
HXLINE( 830)		Bool _hx_tmp2;
HXDLIN( 830)		Bool _hx_tmp3;
HXDLIN( 830)		if ((this->maxSize != (int)0)) {
HXLINE( 830)			_hx_tmp3 = hx::IsNull( this->members );
            		}
            		else {
HXLINE( 830)			_hx_tmp3 = true;
            		}
HXDLIN( 830)		if (!(_hx_tmp3)) {
HXLINE( 830)			_hx_tmp2 = (this->maxSize >= this->length);
            		}
            		else {
HXLINE( 830)			_hx_tmp2 = true;
            		}
HXDLIN( 830)		if (_hx_tmp2) {
HXLINE( 832)			return this->maxSize;
            		}
HXLINE( 836)		HX_VARI( Int,i) = this->maxSize;
HXLINE( 837)		HX_VARI( Int,l) = this->length;
HXLINE( 838)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 840)		while((i < l)){
HXLINE( 842)			Int _hx_tmp4 = i++;
HXDLIN( 842)			basic = this->members->__get(_hx_tmp4);
HXLINE( 844)			Bool _hx_tmp5 = hx::IsNotNull( basic );
HXDLIN( 844)			if (_hx_tmp5) {
HXLINE( 845)				basic->destroy();
            			}
            		}
HXLINE( 848)		::flixel::util::FlxArrayUtil_obj::setLength_flixel_group_FlxTypedGroup_T(this->members,this->maxSize);
HXLINE( 849)		this->length = this->members->get_length();
HXLINE( 851)		return this->maxSize;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,set_maxSize,return )

Bool FlxTypedGroup_obj::overlaps( ::Dynamic Callback, ::flixel::group::FlxTypedGroup Group,Float X,Float Y,Bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","overlaps",0x302aab94,"flixel.group.FlxTypedGroup.overlaps","flixel/group/FlxGroup.hx",23,0x1e89d58e)
            	HX_STACK_ARG(Callback,"Callback")
            	HX_STACK_ARG(Group,"Group")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(  24)		HX_VARI( Bool,result) = false;
HXLINE(  25)		Bool _hx_tmp = hx::IsNotNull( Group );
HXDLIN(  25)		if (_hx_tmp) {
HXLINE(  27)			HX_VARI( Int,i) = (int)0;
HXLINE(  28)			HX_VARI( Int,l) = Group->length;
HXLINE(  29)			HX_VAR(  ::flixel::FlxBasic,basic);
HXLINE(  31)			while((i < l)){
HXLINE(  33)				Int _hx_tmp1 = i++;
HXDLIN(  33)				basic = ( ( ::flixel::FlxBasic)(Group->members->__get(_hx_tmp1)) );
HXLINE(  35)				Bool _hx_tmp2;
HXDLIN(  35)				Bool _hx_tmp3 = hx::IsNotNull( basic );
HXDLIN(  35)				if (_hx_tmp3) {
HXLINE(  35)					_hx_tmp2 = ( (Bool)(Callback(basic,X,Y,InScreenSpace,Camera)) );
            				}
            				else {
HXLINE(  35)					_hx_tmp2 = false;
            				}
HXDLIN(  35)				if (_hx_tmp2) {
HXLINE(  37)					result = true;
HXLINE(  38)					goto _hx_goto_18;
            				}
            			}
            			_hx_goto_18:;
            		}
HXLINE(  42)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxTypedGroup_obj,overlaps,return )

 ::flixel::group::FlxTypedGroup FlxTypedGroup_obj::resolveGroup( ::flixel::FlxBasic ObjectOrGroup){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroup","resolveGroup",0x84c4b53b,"flixel.group.FlxTypedGroup.resolveGroup","flixel/group/FlxGroup.hx",46,0x1e89d58e)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
HXLINE(  47)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = null();
HXLINE(  48)		Bool _hx_tmp = hx::IsNotNull( ObjectOrGroup );
HXDLIN(  48)		if (_hx_tmp) {
HXLINE(  50)			if ((ObjectOrGroup->flixelType == (int)2)) {
HXLINE(  52)				group = ( ( ::flixel::group::FlxTypedGroup)(ObjectOrGroup) );
            			}
            			else {
HXLINE(  54)				if ((ObjectOrGroup->flixelType == (int)4)) {
HXLINE(  57)					group = ( ( ::flixel::group::FlxTypedSpriteGroup)(ObjectOrGroup) )->group;
            				}
            			}
            		}
HXLINE(  60)		return group;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,resolveGroup,return )


FlxTypedGroup_obj::FlxTypedGroup_obj()
{
}

void FlxTypedGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedGroup);
	HX_MARK_MEMBER_NAME(members,"members");
	HX_MARK_MEMBER_NAME(maxSize,"maxSize");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(_marker,"_marker");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypedGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(members,"members");
	HX_VISIT_MEMBER_NAME(maxSize,"maxSize");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(_marker,"_marker");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTypedGroup_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		if (HX_FIELD_EQ(inName,"sort") ) { return hx::Val( sort_dyn()); }
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"revive") ) { return hx::Val( revive_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { return hx::Val( members); }
		if (HX_FIELD_EQ(inName,"maxSize") ) { return hx::Val( maxSize); }
		if (HX_FIELD_EQ(inName,"_marker") ) { return hx::Val( _marker); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"recycle") ) { return hx::Val( recycle_dyn()); }
		if (HX_FIELD_EQ(inName,"replace") ) { return hx::Val( replace_dyn()); }
		if (HX_FIELD_EQ(inName,"forEach") ) { return hx::Val( forEach_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"countDead") ) { return hx::Val( countDead_dyn()); }
		if (HX_FIELD_EQ(inName,"getRandom") ) { return hx::Val( getRandom_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"countLiving") ) { return hx::Val( countLiving_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachDead") ) { return hx::Val( forEachDead_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxSize") ) { return hx::Val( set_maxSize_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getFirstNull") ) { return hx::Val( getFirstNull_dyn()); }
		if (HX_FIELD_EQ(inName,"getFirstDead") ) { return hx::Val( getFirstDead_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachAlive") ) { return hx::Val( forEachAlive_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getFirstAlive") ) { return hx::Val( getFirstAlive_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachExists") ) { return hx::Val( forEachExists_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachOfType") ) { return hx::Val( forEachOfType_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getFirstExisting") ) { return hx::Val( getFirstExisting_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getFirstAvailable") ) { return hx::Val( getFirstAvailable_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"recycleCreateObject") ) { return hx::Val( recycleCreateObject_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTypedGroup_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"overlaps") ) { outValue = overlaps_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resolveGroup") ) { outValue = resolveGroup_dyn(); return true; }
	}
	return false;
}

hx::Val FlxTypedGroup_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { members=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxSize(inValue) );maxSize=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_marker") ) { _marker=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a"));
	outFields->push(HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypedGroup_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxTypedGroup_obj,members),HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a")},
	{hx::fsInt,(int)offsetof(FlxTypedGroup_obj,maxSize),HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc")},
	{hx::fsInt,(int)offsetof(FlxTypedGroup_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsInt,(int)offsetof(FlxTypedGroup_obj,_marker),HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTypedGroup_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedGroup_obj_sMemberFields[] = {
	HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a"),
	HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("recycle","\x13","\x10","\x8c","\x37"),
	HX_HCSTRING("recycleCreateObject","\x8e","\x6b","\x54","\x8e"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("replace","\x34","\x48","\x28","\xab"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("getFirstAvailable","\xaf","\xea","\xb3","\x05"),
	HX_HCSTRING("getFirstNull","\x61","\xb7","\x33","\x0f"),
	HX_HCSTRING("getFirstExisting","\x65","\xa4","\x6c","\xee"),
	HX_HCSTRING("getFirstAlive","\xb3","\x09","\xe2","\xbb"),
	HX_HCSTRING("getFirstDead","\x7e","\x67","\x8b","\x08"),
	HX_HCSTRING("countLiving","\x58","\xd9","\x8a","\x30"),
	HX_HCSTRING("countDead","\x13","\xd3","\x86","\x54"),
	HX_HCSTRING("getRandom","\x39","\xab","\xe5","\x33"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("revive","\x55","\xfa","\x76","\x0a"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("forEach","\xaa","\x29","\xbe","\xc4"),
	HX_HCSTRING("forEachAlive","\xc3","\x61","\xb7","\x99"),
	HX_HCSTRING("forEachDead","\x6e","\xc1","\xe4","\x78"),
	HX_HCSTRING("forEachExists","\x26","\x57","\xf8","\x68"),
	HX_HCSTRING("forEachOfType","\xbb","\x90","\x76","\xfd"),
	HX_HCSTRING("set_maxSize","\xa8","\x60","\xeb","\x5c"),
	::String(null()) };

static void FlxTypedGroup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypedGroup_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypedGroup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypedGroup_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTypedGroup_obj::__mClass;

static ::String FlxTypedGroup_obj_sStaticFields[] = {
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("resolveGroup","\xb3","\xf8","\x79","\xd2"),
	::String(null())
};

void FlxTypedGroup_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.group.FlxTypedGroup","\xe6","\xb8","\x51","\xd3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTypedGroup_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTypedGroup_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTypedGroup_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypedGroup_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypedGroup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypedGroup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedGroup_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace group
