// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif

namespace flixel{
namespace group{

void FlxTypedGroupIterator_obj::__construct(::cpp::VirtualArray GroupMembers, ::Dynamic filter){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroupIterator","new",0xa7153fe6,"flixel.group.FlxTypedGroupIterator.new","flixel/group/FlxGroup.hx",868,0x1e89d58e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(GroupMembers,"GroupMembers")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 869)		this->_groupMembers = GroupMembers;
HXLINE( 870)		this->_filter = filter;
HXLINE( 871)		this->_cursor = (int)0;
HXLINE( 872)		this->_length = this->_groupMembers->get_length();
            	}

Dynamic FlxTypedGroupIterator_obj::__CreateEmpty() { return new FlxTypedGroupIterator_obj; }

hx::ObjectPtr< FlxTypedGroupIterator_obj > FlxTypedGroupIterator_obj::__new(::cpp::VirtualArray GroupMembers, ::Dynamic filter)
{
	hx::ObjectPtr< FlxTypedGroupIterator_obj > _hx_result = new FlxTypedGroupIterator_obj();
	_hx_result->__construct(GroupMembers,filter);
	return _hx_result;
}

Dynamic FlxTypedGroupIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypedGroupIterator_obj > _hx_result = new FlxTypedGroupIterator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::Dynamic FlxTypedGroupIterator_obj::next(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroupIterator","next",0x8b82aaad,"flixel.group.FlxTypedGroupIterator.next","flixel/group/FlxGroup.hx",877,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 877)		Bool _hx_tmp = this->hasNext();
HXDLIN( 877)		if (_hx_tmp) {
HXLINE( 877)			return this->_groupMembers->__get(this->_cursor++);
            		}
            		else {
HXLINE( 877)			return null();
            		}
HXDLIN( 877)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroupIterator_obj,next,return )

Bool FlxTypedGroupIterator_obj::hasNext(){
            	HX_STACK_FRAME("flixel.group.FlxTypedGroupIterator","hasNext",0x559d4ff3,"flixel.group.FlxTypedGroupIterator.hasNext","flixel/group/FlxGroup.hx",881,0x1e89d58e)
            	HX_STACK_THIS(this)
HXLINE( 882)		while(true){
HXLINE( 882)			Bool _hx_tmp;
HXDLIN( 882)			Bool _hx_tmp1 = (this->_cursor < this->_length);
HXDLIN( 882)			if (_hx_tmp1) {
HXLINE( 882)				Bool _hx_tmp2 = hx::IsNotNull( this->_groupMembers->__get(this->_cursor) );
HXDLIN( 882)				if (_hx_tmp2) {
HXLINE( 882)					Bool _hx_tmp3 = hx::IsNotNull( this->_filter );
HXDLIN( 882)					if (_hx_tmp3) {
HXLINE( 882)						 ::Dynamic _hx_tmp4 = this->_groupMembers->__get(this->_cursor);
HXDLIN( 882)						_hx_tmp = !(( (Bool)(this->_filter(_hx_tmp4)) ));
            					}
            					else {
HXLINE( 882)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 882)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 882)				_hx_tmp = false;
            			}
HXDLIN( 882)			if (!(_hx_tmp)) {
HXLINE( 882)				goto _hx_goto_0;
            			}
HXLINE( 884)			this->_cursor++;
            		}
            		_hx_goto_0:;
HXLINE( 886)		return (this->_cursor < this->_length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroupIterator_obj,hasNext,return )


FlxTypedGroupIterator_obj::FlxTypedGroupIterator_obj()
{
}

void FlxTypedGroupIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedGroupIterator);
	HX_MARK_MEMBER_NAME(_groupMembers,"_groupMembers");
	HX_MARK_MEMBER_NAME(_filter,"_filter");
	HX_MARK_MEMBER_NAME(_cursor,"_cursor");
	HX_MARK_MEMBER_NAME(_length,"_length");
	HX_MARK_END_CLASS();
}

void FlxTypedGroupIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_groupMembers,"_groupMembers");
	HX_VISIT_MEMBER_NAME(_filter,"_filter");
	HX_VISIT_MEMBER_NAME(_cursor,"_cursor");
	HX_VISIT_MEMBER_NAME(_length,"_length");
}

hx::Val FlxTypedGroupIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_filter") ) { return hx::Val( _filter); }
		if (HX_FIELD_EQ(inName,"_cursor") ) { return hx::Val( _cursor); }
		if (HX_FIELD_EQ(inName,"_length") ) { return hx::Val( _length); }
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_groupMembers") ) { return hx::Val( _groupMembers); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTypedGroupIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_filter") ) { _filter=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cursor") ) { _cursor=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_length") ) { _length=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_groupMembers") ) { _groupMembers=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedGroupIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_groupMembers","\x39","\xaa","\xf1","\x6f"));
	outFields->push(HX_HCSTRING("_cursor","\x75","\xa0","\x5f","\xad"));
	outFields->push(HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypedGroupIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxTypedGroupIterator_obj,_groupMembers),HX_HCSTRING("_groupMembers","\x39","\xaa","\xf1","\x6f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypedGroupIterator_obj,_filter),HX_HCSTRING("_filter","\x57","\x31","\xac","\xf3")},
	{hx::fsInt,(int)offsetof(FlxTypedGroupIterator_obj,_cursor),HX_HCSTRING("_cursor","\x75","\xa0","\x5f","\xad")},
	{hx::fsInt,(int)offsetof(FlxTypedGroupIterator_obj,_length),HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTypedGroupIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedGroupIterator_obj_sMemberFields[] = {
	HX_HCSTRING("_groupMembers","\x39","\xaa","\xf1","\x6f"),
	HX_HCSTRING("_filter","\x57","\x31","\xac","\xf3"),
	HX_HCSTRING("_cursor","\x75","\xa0","\x5f","\xad"),
	HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	::String(null()) };

static void FlxTypedGroupIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypedGroupIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypedGroupIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypedGroupIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTypedGroupIterator_obj::__mClass;

void FlxTypedGroupIterator_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.group.FlxTypedGroupIterator","\xf4","\x14","\xfa","\x81");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTypedGroupIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypedGroupIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypedGroupIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypedGroupIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedGroupIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedGroupIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace group
