// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTweenManager
#include <flixel/tweens/FlxTweenManager.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_AngleTween
#include <flixel/tweens/misc/AngleTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_CircularMotion
#include <flixel/tweens/motion/CircularMotion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_CubicMotion
#include <flixel/tweens/motion/CubicMotion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_LinearMotion
#include <flixel/tweens/motion/LinearMotion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_LinearPath
#include <flixel/tweens/motion/LinearPath.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_Motion
#include <flixel/tweens/motion/Motion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_QuadMotion
#include <flixel/tweens/motion/QuadMotion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_QuadPath
#include <flixel/tweens/motion/QuadPath.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

namespace flixel{
namespace tweens{

void FlxTween_obj::__construct( ::Dynamic Options){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","new",0xa442439f,"flixel.tweens.FlxTween.new","flixel/tweens/FlxTween.hx",22,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Options,"Options")
HXLINE( 406)		this->_waitingForRestart = false;
HXLINE( 405)		this->_running = false;
HXLINE( 404)		this->_delayToUse = ((Float)0);
HXLINE( 403)		this->_secondsSinceStart = ((Float)0);
HXLINE( 401)		this->loopDelay = ((Float)0);
HXLINE( 396)		this->startDelay = ((Float)0);
HXLINE( 391)		this->executions = (int)0;
HXLINE( 384)		this->scale = ((Float)0);
HXLINE( 375)		this->duration = ((Float)0);
HXLINE( 374)		this->active = false;
HXLINE( 414)		Options = this->resolveTweenOptions(Options);
HXLINE( 416)		this->set_type( ::Dynamic(Options->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)));
HXLINE( 417)		this->onStart = Options->__Field(HX_("onStart",c3,12,49,1a),hx::paccDynamic);
HXLINE( 418)		this->onUpdate = Options->__Field(HX_("onUpdate",88,7c,b2,66),hx::paccDynamic);
HXLINE( 419)		this->onComplete = Options->__Field(HX_("onComplete",f8,d4,7e,5d),hx::paccDynamic);
HXLINE( 420)		this->ease = Options->__Field(HX_("ease",ee,8b,0c,43),hx::paccDynamic);
HXLINE( 421)		this->setDelays( ::Dynamic(Options->__Field(HX_("startDelay",c1,af,3d,f3),hx::paccDynamic)), ::Dynamic(Options->__Field(HX_("loopDelay",7f,f6,d2,04),hx::paccDynamic)));
            	}

Dynamic FlxTween_obj::__CreateEmpty() { return new FlxTween_obj; }

hx::ObjectPtr< FlxTween_obj > FlxTween_obj::__new( ::Dynamic Options)
{
	hx::ObjectPtr< FlxTween_obj > _hx_result = new FlxTween_obj();
	_hx_result->__construct(Options);
	return _hx_result;
}

Dynamic FlxTween_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTween_obj > _hx_result = new FlxTween_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_tweens_FlxTween__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::tweens::FlxTween_obj::destroy,
};

void *FlxTween_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_tweens_FlxTween__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic FlxTween_obj::resolveTweenOptions( ::Dynamic Options){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","resolveTweenOptions",0x40bbd67e,"flixel.tweens.FlxTween.resolveTweenOptions","flixel/tweens/FlxTween.hx",425,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Options,"Options")
HXLINE( 426)		Bool _hx_tmp = hx::IsNull( Options );
HXDLIN( 426)		if (_hx_tmp) {
HXLINE( 427)			Options =  ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("type",ba,f2,08,4d),(int)8));
            		}
HXLINE( 429)		Bool _hx_tmp1 = hx::IsNull( Options->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic) );
HXDLIN( 429)		if (_hx_tmp1) {
HXLINE( 430)			Options->__SetField(HX_("type",ba,f2,08,4d),(int)8,hx::paccDynamic);
            		}
HXLINE( 432)		return Options;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,resolveTweenOptions,return )

void FlxTween_obj::destroy(){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","destroy",0xb268abb9,"flixel.tweens.FlxTween.destroy","flixel/tweens/FlxTween.hx",436,0x5d58d691)
            	HX_STACK_THIS(this)
HXLINE( 437)		this->onStart = null();
HXLINE( 438)		this->onUpdate = null();
HXLINE( 439)		this->onComplete = null();
HXLINE( 440)		this->ease = null();
HXLINE( 441)		this->_chainedTweens = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,destroy,(void))

 ::flixel::tweens::FlxTween FlxTween_obj::then( ::flixel::tweens::FlxTween tween){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","then",0x19b266be,"flixel.tweens.FlxTween.then","flixel/tweens/FlxTween.hx",450,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tween,"tween")
HXLINE( 450)		return this->addChainedTween(tween);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,then,return )

 ::flixel::tweens::FlxTween FlxTween_obj::wait(Float delay){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","wait",0x1ba8be56,"flixel.tweens.FlxTween.wait","flixel/tweens/FlxTween.hx",458,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(delay,"delay")
HXLINE( 458)		 ::flixel::tweens::misc::NumTween _hx_tmp = ::flixel::tweens::FlxTween_obj::num((int)0,(int)0,delay,null(),null());
HXDLIN( 458)		return this->addChainedTween(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,wait,return )

 ::flixel::tweens::FlxTween FlxTween_obj::addChainedTween( ::flixel::tweens::FlxTween tween){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","addChainedTween",0xc68ec82b,"flixel.tweens.FlxTween.addChainedTween","flixel/tweens/FlxTween.hx",462,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tween,"tween")
HXLINE( 463)		tween->setVarsOnEnd();
HXLINE( 464)		::flixel::tweens::FlxTween_obj::manager->remove(tween,false);
HXLINE( 466)		Bool _hx_tmp = hx::IsNull( this->_chainedTweens );
HXDLIN( 466)		if (_hx_tmp) {
HXLINE( 467)			this->_chainedTweens = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 469)		this->_chainedTweens->push(tween);
HXLINE( 470)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,addChainedTween,return )

void FlxTween_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","update",0xb905642a,"flixel.tweens.FlxTween.update","flixel/tweens/FlxTween.hx",474,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 475)		hx::AddEq(this->_secondsSinceStart,elapsed);
HXLINE( 476)		HX_VAR( Float,delay);
HXDLIN( 476)		if ((this->executions > (int)0)) {
HXLINE( 476)			delay = this->loopDelay;
            		}
            		else {
HXLINE( 476)			delay = this->startDelay;
            		}
HXLINE( 477)		if ((this->_secondsSinceStart < delay)) {
HXLINE( 479)			return;
            		}
HXLINE( 481)		Float _hx_tmp = (this->_secondsSinceStart - delay);
HXDLIN( 481)		Float _hx_tmp1 = ::Math_obj::max(_hx_tmp,(int)0);
HXDLIN( 481)		this->scale = ((Float)_hx_tmp1 / (Float)this->duration);
HXLINE( 482)		Bool _hx_tmp2 = hx::IsNotNull( this->ease );
HXDLIN( 482)		if (_hx_tmp2) {
HXLINE( 484)			this->scale = ( (Float)(this->ease(this->scale)) );
            		}
HXLINE( 486)		Bool _hx_tmp3 = this->backward;
HXDLIN( 486)		if (_hx_tmp3) {
HXLINE( 488)			this->scale = ((int)1 - this->scale);
            		}
HXLINE( 490)		Bool _hx_tmp4;
HXDLIN( 490)		if ((this->_secondsSinceStart > delay)) {
HXLINE( 490)			_hx_tmp4 = !(this->_running);
            		}
            		else {
HXLINE( 490)			_hx_tmp4 = false;
            		}
HXDLIN( 490)		if (_hx_tmp4) {
HXLINE( 492)			this->_running = true;
HXLINE( 493)			Bool _hx_tmp5 = hx::IsNotNull( this->onStart );
HXDLIN( 493)			if (_hx_tmp5) {
HXLINE( 494)				this->onStart(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 496)		Bool _hx_tmp6 = (this->_secondsSinceStart >= (this->duration + delay));
HXDLIN( 496)		if (_hx_tmp6) {
HXLINE( 498)			Float _hx_tmp7;
HXDLIN( 498)			if (this->backward) {
HXLINE( 498)				_hx_tmp7 = (int)0;
            			}
            			else {
HXLINE( 498)				_hx_tmp7 = (int)1;
            			}
HXDLIN( 498)			this->scale = _hx_tmp7;
HXLINE( 499)			this->finished = true;
            		}
            		else {
HXLINE( 503)			Bool _hx_tmp8 = hx::IsNotNull( this->onUpdate );
HXDLIN( 503)			if (_hx_tmp8) {
HXLINE( 504)				this->onUpdate(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,update,(void))

 ::flixel::tweens::FlxTween FlxTween_obj::start(){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","start",0xd6ec7561,"flixel.tweens.FlxTween.start","flixel/tweens/FlxTween.hx",512,0x5d58d691)
            	HX_STACK_THIS(this)
HXLINE( 513)		this->_waitingForRestart = false;
HXLINE( 514)		this->_secondsSinceStart = (int)0;
HXLINE( 515)		Float _hx_tmp;
HXDLIN( 515)		if ((this->executions > (int)0)) {
HXLINE( 515)			_hx_tmp = this->loopDelay;
            		}
            		else {
HXLINE( 515)			_hx_tmp = this->startDelay;
            		}
HXDLIN( 515)		this->_delayToUse = _hx_tmp;
HXLINE( 516)		Bool _hx_tmp1 = (this->duration == (int)0);
HXDLIN( 516)		if (_hx_tmp1) {
HXLINE( 518)			this->set_active(false);
HXLINE( 519)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 521)		this->set_active(true);
HXLINE( 522)		this->_running = false;
HXLINE( 523)		this->finished = false;
HXLINE( 524)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,start,return )

void FlxTween_obj::cancel(){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","cancel",0xea33cb9b,"flixel.tweens.FlxTween.cancel","flixel/tweens/FlxTween.hx",532,0x5d58d691)
            	HX_STACK_THIS(this)
HXLINE( 533)		this->onEnd();
HXLINE( 534)		::flixel::tweens::FlxTween_obj::manager->remove(hx::ObjectPtr<OBJ_>(this),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,cancel,(void))

void FlxTween_obj::finish(){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","finish",0xb87f1e74,"flixel.tweens.FlxTween.finish","flixel/tweens/FlxTween.hx",538,0x5d58d691)
            	HX_STACK_THIS(this)
HXLINE( 539)		this->executions++;
HXLINE( 541)		Bool _hx_tmp = hx::IsNotNull( this->onComplete );
HXDLIN( 541)		if (_hx_tmp) {
HXLINE( 542)			this->onComplete(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 544)		HX_VARI( Int,type) = ((int)this->type & (int)(int)-17);
HXLINE( 546)		Bool _hx_tmp1;
HXDLIN( 546)		if ((type != (int)1)) {
HXLINE( 546)			_hx_tmp1 = (type == (int)8);
            		}
            		else {
HXLINE( 546)			_hx_tmp1 = true;
            		}
HXDLIN( 546)		if (_hx_tmp1) {
HXLINE( 548)			this->onEnd();
HXLINE( 549)			this->_secondsSinceStart = (this->duration + this->startDelay);
HXLINE( 551)			if ((type == (int)8)) {
HXLINE( 553)				::flixel::tweens::FlxTween_obj::manager->remove(hx::ObjectPtr<OBJ_>(this),null());
            			}
            		}
HXLINE( 557)		Bool _hx_tmp2;
HXDLIN( 557)		if ((type != (int)2)) {
HXLINE( 557)			_hx_tmp2 = (type == (int)4);
            		}
            		else {
HXLINE( 557)			_hx_tmp2 = true;
            		}
HXDLIN( 557)		if (_hx_tmp2) {
HXLINE( 559)			Float _hx_tmp3 = hx::Mod((this->_secondsSinceStart - this->_delayToUse),this->duration);
HXDLIN( 559)			this->_secondsSinceStart = (_hx_tmp3 + this->_delayToUse);
HXLINE( 560)			Float _hx_tmp4 = (this->_secondsSinceStart - this->_delayToUse);
HXDLIN( 560)			Float _hx_tmp5 = ::Math_obj::max(_hx_tmp4,(int)0);
HXDLIN( 560)			this->scale = ((Float)_hx_tmp5 / (Float)this->duration);
HXLINE( 562)			Bool _hx_tmp6;
HXDLIN( 562)			Bool _hx_tmp7;
HXDLIN( 562)			Bool _hx_tmp8 = hx::IsNotNull( this->ease );
HXDLIN( 562)			if (_hx_tmp8) {
HXLINE( 562)				_hx_tmp7 = (this->scale > (int)0);
            			}
            			else {
HXLINE( 562)				_hx_tmp7 = false;
            			}
HXDLIN( 562)			if (_hx_tmp7) {
HXLINE( 562)				_hx_tmp6 = (this->scale < (int)1);
            			}
            			else {
HXLINE( 562)				_hx_tmp6 = false;
            			}
HXDLIN( 562)			if (_hx_tmp6) {
HXLINE( 564)				this->scale = ( (Float)(this->ease(this->scale)) );
            			}
HXLINE( 567)			if ((type == (int)4)) {
HXLINE( 569)				this->backward = !(this->backward);
HXLINE( 570)				Bool _hx_tmp9 = this->backward;
HXDLIN( 570)				if (_hx_tmp9) {
HXLINE( 572)					this->scale = ((int)1 - this->scale);
            				}
            			}
HXLINE( 576)			this->restart();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,finish,(void))

void FlxTween_obj::onEnd(){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","onEnd",0x854598fb,"flixel.tweens.FlxTween.onEnd","flixel/tweens/FlxTween.hx",584,0x5d58d691)
            	HX_STACK_THIS(this)
HXLINE( 585)		this->setVarsOnEnd();
HXLINE( 586)		this->processTweenChain();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,onEnd,(void))

void FlxTween_obj::setVarsOnEnd(){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","setVarsOnEnd",0x855d798f,"flixel.tweens.FlxTween.setVarsOnEnd","flixel/tweens/FlxTween.hx",590,0x5d58d691)
            	HX_STACK_THIS(this)
HXLINE( 591)		this->set_active(false);
HXLINE( 592)		this->_running = false;
HXLINE( 593)		this->finished = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,setVarsOnEnd,(void))

void FlxTween_obj::processTweenChain(){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","processTweenChain",0xe0e06164,"flixel.tweens.FlxTween.processTweenChain","flixel/tweens/FlxTween.hx",597,0x5d58d691)
            	HX_STACK_THIS(this)
HXLINE( 598)		Bool _hx_tmp;
HXDLIN( 598)		Bool _hx_tmp1 = hx::IsNotNull( this->_chainedTweens );
HXDLIN( 598)		if (_hx_tmp1) {
HXLINE( 598)			_hx_tmp = (this->_chainedTweens->length <= (int)0);
            		}
            		else {
HXLINE( 598)			_hx_tmp = true;
            		}
HXDLIN( 598)		if (_hx_tmp) {
HXLINE( 599)			return;
            		}
HXLINE( 601)		 ::flixel::tweens::FlxTween _hx_tmp2 = this->_chainedTweens->shift().StaticCast<  ::flixel::tweens::FlxTween >();
HXDLIN( 601)		this->doNextTween(_hx_tmp2);
HXLINE( 602)		this->_chainedTweens = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,processTweenChain,(void))

void FlxTween_obj::doNextTween( ::flixel::tweens::FlxTween tween){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","doNextTween",0xb736cdac,"flixel.tweens.FlxTween.doNextTween","flixel/tweens/FlxTween.hx",606,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tween,"tween")
HXLINE( 607)		Bool _hx_tmp = !(tween->active);
HXDLIN( 607)		if (_hx_tmp) {
HXLINE( 609)			tween->start();
HXLINE( 610)			::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_FlxTween(tween,null());
            		}
HXLINE( 613)		tween->setChain(this->_chainedTweens);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,doNextTween,(void))

void FlxTween_obj::setChain(::Array< ::Dynamic> previousChain){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","setChain",0xec346660,"flixel.tweens.FlxTween.setChain","flixel/tweens/FlxTween.hx",617,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(previousChain,"previousChain")
HXLINE( 618)		Bool _hx_tmp = hx::IsNull( previousChain );
HXDLIN( 618)		if (_hx_tmp) {
HXLINE( 619)			return;
            		}
HXLINE( 621)		Bool _hx_tmp1 = hx::IsNull( this->_chainedTweens );
HXDLIN( 621)		if (_hx_tmp1) {
HXLINE( 622)			this->_chainedTweens = previousChain;
            		}
            		else {
HXLINE( 624)			this->_chainedTweens = this->_chainedTweens->concat(previousChain);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,setChain,(void))

void FlxTween_obj::restart(){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","restart",0xf888468e,"flixel.tweens.FlxTween.restart","flixel/tweens/FlxTween.hx",633,0x5d58d691)
            	HX_STACK_THIS(this)
HXLINE( 633)		Bool _hx_tmp = this->active;
HXDLIN( 633)		if (_hx_tmp) {
HXLINE( 635)			this->start();
            		}
            		else {
HXLINE( 639)			this->_waitingForRestart = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,restart,(void))

 ::flixel::tweens::FlxTween FlxTween_obj::setDelays( ::Dynamic StartDelay, ::Dynamic LoopDelay){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","setDelays",0x750c1d51,"flixel.tweens.FlxTween.setDelays","flixel/tweens/FlxTween.hx",650,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(StartDelay,"StartDelay")
            	HX_STACK_ARG(LoopDelay,"LoopDelay")
HXLINE( 651)		Float _hx_tmp;
HXDLIN( 651)		Bool _hx_tmp1 = hx::IsNotNull( StartDelay );
HXDLIN( 651)		if (_hx_tmp1) {
HXLINE( 651)			_hx_tmp = StartDelay;
            		}
            		else {
HXLINE( 651)			_hx_tmp = (int)0;
            		}
HXDLIN( 651)		this->set_startDelay(_hx_tmp);
HXLINE( 652)		Float _hx_tmp2;
HXDLIN( 652)		Bool _hx_tmp3 = hx::IsNotNull( LoopDelay );
HXDLIN( 652)		if (_hx_tmp3) {
HXLINE( 652)			_hx_tmp2 = LoopDelay;
            		}
            		else {
HXLINE( 652)			_hx_tmp2 = (int)0;
            		}
HXDLIN( 652)		this->set_loopDelay(_hx_tmp2);
HXLINE( 653)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTween_obj,setDelays,return )

Float FlxTween_obj::set_startDelay(Float value){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","set_startDelay",0xdc7f879f,"flixel.tweens.FlxTween.set_startDelay","flixel/tweens/FlxTween.hx",657,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 658)		HX_VARI( Float,dly) = ::Math_obj::abs(value);
HXLINE( 659)		Bool _hx_tmp = (this->executions == (int)0);
HXDLIN( 659)		if (_hx_tmp) {
HXLINE( 661)			Float _hx_tmp1 = this->duration;
HXDLIN( 661)			Float _hx_tmp2 = (this->_secondsSinceStart - this->_delayToUse);
HXDLIN( 661)			Float _hx_tmp3 = ::Math_obj::max(_hx_tmp2,(int)0);
HXDLIN( 661)			Float _hx_tmp4 = (_hx_tmp1 * ((Float)_hx_tmp3 / (Float)this->duration));
HXDLIN( 661)			Float _hx_tmp5 = (dly - this->startDelay);
HXDLIN( 661)			Float _hx_tmp6 = ::Math_obj::max(_hx_tmp5,(int)0);
HXDLIN( 661)			this->_secondsSinceStart = (_hx_tmp4 + _hx_tmp6);
HXLINE( 662)			this->_delayToUse = dly;
            		}
HXLINE( 664)		return (this->startDelay = dly);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_startDelay,return )

Float FlxTween_obj::set_loopDelay( ::Dynamic value){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","set_loopDelay",0xc5954461,"flixel.tweens.FlxTween.set_loopDelay","flixel/tweens/FlxTween.hx",668,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 669)		HX_VARI( Float,dly) = ::Math_obj::abs(value);
HXLINE( 670)		Bool _hx_tmp = (this->executions > (int)0);
HXDLIN( 670)		if (_hx_tmp) {
HXLINE( 672)			Float _hx_tmp1 = this->duration;
HXDLIN( 672)			Float _hx_tmp2 = (this->_secondsSinceStart - this->_delayToUse);
HXDLIN( 672)			Float _hx_tmp3 = ::Math_obj::max(_hx_tmp2,(int)0);
HXDLIN( 672)			Float _hx_tmp4 = (_hx_tmp1 * ((Float)_hx_tmp3 / (Float)this->duration));
HXDLIN( 672)			Float _hx_tmp5 = (dly - this->loopDelay);
HXDLIN( 672)			Float _hx_tmp6 = ::Math_obj::max(_hx_tmp5,(int)0);
HXDLIN( 672)			this->_secondsSinceStart = (_hx_tmp4 + _hx_tmp6);
HXLINE( 673)			this->_delayToUse = dly;
            		}
HXLINE( 675)		return (this->loopDelay = dly);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_loopDelay,return )

Float FlxTween_obj::get_percent(){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","get_percent",0x9c57551b,"flixel.tweens.FlxTween.get_percent","flixel/tweens/FlxTween.hx",680,0x5d58d691)
            	HX_STACK_THIS(this)
HXLINE( 680)		Float _hx_tmp = (this->_secondsSinceStart - this->_delayToUse);
HXDLIN( 680)		Float _hx_tmp1 = ::Math_obj::max(_hx_tmp,(int)0);
HXDLIN( 680)		return ((Float)_hx_tmp1 / (Float)this->duration);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTween_obj,get_percent,return )

Float FlxTween_obj::set_percent(Float value){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","set_percent",0xa6c45c27,"flixel.tweens.FlxTween.set_percent","flixel/tweens/FlxTween.hx",685,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 685)		Float _hx_tmp = (this->duration * value);
HXDLIN( 685)		return (this->_secondsSinceStart = (_hx_tmp + this->_delayToUse));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_percent,return )

Int FlxTween_obj::set_type(Int value){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","set_type",0x136d7018,"flixel.tweens.FlxTween.set_type","flixel/tweens/FlxTween.hx",689,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 690)		Bool _hx_tmp = (value == (int)0);
HXDLIN( 690)		if (_hx_tmp) {
HXLINE( 692)			value = (int)8;
            		}
            		else {
HXLINE( 694)			Bool _hx_tmp1 = (value == (int)16);
HXDLIN( 694)			if (_hx_tmp1) {
HXLINE( 696)				value = (int)17;
            			}
            		}
HXLINE( 699)		this->backward = (((int)value & (int)(int)16) > (int)0);
HXLINE( 700)		return (this->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_type,return )

Bool FlxTween_obj::set_active(Bool active){
            	HX_STACK_FRAME("flixel.tweens.FlxTween","set_active",0x9ccb52a4,"flixel.tweens.FlxTween.set_active","flixel/tweens/FlxTween.hx",704,0x5d58d691)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(active,"active")
HXLINE( 705)		this->active = active;
HXLINE( 707)		Bool _hx_tmp = this->_waitingForRestart;
HXDLIN( 707)		if (_hx_tmp) {
HXLINE( 708)			this->restart();
            		}
HXLINE( 710)		return active;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTween_obj,set_active,return )

Int FlxTween_obj::PERSIST;

Int FlxTween_obj::LOOPING;

Int FlxTween_obj::PINGPONG;

Int FlxTween_obj::ONESHOT;

Int FlxTween_obj::BACKWARD;

 ::flixel::tweens::FlxTweenManager FlxTween_obj::manager;

 ::flixel::tweens::misc::VarTween FlxTween_obj::tween( ::Dynamic Object, ::Dynamic Values,hx::Null< Float >  __o_Duration, ::Dynamic Options){
Float Duration = __o_Duration.Default(1);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","tween",0x6c51ab6a,"flixel.tweens.FlxTween.tween","flixel/tweens/FlxTween.hx",70,0x5d58d691)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(Values,"Values")
            	HX_STACK_ARG(Duration,"Duration")
            	HX_STACK_ARG(Options,"Options")
HXLINE(  71)		HX_VARI(  ::flixel::tweens::misc::VarTween,tween) =  ::flixel::tweens::misc::VarTween_obj::__new(Options);
HXLINE(  72)		tween->tween(Object,Values,Duration);
HXLINE(  73)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_misc_VarTween(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTween_obj,tween,return )

 ::flixel::tweens::misc::NumTween FlxTween_obj::num(Float FromValue,Float ToValue,hx::Null< Float >  __o_Duration, ::Dynamic Options, ::Dynamic TweenFunction){
Float Duration = __o_Duration.Default(1);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","num",0xa4425185,"flixel.tweens.FlxTween.num","flixel/tweens/FlxTween.hx",104,0x5d58d691)
            	HX_STACK_ARG(FromValue,"FromValue")
            	HX_STACK_ARG(ToValue,"ToValue")
            	HX_STACK_ARG(Duration,"Duration")
            	HX_STACK_ARG(Options,"Options")
            	HX_STACK_ARG(TweenFunction,"TweenFunction")
HXLINE( 105)		HX_VARI(  ::flixel::tweens::misc::NumTween,tween) =  ::flixel::tweens::misc::NumTween_obj::__new(Options);
HXLINE( 106)		tween->tween(FromValue,ToValue,Duration,TweenFunction);
HXLINE( 107)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_misc_NumTween(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,num,return )

 ::flixel::tweens::misc::AngleTween FlxTween_obj::angle( ::flixel::FlxSprite Sprite,Float FromAngle,Float ToAngle,hx::Null< Float >  __o_Duration, ::Dynamic Options){
Float Duration = __o_Duration.Default(1);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","angle",0x75c344d2,"flixel.tweens.FlxTween.angle","flixel/tweens/FlxTween.hx",132,0x5d58d691)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(FromAngle,"FromAngle")
            	HX_STACK_ARG(ToAngle,"ToAngle")
            	HX_STACK_ARG(Duration,"Duration")
            	HX_STACK_ARG(Options,"Options")
HXLINE( 133)		HX_VARI(  ::flixel::tweens::misc::AngleTween,tween) =  ::flixel::tweens::misc::AngleTween_obj::__new(Options);
HXLINE( 134)		tween->tween(FromAngle,ToAngle,Duration,Sprite);
HXLINE( 135)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_misc_AngleTween(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,angle,return )

 ::flixel::tweens::misc::ColorTween FlxTween_obj::color( ::flixel::FlxSprite Sprite,hx::Null< Float >  __o_Duration,Int FromColor,Int ToColor, ::Dynamic Options){
Float Duration = __o_Duration.Default(1);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","color",0x9d3d7262,"flixel.tweens.FlxTween.color","flixel/tweens/FlxTween.hx",160,0x5d58d691)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Duration,"Duration")
            	HX_STACK_ARG(FromColor,"FromColor")
            	HX_STACK_ARG(ToColor,"ToColor")
            	HX_STACK_ARG(Options,"Options")
HXLINE( 161)		HX_VARI(  ::flixel::tweens::misc::ColorTween,tween) =  ::flixel::tweens::misc::ColorTween_obj::__new(Options);
HXLINE( 162)		tween->tween(Duration,FromColor,ToColor,Sprite);
HXLINE( 163)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_misc_ColorTween(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,color,return )

 ::flixel::tweens::motion::LinearMotion FlxTween_obj::linearMotion( ::flixel::FlxObject Object,Float FromX,Float FromY,Float ToX,Float ToY,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< Bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
Bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","linearMotion",0xd656f2dc,"flixel.tweens.FlxTween.linearMotion","flixel/tweens/FlxTween.hx",191,0x5d58d691)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(FromX,"FromX")
            	HX_STACK_ARG(FromY,"FromY")
            	HX_STACK_ARG(ToX,"ToX")
            	HX_STACK_ARG(ToY,"ToY")
            	HX_STACK_ARG(DurationOrSpeed,"DurationOrSpeed")
            	HX_STACK_ARG(UseDuration,"UseDuration")
            	HX_STACK_ARG(Options,"Options")
HXLINE( 192)		HX_VARI(  ::flixel::tweens::motion::LinearMotion,tween) =  ::flixel::tweens::motion::LinearMotion_obj::__new(Options);
HXLINE( 193)		tween->setObject(Object);
HXLINE( 194)		tween->setMotion(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration);
HXLINE( 195)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_motion_LinearMotion(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(FlxTween_obj,linearMotion,return )

 ::flixel::tweens::motion::QuadMotion FlxTween_obj::quadMotion( ::flixel::FlxObject Object,Float FromX,Float FromY,Float ControlX,Float ControlY,Float ToX,Float ToY,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< Bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
Bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","quadMotion",0xc62584fe,"flixel.tweens.FlxTween.quadMotion","flixel/tweens/FlxTween.hx",225,0x5d58d691)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(FromX,"FromX")
            	HX_STACK_ARG(FromY,"FromY")
            	HX_STACK_ARG(ControlX,"ControlX")
            	HX_STACK_ARG(ControlY,"ControlY")
            	HX_STACK_ARG(ToX,"ToX")
            	HX_STACK_ARG(ToY,"ToY")
            	HX_STACK_ARG(DurationOrSpeed,"DurationOrSpeed")
            	HX_STACK_ARG(UseDuration,"UseDuration")
            	HX_STACK_ARG(Options,"Options")
HXLINE( 226)		HX_VARI(  ::flixel::tweens::motion::QuadMotion,tween) =  ::flixel::tweens::motion::QuadMotion_obj::__new(Options);
HXLINE( 227)		tween->setObject(Object);
HXLINE( 228)		tween->setMotion(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration);
HXLINE( 229)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_motion_QuadMotion(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(FlxTween_obj,quadMotion,return )

 ::flixel::tweens::motion::CubicMotion FlxTween_obj::cubicMotion( ::flixel::FlxObject Object,Float FromX,Float FromY,Float aX,Float aY,Float bX,Float bY,Float ToX,Float ToY,hx::Null< Float >  __o_Duration, ::Dynamic Options){
Float Duration = __o_Duration.Default(1);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","cubicMotion",0xa068755f,"flixel.tweens.FlxTween.cubicMotion","flixel/tweens/FlxTween.hx",260,0x5d58d691)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(FromX,"FromX")
            	HX_STACK_ARG(FromY,"FromY")
            	HX_STACK_ARG(aX,"aX")
            	HX_STACK_ARG(aY,"aY")
            	HX_STACK_ARG(bX,"bX")
            	HX_STACK_ARG(bY,"bY")
            	HX_STACK_ARG(ToX,"ToX")
            	HX_STACK_ARG(ToY,"ToY")
            	HX_STACK_ARG(Duration,"Duration")
            	HX_STACK_ARG(Options,"Options")
HXLINE( 261)		HX_VARI(  ::flixel::tweens::motion::CubicMotion,tween) =  ::flixel::tweens::motion::CubicMotion_obj::__new(Options);
HXLINE( 262)		tween->setObject(Object);
HXLINE( 263)		tween->setMotion(FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration);
HXLINE( 264)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_motion_CubicMotion(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(FlxTween_obj,cubicMotion,return )

 ::flixel::tweens::motion::CircularMotion FlxTween_obj::circularMotion( ::flixel::FlxObject Object,Float CenterX,Float CenterY,Float Radius,Float Angle,Bool Clockwise,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< Bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
Bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","circularMotion",0x65e89916,"flixel.tweens.FlxTween.circularMotion","flixel/tweens/FlxTween.hx",293,0x5d58d691)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(CenterX,"CenterX")
            	HX_STACK_ARG(CenterY,"CenterY")
            	HX_STACK_ARG(Radius,"Radius")
            	HX_STACK_ARG(Angle,"Angle")
            	HX_STACK_ARG(Clockwise,"Clockwise")
            	HX_STACK_ARG(DurationOrSpeed,"DurationOrSpeed")
            	HX_STACK_ARG(UseDuration,"UseDuration")
            	HX_STACK_ARG(Options,"Options")
HXLINE( 294)		HX_VARI(  ::flixel::tweens::motion::CircularMotion,tween) =  ::flixel::tweens::motion::CircularMotion_obj::__new(Options);
HXLINE( 295)		tween->setObject(Object);
HXLINE( 296)		tween->setMotion(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration);
HXLINE( 297)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_motion_CircularMotion(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(FlxTween_obj,circularMotion,return )

 ::flixel::tweens::motion::LinearPath FlxTween_obj::linearPath( ::flixel::FlxObject Object,::Array< ::Dynamic> Points,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< Bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
Bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","linearPath",0xd40abccb,"flixel.tweens.FlxTween.linearPath","flixel/tweens/FlxTween.hx",321,0x5d58d691)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(Points,"Points")
            	HX_STACK_ARG(DurationOrSpeed,"DurationOrSpeed")
            	HX_STACK_ARG(UseDuration,"UseDuration")
            	HX_STACK_ARG(Options,"Options")
HXLINE( 322)		HX_VARI(  ::flixel::tweens::motion::LinearPath,tween) =  ::flixel::tweens::motion::LinearPath_obj::__new(Options);
HXLINE( 324)		Bool _hx_tmp = hx::IsNotNull( Points );
HXDLIN( 324)		if (_hx_tmp) {
HXLINE( 326)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 326)			while((_g < Points->length)){
HXLINE( 326)				HX_VARI(  ::flixel::math::FlxPoint,point) = Points->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN( 326)				++_g;
HXLINE( 328)				tween->addPoint(point->x,point->y);
            			}
            		}
HXLINE( 332)		tween->setObject(Object);
HXLINE( 333)		tween->setMotion(DurationOrSpeed,UseDuration);
HXLINE( 334)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_motion_LinearPath(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,linearPath,return )

 ::flixel::tweens::motion::QuadPath FlxTween_obj::quadPath( ::flixel::FlxObject Object,::Array< ::Dynamic> Points,hx::Null< Float >  __o_DurationOrSpeed,hx::Null< Bool >  __o_UseDuration, ::Dynamic Options){
Float DurationOrSpeed = __o_DurationOrSpeed.Default(1);
Bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACK_FRAME("flixel.tweens.FlxTween","quadPath",0x6abb226d,"flixel.tweens.FlxTween.quadPath","flixel/tweens/FlxTween.hx",358,0x5d58d691)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(Points,"Points")
            	HX_STACK_ARG(DurationOrSpeed,"DurationOrSpeed")
            	HX_STACK_ARG(UseDuration,"UseDuration")
            	HX_STACK_ARG(Options,"Options")
HXLINE( 359)		HX_VARI(  ::flixel::tweens::motion::QuadPath,tween) =  ::flixel::tweens::motion::QuadPath_obj::__new(Options);
HXLINE( 361)		Bool _hx_tmp = hx::IsNotNull( Points );
HXDLIN( 361)		if (_hx_tmp) {
HXLINE( 363)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 363)			while((_g < Points->length)){
HXLINE( 363)				HX_VARI(  ::flixel::math::FlxPoint,point) = Points->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN( 363)				++_g;
HXLINE( 365)				tween->addPoint(point->x,point->y);
            			}
            		}
HXLINE( 369)		tween->setObject(Object);
HXLINE( 370)		tween->setMotion(DurationOrSpeed,UseDuration);
HXLINE( 371)		return ::flixel::tweens::FlxTween_obj::manager->add_flixel_tweens_motion_QuadPath(tween,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTween_obj,quadPath,return )


FlxTween_obj::FlxTween_obj()
{
}

void FlxTween_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTween);
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(duration,"duration");
	HX_MARK_MEMBER_NAME(ease,"ease");
	HX_MARK_MEMBER_NAME(onStart,"onStart");
	HX_MARK_MEMBER_NAME(onUpdate,"onUpdate");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(backward,"backward");
	HX_MARK_MEMBER_NAME(executions,"executions");
	HX_MARK_MEMBER_NAME(startDelay,"startDelay");
	HX_MARK_MEMBER_NAME(loopDelay,"loopDelay");
	HX_MARK_MEMBER_NAME(_secondsSinceStart,"_secondsSinceStart");
	HX_MARK_MEMBER_NAME(_delayToUse,"_delayToUse");
	HX_MARK_MEMBER_NAME(_running,"_running");
	HX_MARK_MEMBER_NAME(_waitingForRestart,"_waitingForRestart");
	HX_MARK_MEMBER_NAME(_chainedTweens,"_chainedTweens");
	HX_MARK_END_CLASS();
}

void FlxTween_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	HX_VISIT_MEMBER_NAME(ease,"ease");
	HX_VISIT_MEMBER_NAME(onStart,"onStart");
	HX_VISIT_MEMBER_NAME(onUpdate,"onUpdate");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(finished,"finished");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(backward,"backward");
	HX_VISIT_MEMBER_NAME(executions,"executions");
	HX_VISIT_MEMBER_NAME(startDelay,"startDelay");
	HX_VISIT_MEMBER_NAME(loopDelay,"loopDelay");
	HX_VISIT_MEMBER_NAME(_secondsSinceStart,"_secondsSinceStart");
	HX_VISIT_MEMBER_NAME(_delayToUse,"_delayToUse");
	HX_VISIT_MEMBER_NAME(_running,"_running");
	HX_VISIT_MEMBER_NAME(_waitingForRestart,"_waitingForRestart");
	HX_VISIT_MEMBER_NAME(_chainedTweens,"_chainedTweens");
}

hx::Val FlxTween_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"then") ) { return hx::Val( then_dyn()); }
		if (HX_FIELD_EQ(inName,"wait") ) { return hx::Val( wait_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn()); }
		if (HX_FIELD_EQ(inName,"onEnd") ) { return hx::Val( onEnd_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return hx::Val( cancel_dyn()); }
		if (HX_FIELD_EQ(inName,"finish") ) { return hx::Val( finish_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onStart") ) { return hx::Val( onStart); }
		if (HX_FIELD_EQ(inName,"percent") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_percent()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"restart") ) { return hx::Val( restart_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return hx::Val( duration); }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return hx::Val( onUpdate); }
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( finished); }
		if (HX_FIELD_EQ(inName,"backward") ) { return hx::Val( backward); }
		if (HX_FIELD_EQ(inName,"_running") ) { return hx::Val( _running); }
		if (HX_FIELD_EQ(inName,"setChain") ) { return hx::Val( setChain_dyn()); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loopDelay") ) { return hx::Val( loopDelay); }
		if (HX_FIELD_EQ(inName,"setDelays") ) { return hx::Val( setDelays_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete); }
		if (HX_FIELD_EQ(inName,"executions") ) { return hx::Val( executions); }
		if (HX_FIELD_EQ(inName,"startDelay") ) { return hx::Val( startDelay); }
		if (HX_FIELD_EQ(inName,"set_active") ) { return hx::Val( set_active_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_delayToUse") ) { return hx::Val( _delayToUse); }
		if (HX_FIELD_EQ(inName,"doNextTween") ) { return hx::Val( doNextTween_dyn()); }
		if (HX_FIELD_EQ(inName,"get_percent") ) { return hx::Val( get_percent_dyn()); }
		if (HX_FIELD_EQ(inName,"set_percent") ) { return hx::Val( set_percent_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setVarsOnEnd") ) { return hx::Val( setVarsOnEnd_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_loopDelay") ) { return hx::Val( set_loopDelay_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_chainedTweens") ) { return hx::Val( _chainedTweens); }
		if (HX_FIELD_EQ(inName,"set_startDelay") ) { return hx::Val( set_startDelay_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addChainedTween") ) { return hx::Val( addChainedTween_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"processTweenChain") ) { return hx::Val( processTweenChain_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_secondsSinceStart") ) { return hx::Val( _secondsSinceStart); }
		if (HX_FIELD_EQ(inName,"_waitingForRestart") ) { return hx::Val( _waitingForRestart); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"resolveTweenOptions") ) { return hx::Val( resolveTweenOptions_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTween_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { outValue = num_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tween") ) { outValue = tween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"angle") ) { outValue = angle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"color") ) { outValue = color_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"manager") ) { outValue = manager; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"quadPath") ) { outValue = quadPath_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadMotion") ) { outValue = quadMotion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"linearPath") ) { outValue = linearPath_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cubicMotion") ) { outValue = cubicMotion_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"linearMotion") ) { outValue = linearMotion_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"circularMotion") ) { outValue = circularMotion_dyn(); return true; }
	}
	return false;
}

hx::Val FlxTween_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { ease=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue) );type=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_active(inValue) );active=inValue.Cast< Bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onStart") ) { onStart=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_percent(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { onUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backward") ) { backward=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_running") ) { _running=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loopDelay") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_loopDelay(inValue) );loopDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"executions") ) { executions=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startDelay") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_startDelay(inValue) );startDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_delayToUse") ) { _delayToUse=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_chainedTweens") ) { _chainedTweens=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_secondsSinceStart") ) { _secondsSinceStart=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_waitingForRestart") ) { _waitingForRestart=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxTween_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"manager") ) { manager=ioValue.Cast<  ::flixel::tweens::FlxTweenManager >(); return true; }
	}
	return false;
}

void FlxTween_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("percent","\xc5","\xaa","\xda","\x78"));
	outFields->push(HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("backward","\xe3","\xdb","\x18","\x27"));
	outFields->push(HX_HCSTRING("executions","\xdb","\xf9","\x36","\x3c"));
	outFields->push(HX_HCSTRING("startDelay","\xc1","\xaf","\x3d","\xf3"));
	outFields->push(HX_HCSTRING("loopDelay","\x7f","\xf6","\xd2","\x04"));
	outFields->push(HX_HCSTRING("_secondsSinceStart","\x68","\x4a","\x61","\xcd"));
	outFields->push(HX_HCSTRING("_delayToUse","\x28","\x28","\x40","\x14"));
	outFields->push(HX_HCSTRING("_running","\x80","\xc7","\x21","\x25"));
	outFields->push(HX_HCSTRING("_waitingForRestart","\x74","\xf0","\x92","\xee"));
	outFields->push(HX_HCSTRING("_chainedTweens","\xa9","\x3f","\x16","\x71"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTween_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxTween_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,duration),HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTween_obj,ease),HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTween_obj,onStart),HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTween_obj,onUpdate),HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTween_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsInt,(int)offsetof(FlxTween_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsBool,(int)offsetof(FlxTween_obj,finished),HX_HCSTRING("finished","\x72","\x93","\x0e","\x95")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsBool,(int)offsetof(FlxTween_obj,backward),HX_HCSTRING("backward","\xe3","\xdb","\x18","\x27")},
	{hx::fsInt,(int)offsetof(FlxTween_obj,executions),HX_HCSTRING("executions","\xdb","\xf9","\x36","\x3c")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,startDelay),HX_HCSTRING("startDelay","\xc1","\xaf","\x3d","\xf3")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,loopDelay),HX_HCSTRING("loopDelay","\x7f","\xf6","\xd2","\x04")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,_secondsSinceStart),HX_HCSTRING("_secondsSinceStart","\x68","\x4a","\x61","\xcd")},
	{hx::fsFloat,(int)offsetof(FlxTween_obj,_delayToUse),HX_HCSTRING("_delayToUse","\x28","\x28","\x40","\x14")},
	{hx::fsBool,(int)offsetof(FlxTween_obj,_running),HX_HCSTRING("_running","\x80","\xc7","\x21","\x25")},
	{hx::fsBool,(int)offsetof(FlxTween_obj,_waitingForRestart),HX_HCSTRING("_waitingForRestart","\x74","\xf0","\x92","\xee")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTween_obj,_chainedTweens),HX_HCSTRING("_chainedTweens","\xa9","\x3f","\x16","\x71")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxTween_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxTween_obj::PERSIST,HX_HCSTRING("PERSIST","\xf4","\xf5","\x44","\x03")},
	{hx::fsInt,(void *) &FlxTween_obj::LOOPING,HX_HCSTRING("LOOPING","\xde","\x50","\x51","\xa0")},
	{hx::fsInt,(void *) &FlxTween_obj::PINGPONG,HX_HCSTRING("PINGPONG","\x6a","\x23","\xc9","\x01")},
	{hx::fsInt,(void *) &FlxTween_obj::ONESHOT,HX_HCSTRING("ONESHOT","\x40","\x6e","\xaf","\xf6")},
	{hx::fsInt,(void *) &FlxTween_obj::BACKWARD,HX_HCSTRING("BACKWARD","\xe3","\x6b","\x9e","\x80")},
	{hx::fsObject /*::flixel::tweens::FlxTweenManager*/ ,(void *) &FlxTween_obj::manager,HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxTween_obj_sMemberFields[] = {
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a"),
	HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("backward","\xe3","\xdb","\x18","\x27"),
	HX_HCSTRING("executions","\xdb","\xf9","\x36","\x3c"),
	HX_HCSTRING("startDelay","\xc1","\xaf","\x3d","\xf3"),
	HX_HCSTRING("loopDelay","\x7f","\xf6","\xd2","\x04"),
	HX_HCSTRING("_secondsSinceStart","\x68","\x4a","\x61","\xcd"),
	HX_HCSTRING("_delayToUse","\x28","\x28","\x40","\x14"),
	HX_HCSTRING("_running","\x80","\xc7","\x21","\x25"),
	HX_HCSTRING("_waitingForRestart","\x74","\xf0","\x92","\xee"),
	HX_HCSTRING("_chainedTweens","\xa9","\x3f","\x16","\x71"),
	HX_HCSTRING("resolveTweenOptions","\x3f","\xb5","\x76","\x9f"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("then","\xdd","\x02","\xfc","\x4c"),
	HX_HCSTRING("wait","\x75","\x5a","\xf2","\x4e"),
	HX_HCSTRING("addChainedTween","\x6c","\xf2","\xe0","\x52"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("cancel","\x7a","\xed","\x33","\xb8"),
	HX_HCSTRING("finish","\x53","\x40","\x7f","\x86"),
	HX_HCSTRING("onEnd","\xfc","\x97","\x64","\x32"),
	HX_HCSTRING("setVarsOnEnd","\xae","\xcc","\xde","\x50"),
	HX_HCSTRING("processTweenChain","\xe5","\x5d","\xc2","\xc5"),
	HX_HCSTRING("doNextTween","\x6d","\x83","\xb4","\x19"),
	HX_HCSTRING("setChain","\xff","\xfd","\xe7","\x53"),
	HX_HCSTRING("restart","\xcf","\xc7","\xa5","\x6a"),
	HX_HCSTRING("setDelays","\xd2","\x30","\x7d","\xca"),
	HX_HCSTRING("set_startDelay","\x7e","\x20","\x53","\x89"),
	HX_HCSTRING("set_loopDelay","\x62","\xac","\x3c","\x0b"),
	HX_HCSTRING("get_percent","\xdc","\x0a","\xd5","\xfe"),
	HX_HCSTRING("set_percent","\xe8","\x11","\x42","\x09"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("set_active","\x03","\x50","\x4b","\x0a"),
	::String(null()) };

static void FlxTween_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTween_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxTween_obj::PERSIST,"PERSIST");
	HX_MARK_MEMBER_NAME(FlxTween_obj::LOOPING,"LOOPING");
	HX_MARK_MEMBER_NAME(FlxTween_obj::PINGPONG,"PINGPONG");
	HX_MARK_MEMBER_NAME(FlxTween_obj::ONESHOT,"ONESHOT");
	HX_MARK_MEMBER_NAME(FlxTween_obj::BACKWARD,"BACKWARD");
	HX_MARK_MEMBER_NAME(FlxTween_obj::manager,"manager");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTween_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTween_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::PERSIST,"PERSIST");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::LOOPING,"LOOPING");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::PINGPONG,"PINGPONG");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::ONESHOT,"ONESHOT");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::BACKWARD,"BACKWARD");
	HX_VISIT_MEMBER_NAME(FlxTween_obj::manager,"manager");
};

#endif

hx::Class FlxTween_obj::__mClass;

static ::String FlxTween_obj_sStaticFields[] = {
	HX_HCSTRING("PERSIST","\xf4","\xf5","\x44","\x03"),
	HX_HCSTRING("LOOPING","\xde","\x50","\x51","\xa0"),
	HX_HCSTRING("PINGPONG","\x6a","\x23","\xc9","\x01"),
	HX_HCSTRING("ONESHOT","\x40","\x6e","\xaf","\xf6"),
	HX_HCSTRING("BACKWARD","\xe3","\x6b","\x9e","\x80"),
	HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13"),
	HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19"),
	HX_HCSTRING("num","\x46","\xde","\x53","\x00"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("linearMotion","\xfb","\x45","\xd8","\xa1"),
	HX_HCSTRING("quadMotion","\x5d","\x82","\xa5","\x33"),
	HX_HCSTRING("cubicMotion","\x20","\x2b","\xe6","\x02"),
	HX_HCSTRING("circularMotion","\xf5","\x31","\xbc","\x12"),
	HX_HCSTRING("linearPath","\x2a","\xba","\x8a","\x41"),
	HX_HCSTRING("quadPath","\x0c","\xba","\x6e","\xd2"),
	::String(null())
};

void FlxTween_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tweens.FlxTween","\x2d","\x88","\x9a","\xc8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTween_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxTween_obj::__SetStatic;
	__mClass->mMarkFunc = FlxTween_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTween_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTween_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTween_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTween_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTween_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTween_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxTween_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",27,0x5d58d691)
HXLINE(  27)		PERSIST = (int)1;
            	}
{
            	HX_STACK_FRAME("flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",31,0x5d58d691)
HXLINE(  31)		LOOPING = (int)2;
            	}
{
            	HX_STACK_FRAME("flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",35,0x5d58d691)
HXLINE(  35)		PINGPONG = (int)4;
            	}
{
            	HX_STACK_FRAME("flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",39,0x5d58d691)
HXLINE(  39)		ONESHOT = (int)8;
            	}
{
            	HX_STACK_FRAME("flixel.tweens.FlxTween","boot",0x0dd1e813,"flixel.tweens.FlxTween.boot","flixel/tweens/FlxTween.hx",43,0x5d58d691)
HXLINE(  43)		BACKWARD = (int)16;
            	}
}

} // end namespace flixel
} // end namespace tweens
