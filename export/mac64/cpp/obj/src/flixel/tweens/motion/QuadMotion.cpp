// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_Motion
#include <flixel/tweens/motion/Motion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_QuadMotion
#include <flixel/tweens/motion/QuadMotion.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

namespace flixel{
namespace tweens{
namespace motion{

void QuadMotion_obj::__construct( ::Dynamic Options){
            	HX_STACK_FRAME("flixel.tweens.motion.QuadMotion","new",0xf59e5933,"flixel.tweens.motion.QuadMotion.new","flixel/tweens/motion/QuadMotion.hx",8,0x8023a31c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Options,"Options")
HXLINE(  22)		this->_controlY = ((Float)0);
HXLINE(  21)		this->_controlX = ((Float)0);
HXLINE(  20)		this->_toY = ((Float)0);
HXLINE(  19)		this->_toX = ((Float)0);
HXLINE(  18)		this->_fromY = ((Float)0);
HXLINE(  17)		this->_fromX = ((Float)0);
HXLINE(  16)		this->_distance = ((Float)-1);
HXLINE(   8)		super::__construct(Options);
            	}

Dynamic QuadMotion_obj::__CreateEmpty() { return new QuadMotion_obj; }

hx::ObjectPtr< QuadMotion_obj > QuadMotion_obj::__new( ::Dynamic Options)
{
	hx::ObjectPtr< QuadMotion_obj > _hx_result = new QuadMotion_obj();
	_hx_result->__construct(Options);
	return _hx_result;
}

Dynamic QuadMotion_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< QuadMotion_obj > _hx_result = new QuadMotion_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::flixel::tweens::motion::QuadMotion QuadMotion_obj::setMotion(Float FromX,Float FromY,Float ControlX,Float ControlY,Float ToX,Float ToY,Float DurationOrSpeed,hx::Null< Bool >  __o_UseDuration){
Bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACK_FRAME("flixel.tweens.motion.QuadMotion","setMotion",0xe116648b,"flixel.tweens.motion.QuadMotion.setMotion","flixel/tweens/motion/QuadMotion.hx",37,0x8023a31c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(FromX,"FromX")
            	HX_STACK_ARG(FromY,"FromY")
            	HX_STACK_ARG(ControlX,"ControlX")
            	HX_STACK_ARG(ControlY,"ControlY")
            	HX_STACK_ARG(ToX,"ToX")
            	HX_STACK_ARG(ToY,"ToY")
            	HX_STACK_ARG(DurationOrSpeed,"DurationOrSpeed")
            	HX_STACK_ARG(UseDuration,"UseDuration")
HXLINE(  38)		this->_distance = (int)-1;
HXLINE(  39)		this->x = (this->_fromX = FromX);
HXLINE(  40)		this->y = (this->_fromY = FromY);
HXLINE(  41)		this->_controlX = ControlX;
HXLINE(  42)		this->_controlY = ControlY;
HXLINE(  43)		this->_toX = ToX;
HXLINE(  44)		this->_toY = ToY;
HXLINE(  46)		if (UseDuration) {
HXLINE(  48)			this->duration = DurationOrSpeed;
            		}
            		else {
HXLINE(  52)			Float _hx_tmp = this->get_distance();
HXDLIN(  52)			this->duration = ((Float)_hx_tmp / (Float)DurationOrSpeed);
            		}
HXLINE(  55)		this->start();
HXLINE(  57)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC8(QuadMotion_obj,setMotion,return )

void QuadMotion_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.tweens.motion.QuadMotion","update",0xec780316,"flixel.tweens.motion.QuadMotion.update","flixel/tweens/motion/QuadMotion.hx",61,0x8023a31c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  62)		this->super::update(elapsed);
HXLINE(  63)		Float _hx_tmp = (((this->_fromX * ((int)1 - this->scale)) * ((int)1 - this->scale)) + (((this->_controlX * (int)2) * ((int)1 - this->scale)) * this->scale));
HXDLIN(  63)		Float _hx_tmp1 = ((this->_toX * this->scale) * this->scale);
HXDLIN(  63)		this->x = (_hx_tmp + _hx_tmp1);
HXLINE(  64)		Float _hx_tmp2 = (((this->_fromY * ((int)1 - this->scale)) * ((int)1 - this->scale)) + (((this->_controlY * (int)2) * ((int)1 - this->scale)) * this->scale));
HXDLIN(  64)		Float _hx_tmp3 = ((this->_toY * this->scale) * this->scale);
HXDLIN(  64)		this->y = (_hx_tmp2 + _hx_tmp3);
HXLINE(  65)		Bool _hx_tmp4 = this->finished;
HXDLIN(  65)		if (_hx_tmp4) {
HXLINE(  67)			this->postUpdate();
            		}
            	}


Float QuadMotion_obj::get_distance(){
            	HX_STACK_FRAME("flixel.tweens.motion.QuadMotion","get_distance",0x3f988c0b,"flixel.tweens.motion.QuadMotion.get_distance","flixel/tweens/motion/QuadMotion.hx",72,0x8023a31c)
            	HX_STACK_THIS(this)
HXLINE(  73)		if ((this->_distance >= (int)0)) {
HXLINE(  74)			return this->_distance;
            		}
HXLINE(  76)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  76)		point->_inPool = false;
HXLINE(  77)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  77)		point1->_inPool = false;
HXLINE(  78)		Float _hx_tmp = ((this->x - ((int)2 * this->_controlX)) + this->_toX);
HXDLIN(  78)		point->set_x(_hx_tmp);
HXLINE(  79)		Float _hx_tmp1 = ((this->y - ((int)2 * this->_controlY)) + this->_toY);
HXDLIN(  79)		point->set_y(_hx_tmp1);
HXLINE(  80)		Float _hx_tmp2 = (((int)2 * this->_controlX) - ((int)2 * this->x));
HXDLIN(  80)		point1->set_x(_hx_tmp2);
HXLINE(  81)		Float _hx_tmp3 = (((int)2 * this->_controlY) - ((int)2 * this->y));
HXDLIN(  81)		point1->set_y(_hx_tmp3);
HXLINE(  82)		HX_VARI( Float,a) = ((int)4 * ((point->x * point->x) + (point->y * point->y)));
HXDLIN(  82)		HX_VARI( Float,b) = ((int)4 * ((point->x * point1->x) + (point->y * point1->y)));
HXDLIN(  82)		HX_VARI( Float,c) = ((point1->x * point1->x) + (point1->y * point1->y));
HXLINE(  85)		Float _hx_tmp4 = ::Math_obj::sqrt(((a + b) + c));
HXLINE(  82)		HX_VARI( Float,abc) = ((int)2 * _hx_tmp4);
HXDLIN(  82)		HX_VARI( Float,a2) = ::Math_obj::sqrt(a);
HXDLIN(  82)		HX_VARI( Float,a32) = (((int)2 * a) * a2);
HXLINE(  88)		Float _hx_tmp5 = ::Math_obj::sqrt(c);
HXLINE(  82)		HX_VARI( Float,c2) = ((int)2 * _hx_tmp5);
HXDLIN(  82)		HX_VARI( Float,ba) = ((Float)b / (Float)a2);
HXLINE(  91)		point->put();
HXLINE(  92)		point1->put();
HXLINE(  94)		Float _hx_tmp6 = ((a32 * abc) + ((a2 * b) * (abc - c2)));
HXDLIN(  94)		Float _hx_tmp7 = ((((int)4 * c) * a) - (b * b));
HXLINE(  95)		Float _hx_tmp8 = ::Math_obj::log(((Float)((((int)2 * a2) + ba) + abc) / (Float)(ba + c2)));
HXLINE(  94)		return ((Float)(_hx_tmp6 + (_hx_tmp7 * _hx_tmp8)) / (Float)((int)4 * a32));
            	}


HX_DEFINE_DYNAMIC_FUNC0(QuadMotion_obj,get_distance,return )


QuadMotion_obj::QuadMotion_obj()
{
}

hx::Val QuadMotion_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_toX") ) { return hx::Val( _toX); }
		if (HX_FIELD_EQ(inName,"_toY") ) { return hx::Val( _toY); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_fromX") ) { return hx::Val( _fromX); }
		if (HX_FIELD_EQ(inName,"_fromY") ) { return hx::Val( _fromY); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_distance()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_distance") ) { return hx::Val( _distance); }
		if (HX_FIELD_EQ(inName,"_controlX") ) { return hx::Val( _controlX); }
		if (HX_FIELD_EQ(inName,"_controlY") ) { return hx::Val( _controlY); }
		if (HX_FIELD_EQ(inName,"setMotion") ) { return hx::Val( setMotion_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_distance") ) { return hx::Val( get_distance_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val QuadMotion_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_toX") ) { _toX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_toY") ) { _toY=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_fromX") ) { _fromX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fromY") ) { _fromY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_distance") ) { _distance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_controlX") ) { _controlX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_controlY") ) { _controlY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuadMotion_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"));
	outFields->push(HX_HCSTRING("_distance","\x94","\x8a","\x8f","\xb3"));
	outFields->push(HX_HCSTRING("_fromX","\xef","\x5e","\x75","\x02"));
	outFields->push(HX_HCSTRING("_fromY","\xf0","\x5e","\x75","\x02"));
	outFields->push(HX_HCSTRING("_toX","\x7e","\xab","\x23","\x3f"));
	outFields->push(HX_HCSTRING("_toY","\x7f","\xab","\x23","\x3f"));
	outFields->push(HX_HCSTRING("_controlX","\xba","\x7d","\x52","\x7f"));
	outFields->push(HX_HCSTRING("_controlY","\xbb","\x7d","\x52","\x7f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo QuadMotion_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(QuadMotion_obj,_distance),HX_HCSTRING("_distance","\x94","\x8a","\x8f","\xb3")},
	{hx::fsFloat,(int)offsetof(QuadMotion_obj,_fromX),HX_HCSTRING("_fromX","\xef","\x5e","\x75","\x02")},
	{hx::fsFloat,(int)offsetof(QuadMotion_obj,_fromY),HX_HCSTRING("_fromY","\xf0","\x5e","\x75","\x02")},
	{hx::fsFloat,(int)offsetof(QuadMotion_obj,_toX),HX_HCSTRING("_toX","\x7e","\xab","\x23","\x3f")},
	{hx::fsFloat,(int)offsetof(QuadMotion_obj,_toY),HX_HCSTRING("_toY","\x7f","\xab","\x23","\x3f")},
	{hx::fsFloat,(int)offsetof(QuadMotion_obj,_controlX),HX_HCSTRING("_controlX","\xba","\x7d","\x52","\x7f")},
	{hx::fsFloat,(int)offsetof(QuadMotion_obj,_controlY),HX_HCSTRING("_controlY","\xbb","\x7d","\x52","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *QuadMotion_obj_sStaticStorageInfo = 0;
#endif

static ::String QuadMotion_obj_sMemberFields[] = {
	HX_HCSTRING("_distance","\x94","\x8a","\x8f","\xb3"),
	HX_HCSTRING("_fromX","\xef","\x5e","\x75","\x02"),
	HX_HCSTRING("_fromY","\xf0","\x5e","\x75","\x02"),
	HX_HCSTRING("_toX","\x7e","\xab","\x23","\x3f"),
	HX_HCSTRING("_toY","\x7f","\xab","\x23","\x3f"),
	HX_HCSTRING("_controlX","\xba","\x7d","\x52","\x7f"),
	HX_HCSTRING("_controlY","\xbb","\x7d","\x52","\x7f"),
	HX_HCSTRING("setMotion","\x78","\xfb","\x04","\x2b"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("get_distance","\x3e","\x47","\x13","\x21"),
	::String(null()) };

static void QuadMotion_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(QuadMotion_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void QuadMotion_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(QuadMotion_obj::__mClass,"__mClass");
};

#endif

hx::Class QuadMotion_obj::__mClass;

void QuadMotion_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tweens.motion.QuadMotion","\xc1","\x43","\x2f","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = QuadMotion_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(QuadMotion_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< QuadMotion_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = QuadMotion_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuadMotion_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuadMotion_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tweens
} // end namespace motion
