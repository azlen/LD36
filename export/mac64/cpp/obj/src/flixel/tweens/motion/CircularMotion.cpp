// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_CircularMotion
#include <flixel/tweens/motion/CircularMotion.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_Motion
#include <flixel/tweens/motion/Motion.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

namespace flixel{
namespace tweens{
namespace motion{

void CircularMotion_obj::__construct( ::Dynamic Options){
            	HX_STACK_FRAME("flixel.tweens.motion.CircularMotion","new",0xf11036cb,"flixel.tweens.motion.CircularMotion.new","flixel/tweens/motion/CircularMotion.hx",6,0x4765ac04)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Options,"Options")
HXLINE(  23)		this->_angleFinish = ((Float)0);
HXLINE(  22)		this->_angleStart = ((Float)0);
HXLINE(  21)		this->_radius = ((Float)0);
HXLINE(  20)		this->_centerY = ((Float)0);
HXLINE(  19)		this->_centerX = ((Float)0);
HXLINE(  11)		this->angle = ((Float)0);
HXLINE(   6)		super::__construct(Options);
            	}

Dynamic CircularMotion_obj::__CreateEmpty() { return new CircularMotion_obj; }

hx::ObjectPtr< CircularMotion_obj > CircularMotion_obj::__new( ::Dynamic Options)
{
	hx::ObjectPtr< CircularMotion_obj > _hx_result = new CircularMotion_obj();
	_hx_result->__construct(Options);
	return _hx_result;
}

Dynamic CircularMotion_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CircularMotion_obj > _hx_result = new CircularMotion_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::flixel::tweens::motion::CircularMotion CircularMotion_obj::setMotion(Float CenterX,Float CenterY,Float Radius,Float Angle,Bool Clockwise,Float DurationOrSpeed,hx::Null< Bool >  __o_UseDuration){
Bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACK_FRAME("flixel.tweens.motion.CircularMotion","setMotion",0x3f8a8423,"flixel.tweens.motion.CircularMotion.setMotion","flixel/tweens/motion/CircularMotion.hx",37,0x4765ac04)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(CenterX,"CenterX")
            	HX_STACK_ARG(CenterY,"CenterY")
            	HX_STACK_ARG(Radius,"Radius")
            	HX_STACK_ARG(Angle,"Angle")
            	HX_STACK_ARG(Clockwise,"Clockwise")
            	HX_STACK_ARG(DurationOrSpeed,"DurationOrSpeed")
            	HX_STACK_ARG(UseDuration,"UseDuration")
HXLINE(  38)		this->_centerX = CenterX;
HXLINE(  39)		this->_centerY = CenterY;
HXLINE(  40)		this->_radius = Radius;
HXLINE(  41)		Float _hx_tmp = (Angle * ::Math_obj::PI);
HXDLIN(  41)		this->angle = (this->_angleStart = ((Float)_hx_tmp / (Float)(int)-180));
HXLINE(  42)		Float _hx_tmp1 = (::Math_obj::PI * (int)2);
HXDLIN(  42)		Int _hx_tmp2;
HXDLIN(  42)		if (Clockwise) {
HXLINE(  42)			_hx_tmp2 = (int)1;
            		}
            		else {
HXLINE(  42)			_hx_tmp2 = (int)-1;
            		}
HXDLIN(  42)		this->_angleFinish = (_hx_tmp1 * _hx_tmp2);
HXLINE(  44)		if (UseDuration) {
HXLINE(  46)			this->duration = DurationOrSpeed;
            		}
            		else {
HXLINE(  50)			Float _hx_tmp3 = (this->_radius * (::Math_obj::PI * (int)2));
HXDLIN(  50)			this->duration = ((Float)_hx_tmp3 / (Float)DurationOrSpeed);
            		}
HXLINE(  53)		this->start();
HXLINE(  54)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC7(CircularMotion_obj,setMotion,return )

void CircularMotion_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.tweens.motion.CircularMotion","update",0x6646b47e,"flixel.tweens.motion.CircularMotion.update","flixel/tweens/motion/CircularMotion.hx",58,0x4765ac04)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  59)		this->super::update(elapsed);
HXLINE(  60)		Float _hx_tmp = this->_angleStart;
HXDLIN(  60)		Float _hx_tmp1 = (this->_angleFinish * this->scale);
HXDLIN(  60)		this->angle = (_hx_tmp + _hx_tmp1);
HXLINE(  61)		Float _hx_tmp2 = this->_centerX;
HXDLIN(  61)		Float _hx_tmp3 = ::Math_obj::cos(this->angle);
HXDLIN(  61)		Float _hx_tmp4 = (_hx_tmp3 * this->_radius);
HXDLIN(  61)		this->x = (_hx_tmp2 + _hx_tmp4);
HXLINE(  62)		Float _hx_tmp5 = this->_centerY;
HXDLIN(  62)		Float _hx_tmp6 = ::Math_obj::sin(this->angle);
HXDLIN(  62)		Float _hx_tmp7 = (_hx_tmp6 * this->_radius);
HXDLIN(  62)		this->y = (_hx_tmp5 + _hx_tmp7);
HXLINE(  63)		Bool _hx_tmp8 = this->finished;
HXDLIN(  63)		if (_hx_tmp8) {
HXLINE(  65)			this->postUpdate();
            		}
            	}


Float CircularMotion_obj::get_circumference(){
            	HX_STACK_FRAME("flixel.tweens.motion.CircularMotion","get_circumference",0x1cf82811,"flixel.tweens.motion.CircularMotion.get_circumference","flixel/tweens/motion/CircularMotion.hx",71,0x4765ac04)
            	HX_STACK_THIS(this)
HXLINE(  71)		return (this->_radius * (::Math_obj::PI * (int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CircularMotion_obj,get_circumference,return )


CircularMotion_obj::CircularMotion_obj()
{
}

hx::Val CircularMotion_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_radius") ) { return hx::Val( _radius); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_centerX") ) { return hx::Val( _centerX); }
		if (HX_FIELD_EQ(inName,"_centerY") ) { return hx::Val( _centerY); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setMotion") ) { return hx::Val( setMotion_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_angleStart") ) { return hx::Val( _angleStart); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_angleFinish") ) { return hx::Val( _angleFinish); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"circumference") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_circumference()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_circumference") ) { return hx::Val( get_circumference_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CircularMotion_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_radius") ) { _radius=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_centerX") ) { _centerX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_centerY") ) { _centerY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_angleStart") ) { _angleStart=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_angleFinish") ) { _angleFinish=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CircularMotion_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("circumference","\x0f","\x71","\xf9","\x4d"));
	outFields->push(HX_HCSTRING("_centerX","\x64","\x4e","\x9e","\x53"));
	outFields->push(HX_HCSTRING("_centerY","\x65","\x4e","\x9e","\x53"));
	outFields->push(HX_HCSTRING("_radius","\xf1","\xe1","\x6d","\x1f"));
	outFields->push(HX_HCSTRING("_angleStart","\xae","\xb0","\x1a","\x5a"));
	outFields->push(HX_HCSTRING("_angleFinish","\x87","\xc6","\xc4","\xfd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CircularMotion_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(CircularMotion_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsFloat,(int)offsetof(CircularMotion_obj,_centerX),HX_HCSTRING("_centerX","\x64","\x4e","\x9e","\x53")},
	{hx::fsFloat,(int)offsetof(CircularMotion_obj,_centerY),HX_HCSTRING("_centerY","\x65","\x4e","\x9e","\x53")},
	{hx::fsFloat,(int)offsetof(CircularMotion_obj,_radius),HX_HCSTRING("_radius","\xf1","\xe1","\x6d","\x1f")},
	{hx::fsFloat,(int)offsetof(CircularMotion_obj,_angleStart),HX_HCSTRING("_angleStart","\xae","\xb0","\x1a","\x5a")},
	{hx::fsFloat,(int)offsetof(CircularMotion_obj,_angleFinish),HX_HCSTRING("_angleFinish","\x87","\xc6","\xc4","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CircularMotion_obj_sStaticStorageInfo = 0;
#endif

static ::String CircularMotion_obj_sMemberFields[] = {
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("_centerX","\x64","\x4e","\x9e","\x53"),
	HX_HCSTRING("_centerY","\x65","\x4e","\x9e","\x53"),
	HX_HCSTRING("_radius","\xf1","\xe1","\x6d","\x1f"),
	HX_HCSTRING("_angleStart","\xae","\xb0","\x1a","\x5a"),
	HX_HCSTRING("_angleFinish","\x87","\xc6","\xc4","\xfd"),
	HX_HCSTRING("setMotion","\x78","\xfb","\x04","\x2b"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("get_circumference","\x66","\x7c","\x69","\x54"),
	::String(null()) };

static void CircularMotion_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CircularMotion_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CircularMotion_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CircularMotion_obj::__mClass,"__mClass");
};

#endif

hx::Class CircularMotion_obj::__mClass;

void CircularMotion_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tweens.motion.CircularMotion","\x59","\x75","\xcc","\xdb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CircularMotion_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CircularMotion_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CircularMotion_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CircularMotion_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CircularMotion_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CircularMotion_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tweens
} // end namespace motion
