// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_LinearPath
#include <flixel/tweens/motion/LinearPath.h>
#endif
#ifndef INCLUDED_flixel_tweens_motion_Motion
#include <flixel/tweens/motion/Motion.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

static const Float _hx_array_data_0[] = {
	(Float)0,
};
static const Float _hx_array_data_1[] = {
	(Float)0,
};
namespace flixel{
namespace tweens{
namespace motion{

void LinearPath_obj::__construct( ::Dynamic Options){
            	HX_STACK_FRAME("flixel.tweens.motion.LinearPath","new",0x6d0ffb80,"flixel.tweens.motion.LinearPath.new","flixel/tweens/motion/LinearPath.hx",10,0x519b896f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Options,"Options")
HXLINE(  23)		this->_index = (int)0;
HXLINE(  22)		this->_speed = ((Float)0);
HXLINE(  15)		this->distance = ((Float)0);
HXLINE(  32)		super::__construct(Options);
HXLINE(  34)		this->points = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  35)		this->_pointD = ::Array_obj< Float >::fromData( _hx_array_data_0,1);
HXLINE(  36)		this->_pointT = ::Array_obj< Float >::fromData( _hx_array_data_1,1);
            	}

Dynamic LinearPath_obj::__CreateEmpty() { return new LinearPath_obj; }

hx::ObjectPtr< LinearPath_obj > LinearPath_obj::__new( ::Dynamic Options)
{
	hx::ObjectPtr< LinearPath_obj > _hx_result = new LinearPath_obj();
	_hx_result->__construct(Options);
	return _hx_result;
}

Dynamic LinearPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LinearPath_obj > _hx_result = new LinearPath_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void LinearPath_obj::destroy(){
            	HX_STACK_FRAME("flixel.tweens.motion.LinearPath","destroy",0x4706681a,"flixel.tweens.motion.LinearPath.destroy","flixel/tweens/motion/LinearPath.hx",40,0x519b896f)
            	HX_STACK_THIS(this)
HXLINE(  41)		this->super::destroy();
HXLINE(  43)		{
HXLINE(  43)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  43)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->points;
HXDLIN(  43)			while((_g < _g1->length)){
HXLINE(  43)				HX_VARI(  ::flixel::math::FlxPoint,point) = _g1->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN(  43)				++_g;
HXLINE(  45)				point = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(point)) );
            			}
            		}
HXLINE(  47)		this->_last = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_last)) );
HXLINE(  48)		this->_prevPoint = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_prevPoint)) );
HXLINE(  49)		this->_nextPoint = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_nextPoint)) );
            	}


 ::flixel::tweens::motion::LinearPath LinearPath_obj::setMotion(Float DurationOrSpeed,hx::Null< Bool >  __o_UseDuration){
Bool UseDuration = __o_UseDuration.Default(true);
            	HX_STACK_FRAME("flixel.tweens.motion.LinearPath","setMotion",0x1a623e98,"flixel.tweens.motion.LinearPath.setMotion","flixel/tweens/motion/LinearPath.hx",59,0x519b896f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(DurationOrSpeed,"DurationOrSpeed")
            	HX_STACK_ARG(UseDuration,"UseDuration")
HXLINE(  60)		this->updatePath();
HXLINE(  62)		if (UseDuration) {
HXLINE(  64)			this->duration = DurationOrSpeed;
HXLINE(  65)			this->_speed = ((Float)this->distance / (Float)DurationOrSpeed);
            		}
            		else {
HXLINE(  69)			this->duration = ((Float)this->distance / (Float)DurationOrSpeed);
HXLINE(  70)			this->_speed = DurationOrSpeed;
            		}
HXLINE(  73)		this->start();
HXLINE(  74)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(LinearPath_obj,setMotion,return )

 ::flixel::tweens::motion::LinearPath LinearPath_obj::addPoint(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
            	HX_STACK_FRAME("flixel.tweens.motion.LinearPath","addPoint",0x4da05b4f,"flixel.tweens.motion.LinearPath.addPoint","flixel/tweens/motion/LinearPath.hx",78,0x519b896f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  79)		Bool _hx_tmp = hx::IsNotNull( this->_last );
HXDLIN(  79)		if (_hx_tmp) {
HXLINE(  81)			Float _hx_tmp1 = ((x - this->_last->x) * (x - this->_last->x));
HXDLIN(  81)			Float _hx_tmp2 = ((y - this->_last->y) * (y - this->_last->y));
HXDLIN(  81)			hx::AddEq(this->distance,::Math_obj::sqrt((_hx_tmp1 + _hx_tmp2)));
HXLINE(  82)			this->_pointD[this->points->length] = this->distance;
            		}
HXLINE(  84)		Int _hx_tmp3 = this->points->length;
HXDLIN(  84)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(x,y);
HXDLIN(  84)		point->_inPool = false;
HXDLIN(  84)		 ::flixel::math::FlxPoint _hx_tmp4 = (this->_last = point);
HXDLIN(  84)		this->points[_hx_tmp3] = _hx_tmp4;
HXLINE(  85)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(LinearPath_obj,addPoint,return )

 ::flixel::math::FlxPoint LinearPath_obj::getPoint(hx::Null< Int >  __o_index){
Int index = __o_index.Default(0);
            	HX_STACK_FRAME("flixel.tweens.motion.LinearPath","getPoint",0x341a44ba,"flixel.tweens.motion.LinearPath.getPoint","flixel/tweens/motion/LinearPath.hx",89,0x519b896f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE(  90)		if ((this->points->length == (int)0)) {
HXLINE(  92)			HX_STACK_DO_THROW(HX_("No points have been added to the path yet.",c7,a0,28,83));
            		}
HXLINE(  94)		return this->points->__get(hx::Mod(index,this->points->length)).StaticCast<  ::flixel::math::FlxPoint >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(LinearPath_obj,getPoint,return )

 ::flixel::tweens::FlxTween LinearPath_obj::start(){
            	HX_STACK_FRAME("flixel.tweens.motion.LinearPath","start",0xb880a782,"flixel.tweens.motion.LinearPath.start","flixel/tweens/motion/LinearPath.hx",98,0x519b896f)
            	HX_STACK_THIS(this)
HXLINE(  99)		Int _hx_tmp;
HXDLIN(  99)		if (this->backward) {
HXLINE(  99)			_hx_tmp = (this->points->length - (int)1);
            		}
            		else {
HXLINE(  99)			_hx_tmp = (int)0;
            		}
HXDLIN(  99)		this->_index = _hx_tmp;
HXLINE( 100)		this->super::start();
HXLINE( 101)		return hx::ObjectPtr<OBJ_>(this);
            	}


void LinearPath_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.tweens.motion.LinearPath","update",0x391d0ee9,"flixel.tweens.motion.LinearPath.update","flixel/tweens/motion/LinearPath.hx",105,0x519b896f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 106)		this->super::update(elapsed);
HXLINE( 107)		HX_VAR( Float,td);
HXLINE( 108)		HX_VAR( Float,tt);
HXLINE( 110)		Bool _hx_tmp = hx::IsNull( this->points );
HXDLIN( 110)		if (_hx_tmp) {
HXLINE( 111)			return;
            		}
HXLINE( 113)		Bool _hx_tmp1 = !(this->backward);
HXDLIN( 113)		if (_hx_tmp1) {
HXLINE( 115)			Bool _hx_tmp2 = (this->_index < (this->points->length - (int)1));
HXDLIN( 115)			if (_hx_tmp2) {
HXLINE( 117)				while((this->scale > this->_pointT->__get((this->_index + (int)1)))){
HXLINE( 119)					this->_index++;
HXLINE( 120)					Bool _hx_tmp3 = (this->_index == (this->points->length - (int)1));
HXDLIN( 120)					if (_hx_tmp3) {
HXLINE( 122)						hx::SubEq(this->_index,(int)1);
HXLINE( 123)						goto _hx_goto_3;
            					}
            				}
            				_hx_goto_3:;
            			}
HXLINE( 128)			td = this->_pointT->__get(this->_index);
HXLINE( 129)			tt = (this->_pointT->__get((this->_index + (int)1)) - td);
HXLINE( 130)			Float _hx_tmp4 = (this->scale - td);
HXDLIN( 130)			td = ((Float)_hx_tmp4 / (Float)tt);
HXLINE( 131)			this->_prevPoint = this->points->__get(this->_index).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 132)			Int _hx_tmp5 = (this->_index + (int)1);
HXDLIN( 132)			this->_nextPoint = this->points->__get(_hx_tmp5).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 133)			Float _hx_tmp6 = this->_prevPoint->x;
HXDLIN( 133)			Float _hx_tmp7 = ((this->_nextPoint->x - this->_prevPoint->x) * td);
HXDLIN( 133)			this->x = (_hx_tmp6 + _hx_tmp7);
HXLINE( 134)			Float _hx_tmp8 = this->_prevPoint->y;
HXDLIN( 134)			Float _hx_tmp9 = ((this->_nextPoint->y - this->_prevPoint->y) * td);
HXDLIN( 134)			this->y = (_hx_tmp8 + _hx_tmp9);
            		}
            		else {
HXLINE( 138)			Bool _hx_tmp10 = (this->_index > (int)0);
HXDLIN( 138)			if (_hx_tmp10) {
HXLINE( 140)				while((this->scale < this->_pointT->__get((this->_index - (int)1)))){
HXLINE( 142)					hx::SubEq(this->_index,(int)1);
HXLINE( 143)					Bool _hx_tmp11 = (this->_index == (int)0);
HXDLIN( 143)					if (_hx_tmp11) {
HXLINE( 145)						hx::AddEq(this->_index,(int)1);
HXLINE( 146)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
HXLINE( 151)			td = this->_pointT->__get(this->_index);
HXLINE( 152)			tt = (this->_pointT->__get((this->_index - (int)1)) - td);
HXLINE( 153)			Float _hx_tmp12 = (this->scale - td);
HXDLIN( 153)			td = ((Float)_hx_tmp12 / (Float)tt);
HXLINE( 154)			this->_prevPoint = this->points->__get(this->_index).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 155)			Int _hx_tmp13 = (this->_index - (int)1);
HXDLIN( 155)			this->_nextPoint = this->points->__get(_hx_tmp13).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 156)			Float _hx_tmp14 = this->_prevPoint->x;
HXDLIN( 156)			Float _hx_tmp15 = ((this->_nextPoint->x - this->_prevPoint->x) * td);
HXDLIN( 156)			this->x = (_hx_tmp14 + _hx_tmp15);
HXLINE( 157)			Float _hx_tmp16 = this->_prevPoint->y;
HXDLIN( 157)			Float _hx_tmp17 = ((this->_nextPoint->y - this->_prevPoint->y) * td);
HXDLIN( 157)			this->y = (_hx_tmp16 + _hx_tmp17);
            		}
HXLINE( 160)		this->super::postUpdate();
            	}


void LinearPath_obj::updatePath(){
            	HX_STACK_FRAME("flixel.tweens.motion.LinearPath","updatePath",0x8544492e,"flixel.tweens.motion.LinearPath.updatePath","flixel/tweens/motion/LinearPath.hx",167,0x519b896f)
            	HX_STACK_THIS(this)
HXLINE( 168)		if ((this->points->length < (int)2)) {
HXLINE( 168)			HX_STACK_DO_THROW(HX_("A LinearPath must have at least 2 points to operate.",6c,59,79,af));
            		}
HXLINE( 169)		if ((this->_pointD->length == this->_pointT->length)) {
HXLINE( 169)			return;
            		}
HXLINE( 171)		HX_VARI( Int,i) = (int)0;
HXLINE( 172)		while((i < this->points->length)){
HXLINE( 174)			Int _hx_tmp = i;
HXDLIN( 174)			Int _hx_tmp1 = i++;
HXDLIN( 174)			Float _hx_tmp2 = ((Float)this->_pointD->__get(_hx_tmp1) / (Float)this->distance);
HXDLIN( 174)			this->_pointT[_hx_tmp] = _hx_tmp2;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(LinearPath_obj,updatePath,(void))


LinearPath_obj::LinearPath_obj()
{
}

void LinearPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LinearPath);
	HX_MARK_MEMBER_NAME(distance,"distance");
	HX_MARK_MEMBER_NAME(points,"points");
	HX_MARK_MEMBER_NAME(_pointD,"_pointD");
	HX_MARK_MEMBER_NAME(_pointT,"_pointT");
	HX_MARK_MEMBER_NAME(_speed,"_speed");
	HX_MARK_MEMBER_NAME(_index,"_index");
	HX_MARK_MEMBER_NAME(_last,"_last");
	HX_MARK_MEMBER_NAME(_prevPoint,"_prevPoint");
	HX_MARK_MEMBER_NAME(_nextPoint,"_nextPoint");
	 ::flixel::tweens::motion::Motion_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LinearPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(distance,"distance");
	HX_VISIT_MEMBER_NAME(points,"points");
	HX_VISIT_MEMBER_NAME(_pointD,"_pointD");
	HX_VISIT_MEMBER_NAME(_pointT,"_pointT");
	HX_VISIT_MEMBER_NAME(_speed,"_speed");
	HX_VISIT_MEMBER_NAME(_index,"_index");
	HX_VISIT_MEMBER_NAME(_last,"_last");
	HX_VISIT_MEMBER_NAME(_prevPoint,"_prevPoint");
	HX_VISIT_MEMBER_NAME(_nextPoint,"_nextPoint");
	 ::flixel::tweens::motion::Motion_obj::__Visit(HX_VISIT_ARG);
}

hx::Val LinearPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_last") ) { return hx::Val( _last); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { return hx::Val( points); }
		if (HX_FIELD_EQ(inName,"_speed") ) { return hx::Val( _speed); }
		if (HX_FIELD_EQ(inName,"_index") ) { return hx::Val( _index); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_pointD") ) { return hx::Val( _pointD); }
		if (HX_FIELD_EQ(inName,"_pointT") ) { return hx::Val( _pointT); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { return hx::Val( distance); }
		if (HX_FIELD_EQ(inName,"addPoint") ) { return hx::Val( addPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"getPoint") ) { return hx::Val( getPoint_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setMotion") ) { return hx::Val( setMotion_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_prevPoint") ) { return hx::Val( _prevPoint); }
		if (HX_FIELD_EQ(inName,"_nextPoint") ) { return hx::Val( _nextPoint); }
		if (HX_FIELD_EQ(inName,"updatePath") ) { return hx::Val( updatePath_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LinearPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_last") ) { _last=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { points=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_speed") ) { _speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_index") ) { _index=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_pointD") ) { _pointD=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pointT") ) { _pointT=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { distance=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_prevPoint") ) { _prevPoint=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_nextPoint") ) { _nextPoint=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LinearPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"));
	outFields->push(HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("_pointD","\x93","\x23","\xa5","\x65"));
	outFields->push(HX_HCSTRING("_pointT","\xa3","\x23","\xa5","\x65"));
	outFields->push(HX_HCSTRING("_speed","\xc8","\xde","\x50","\x7d"));
	outFields->push(HX_HCSTRING("_index","\x53","\xe2","\xfb","\xb9"));
	outFields->push(HX_HCSTRING("_last","\x35","\x26","\xbe","\xfa"));
	outFields->push(HX_HCSTRING("_prevPoint","\x1e","\xd0","\x88","\x0d"));
	outFields->push(HX_HCSTRING("_nextPoint","\x1e","\x4a","\x77","\xc9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LinearPath_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(LinearPath_obj,distance),HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(LinearPath_obj,points),HX_HCSTRING("points","\x23","\x12","\x2e","\xf7")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(LinearPath_obj,_pointD),HX_HCSTRING("_pointD","\x93","\x23","\xa5","\x65")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(LinearPath_obj,_pointT),HX_HCSTRING("_pointT","\xa3","\x23","\xa5","\x65")},
	{hx::fsFloat,(int)offsetof(LinearPath_obj,_speed),HX_HCSTRING("_speed","\xc8","\xde","\x50","\x7d")},
	{hx::fsInt,(int)offsetof(LinearPath_obj,_index),HX_HCSTRING("_index","\x53","\xe2","\xfb","\xb9")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(LinearPath_obj,_last),HX_HCSTRING("_last","\x35","\x26","\xbe","\xfa")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(LinearPath_obj,_prevPoint),HX_HCSTRING("_prevPoint","\x1e","\xd0","\x88","\x0d")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(LinearPath_obj,_nextPoint),HX_HCSTRING("_nextPoint","\x1e","\x4a","\x77","\xc9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LinearPath_obj_sStaticStorageInfo = 0;
#endif

static ::String LinearPath_obj_sMemberFields[] = {
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"),
	HX_HCSTRING("_pointD","\x93","\x23","\xa5","\x65"),
	HX_HCSTRING("_pointT","\xa3","\x23","\xa5","\x65"),
	HX_HCSTRING("_speed","\xc8","\xde","\x50","\x7d"),
	HX_HCSTRING("_index","\x53","\xe2","\xfb","\xb9"),
	HX_HCSTRING("_last","\x35","\x26","\xbe","\xfa"),
	HX_HCSTRING("_prevPoint","\x1e","\xd0","\x88","\x0d"),
	HX_HCSTRING("_nextPoint","\x1e","\x4a","\x77","\xc9"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("setMotion","\x78","\xfb","\x04","\x2b"),
	HX_HCSTRING("addPoint","\x6f","\xda","\xec","\x3f"),
	HX_HCSTRING("getPoint","\xda","\xc3","\x66","\x26"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updatePath","\x4e","\xd0","\x06","\x03"),
	::String(null()) };

static void LinearPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LinearPath_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LinearPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LinearPath_obj::__mClass,"__mClass");
};

#endif

hx::Class LinearPath_obj::__mClass;

void LinearPath_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tweens.motion.LinearPath","\x8e","\x7b","\x14","\xa8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LinearPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LinearPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LinearPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LinearPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LinearPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LinearPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tweens
} // end namespace motion
