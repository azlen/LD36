// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_system_FlxBGSprite
#include <flixel/system/FlxBGSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Graphics
#include <openfl/_legacy/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif

namespace flixel{

void FlxSubState_obj::__construct(hx::Null< Int >  __o_BGColor){
Int BGColor = __o_BGColor.Default(0);
            	HX_STACK_FRAME("flixel.FlxSubState","new",0xef991343,"flixel.FlxSubState.new","flixel/FlxSubState.hx",10,0xd8a3e54e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(BGColor,"BGColor")
HXLINE(  31)		this->_created = false;
HXLINE(  38)		super::__construct(null());
HXLINE(  39)		this->closeCallback = null();
HXLINE(  41)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN(  41)		if (_hx_tmp) {
HXLINE(  43)			this->_bgSprite =  ::flixel::_hx_system::FlxBGSprite_obj::__new();
            		}
HXLINE(  45)		this->set_bgColor(BGColor);
            	}

Dynamic FlxSubState_obj::__CreateEmpty() { return new FlxSubState_obj; }

hx::ObjectPtr< FlxSubState_obj > FlxSubState_obj::__new(hx::Null< Int >  __o_BGColor)
{
	hx::ObjectPtr< FlxSubState_obj > _hx_result = new FlxSubState_obj();
	_hx_result->__construct(__o_BGColor);
	return _hx_result;
}

Dynamic FlxSubState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxSubState_obj > _hx_result = new FlxSubState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void FlxSubState_obj::draw(){
            	HX_STACK_FRAME("flixel.FlxSubState","draw",0xafc56fc1,"flixel.FlxSubState.draw","flixel/FlxSubState.hx",49,0xd8a3e54e)
            	HX_STACK_THIS(this)
HXLINE(  51)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN(  51)		if (_hx_tmp) {
HXLINE(  53)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  53)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->get_cameras();
HXDLIN(  53)			while((_g < _g1->length)){
HXLINE(  53)				HX_VARI(  ::flixel::FlxCamera,camera) = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN(  53)				++_g;
HXLINE(  55)				camera->fill(this->_bgColor,null(),null(),null());
            			}
            		}
            		else {
HXLINE(  60)			this->_bgSprite->draw();
            		}
HXLINE(  64)		this->super::draw();
            	}


void FlxSubState_obj::destroy(){
            	HX_STACK_FRAME("flixel.FlxSubState","destroy",0xc08a1d5d,"flixel.FlxSubState.destroy","flixel/FlxSubState.hx",68,0xd8a3e54e)
            	HX_STACK_THIS(this)
HXLINE(  69)		this->super::destroy();
HXLINE(  70)		this->closeCallback = null();
HXLINE(  71)		this->_parentState = null();
HXLINE(  72)		this->_bgSprite = null();
            	}


void FlxSubState_obj::close(){
            	HX_STACK_FRAME("flixel.FlxSubState","close",0x85a9195b,"flixel.FlxSubState.close","flixel/FlxSubState.hx",80,0xd8a3e54e)
            	HX_STACK_THIS(this)
HXLINE(  80)		Bool _hx_tmp;
HXDLIN(  80)		Bool _hx_tmp1 = hx::IsNotNull( this->_parentState );
HXDLIN(  80)		if (_hx_tmp1) {
HXLINE(  80)			_hx_tmp = hx::IsEq( this->_parentState->subState,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(  80)			_hx_tmp = false;
            		}
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  82)			this->_parentState->closeSubState();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSubState_obj,close,(void))

Int FlxSubState_obj::get_bgColor(){
            	HX_STACK_FRAME("flixel.FlxSubState","get_bgColor",0x02e53f58,"flixel.FlxSubState.get_bgColor","flixel/FlxSubState.hx",88,0xd8a3e54e)
            	HX_STACK_THIS(this)
HXLINE(  88)		return this->_bgColor;
            	}


Int FlxSubState_obj::set_bgColor(Int Value){
            	HX_STACK_FRAME("flixel.FlxSubState","set_bgColor",0x0d524664,"flixel.FlxSubState.set_bgColor","flixel/FlxSubState.hx",92,0xd8a3e54e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(  93)		Bool _hx_tmp;
HXDLIN(  93)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(  93)			_hx_tmp = hx::IsNotNull( this->_bgSprite );
            		}
            		else {
HXLINE(  93)			_hx_tmp = false;
            		}
HXDLIN(  93)		if (_hx_tmp) {
HXLINE(  94)			this->_bgSprite->get_pixels()->setPixel32((int)0,(int)0,Value);
            		}
HXLINE(  96)		return (this->_bgColor = Value);
            	}



FlxSubState_obj::FlxSubState_obj()
{
}

void FlxSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxSubState);
	HX_MARK_MEMBER_NAME(closeCallback,"closeCallback");
	HX_MARK_MEMBER_NAME(_bgSprite,"_bgSprite");
	HX_MARK_MEMBER_NAME(_parentState,"_parentState");
	HX_MARK_MEMBER_NAME(_bgColor,"_bgColor");
	HX_MARK_MEMBER_NAME(_created,"_created");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(closeCallback,"closeCallback");
	HX_VISIT_MEMBER_NAME(_bgSprite,"_bgSprite");
	HX_VISIT_MEMBER_NAME(_parentState,"_parentState");
	HX_VISIT_MEMBER_NAME(_bgColor,"_bgColor");
	HX_VISIT_MEMBER_NAME(_created,"_created");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxSubState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_bgColor") ) { return hx::Val( _bgColor); }
		if (HX_FIELD_EQ(inName,"_created") ) { return hx::Val( _created); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_bgSprite") ) { return hx::Val( _bgSprite); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_bgColor") ) { return hx::Val( get_bgColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_bgColor") ) { return hx::Val( set_bgColor_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_parentState") ) { return hx::Val( _parentState); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"closeCallback") ) { return hx::Val( closeCallback); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxSubState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_bgColor") ) { _bgColor=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_created") ) { _created=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_bgSprite") ) { _bgSprite=inValue.Cast<  ::flixel::_hx_system::FlxBGSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_parentState") ) { _parentState=inValue.Cast<  ::flixel::FlxState >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"closeCallback") ) { closeCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_bgSprite","\x09","\xbf","\x32","\xe0"));
	outFields->push(HX_HCSTRING("_parentState","\x88","\x96","\xcf","\x7a"));
	outFields->push(HX_HCSTRING("_bgColor","\xdf","\xda","\x3b","\x31"));
	outFields->push(HX_HCSTRING("_created","\x69","\x0f","\x23","\x4b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxSubState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxSubState_obj,closeCallback),HX_HCSTRING("closeCallback","\x9d","\xe5","\x0d","\x8a")},
	{hx::fsObject /*::flixel::_hx_system::FlxBGSprite*/ ,(int)offsetof(FlxSubState_obj,_bgSprite),HX_HCSTRING("_bgSprite","\x09","\xbf","\x32","\xe0")},
	{hx::fsObject /*::flixel::FlxState*/ ,(int)offsetof(FlxSubState_obj,_parentState),HX_HCSTRING("_parentState","\x88","\x96","\xcf","\x7a")},
	{hx::fsInt,(int)offsetof(FlxSubState_obj,_bgColor),HX_HCSTRING("_bgColor","\xdf","\xda","\x3b","\x31")},
	{hx::fsBool,(int)offsetof(FlxSubState_obj,_created),HX_HCSTRING("_created","\x69","\x0f","\x23","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxSubState_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxSubState_obj_sMemberFields[] = {
	HX_HCSTRING("closeCallback","\x9d","\xe5","\x0d","\x8a"),
	HX_HCSTRING("_bgSprite","\x09","\xbf","\x32","\xe0"),
	HX_HCSTRING("_parentState","\x88","\x96","\xcf","\x7a"),
	HX_HCSTRING("_bgColor","\xdf","\xda","\x3b","\x31"),
	HX_HCSTRING("_created","\x69","\x0f","\x23","\x4b"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("get_bgColor","\x75","\xe1","\x7d","\x7d"),
	HX_HCSTRING("set_bgColor","\x81","\xe8","\xea","\x87"),
	::String(null()) };

static void FlxSubState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxSubState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxSubState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxSubState_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxSubState_obj::__mClass;

void FlxSubState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxSubState","\xd1","\xb5","\x9f","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxSubState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxSubState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxSubState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxSubState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSubState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
