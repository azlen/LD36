// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_system_replay_FrameRecord
#include <flixel/system/replay/FrameRecord.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

namespace flixel{
namespace util{

void FlxArrayUtil_obj::__construct() { }

Dynamic FlxArrayUtil_obj::__CreateEmpty() { return new FlxArrayUtil_obj; }

hx::ObjectPtr< FlxArrayUtil_obj > FlxArrayUtil_obj::__new()
{
	hx::ObjectPtr< FlxArrayUtil_obj > _hx_result = new FlxArrayUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxArrayUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxArrayUtil_obj > _hx_result = new FlxArrayUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< ::Dynamic> FlxArrayUtil_obj::setLength_flixel_system_replay_FrameRecord(::Array< ::Dynamic> array,Int newLength){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","setLength_flixel_system_replay_FrameRecord",0x79844eb5,"flixel.util.FlxArrayUtil.setLength_flixel_system_replay_FrameRecord","flixel/util/FlxArrayUtil.hx",16,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(newLength,"newLength")
HXLINE(  17)		if ((newLength < (int)0)) {
HXLINE(  18)			return array;
            		}
HXLINE(  21)		HX_VARI( Int,diff) = (newLength - array->length);
HXLINE(  22)		if ((diff >= (int)0)) {
HXLINE(  23)			return array;
            		}
HXLINE(  28)		diff = -(diff);
HXLINE(  29)		{
HXLINE(  29)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  29)			HX_VARI( Int,_g) = diff;
HXDLIN(  29)			while((_g1 < _g)){
HXLINE(  29)				++_g1;
HXLINE(  30)				array->pop().StaticCast<  ::flixel::_hx_system::replay::FrameRecord >();
            			}
            		}
HXLINE(  33)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxArrayUtil_obj,setLength_flixel_system_replay_FrameRecord,return )

::cpp::VirtualArray FlxArrayUtil_obj::setLength_flixel_group_FlxTypedGroup_T(::cpp::VirtualArray array,Int newLength){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","setLength_flixel_group_FlxTypedGroup_T",0x1139627b,"flixel.util.FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T","flixel/util/FlxArrayUtil.hx",16,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(newLength,"newLength")
HXLINE(  17)		if ((newLength < (int)0)) {
HXLINE(  18)			return array;
            		}
HXLINE(  21)		HX_VARI( Int,diff) = (newLength - array->get_length());
HXLINE(  22)		if ((diff >= (int)0)) {
HXLINE(  23)			return array;
            		}
HXLINE(  28)		diff = -(diff);
HXLINE(  29)		{
HXLINE(  29)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  29)			HX_VARI( Int,_g) = diff;
HXDLIN(  29)			while((_g1 < _g)){
HXLINE(  29)				++_g1;
HXLINE(  30)				array->pop();
            			}
            		}
HXLINE(  33)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxArrayUtil_obj,setLength_flixel_group_FlxTypedGroup_T,return )

::Array< Int > FlxArrayUtil_obj::setLength_Int(::Array< Int > array,Int newLength){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","setLength_Int",0x3efc372d,"flixel.util.FlxArrayUtil.setLength_Int","flixel/util/FlxArrayUtil.hx",16,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(newLength,"newLength")
HXLINE(  17)		if ((newLength < (int)0)) {
HXLINE(  18)			return array;
            		}
HXLINE(  21)		HX_VARI( Int,diff) = (newLength - array->length);
HXLINE(  22)		if ((diff >= (int)0)) {
HXLINE(  23)			return array;
            		}
HXLINE(  28)		diff = -(diff);
HXLINE(  29)		{
HXLINE(  29)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  29)			HX_VARI( Int,_g) = diff;
HXDLIN(  29)			while((_g1 < _g)){
HXLINE(  29)				++_g1;
HXLINE(  30)				array->pop();
            			}
            		}
HXLINE(  33)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxArrayUtil_obj,setLength_Int,return )

::Array< Int > FlxArrayUtil_obj::flatten2DArray_Int(::Array< ::Dynamic> array){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","flatten2DArray_Int",0x9867551e,"flixel.util.FlxArrayUtil.flatten2DArray_Int","flixel/util/FlxArrayUtil.hx",120,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
HXLINE( 121)		HX_VARI( ::Array< Int >,result) = ::Array_obj< Int >::__new(0);
HXLINE( 122)		{
HXLINE( 122)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 122)			while((_g < array->length)){
HXLINE( 122)				HX_VARI( ::Array< Int >,innerArray) = array->__get(_g).StaticCast< ::Array< Int > >();
HXDLIN( 122)				++_g;
HXLINE( 123)				{
HXLINE( 123)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 123)					while((_g1 < innerArray->length)){
HXLINE( 123)						HX_VARI( Int,element) = innerArray->__get(_g1);
HXDLIN( 123)						++_g1;
HXLINE( 124)						result->push(element);
            					}
            				}
            			}
            		}
HXLINE( 125)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxArrayUtil_obj,flatten2DArray_Int,return )

::Array< ::Dynamic> FlxArrayUtil_obj::fastSplice_flixel_tweens_FlxTween(::Array< ::Dynamic> array, ::flixel::tweens::FlxTween element){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","fastSplice_flixel_tweens_FlxTween",0x134d3569,"flixel.util.FlxArrayUtil.fastSplice_flixel_tweens_FlxTween","flixel/util/FlxArrayUtil.hx",47,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(element,"element")
HXLINE(  48)		HX_VARI( Int,index) = array->indexOf(element,null());
HXLINE(  49)		if ((index != (int)-1)) {
HXLINE(  50)			 ::flixel::tweens::FlxTween _hx_tmp = array->__get((array->length - (int)1)).StaticCast<  ::flixel::tweens::FlxTween >();
HXDLIN(  50)			array[index] = _hx_tmp;
HXDLIN(  50)			array->pop().StaticCast<  ::flixel::tweens::FlxTween >();
HXDLIN(  50)			return array;
            		}
HXLINE(  51)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxArrayUtil_obj,fastSplice_flixel_tweens_FlxTween,return )

::Array< ::Dynamic> FlxArrayUtil_obj::fastSplice_flixel_util_FlxTimer(::Array< ::Dynamic> array, ::flixel::util::FlxTimer element){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","fastSplice_flixel_util_FlxTimer",0x46676ae9,"flixel.util.FlxArrayUtil.fastSplice_flixel_util_FlxTimer","flixel/util/FlxArrayUtil.hx",47,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(element,"element")
HXLINE(  48)		HX_VARI( Int,index) = array->indexOf(element,null());
HXLINE(  49)		if ((index != (int)-1)) {
HXLINE(  50)			 ::flixel::util::FlxTimer _hx_tmp = array->__get((array->length - (int)1)).StaticCast<  ::flixel::util::FlxTimer >();
HXDLIN(  50)			array[index] = _hx_tmp;
HXDLIN(  50)			array->pop().StaticCast<  ::flixel::util::FlxTimer >();
HXDLIN(  50)			return array;
            		}
HXLINE(  51)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxArrayUtil_obj,fastSplice_flixel_util_FlxTimer,return )

::cpp::VirtualArray FlxArrayUtil_obj::swapAndPop_fastSplice_T(::cpp::VirtualArray array,Int index){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","swapAndPop_fastSplice_T",0xfdfa2694,"flixel.util.FlxArrayUtil.swapAndPop_fastSplice_T","flixel/util/FlxArrayUtil.hx",77,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(index,"index")
HXLINE(  78)		 ::Dynamic _hx_tmp = array->__get((array->get_length() - (int)1));
HXDLIN(  78)		array->set(index,_hx_tmp);
HXLINE(  79)		array->pop();
HXLINE(  80)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxArrayUtil_obj,swapAndPop_fastSplice_T,return )

::cpp::VirtualArray FlxArrayUtil_obj::clearArray(::cpp::VirtualArray array,hx::Null< Bool >  __o_recursive){
Bool recursive = __o_recursive.Default(false);
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","clearArray",0xac755a77,"flixel.util.FlxArrayUtil.clearArray","flixel/util/FlxArrayUtil.hx",92,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(  93)		Bool _hx_tmp = hx::IsNull( array );
HXDLIN(  93)		if (_hx_tmp) {
HXLINE(  94)			return array;
            		}
HXLINE(  96)		if (recursive) {
HXLINE(  98)			while((array->get_length() > (int)0)){
HXLINE( 100)				HX_VARI(  ::Dynamic,thing) = array->pop();
HXLINE( 101)				Bool _hx_tmp1 = ::Std_obj::is(thing,hx::ArrayBase::__mClass);
HXDLIN( 101)				if (_hx_tmp1) {
HXLINE( 102)					::flixel::util::FlxArrayUtil_obj::clearArray(array,recursive);
            				}
            			}
            		}
            		else {
HXLINE( 107)			while((array->get_length() > (int)0)){
HXLINE( 108)				array->pop();
            			}
            		}
HXLINE( 111)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxArrayUtil_obj,clearArray,return )

Bool FlxArrayUtil_obj::equals(::cpp::VirtualArray array1,::cpp::VirtualArray array2){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","equals",0x2985aa6a,"flixel.util.FlxArrayUtil.equals","flixel/util/FlxArrayUtil.hx",133,0xa0dc755b)
            	HX_STACK_ARG(array1,"array1")
            	HX_STACK_ARG(array2,"array2")
HXLINE( 134)		Bool _hx_tmp;
HXDLIN( 134)		Bool _hx_tmp1 = hx::IsNull( array1 );
HXDLIN( 134)		if (_hx_tmp1) {
HXLINE( 134)			_hx_tmp = hx::IsNull( array2 );
            		}
            		else {
HXLINE( 134)			_hx_tmp = false;
            		}
HXDLIN( 134)		if (_hx_tmp) {
HXLINE( 135)			return true;
            		}
HXLINE( 136)		Bool _hx_tmp2;
HXDLIN( 136)		Bool _hx_tmp3 = hx::IsNull( array1 );
HXDLIN( 136)		if (_hx_tmp3) {
HXLINE( 136)			_hx_tmp2 = hx::IsNotNull( array2 );
            		}
            		else {
HXLINE( 136)			_hx_tmp2 = false;
            		}
HXDLIN( 136)		if (_hx_tmp2) {
HXLINE( 137)			return false;
            		}
HXLINE( 138)		Bool _hx_tmp4;
HXDLIN( 138)		Bool _hx_tmp5 = hx::IsNotNull( array1 );
HXDLIN( 138)		if (_hx_tmp5) {
HXLINE( 138)			_hx_tmp4 = hx::IsNull( array2 );
            		}
            		else {
HXLINE( 138)			_hx_tmp4 = false;
            		}
HXDLIN( 138)		if (_hx_tmp4) {
HXLINE( 139)			return false;
            		}
HXLINE( 140)		if ((array1->get_length() != array2->get_length())) {
HXLINE( 141)			return false;
            		}
HXLINE( 143)		{
HXLINE( 143)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 143)			HX_VARI( Int,_g) = array1->get_length();
HXDLIN( 143)			while((_g1 < _g)){
HXLINE( 143)				HX_VARI( Int,i) = _g1++;
HXLINE( 144)				if (hx::IsNotEq( array1->__get(i),array2->__get(i) )) {
HXLINE( 145)					return false;
            				}
            			}
            		}
HXLINE( 147)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxArrayUtil_obj,equals,return )

 ::Dynamic FlxArrayUtil_obj::last(::cpp::VirtualArray array){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","last",0x58e5d5c1,"flixel.util.FlxArrayUtil.last","flixel/util/FlxArrayUtil.hx",154,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
HXLINE( 155)		Bool _hx_tmp;
HXDLIN( 155)		Bool _hx_tmp1 = hx::IsNotNull( array );
HXDLIN( 155)		if (_hx_tmp1) {
HXLINE( 155)			_hx_tmp = (array->get_length() == (int)0);
            		}
            		else {
HXLINE( 155)			_hx_tmp = true;
            		}
HXDLIN( 155)		if (_hx_tmp) {
HXLINE( 156)			return null();
            		}
HXLINE( 157)		return array->__get((array->get_length() - (int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxArrayUtil_obj,last,return )

Bool FlxArrayUtil_obj::contains(::cpp::VirtualArray array, ::Dynamic element){
            	HX_STACK_FRAME("flixel.util.FlxArrayUtil","contains",0x2d55b70a,"flixel.util.FlxArrayUtil.contains","flixel/util/FlxArrayUtil.hx",162,0xa0dc755b)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(element,"element")
HXLINE( 162)		Int _hx_tmp = array->indexOf(element,null());
HXDLIN( 162)		return (_hx_tmp != (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxArrayUtil_obj,contains,return )


FlxArrayUtil_obj::FlxArrayUtil_obj()
{
}

bool FlxArrayUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"last") ) { outValue = last_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { outValue = contains_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearArray") ) { outValue = clearArray_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setLength_Int") ) { outValue = setLength_Int_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"flatten2DArray_Int") ) { outValue = flatten2DArray_Int_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"swapAndPop_fastSplice_T") ) { outValue = swapAndPop_fastSplice_T_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"fastSplice_flixel_util_FlxTimer") ) { outValue = fastSplice_flixel_util_FlxTimer_dyn(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"fastSplice_flixel_tweens_FlxTween") ) { outValue = fastSplice_flixel_tweens_FlxTween_dyn(); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"setLength_flixel_group_FlxTypedGroup_T") ) { outValue = setLength_flixel_group_FlxTypedGroup_T_dyn(); return true; }
		break;
	case 42:
		if (HX_FIELD_EQ(inName,"setLength_flixel_system_replay_FrameRecord") ) { outValue = setLength_flixel_system_replay_FrameRecord_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxArrayUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FlxArrayUtil_obj_sStaticStorageInfo = 0;
#endif

static void FlxArrayUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxArrayUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxArrayUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxArrayUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxArrayUtil_obj::__mClass;

static ::String FlxArrayUtil_obj_sStaticFields[] = {
	HX_HCSTRING("setLength_flixel_system_replay_FrameRecord","\x0a","\x15","\xae","\x16"),
	HX_HCSTRING("setLength_flixel_group_FlxTypedGroup_T","\x50","\x1a","\xe2","\x41"),
	HX_HCSTRING("setLength_Int","\xf8","\x47","\x06","\xcb"),
	HX_HCSTRING("flatten2DArray_Int","\x73","\x84","\x55","\x08"),
	HX_HCSTRING("fastSplice_flixel_tweens_FlxTween","\xb4","\x8d","\xa9","\xb9"),
	HX_HCSTRING("fastSplice_flixel_util_FlxTimer","\x74","\x8a","\x94","\x6f"),
	HX_HCSTRING("swapAndPop_fastSplice_T","\x1f","\x43","\x97","\xd1"),
	HX_HCSTRING("clearArray","\xcc","\xac","\x99","\xfa"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("last","\x56","\x0a","\xad","\x47"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	::String(null())
};

void FlxArrayUtil_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.util.FlxArrayUtil","\xe3","\x4c","\x85","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxArrayUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxArrayUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxArrayUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FlxArrayUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxArrayUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxArrayUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxArrayUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace util
