// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPath
#include <flixel/util/FlxPath.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

namespace flixel{
namespace util{

void FlxPath_obj::__construct(){
            	HX_STACK_FRAME("flixel.util.FlxPath","new",0x6e30af6f,"flixel.util.FlxPath.new","flixel/util/FlxPath.hx",16,0x22aae741)
            	HX_STACK_THIS(this)
HXLINE( 115)		this->_firstUpdate = false;
HXLINE( 113)		this->_wasObjectImmovable = null();
HXLINE( 111)		this->_autoRotate = false;
HXLINE( 107)		this->_inc = (int)1;
HXLINE(  98)		this->finished = false;
HXLINE(  96)		this->nodeIndex = (int)0;
HXLINE(  77)		this->active = false;
HXLINE(  72)		this->autoCenter = true;
HXLINE(  68)		this->angle = ((Float)0);
HXLINE(  64)		this->speed = ((Float)0);
            	}

Dynamic FlxPath_obj::__CreateEmpty() { return new FlxPath_obj; }

hx::ObjectPtr< FlxPath_obj > FlxPath_obj::__new()
{
	hx::ObjectPtr< FlxPath_obj > _hx_result = new FlxPath_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxPath_obj > _hx_result = new FlxPath_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_util_FlxPath__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::util::FlxPath_obj::destroy,
};

void *FlxPath_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_util_FlxPath__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::flixel::util::FlxPath FlxPath_obj::reset(){
            	HX_STACK_FRAME("flixel.util.FlxPath","reset",0x2ce64a9e,"flixel.util.FlxPath.reset","flixel/util/FlxPath.hx",129,0x22aae741)
            	HX_STACK_THIS(this)
HXLINE( 134)		this->autoCenter = true;
HXLINE( 135)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,reset,return )

 ::flixel::util::FlxPath FlxPath_obj::start(::Array< ::Dynamic> Nodes,hx::Null< Float >  __o_Speed,hx::Null< Int >  __o_Mode,hx::Null< Bool >  __o_AutoRotate){
Float Speed = __o_Speed.Default(100);
Int Mode = __o_Mode.Default(0);
Bool AutoRotate = __o_AutoRotate.Default(false);
            	HX_STACK_FRAME("flixel.util.FlxPath","start",0xca297531,"flixel.util.FlxPath.start","flixel/util/FlxPath.hx",139,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Nodes,"Nodes")
            	HX_STACK_ARG(Speed,"Speed")
            	HX_STACK_ARG(Mode,"Mode")
            	HX_STACK_ARG(AutoRotate,"AutoRotate")
HXLINE( 140)		this->nodes = Nodes;
HXLINE( 141)		this->speed = ::Math_obj::abs(Speed);
HXLINE( 142)		this->_mode = Mode;
HXLINE( 143)		this->_autoRotate = AutoRotate;
HXLINE( 144)		this->restart();
HXLINE( 145)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxPath_obj,start,return )

 ::flixel::util::FlxPath FlxPath_obj::restart(){
            	HX_STACK_FRAME("flixel.util.FlxPath","restart",0xf4e0da5e,"flixel.util.FlxPath.restart","flixel/util/FlxPath.hx",149,0x22aae741)
            	HX_STACK_THIS(this)
HXLINE( 150)		this->finished = false;
HXLINE( 151)		this->active = true;
HXLINE( 152)		this->_firstUpdate = true;
HXLINE( 154)		Bool _hx_tmp;
HXDLIN( 154)		Bool _hx_tmp1 = hx::IsNotNull( this->nodes );
HXDLIN( 154)		if (_hx_tmp1) {
HXLINE( 154)			_hx_tmp = (this->nodes->length <= (int)0);
            		}
            		else {
HXLINE( 154)			_hx_tmp = true;
            		}
HXDLIN( 154)		if (_hx_tmp) {
HXLINE( 156)			this->active = false;
            		}
HXLINE( 160)		Bool _hx_tmp2;
HXDLIN( 160)		if ((this->_mode != (int)1)) {
HXLINE( 160)			_hx_tmp2 = (this->_mode == (int)256);
            		}
            		else {
HXLINE( 160)			_hx_tmp2 = true;
            		}
HXDLIN( 160)		if (_hx_tmp2) {
HXLINE( 162)			this->nodeIndex = (this->nodes->length - (int)1);
HXLINE( 163)			this->_inc = (int)-1;
            		}
            		else {
HXLINE( 167)			this->nodeIndex = (int)0;
HXLINE( 168)			this->_inc = (int)1;
            		}
HXLINE( 171)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,restart,return )

void FlxPath_obj::setNode(Int NodeIndex){
            	HX_STACK_FRAME("flixel.util.FlxPath","setNode",0x98c95d53,"flixel.util.FlxPath.setNode","flixel/util/FlxPath.hx",180,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(NodeIndex,"NodeIndex")
HXLINE( 181)		Bool _hx_tmp = (NodeIndex < (int)0);
HXDLIN( 181)		if (_hx_tmp) {
HXLINE( 182)			NodeIndex = (int)0;
            		}
            		else {
HXLINE( 183)			Bool _hx_tmp1 = (NodeIndex > (this->nodes->length - (int)1));
HXDLIN( 183)			if (_hx_tmp1) {
HXLINE( 184)				NodeIndex = (this->nodes->length - (int)1);
            			}
            		}
HXLINE( 186)		this->nodeIndex = NodeIndex;
HXLINE( 187)		this->advancePath(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,setNode,(void))

void FlxPath_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.util.FlxPath","update",0x9b283a5a,"flixel.util.FlxPath.update","flixel/util/FlxPath.hx",196,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 197)		Bool _hx_tmp = hx::IsNull( this->object );
HXDLIN( 197)		if (_hx_tmp) {
HXLINE( 198)			return;
            		}
HXLINE( 200)		Bool _hx_tmp1 = this->_firstUpdate;
HXDLIN( 200)		if (_hx_tmp1) {
HXLINE( 202)			this->_wasObjectImmovable = this->object->immovable;
HXLINE( 203)			this->object->set_immovable(true);
HXLINE( 204)			this->_firstUpdate = false;
            		}
HXLINE( 208)		::flixel::util::FlxPath_obj::_point->set_x(this->object->x);
HXLINE( 209)		::flixel::util::FlxPath_obj::_point->set_y(this->object->y);
HXLINE( 210)		Bool _hx_tmp2 = this->autoCenter;
HXDLIN( 210)		if (_hx_tmp2) {
HXLINE( 212)			HX_VARI(  ::flixel::math::FlxPoint,_this) = ::flixel::util::FlxPath_obj::_point;
HXDLIN( 212)			Float _hx_tmp3 = this->object->get_width();
HXDLIN( 212)			Float X = (_hx_tmp3 * ((Float)0.5));
HXDLIN( 212)			Float _hx_tmp4 = this->object->get_height();
HXDLIN( 212)			Float Y = (_hx_tmp4 * ((Float)0.5));
HXDLIN( 212)			{
HXLINE( 212)				Float _hx_tmp5 = (_this->x + X);
HXDLIN( 212)				_this->set_x(_hx_tmp5);
            			}
HXDLIN( 212)			{
HXLINE( 212)				Float _hx_tmp6 = (_this->y + Y);
HXDLIN( 212)				_this->set_y(_hx_tmp6);
            			}
            		}
HXLINE( 214)		HX_VARI(  ::flixel::math::FlxPoint,node) = this->nodes->__get(this->nodeIndex).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 215)		HX_VARI( Float,deltaX) = (node->x - ::flixel::util::FlxPath_obj::_point->x);
HXLINE( 216)		HX_VARI( Float,deltaY) = (node->y - ::flixel::util::FlxPath_obj::_point->y);
HXLINE( 218)		HX_VARI( Bool,horizontalOnly) = (((int)this->_mode & (int)(int)65536) > (int)0);
HXLINE( 219)		HX_VARI( Bool,verticalOnly) = (((int)this->_mode & (int)(int)1048576) > (int)0);
HXLINE( 221)		if (horizontalOnly) {
HXLINE( 223)			Float _hx_tmp7;
HXDLIN( 223)			if ((deltaX > (int)0)) {
HXLINE( 223)				_hx_tmp7 = deltaX;
            			}
            			else {
HXLINE( 223)				_hx_tmp7 = -(deltaX);
            			}
HXDLIN( 223)			Bool _hx_tmp8 = (_hx_tmp7 < (this->speed * elapsed));
HXDLIN( 223)			if (_hx_tmp8) {
HXLINE( 225)				node = this->advancePath(null());
            			}
            		}
            		else {
HXLINE( 228)			if (verticalOnly) {
HXLINE( 230)				Float _hx_tmp9;
HXDLIN( 230)				if ((deltaY > (int)0)) {
HXLINE( 230)					_hx_tmp9 = deltaY;
            				}
            				else {
HXLINE( 230)					_hx_tmp9 = -(deltaY);
            				}
HXDLIN( 230)				Bool _hx_tmp10 = (_hx_tmp9 < (this->speed * elapsed));
HXDLIN( 230)				if (_hx_tmp10) {
HXLINE( 232)					node = this->advancePath(null());
            				}
            			}
            			else {
HXLINE( 237)				Float _hx_tmp11 = ::Math_obj::sqrt(((deltaX * deltaX) + (deltaY * deltaY)));
HXDLIN( 237)				Bool _hx_tmp12 = (_hx_tmp11 < (this->speed * elapsed));
HXDLIN( 237)				if (_hx_tmp12) {
HXLINE( 239)					node = this->advancePath(null());
            				}
            			}
            		}
HXLINE( 244)		Bool _hx_tmp13;
HXDLIN( 244)		Bool _hx_tmp14 = hx::IsNotNull( this->object );
HXDLIN( 244)		if (_hx_tmp14) {
HXLINE( 244)			_hx_tmp13 = (this->speed != (int)0);
            		}
            		else {
HXLINE( 244)			_hx_tmp13 = false;
            		}
HXDLIN( 244)		if (_hx_tmp13) {
HXLINE( 247)			::flixel::util::FlxPath_obj::_point->set_x(this->object->x);
HXLINE( 248)			::flixel::util::FlxPath_obj::_point->set_y(this->object->y);
HXLINE( 250)			Bool _hx_tmp15 = this->autoCenter;
HXDLIN( 250)			if (_hx_tmp15) {
HXLINE( 252)				HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = ::flixel::util::FlxPath_obj::_point;
HXDLIN( 252)				Float _hx_tmp16 = this->object->get_width();
HXDLIN( 252)				Float X1 = (_hx_tmp16 * ((Float)0.5));
HXDLIN( 252)				Float _hx_tmp17 = this->object->get_height();
HXDLIN( 252)				Float Y1 = (_hx_tmp17 * ((Float)0.5));
HXDLIN( 252)				{
HXLINE( 252)					Float _hx_tmp18 = (_this1->x + X1);
HXDLIN( 252)					_this1->set_x(_hx_tmp18);
            				}
HXDLIN( 252)				{
HXLINE( 252)					Float _hx_tmp19 = (_this1->y + Y1);
HXDLIN( 252)					_this1->set_y(_hx_tmp19);
            				}
            			}
HXLINE( 255)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this2,"_this") = ::flixel::util::FlxPath_obj::_point;
HXDLIN( 255)			HX_VAR( Bool,result);
HXDLIN( 255)			Float aValueA = _this2->x;
HXDLIN( 255)			Float aValueB = node->x;
HXDLIN( 255)			Float _hx_tmp20 = ::Math_obj::abs((aValueA - aValueB));
HXDLIN( 255)			if ((_hx_tmp20 <= ((Float)0.0000001))) {
HXLINE( 255)				Float aValueA1 = _this2->y;
HXDLIN( 255)				Float aValueB1 = node->y;
HXDLIN( 255)				Float _hx_tmp21 = ::Math_obj::abs((aValueA1 - aValueB1));
HXDLIN( 255)				result = (_hx_tmp21 <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 255)				result = false;
            			}
HXDLIN( 255)			Bool _hx_tmp22 = node->_weak;
HXDLIN( 255)			if (_hx_tmp22) {
HXLINE( 255)				node->put();
            			}
HXDLIN( 255)			if (!(result)) {
HXLINE( 257)				this->calculateVelocity(node,horizontalOnly,verticalOnly);
            			}
            			else {
HXLINE( 261)				this->object->velocity->set(null(),null());
            			}
HXLINE( 265)			Bool _hx_tmp23 = this->_autoRotate;
HXDLIN( 265)			if (_hx_tmp23) {
HXLINE( 267)				this->object->angularVelocity = (int)0;
HXLINE( 268)				this->object->angularAcceleration = (int)0;
HXLINE( 269)				this->object->set_angle(this->angle);
            			}
HXLINE( 272)			Bool _hx_tmp24 = this->finished;
HXDLIN( 272)			if (_hx_tmp24) {
HXLINE( 274)				this->cancel();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,update,(void))

void FlxPath_obj::calculateVelocity( ::flixel::math::FlxPoint node,Bool horizontalOnly,Bool verticalOnly){
            	HX_STACK_FRAME("flixel.util.FlxPath","calculateVelocity",0x682aa4f2,"flixel.util.FlxPath.calculateVelocity","flixel/util/FlxPath.hx",281,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(horizontalOnly,"horizontalOnly")
            	HX_STACK_ARG(verticalOnly,"verticalOnly")
HXLINE( 281)		Bool _hx_tmp;
HXDLIN( 281)		if (!(horizontalOnly)) {
HXLINE( 281)			_hx_tmp = (::flixel::util::FlxPath_obj::_point->y == node->y);
            		}
            		else {
HXLINE( 281)			_hx_tmp = true;
            		}
HXDLIN( 281)		if (_hx_tmp) {
HXLINE( 283)			Float _hx_tmp1;
HXDLIN( 283)			if ((::flixel::util::FlxPath_obj::_point->x < node->x)) {
HXLINE( 283)				_hx_tmp1 = this->speed;
            			}
            			else {
HXLINE( 283)				_hx_tmp1 = -(this->speed);
            			}
HXDLIN( 283)			this->object->velocity->set_x(_hx_tmp1);
HXLINE( 284)			Float _hx_tmp2;
HXDLIN( 284)			if ((this->object->velocity->x < (int)0)) {
HXLINE( 284)				_hx_tmp2 = (int)-90;
            			}
            			else {
HXLINE( 284)				_hx_tmp2 = (int)90;
            			}
HXDLIN( 284)			this->angle = _hx_tmp2;
HXLINE( 286)			if (!(horizontalOnly)) {
HXLINE( 288)				this->object->velocity->set_y((int)0);
            			}
            		}
            		else {
HXLINE( 291)			Bool _hx_tmp3;
HXDLIN( 291)			if (!(verticalOnly)) {
HXLINE( 291)				_hx_tmp3 = (::flixel::util::FlxPath_obj::_point->x == node->x);
            			}
            			else {
HXLINE( 291)				_hx_tmp3 = true;
            			}
HXDLIN( 291)			if (_hx_tmp3) {
HXLINE( 293)				Float _hx_tmp4;
HXDLIN( 293)				if ((::flixel::util::FlxPath_obj::_point->y < node->y)) {
HXLINE( 293)					_hx_tmp4 = this->speed;
            				}
            				else {
HXLINE( 293)					_hx_tmp4 = -(this->speed);
            				}
HXDLIN( 293)				this->object->velocity->set_y(_hx_tmp4);
HXLINE( 294)				Float _hx_tmp5;
HXDLIN( 294)				if ((this->object->velocity->y < (int)0)) {
HXLINE( 294)					_hx_tmp5 = (int)0;
            				}
            				else {
HXLINE( 294)					_hx_tmp5 = (int)180;
            				}
HXDLIN( 294)				this->angle = _hx_tmp5;
HXLINE( 296)				if (!(verticalOnly)) {
HXLINE( 298)					this->object->velocity->set_x((int)0);
            				}
            			}
            			else {
HXLINE( 303)				Float _hx_tmp6;
HXDLIN( 303)				if ((::flixel::util::FlxPath_obj::_point->x < node->x)) {
HXLINE( 303)					_hx_tmp6 = this->speed;
            				}
            				else {
HXLINE( 303)					_hx_tmp6 = -(this->speed);
            				}
HXDLIN( 303)				this->object->velocity->set_x(_hx_tmp6);
HXLINE( 304)				Float _hx_tmp7;
HXDLIN( 304)				if ((::flixel::util::FlxPath_obj::_point->y < node->y)) {
HXLINE( 304)					_hx_tmp7 = this->speed;
            				}
            				else {
HXLINE( 304)					_hx_tmp7 = -(this->speed);
            				}
HXDLIN( 304)				this->object->velocity->set_y(_hx_tmp7);
HXLINE( 306)				this->angle = ::flixel::util::FlxPath_obj::_point->angleBetween(node);
HXLINE( 308)				this->object->velocity->set((int)0,-(this->speed));
HXLINE( 309)				HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 309)				point->_inPool = false;
HXDLIN( 309)				point->_weak = true;
HXDLIN( 309)				this->object->velocity->rotate(point,this->angle);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxPath_obj,calculateVelocity,(void))

 ::flixel::math::FlxPoint FlxPath_obj::advancePath(hx::Null< Bool >  __o_Snap){
Bool Snap = __o_Snap.Default(true);
            	HX_STACK_FRAME("flixel.util.FlxPath","advancePath",0xf96b8956,"flixel.util.FlxPath.advancePath","flixel/util/FlxPath.hx",319,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Snap,"Snap")
HXLINE( 320)		if (Snap) {
HXLINE( 322)			HX_VARI(  ::flixel::math::FlxPoint,oldNode) = this->nodes->__get(this->nodeIndex).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 323)			Bool _hx_tmp = hx::IsNotNull( oldNode );
HXDLIN( 323)			if (_hx_tmp) {
HXLINE( 325)				Bool _hx_tmp1 = (((int)this->_mode & (int)(int)1048576) == (int)0);
HXDLIN( 325)				if (_hx_tmp1) {
HXLINE( 327)					this->object->set_x(oldNode->x);
HXLINE( 328)					Bool _hx_tmp2 = this->autoCenter;
HXDLIN( 328)					if (_hx_tmp2) {
HXLINE( 329)						HX_VARI(  ::flixel::FlxObject,_g) = this->object;
HXDLIN( 329)						Float _hx_tmp3 = _g->x;
HXDLIN( 329)						Float _hx_tmp4 = this->object->get_width();
HXDLIN( 329)						_g->set_x((_hx_tmp3 - (_hx_tmp4 * ((Float)0.5))));
            					}
            				}
HXLINE( 331)				Bool _hx_tmp5 = (((int)this->_mode & (int)(int)65536) == (int)0);
HXDLIN( 331)				if (_hx_tmp5) {
HXLINE( 333)					this->object->set_y(oldNode->y);
HXLINE( 334)					Bool _hx_tmp6 = this->autoCenter;
HXDLIN( 334)					if (_hx_tmp6) {
HXLINE( 335)						HX_VARI_NAME(  ::flixel::FlxObject,_g1,"_g") = this->object;
HXDLIN( 335)						Float _hx_tmp7 = _g1->y;
HXDLIN( 335)						Float _hx_tmp8 = this->object->get_height();
HXDLIN( 335)						_g1->set_y((_hx_tmp7 - (_hx_tmp8 * ((Float)0.5))));
            					}
            				}
            			}
            		}
HXLINE( 340)		HX_VARI( Bool,callComplete) = false;
HXLINE( 341)		hx::AddEq(this->nodeIndex,this->_inc);
HXLINE( 343)		Bool _hx_tmp9 = (((int)this->_mode & (int)(int)1) > (int)0);
HXDLIN( 343)		if (_hx_tmp9) {
HXLINE( 345)			Bool _hx_tmp10 = (this->nodeIndex < (int)0);
HXDLIN( 345)			if (_hx_tmp10) {
HXLINE( 347)				this->nodeIndex = (int)0;
HXLINE( 348)				callComplete = true;
HXLINE( 349)				this->onEnd();
            			}
            		}
            		else {
HXLINE( 352)			Bool _hx_tmp11 = (((int)this->_mode & (int)(int)16) > (int)0);
HXDLIN( 352)			if (_hx_tmp11) {
HXLINE( 354)				Bool _hx_tmp12 = (this->nodeIndex >= this->nodes->length);
HXDLIN( 354)				if (_hx_tmp12) {
HXLINE( 356)					callComplete = true;
HXLINE( 357)					this->nodeIndex = (int)0;
            				}
            			}
            			else {
HXLINE( 360)				Bool _hx_tmp13 = (((int)this->_mode & (int)(int)256) > (int)0);
HXDLIN( 360)				if (_hx_tmp13) {
HXLINE( 362)					Bool _hx_tmp14 = (this->nodeIndex < (int)0);
HXDLIN( 362)					if (_hx_tmp14) {
HXLINE( 364)						this->nodeIndex = (this->nodes->length - (int)1);
HXLINE( 365)						callComplete = true;
HXLINE( 366)						Bool _hx_tmp15 = (this->nodeIndex < (int)0);
HXDLIN( 366)						if (_hx_tmp15) {
HXLINE( 368)							this->nodeIndex = (int)0;
            						}
            					}
            				}
            				else {
HXLINE( 372)					Bool _hx_tmp16 = (((int)this->_mode & (int)(int)4096) > (int)0);
HXDLIN( 372)					if (_hx_tmp16) {
HXLINE( 374)						Bool _hx_tmp17 = (this->_inc > (int)0);
HXDLIN( 374)						if (_hx_tmp17) {
HXLINE( 376)							Bool _hx_tmp18 = (this->nodeIndex >= this->nodes->length);
HXDLIN( 376)							if (_hx_tmp18) {
HXLINE( 378)								this->nodeIndex = (this->nodes->length - (int)2);
HXLINE( 379)								callComplete = true;
HXLINE( 380)								Bool _hx_tmp19 = (this->nodeIndex < (int)0);
HXDLIN( 380)								if (_hx_tmp19) {
HXLINE( 382)									this->nodeIndex = (int)0;
            								}
HXLINE( 384)								this->_inc = -(this->_inc);
            							}
            						}
            						else {
HXLINE( 387)							Bool _hx_tmp20 = (this->nodeIndex < (int)0);
HXDLIN( 387)							if (_hx_tmp20) {
HXLINE( 389)								this->nodeIndex = (int)1;
HXLINE( 390)								callComplete = true;
HXLINE( 391)								Bool _hx_tmp21 = (this->nodeIndex >= this->nodes->length);
HXDLIN( 391)								if (_hx_tmp21) {
HXLINE( 393)									this->nodeIndex = (this->nodes->length - (int)1);
            								}
HXLINE( 395)								Bool _hx_tmp22 = (this->nodeIndex < (int)0);
HXDLIN( 395)								if (_hx_tmp22) {
HXLINE( 397)									this->nodeIndex = (int)0;
            								}
HXLINE( 399)								this->_inc = -(this->_inc);
            							}
            						}
            					}
            					else {
HXLINE( 404)						Bool _hx_tmp23 = (this->nodeIndex >= this->nodes->length);
HXDLIN( 404)						if (_hx_tmp23) {
HXLINE( 406)							this->nodeIndex = (this->nodes->length - (int)1);
HXLINE( 407)							callComplete = true;
HXLINE( 408)							this->onEnd();
            						}
            					}
            				}
            			}
            		}
HXLINE( 412)		Bool _hx_tmp24;
HXDLIN( 412)		if (callComplete) {
HXLINE( 412)			_hx_tmp24 = hx::IsNotNull( this->onComplete );
            		}
            		else {
HXLINE( 412)			_hx_tmp24 = false;
            		}
HXDLIN( 412)		if (_hx_tmp24) {
HXLINE( 414)			this->onComplete(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 417)		return this->nodes->__get(this->nodeIndex).StaticCast<  ::flixel::math::FlxPoint >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,advancePath,return )

void FlxPath_obj::cancel(){
            	HX_STACK_FRAME("flixel.util.FlxPath","cancel",0xcc56a1cb,"flixel.util.FlxPath.cancel","flixel/util/FlxPath.hx",424,0x22aae741)
            	HX_STACK_THIS(this)
HXLINE( 425)		this->onEnd();
HXLINE( 427)		Bool _hx_tmp = hx::IsNotNull( this->object );
HXDLIN( 427)		if (_hx_tmp) {
HXLINE( 429)			this->object->velocity->set((int)0,(int)0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,cancel,(void))

void FlxPath_obj::onEnd(){
            	HX_STACK_FRAME("flixel.util.FlxPath","onEnd",0x788298cb,"flixel.util.FlxPath.onEnd","flixel/util/FlxPath.hx",437,0x22aae741)
            	HX_STACK_THIS(this)
HXLINE( 438)		this->finished = true;
HXLINE( 439)		this->active = false;
HXLINE( 440)		Bool _hx_tmp = hx::IsNotNull( this->_wasObjectImmovable );
HXDLIN( 440)		if (_hx_tmp) {
HXLINE( 441)			this->object->set_immovable(this->_wasObjectImmovable);
            		}
HXLINE( 442)		this->_wasObjectImmovable = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,onEnd,(void))

void FlxPath_obj::destroy(){
            	HX_STACK_FRAME("flixel.util.FlxPath","destroy",0xaec13f89,"flixel.util.FlxPath.destroy","flixel/util/FlxPath.hx",449,0x22aae741)
            	HX_STACK_THIS(this)
HXLINE( 450)		::flixel::util::FlxDestroyUtil_obj::putArray(this->nodes);
HXLINE( 451)		this->nodes = null();
HXLINE( 452)		this->object = null();
HXLINE( 453)		this->onComplete = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,destroy,(void))

 ::flixel::util::FlxPath FlxPath_obj::add(Float X,Float Y){
            	HX_STACK_FRAME("flixel.util.FlxPath","add",0x6e26d130,"flixel.util.FlxPath.add","flixel/util/FlxPath.hx",463,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 464)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 464)		point->_inPool = false;
HXDLIN( 464)		this->nodes->push(point);
HXLINE( 465)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPath_obj,add,return )

 ::flixel::util::FlxPath FlxPath_obj::addAt(Float X,Float Y,Int Index){
            	HX_STACK_FRAME("flixel.util.FlxPath","addAt",0x6261b643,"flixel.util.FlxPath.addAt","flixel/util/FlxPath.hx",476,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Index,"Index")
HXLINE( 477)		if ((Index < (int)0)) {
HXLINE( 477)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 478)		Bool _hx_tmp = (Index > this->nodes->length);
HXDLIN( 478)		if (_hx_tmp) {
HXLINE( 480)			Index = this->nodes->length;
            		}
HXLINE( 482)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 482)		point->_inPool = false;
HXDLIN( 482)		this->nodes->insert(Index,point);
HXLINE( 483)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxPath_obj,addAt,return )

 ::flixel::util::FlxPath FlxPath_obj::addPoint( ::flixel::math::FlxPoint Node,hx::Null< Bool >  __o_AsReference){
Bool AsReference = __o_AsReference.Default(false);
            	HX_STACK_FRAME("flixel.util.FlxPath","addPoint",0xa9620500,"flixel.util.FlxPath.addPoint","flixel/util/FlxPath.hx",495,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Node,"Node")
            	HX_STACK_ARG(AsReference,"AsReference")
HXLINE( 496)		if (AsReference) {
HXLINE( 498)			this->nodes->push(Node);
            		}
            		else {
HXLINE( 502)			Float X = Node->x;
HXDLIN( 502)			Float Y = Node->y;
HXDLIN( 502)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 502)			point->_inPool = false;
HXDLIN( 502)			this->nodes->push(point);
            		}
HXLINE( 504)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPath_obj,addPoint,return )

 ::flixel::util::FlxPath FlxPath_obj::addPointAt( ::flixel::math::FlxPoint Node,Int Index,hx::Null< Bool >  __o_AsReference){
Bool AsReference = __o_AsReference.Default(false);
            	HX_STACK_FRAME("flixel.util.FlxPath","addPointAt",0x49ad7e13,"flixel.util.FlxPath.addPointAt","flixel/util/FlxPath.hx",517,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Node,"Node")
            	HX_STACK_ARG(Index,"Index")
            	HX_STACK_ARG(AsReference,"AsReference")
HXLINE( 518)		if ((Index < (int)0)) {
HXLINE( 518)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 519)		Bool _hx_tmp = (Index > this->nodes->length);
HXDLIN( 519)		if (_hx_tmp) {
HXLINE( 521)			Index = this->nodes->length;
            		}
HXLINE( 523)		if (AsReference) {
HXLINE( 525)			this->nodes->insert(Index,Node);
            		}
            		else {
HXLINE( 529)			Float X = Node->x;
HXDLIN( 529)			Float Y = Node->y;
HXDLIN( 529)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 529)			point->_inPool = false;
HXDLIN( 529)			this->nodes->insert(Index,point);
            		}
HXLINE( 531)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxPath_obj,addPointAt,return )

 ::flixel::math::FlxPoint FlxPath_obj::remove( ::flixel::math::FlxPoint Node){
            	HX_STACK_FRAME("flixel.util.FlxPath","remove",0x18ab5095,"flixel.util.FlxPath.remove","flixel/util/FlxPath.hx",542,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Node,"Node")
HXLINE( 543)		HX_VARI( Int,index) = this->nodes->indexOf(Node,null());
HXLINE( 544)		if ((index >= (int)0)) {
HXLINE( 546)			::Array< ::Dynamic> _hx_tmp = this->nodes->splice(index,(int)1);
HXDLIN( 546)			return _hx_tmp->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
            		}
            		else {
HXLINE( 550)			return null();
            		}
HXLINE( 544)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,remove,return )

 ::flixel::math::FlxPoint FlxPath_obj::removeAt(Int Index){
            	HX_STACK_FRAME("flixel.util.FlxPath","removeAt",0x169098e8,"flixel.util.FlxPath.removeAt","flixel/util/FlxPath.hx",561,0x22aae741)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE( 562)		if ((this->nodes->length <= (int)0)) {
HXLINE( 564)			return null();
            		}
HXLINE( 566)		Bool _hx_tmp = (Index >= this->nodes->length);
HXDLIN( 566)		if (_hx_tmp) {
HXLINE( 568)			Index = (this->nodes->length - (int)1);
            		}
HXLINE( 570)		::Array< ::Dynamic> _hx_tmp1 = this->nodes->splice(Index,(int)1);
HXDLIN( 570)		return _hx_tmp1->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,removeAt,return )

 ::flixel::math::FlxPoint FlxPath_obj::head(){
            	HX_STACK_FRAME("flixel.util.FlxPath","head",0xf8717731,"flixel.util.FlxPath.head","flixel/util/FlxPath.hx",579,0x22aae741)
            	HX_STACK_THIS(this)
HXLINE( 580)		if ((this->nodes->length > (int)0)) {
HXLINE( 582)			return this->nodes->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
            		}
HXLINE( 584)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,head,return )

 ::flixel::math::FlxPoint FlxPath_obj::tail(){
            	HX_STACK_FRAME("flixel.util.FlxPath","tail",0x005d04a1,"flixel.util.FlxPath.tail","flixel/util/FlxPath.hx",593,0x22aae741)
            	HX_STACK_THIS(this)
HXLINE( 594)		if ((this->nodes->length > (int)0)) {
HXLINE( 596)			return this->nodes->__get((this->nodes->length - (int)1)).StaticCast<  ::flixel::math::FlxPoint >();
            		}
HXLINE( 598)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,tail,return )

Int FlxPath_obj::FORWARD;

Int FlxPath_obj::BACKWARD;

Int FlxPath_obj::LOOP_FORWARD;

Int FlxPath_obj::LOOP_BACKWARD;

Int FlxPath_obj::YOYO;

Int FlxPath_obj::HORIZONTAL_ONLY;

Int FlxPath_obj::VERTICAL_ONLY;

 ::flixel::math::FlxPoint FlxPath_obj::_point;


FlxPath_obj::FlxPath_obj()
{
}

void FlxPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxPath);
	HX_MARK_MEMBER_NAME(nodes,"nodes");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(autoCenter,"autoCenter");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(nodeIndex,"nodeIndex");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_MEMBER_NAME(_mode,"_mode");
	HX_MARK_MEMBER_NAME(_inc,"_inc");
	HX_MARK_MEMBER_NAME(_autoRotate,"_autoRotate");
	HX_MARK_MEMBER_NAME(_wasObjectImmovable,"_wasObjectImmovable");
	HX_MARK_MEMBER_NAME(_firstUpdate,"_firstUpdate");
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_END_CLASS();
}

void FlxPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nodes,"nodes");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(autoCenter,"autoCenter");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(nodeIndex,"nodeIndex");
	HX_VISIT_MEMBER_NAME(finished,"finished");
	HX_VISIT_MEMBER_NAME(_mode,"_mode");
	HX_VISIT_MEMBER_NAME(_inc,"_inc");
	HX_VISIT_MEMBER_NAME(_autoRotate,"_autoRotate");
	HX_VISIT_MEMBER_NAME(_wasObjectImmovable,"_wasObjectImmovable");
	HX_VISIT_MEMBER_NAME(_firstUpdate,"_firstUpdate");
	HX_VISIT_MEMBER_NAME(object,"object");
}

hx::Val FlxPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_inc") ) { return hx::Val( _inc); }
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head_dyn()); }
		if (HX_FIELD_EQ(inName,"tail") ) { return hx::Val( tail_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nodes") ) { return hx::Val( nodes); }
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"_mode") ) { return hx::Val( _mode); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn()); }
		if (HX_FIELD_EQ(inName,"onEnd") ) { return hx::Val( onEnd_dyn()); }
		if (HX_FIELD_EQ(inName,"addAt") ) { return hx::Val( addAt_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active); }
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return hx::Val( cancel_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"restart") ) { return hx::Val( restart_dyn()); }
		if (HX_FIELD_EQ(inName,"setNode") ) { return hx::Val( setNode_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( finished); }
		if (HX_FIELD_EQ(inName,"addPoint") ) { return hx::Val( addPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"removeAt") ) { return hx::Val( removeAt_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nodeIndex") ) { return hx::Val( nodeIndex); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoCenter") ) { return hx::Val( autoCenter); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete); }
		if (HX_FIELD_EQ(inName,"addPointAt") ) { return hx::Val( addPointAt_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_autoRotate") ) { return hx::Val( _autoRotate); }
		if (HX_FIELD_EQ(inName,"advancePath") ) { return hx::Val( advancePath_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_firstUpdate") ) { return hx::Val( _firstUpdate); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"calculateVelocity") ) { return hx::Val( calculateVelocity_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_wasObjectImmovable") ) { return hx::Val( _wasObjectImmovable); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxPath_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { outValue = _point; return true; }
	}
	return false;
}

hx::Val FlxPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_inc") ) { _inc=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nodes") ) { nodes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mode") ) { _mode=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nodeIndex") ) { nodeIndex=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoCenter") ) { autoCenter=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_autoRotate") ) { _autoRotate=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_firstUpdate") ) { _firstUpdate=inValue.Cast< Bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_wasObjectImmovable") ) { _wasObjectImmovable=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxPath_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { _point=ioValue.Cast<  ::flixel::math::FlxPoint >(); return true; }
	}
	return false;
}

void FlxPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("nodes","\x31","\xb8","\xbe","\x9f"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("autoCenter","\xa4","\x36","\xa6","\x71"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("nodeIndex","\xb0","\x79","\x4a","\x62"));
	outFields->push(HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"));
	outFields->push(HX_HCSTRING("_mode","\x42","\xef","\x71","\xfb"));
	outFields->push(HX_HCSTRING("_inc","\xdf","\x51","\x1b","\x3f"));
	outFields->push(HX_HCSTRING("_autoRotate","\x49","\x24","\x75","\x09"));
	outFields->push(HX_HCSTRING("_wasObjectImmovable","\x41","\xd9","\x92","\x98"));
	outFields->push(HX_HCSTRING("_firstUpdate","\x5a","\x64","\xb1","\xd1"));
	outFields->push(HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxPath_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxPath_obj,nodes),HX_HCSTRING("nodes","\x31","\xb8","\xbe","\x9f")},
	{hx::fsFloat,(int)offsetof(FlxPath_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsFloat,(int)offsetof(FlxPath_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsBool,(int)offsetof(FlxPath_obj,autoCenter),HX_HCSTRING("autoCenter","\xa4","\x36","\xa6","\x71")},
	{hx::fsBool,(int)offsetof(FlxPath_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxPath_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsInt,(int)offsetof(FlxPath_obj,nodeIndex),HX_HCSTRING("nodeIndex","\xb0","\x79","\x4a","\x62")},
	{hx::fsBool,(int)offsetof(FlxPath_obj,finished),HX_HCSTRING("finished","\x72","\x93","\x0e","\x95")},
	{hx::fsInt,(int)offsetof(FlxPath_obj,_mode),HX_HCSTRING("_mode","\x42","\xef","\x71","\xfb")},
	{hx::fsInt,(int)offsetof(FlxPath_obj,_inc),HX_HCSTRING("_inc","\xdf","\x51","\x1b","\x3f")},
	{hx::fsBool,(int)offsetof(FlxPath_obj,_autoRotate),HX_HCSTRING("_autoRotate","\x49","\x24","\x75","\x09")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxPath_obj,_wasObjectImmovable),HX_HCSTRING("_wasObjectImmovable","\x41","\xd9","\x92","\x98")},
	{hx::fsBool,(int)offsetof(FlxPath_obj,_firstUpdate),HX_HCSTRING("_firstUpdate","\x5a","\x64","\xb1","\xd1")},
	{hx::fsObject /*::flixel::FlxObject*/ ,(int)offsetof(FlxPath_obj,object),HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxPath_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxPath_obj::FORWARD,HX_HCSTRING("FORWARD","\xa5","\xb5","\x9e","\x65")},
	{hx::fsInt,(void *) &FlxPath_obj::BACKWARD,HX_HCSTRING("BACKWARD","\xe3","\x6b","\x9e","\x80")},
	{hx::fsInt,(void *) &FlxPath_obj::LOOP_FORWARD,HX_HCSTRING("LOOP_FORWARD","\x8a","\x81","\x3a","\x2b")},
	{hx::fsInt,(void *) &FlxPath_obj::LOOP_BACKWARD,HX_HCSTRING("LOOP_BACKWARD","\x5e","\x08","\x55","\xa3")},
	{hx::fsInt,(void *) &FlxPath_obj::YOYO,HX_HCSTRING("YOYO","\x2c","\x3d","\x10","\x3b")},
	{hx::fsInt,(void *) &FlxPath_obj::HORIZONTAL_ONLY,HX_HCSTRING("HORIZONTAL_ONLY","\xe7","\x3d","\x5f","\x9a")},
	{hx::fsInt,(void *) &FlxPath_obj::VERTICAL_ONLY,HX_HCSTRING("VERTICAL_ONLY","\x15","\x31","\x92","\x7f")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(void *) &FlxPath_obj::_point,HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxPath_obj_sMemberFields[] = {
	HX_HCSTRING("nodes","\x31","\xb8","\xbe","\x9f"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("autoCenter","\xa4","\x36","\xa6","\x71"),
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("nodeIndex","\xb0","\x79","\x4a","\x62"),
	HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"),
	HX_HCSTRING("_mode","\x42","\xef","\x71","\xfb"),
	HX_HCSTRING("_inc","\xdf","\x51","\x1b","\x3f"),
	HX_HCSTRING("_autoRotate","\x49","\x24","\x75","\x09"),
	HX_HCSTRING("_wasObjectImmovable","\x41","\xd9","\x92","\x98"),
	HX_HCSTRING("_firstUpdate","\x5a","\x64","\xb1","\xd1"),
	HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("restart","\xcf","\xc7","\xa5","\x6a"),
	HX_HCSTRING("setNode","\xc4","\x4a","\x8e","\x0e"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("calculateVelocity","\xa3","\x29","\x67","\x06"),
	HX_HCSTRING("advancePath","\x47","\x83","\xf2","\xa8"),
	HX_HCSTRING("cancel","\x7a","\xed","\x33","\xb8"),
	HX_HCSTRING("onEnd","\xfc","\x97","\x64","\x32"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addAt","\x74","\xb5","\x43","\x1c"),
	HX_HCSTRING("addPoint","\x6f","\xda","\xec","\x3f"),
	HX_HCSTRING("addPointAt","\x42","\xcd","\xab","\xb8"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("removeAt","\x57","\x6e","\x1b","\xad"),
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("tail","\x90","\xb6","\xf6","\x4c"),
	::String(null()) };

static void FlxPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxPath_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxPath_obj::FORWARD,"FORWARD");
	HX_MARK_MEMBER_NAME(FlxPath_obj::BACKWARD,"BACKWARD");
	HX_MARK_MEMBER_NAME(FlxPath_obj::LOOP_FORWARD,"LOOP_FORWARD");
	HX_MARK_MEMBER_NAME(FlxPath_obj::LOOP_BACKWARD,"LOOP_BACKWARD");
	HX_MARK_MEMBER_NAME(FlxPath_obj::YOYO,"YOYO");
	HX_MARK_MEMBER_NAME(FlxPath_obj::HORIZONTAL_ONLY,"HORIZONTAL_ONLY");
	HX_MARK_MEMBER_NAME(FlxPath_obj::VERTICAL_ONLY,"VERTICAL_ONLY");
	HX_MARK_MEMBER_NAME(FlxPath_obj::_point,"_point");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxPath_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::FORWARD,"FORWARD");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::BACKWARD,"BACKWARD");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::LOOP_FORWARD,"LOOP_FORWARD");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::LOOP_BACKWARD,"LOOP_BACKWARD");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::YOYO,"YOYO");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::HORIZONTAL_ONLY,"HORIZONTAL_ONLY");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::VERTICAL_ONLY,"VERTICAL_ONLY");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::_point,"_point");
};

#endif

hx::Class FlxPath_obj::__mClass;

static ::String FlxPath_obj_sStaticFields[] = {
	HX_HCSTRING("FORWARD","\xa5","\xb5","\x9e","\x65"),
	HX_HCSTRING("BACKWARD","\xe3","\x6b","\x9e","\x80"),
	HX_HCSTRING("LOOP_FORWARD","\x8a","\x81","\x3a","\x2b"),
	HX_HCSTRING("LOOP_BACKWARD","\x5e","\x08","\x55","\xa3"),
	HX_HCSTRING("YOYO","\x2c","\x3d","\x10","\x3b"),
	HX_HCSTRING("HORIZONTAL_ONLY","\xe7","\x3d","\x5f","\x9a"),
	HX_HCSTRING("VERTICAL_ONLY","\x15","\x31","\x92","\x7f"),
	HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"),
	::String(null())
};

void FlxPath_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.util.FlxPath","\xfd","\xcb","\x52","\xba");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxPath_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxPath_obj::__SetStatic;
	__mClass->mMarkFunc = FlxPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxPath_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxPath_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.util.FlxPath","boot",0xf481d243,"flixel.util.FlxPath.boot","flixel/util/FlxPath.hx",21,0x22aae741)
HXLINE(  21)		FORWARD = (int)0;
            	}
{
            	HX_STACK_FRAME("flixel.util.FlxPath","boot",0xf481d243,"flixel.util.FlxPath.boot","flixel/util/FlxPath.hx",25,0x22aae741)
HXLINE(  25)		BACKWARD = (int)1;
            	}
{
            	HX_STACK_FRAME("flixel.util.FlxPath","boot",0xf481d243,"flixel.util.FlxPath.boot","flixel/util/FlxPath.hx",29,0x22aae741)
HXLINE(  29)		LOOP_FORWARD = (int)16;
            	}
{
            	HX_STACK_FRAME("flixel.util.FlxPath","boot",0xf481d243,"flixel.util.FlxPath.boot","flixel/util/FlxPath.hx",33,0x22aae741)
HXLINE(  33)		LOOP_BACKWARD = (int)256;
            	}
{
            	HX_STACK_FRAME("flixel.util.FlxPath","boot",0xf481d243,"flixel.util.FlxPath.boot","flixel/util/FlxPath.hx",37,0x22aae741)
HXLINE(  37)		YOYO = (int)4096;
            	}
{
            	HX_STACK_FRAME("flixel.util.FlxPath","boot",0xf481d243,"flixel.util.FlxPath.boot","flixel/util/FlxPath.hx",41,0x22aae741)
HXLINE(  41)		HORIZONTAL_ONLY = (int)65536;
            	}
{
            	HX_STACK_FRAME("flixel.util.FlxPath","boot",0xf481d243,"flixel.util.FlxPath.boot","flixel/util/FlxPath.hx",45,0x22aae741)
HXLINE(  45)		VERTICAL_ONLY = (int)1048576;
            	}
{
            	HX_STACK_FRAME("flixel.util.FlxPath","boot",0xf481d243,"flixel.util.FlxPath.boot","flixel/util/FlxPath.hx",50,0x22aae741)
HXLINE(  50)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  50)		point->_inPool = false;
HXDLIN(  50)		_point = point;
            	}
}

} // end namespace flixel
} // end namespace util
