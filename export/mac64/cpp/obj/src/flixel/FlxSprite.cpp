// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel__FlxSprite_GraphicDefault
#include <flixel/_FlxSprite/GraphicDefault.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxBitmapDataUtil
#include <flixel/util/FlxBitmapDataUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

namespace flixel{

void FlxSprite_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.FlxSprite","new",0x4dfa64d7,"flixel.FlxSprite.new","flixel/FlxSprite.hx",42,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(SimpleGraphic,"SimpleGraphic")
HXLINE( 218)		this->_facingFlip =  ::haxe::ds::IntMap_obj::__new();
HXLINE( 214)		this->_angleChanged = true;
HXLINE( 213)		this->_cosAngle = ((Float)1);
HXLINE( 212)		this->_sinAngle = ((Float)0);
HXLINE( 180)		this->_facingVerticalMult = (int)1;
HXLINE( 179)		this->_facingHorizontalMult = (int)1;
HXLINE( 152)		this->useColorTransform = false;
HXLINE( 145)		this->color = (int)16777215;
HXLINE( 119)		this->flipY = false;
HXLINE( 115)		this->flipX = false;
HXLINE( 111)		this->facing = (int)16;
HXLINE( 106)		this->alpha = ((Float)1.0);
HXLINE( 102)		this->bakedRotationAngle = ((Float)0);
HXLINE(  92)		this->numFrames = (int)0;
HXLINE(  88)		this->frameHeight = (int)0;
HXLINE(  84)		this->frameWidth = (int)0;
HXLINE(  70)		this->dirty = true;
HXLINE(  65)		this->antialiasing = false;
HXLINE(  60)		this->useFramePixels = true;
HXLINE( 230)		super::__construct(X,Y,null(),null());
HXLINE( 232)		this->set_useFramePixels(::flixel::FlxG_obj::renderBlit);
HXLINE( 233)		Bool _hx_tmp = hx::IsNotNull( SimpleGraphic );
HXDLIN( 233)		if (_hx_tmp) {
HXLINE( 234)			this->loadGraphic(SimpleGraphic,null(),null(),null(),null(),null());
            		}
            	}

Dynamic FlxSprite_obj::__CreateEmpty() { return new FlxSprite_obj; }

hx::ObjectPtr< FlxSprite_obj > FlxSprite_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic)
{
	hx::ObjectPtr< FlxSprite_obj > _hx_result = new FlxSprite_obj();
	_hx_result->__construct(__o_X,__o_Y,SimpleGraphic);
	return _hx_result;
}

Dynamic FlxSprite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxSprite_obj > _hx_result = new FlxSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void FlxSprite_obj::initVars(){
            	HX_STACK_FRAME("flixel.FlxSprite","initVars",0x31793705,"flixel.FlxSprite.initVars","flixel/FlxSprite.hx",238,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 239)		this->super::initVars();
HXLINE( 241)		this->animation =  ::flixel::animation::FlxAnimationController_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE( 243)		this->_flashPoint =  ::openfl::_legacy::geom::Point_obj::__new(null(),null());
HXLINE( 244)		this->_flashRect =  ::openfl::_legacy::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 245)		this->_flashRect2 =  ::openfl::_legacy::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 246)		this->_flashPointZero =  ::openfl::_legacy::geom::Point_obj::__new(null(),null());
HXLINE( 247)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 247)		point->_inPool = false;
HXDLIN( 247)		this->offset = point;
HXLINE( 248)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 248)		point1->_inPool = false;
HXDLIN( 248)		this->origin = point1;
HXLINE( 249)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)1,(int)1);
HXDLIN( 249)		point2->_inPool = false;
HXDLIN( 249)		this->scale = point2;
HXLINE( 250)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 250)		point3->_inPool = false;
HXDLIN( 250)		this->_halfSize = point3;
HXLINE( 251)		this->_matrix =  ::flixel::math::FlxMatrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 252)		this->colorTransform =  ::openfl::_legacy::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
            	}


void FlxSprite_obj::destroy(){
            	HX_STACK_FRAME("flixel.FlxSprite","destroy",0x0fb5c8f1,"flixel.FlxSprite.destroy","flixel/FlxSprite.hx",260,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 261)		this->super::destroy();
HXLINE( 263)		this->animation = ( ( ::flixel::animation::FlxAnimationController)(::flixel::util::FlxDestroyUtil_obj::destroy(this->animation)) );
HXLINE( 265)		this->offset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->offset)) );
HXLINE( 266)		this->origin = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->origin)) );
HXLINE( 267)		this->scale = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scale)) );
HXLINE( 268)		this->_halfSize = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_halfSize)) );
HXLINE( 270)		this->framePixels = ::flixel::util::FlxDestroyUtil_obj::dispose(this->framePixels);
HXLINE( 272)		this->_flashPoint = null();
HXLINE( 273)		this->_flashRect = null();
HXLINE( 274)		this->_flashRect2 = null();
HXLINE( 275)		this->_flashPointZero = null();
HXLINE( 276)		this->_matrix = null();
HXLINE( 277)		this->colorTransform = null();
HXLINE( 278)		this->set_blend(null());
HXLINE( 280)		this->set_frames(null());
HXLINE( 281)		this->set_graphic(null());
HXLINE( 282)		this->_frame = ( ( ::flixel::graphics::frames::FlxFrame)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_frame)) );
HXLINE( 283)		this->_frameGraphic = ( ( ::flixel::graphics::FlxGraphic)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_frameGraphic)) );
HXLINE( 285)		this->shader = null();
            	}


 ::flixel::FlxSprite FlxSprite_obj::clone(){
            	HX_STACK_FRAME("flixel.FlxSprite","clone",0x3c30f394,"flixel.FlxSprite.clone","flixel/FlxSprite.hx",290,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 290)		return  ::flixel::FlxSprite_obj::__new(null(),null(),null())->loadGraphicFromSprite(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,clone,return )

 ::flixel::FlxSprite FlxSprite_obj::loadGraphicFromSprite( ::flixel::FlxSprite Sprite){
            	HX_STACK_FRAME("flixel.FlxSprite","loadGraphicFromSprite",0xd0637b08,"flixel.FlxSprite.loadGraphicFromSprite","flixel/FlxSprite.hx",301,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
HXLINE( 302)		this->set_frames(Sprite->frames);
HXLINE( 303)		this->bakedRotationAngle = Sprite->bakedRotationAngle;
HXLINE( 304)		Bool _hx_tmp = (this->bakedRotationAngle > (int)0);
HXDLIN( 304)		if (_hx_tmp) {
HXLINE( 306)			Float _hx_tmp1 = Sprite->get_width();
HXDLIN( 306)			this->set_width(_hx_tmp1);
HXLINE( 307)			Float _hx_tmp2 = Sprite->get_height();
HXDLIN( 307)			this->set_height(_hx_tmp2);
HXLINE( 308)			this->centerOffsets(null());
            		}
HXLINE( 310)		this->set_antialiasing(Sprite->antialiasing);
HXLINE( 311)		this->animation->copyFrom(Sprite->animation);
HXLINE( 312)		this->graphicLoaded();
HXLINE( 313)		this->set_clipRect(Sprite->clipRect);
HXLINE( 314)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,loadGraphicFromSprite,return )

 ::flixel::FlxSprite FlxSprite_obj::loadGraphic( ::Dynamic Graphic,hx::Null< Bool >  __o_Animated,hx::Null< Int >  __o_Width,hx::Null< Int >  __o_Height,hx::Null< Bool >  __o_Unique,::String Key){
Bool Animated = __o_Animated.Default(false);
Int Width = __o_Width.Default(0);
Int Height = __o_Height.Default(0);
Bool Unique = __o_Unique.Default(false);
            	HX_STACK_FRAME("flixel.FlxSprite","loadGraphic",0x47377c99,"flixel.FlxSprite.loadGraphic","flixel/FlxSprite.hx",335,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Graphic,"Graphic")
            	HX_STACK_ARG(Animated,"Animated")
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
HXLINE( 336)		HX_VARI(  ::flixel::graphics::FlxGraphic,graph) = ::flixel::FlxG_obj::bitmap->add(Graphic,Unique,Key);
HXLINE( 337)		Bool _hx_tmp = hx::IsNull( graph );
HXDLIN( 337)		if (_hx_tmp) {
HXLINE( 338)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 340)		Bool _hx_tmp1 = (Width == (int)0);
HXDLIN( 340)		if (_hx_tmp1) {
HXLINE( 342)			if (Animated) {
HXLINE( 342)				Width = graph->height;
            			}
            			else {
HXLINE( 342)				Width = graph->width;
            			}
HXLINE( 343)			Bool _hx_tmp2 = (Width > graph->width);
HXDLIN( 343)			if (_hx_tmp2) {
HXLINE( 343)				Width = graph->width;
            			}
            			else {
HXLINE( 343)				Width = Width;
            			}
            		}
HXLINE( 346)		Bool _hx_tmp3 = (Height == (int)0);
HXDLIN( 346)		if (_hx_tmp3) {
HXLINE( 348)			if (Animated) {
HXLINE( 348)				Height = Width;
            			}
            			else {
HXLINE( 348)				Height = graph->height;
            			}
HXLINE( 349)			Bool _hx_tmp4 = (Height > graph->height);
HXDLIN( 349)			if (_hx_tmp4) {
HXLINE( 349)				Height = graph->height;
            			}
            			else {
HXLINE( 349)				Height = Height;
            			}
            		}
HXLINE( 352)		if (Animated) {
HXLINE( 354)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(Width,Height);
HXDLIN( 354)			point->_inPool = false;
HXDLIN( 354)			 ::flixel::graphics::frames::FlxTileFrames _hx_tmp5 = ::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graph,point,null(),null());
HXDLIN( 354)			this->set_frames(_hx_tmp5);
            		}
            		else {
HXLINE( 358)			 ::flixel::graphics::frames::FlxImageFrame _hx_tmp6 = graph->get_imageFrame();
HXDLIN( 358)			this->set_frames(_hx_tmp6);
            		}
HXLINE( 361)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxSprite_obj,loadGraphic,return )

 ::flixel::FlxSprite FlxSprite_obj::loadRotatedGraphic( ::Dynamic Graphic,hx::Null< Int >  __o_Rotations,hx::Null< Int >  __o_Frame,hx::Null< Bool >  __o_AntiAliasing,hx::Null< Bool >  __o_AutoBuffer,::String Key){
Int Rotations = __o_Rotations.Default(16);
Int Frame = __o_Frame.Default(-1);
Bool AntiAliasing = __o_AntiAliasing.Default(false);
Bool AutoBuffer = __o_AutoBuffer.Default(false);
            	HX_STACK_FRAME("flixel.FlxSprite","loadRotatedGraphic",0xceb71e2e,"flixel.FlxSprite.loadRotatedGraphic","flixel/FlxSprite.hx",377,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Graphic,"Graphic")
            	HX_STACK_ARG(Rotations,"Rotations")
            	HX_STACK_ARG(Frame,"Frame")
            	HX_STACK_ARG(AntiAliasing,"AntiAliasing")
            	HX_STACK_ARG(AutoBuffer,"AutoBuffer")
            	HX_STACK_ARG(Key,"Key")
HXLINE( 378)		HX_VARI(  ::flixel::graphics::FlxGraphic,brushGraphic) = ::flixel::FlxG_obj::bitmap->add(Graphic,false,Key);
HXLINE( 379)		Bool _hx_tmp = hx::IsNull( brushGraphic );
HXDLIN( 379)		if (_hx_tmp) {
HXLINE( 380)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 382)		HX_VARI(  ::openfl::_legacy::display::BitmapData,brush) = brushGraphic->bitmap;
HXLINE( 383)		HX_VARI( ::String,key) = brushGraphic->key;
HXLINE( 385)		if ((Frame >= (int)0)) {
HXLINE( 388)			HX_VARI( Int,brushSize) = brush->get_height();
HXLINE( 389)			Int _hx_tmp1 = brush->get_width();
HXDLIN( 389)			HX_VARI( Int,framesNum) = ::Std_obj::_hx_int(((Float)_hx_tmp1 / (Float)brushSize));
HXLINE( 390)			Bool _hx_tmp2 = (framesNum > Frame);
HXDLIN( 390)			if (_hx_tmp2) {
HXLINE( 390)				Frame = Frame;
            			}
            			else {
HXLINE( 390)				hx::ModEq(Frame,framesNum);
            			}
HXLINE( 391)			hx::AddEq(key,(HX_(":",3a,00,00,00) + Frame));
HXLINE( 393)			HX_VARI(  ::openfl::_legacy::display::BitmapData,full) = brush;
HXLINE( 394)			brush =  ::openfl::_legacy::display::BitmapData_obj::__new(brushSize,brushSize,true,(int)0,null());
HXLINE( 395)			this->_flashRect->setTo((Frame * brushSize),(int)0,brushSize,brushSize);
HXLINE( 396)			brush->copyPixels(full,this->_flashRect,this->_flashPointZero,null(),null(),null());
            		}
HXLINE( 399)		::String _hx_tmp3 = ((HX_(":",3a,00,00,00) + Rotations) + HX_(":",3a,00,00,00));
HXDLIN( 399)		::String _hx_tmp4 = ::Std_obj::string(AutoBuffer);
HXDLIN( 399)		hx::AddEq(key,(_hx_tmp3 + _hx_tmp4));
HXLINE( 402)		HX_VARI(  ::flixel::graphics::FlxGraphic,tempGraph) = ::flixel::FlxG_obj::bitmap->get(key);
HXLINE( 403)		Bool _hx_tmp5 = hx::IsNull( tempGraph );
HXDLIN( 403)		if (_hx_tmp5) {
HXLINE( 405)			HX_VARI(  ::openfl::_legacy::display::BitmapData,bitmap) = ::flixel::util::FlxBitmapDataUtil_obj::generateRotations(brush,Rotations,AntiAliasing,AutoBuffer);
HXLINE( 406)			tempGraph = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(bitmap,false,key,null());
            		}
HXLINE( 409)		HX_VAR( Int,max);
HXDLIN( 409)		Int _hx_tmp6 = brush->get_height();
HXDLIN( 409)		Int _hx_tmp7 = brush->get_width();
HXDLIN( 409)		if ((_hx_tmp6 > _hx_tmp7)) {
HXLINE( 409)			max = brush->get_height();
            		}
            		else {
HXLINE( 409)			max = brush->get_width();
            		}
HXLINE( 410)		if (AutoBuffer) {
HXLINE( 410)			max = ::Std_obj::_hx_int((max * ((Float)1.5)));
            		}
            		else {
HXLINE( 410)			max = max;
            		}
HXLINE( 412)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(max,max);
HXDLIN( 412)		point->_inPool = false;
HXDLIN( 412)		 ::flixel::graphics::frames::FlxTileFrames _hx_tmp8 = ::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(tempGraph,point,null(),null());
HXDLIN( 412)		this->set_frames(_hx_tmp8);
HXLINE( 414)		if (AutoBuffer) {
HXLINE( 416)			Int _hx_tmp9 = brush->get_width();
HXDLIN( 416)			this->set_width(_hx_tmp9);
HXLINE( 417)			Int _hx_tmp10 = brush->get_height();
HXDLIN( 417)			this->set_height(_hx_tmp10);
HXLINE( 418)			this->centerOffsets(null());
            		}
HXLINE( 421)		this->bakedRotationAngle = ((Float)(int)360 / (Float)Rotations);
HXLINE( 422)		this->animation->createPrerotated(null());
HXLINE( 423)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxSprite_obj,loadRotatedGraphic,return )

 ::flixel::FlxSprite FlxSprite_obj::loadRotatedFrame( ::flixel::graphics::frames::FlxFrame Frame,hx::Null< Int >  __o_Rotations,hx::Null< Bool >  __o_AntiAliasing,hx::Null< Bool >  __o_AutoBuffer){
Int Rotations = __o_Rotations.Default(16);
Bool AntiAliasing = __o_AntiAliasing.Default(false);
Bool AutoBuffer = __o_AutoBuffer.Default(false);
            	HX_STACK_FRAME("flixel.FlxSprite","loadRotatedFrame",0xe0d52e33,"flixel.FlxSprite.loadRotatedFrame","flixel/FlxSprite.hx",437,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Frame,"Frame")
            	HX_STACK_ARG(Rotations,"Rotations")
            	HX_STACK_ARG(AntiAliasing,"AntiAliasing")
            	HX_STACK_ARG(AutoBuffer,"AutoBuffer")
HXLINE( 438)		HX_VARI( ::String,key) = Frame->parent->key;
HXLINE( 439)		Bool _hx_tmp = hx::IsNotNull( Frame->name );
HXDLIN( 439)		if (_hx_tmp) {
HXLINE( 441)			hx::AddEq(key,(HX_(":",3a,00,00,00) + Frame->name));
            		}
            		else {
HXLINE( 445)			HX_VARI(  ::flixel::math::FlxRect,_this) = Frame->frame;
HXDLIN( 445)			 ::Dynamic value = _this->x;
HXDLIN( 445)			HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this1,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 445)			_this1->label = HX_("x",78,00,00,00);
HXDLIN( 445)			_this1->value = value;
HXDLIN( 445)			 ::Dynamic value1 = _this->y;
HXDLIN( 445)			HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this2,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 445)			_this2->label = HX_("y",79,00,00,00);
HXDLIN( 445)			_this2->value = value1;
HXDLIN( 445)			 ::Dynamic value2 = _this->width;
HXDLIN( 445)			HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this3,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 445)			_this3->label = HX_("w",77,00,00,00);
HXDLIN( 445)			_this3->value = value2;
HXDLIN( 445)			 ::Dynamic value3 = _this->height;
HXDLIN( 445)			HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this4,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 445)			_this4->label = HX_("h",68,00,00,00);
HXDLIN( 445)			_this4->value = value3;
HXDLIN( 445)			::String _hx_tmp1 = ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,_this1)->init(1,_this2)->init(2,_this3)->init(3,_this4));
HXDLIN( 445)			hx::AddEq(key,(HX_(":",3a,00,00,00) + _hx_tmp1));
            		}
HXLINE( 448)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->get(key);
HXLINE( 449)		Bool _hx_tmp2 = hx::IsNull( graphic );
HXDLIN( 449)		if (_hx_tmp2) {
HXLINE( 451)			 ::openfl::_legacy::display::BitmapData _hx_tmp3 = Frame->paint(null(),null(),null(),null());
HXDLIN( 451)			graphic = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(_hx_tmp3,false,key,null());
            		}
HXLINE( 454)		return this->loadRotatedGraphic(graphic,Rotations,(int)-1,AntiAliasing,AutoBuffer,null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxSprite_obj,loadRotatedFrame,return )

 ::flixel::FlxSprite FlxSprite_obj::makeGraphic(Int Width,Int Height,hx::Null< Int >  __o_Color,hx::Null< Bool >  __o_Unique,::String Key){
Int Color = __o_Color.Default(-1);
Bool Unique = __o_Unique.Default(false);
            	HX_STACK_FRAME("flixel.FlxSprite","makeGraphic",0xbaa3e5d1,"flixel.FlxSprite.makeGraphic","flixel/FlxSprite.hx",474,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(Color,"Color")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
HXLINE( 475)		HX_VARI(  ::flixel::graphics::FlxGraphic,graph) = ::flixel::FlxG_obj::bitmap->create(Width,Height,Color,Unique,Key);
HXLINE( 476)		 ::flixel::graphics::frames::FlxImageFrame _hx_tmp = graph->get_imageFrame();
HXDLIN( 476)		this->set_frames(_hx_tmp);
HXLINE( 477)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxSprite_obj,makeGraphic,return )

void FlxSprite_obj::graphicLoaded(){
            	HX_STACK_FRAME("flixel.FlxSprite","graphicLoaded",0xacabf404,"flixel.FlxSprite.graphicLoaded","flixel/FlxSprite.hx",484,0x0384bffa)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,graphicLoaded,(void))

void FlxSprite_obj::resetSize(){
            	HX_STACK_FRAME("flixel.FlxSprite","resetSize",0x5d8771e7,"flixel.FlxSprite.resetSize","flixel/FlxSprite.hx",490,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 491)		this->_flashRect->x = (int)0;
HXLINE( 492)		this->_flashRect->y = (int)0;
HXLINE( 493)		this->_flashRect->width = this->frameWidth;
HXLINE( 494)		this->_flashRect->height = this->frameHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetSize,(void))

void FlxSprite_obj::resetFrameSize(){
            	HX_STACK_FRAME("flixel.FlxSprite","resetFrameSize",0xb7baa4a8,"flixel.FlxSprite.resetFrameSize","flixel/FlxSprite.hx",501,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 502)		Bool _hx_tmp = hx::IsNotNull( this->frame );
HXDLIN( 502)		if (_hx_tmp) {
HXLINE( 504)			this->frameWidth = ::Std_obj::_hx_int(this->frame->sourceSize->x);
HXLINE( 505)			this->frameHeight = ::Std_obj::_hx_int(this->frame->sourceSize->y);
            		}
HXLINE( 507)		Float _hx_tmp1 = (((Float)0.5) * this->frameWidth);
HXDLIN( 507)		Float _hx_tmp2 = (((Float)0.5) * this->frameHeight);
HXDLIN( 507)		this->_halfSize->set(_hx_tmp1,_hx_tmp2);
HXLINE( 508)		{
HXLINE( 508)			this->_flashRect->x = (int)0;
HXDLIN( 508)			this->_flashRect->y = (int)0;
HXDLIN( 508)			this->_flashRect->width = this->frameWidth;
HXDLIN( 508)			this->_flashRect->height = this->frameHeight;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetFrameSize,(void))

void FlxSprite_obj::resetSizeFromFrame(){
            	HX_STACK_FRAME("flixel.FlxSprite","resetSizeFromFrame",0xf893db7c,"flixel.FlxSprite.resetSizeFromFrame","flixel/FlxSprite.hx",515,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 516)		this->set_width(this->frameWidth);
HXLINE( 517)		this->set_height(this->frameHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetSizeFromFrame,(void))

void FlxSprite_obj::resetFrame(){
            	HX_STACK_FRAME("flixel.FlxSprite","resetFrame",0x02a6a847,"flixel.FlxSprite.resetFrame","flixel/FlxSprite.hx",528,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 528)		this->set_frame(this->frame);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetFrame,(void))

void FlxSprite_obj::setGraphicSize(hx::Null< Int >  __o_Width,hx::Null< Int >  __o_Height){
Int Width = __o_Width.Default(0);
Int Height = __o_Height.Default(0);
            	HX_STACK_FRAME("flixel.FlxSprite","setGraphicSize",0x516eb7f0,"flixel.FlxSprite.setGraphicSize","flixel/FlxSprite.hx",539,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE( 540)		Bool _hx_tmp;
HXDLIN( 540)		if ((Width <= (int)0)) {
HXLINE( 540)			_hx_tmp = (Height <= (int)0);
            		}
            		else {
HXLINE( 540)			_hx_tmp = false;
            		}
HXDLIN( 540)		if (_hx_tmp) {
HXLINE( 541)			return;
            		}
HXLINE( 543)		HX_VARI( Float,newScaleX) = ((Float)Width / (Float)this->frameWidth);
HXLINE( 544)		HX_VARI( Float,newScaleY) = ((Float)Height / (Float)this->frameHeight);
HXLINE( 545)		this->scale->set(newScaleX,newScaleY);
HXLINE( 547)		if ((Width <= (int)0)) {
HXLINE( 549)			this->scale->set_x(newScaleY);
            		}
            		else {
HXLINE( 551)			if ((Height <= (int)0)) {
HXLINE( 553)				this->scale->set_y(newScaleX);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSprite_obj,setGraphicSize,(void))

void FlxSprite_obj::updateHitbox(){
            	HX_STACK_FRAME("flixel.FlxSprite","updateHitbox",0x9470392a,"flixel.FlxSprite.updateHitbox","flixel/FlxSprite.hx",562,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 563)		Float _hx_tmp = ::Math_obj::abs(this->scale->x);
HXDLIN( 563)		Float _hx_tmp1 = (_hx_tmp * this->frameWidth);
HXDLIN( 563)		this->set_width(_hx_tmp1);
HXLINE( 564)		Float _hx_tmp2 = ::Math_obj::abs(this->scale->y);
HXDLIN( 564)		Float _hx_tmp3 = (_hx_tmp2 * this->frameHeight);
HXDLIN( 564)		this->set_height(_hx_tmp3);
HXLINE( 565)		Float _hx_tmp4 = this->get_width();
HXDLIN( 565)		Float _hx_tmp5 = (((Float)-0.5) * (_hx_tmp4 - this->frameWidth));
HXDLIN( 565)		Float _hx_tmp6 = this->get_height();
HXDLIN( 565)		Float _hx_tmp7 = (((Float)-0.5) * (_hx_tmp6 - this->frameHeight));
HXDLIN( 565)		this->offset->set(_hx_tmp5,_hx_tmp7);
HXLINE( 566)		Float _hx_tmp8 = (this->frameWidth * ((Float)0.5));
HXDLIN( 566)		Float _hx_tmp9 = (this->frameHeight * ((Float)0.5));
HXDLIN( 566)		this->origin->set(_hx_tmp8,_hx_tmp9);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,updateHitbox,(void))

void FlxSprite_obj::resetHelpers(){
            	HX_STACK_FRAME("flixel.FlxSprite","resetHelpers",0x6fc22ddf,"flixel.FlxSprite.resetHelpers","flixel/FlxSprite.hx",573,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 574)		{
HXLINE( 574)			Bool _hx_tmp = hx::IsNotNull( this->frame );
HXDLIN( 574)			if (_hx_tmp) {
HXLINE( 574)				this->frameWidth = ::Std_obj::_hx_int(this->frame->sourceSize->x);
HXDLIN( 574)				this->frameHeight = ::Std_obj::_hx_int(this->frame->sourceSize->y);
            			}
HXDLIN( 574)			Float _hx_tmp1 = (((Float)0.5) * this->frameWidth);
HXDLIN( 574)			Float _hx_tmp2 = (((Float)0.5) * this->frameHeight);
HXDLIN( 574)			this->_halfSize->set(_hx_tmp1,_hx_tmp2);
HXDLIN( 574)			{
HXLINE( 574)				this->_flashRect->x = (int)0;
HXDLIN( 574)				this->_flashRect->y = (int)0;
HXDLIN( 574)				this->_flashRect->width = this->frameWidth;
HXDLIN( 574)				this->_flashRect->height = this->frameHeight;
            			}
            		}
HXLINE( 575)		{
HXLINE( 575)			this->set_width(this->frameWidth);
HXDLIN( 575)			this->set_height(this->frameHeight);
            		}
HXLINE( 576)		this->_flashRect2->x = (int)0;
HXLINE( 577)		this->_flashRect2->y = (int)0;
HXLINE( 579)		Bool _hx_tmp3 = hx::IsNotNull( this->graphic );
HXDLIN( 579)		if (_hx_tmp3) {
HXLINE( 581)			this->_flashRect2->width = this->graphic->width;
HXLINE( 582)			this->_flashRect2->height = this->graphic->height;
            		}
HXLINE( 585)		Float _hx_tmp4 = (this->frameWidth * ((Float)0.5));
HXDLIN( 585)		Float _hx_tmp5 = (this->frameHeight * ((Float)0.5));
HXDLIN( 585)		this->origin->set(_hx_tmp4,_hx_tmp5);
HXLINE( 587)		Bool _hx_tmp6 = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 587)		if (_hx_tmp6) {
HXLINE( 589)			this->dirty = true;
HXLINE( 590)			this->updateFramePixels();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,resetHelpers,(void))

void FlxSprite_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.FlxSprite","update",0xe75bd5f2,"flixel.FlxSprite.update","flixel/FlxSprite.hx",595,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 596)		this->super::update(elapsed);
HXLINE( 597)		this->updateAnimation(elapsed);
            	}


void FlxSprite_obj::updateAnimation(Float elapsed){
            	HX_STACK_FRAME("flixel.FlxSprite","updateAnimation",0x7e6eaab2,"flixel.FlxSprite.updateAnimation","flixel/FlxSprite.hx",605,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 605)		this->animation->update(elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,updateAnimation,(void))

void FlxSprite_obj::draw(){
            	HX_STACK_FRAME("flixel.FlxSprite","draw",0xe68b7fad,"flixel.FlxSprite.draw","flixel/FlxSprite.hx",612,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 613)		Bool _hx_tmp = hx::IsNull( this->_frame );
HXDLIN( 613)		if (_hx_tmp) {
HXLINE( 614)			 ::flixel::graphics::FlxGraphic _hx_tmp1 = ::flixel::graphics::FlxGraphic_obj::fromClass(hx::ClassOf< ::flixel::_FlxSprite::GraphicDefault >(),null(),null(),null());
HXDLIN( 614)			this->loadGraphic(_hx_tmp1,null(),null(),null(),null(),null());
            		}
HXLINE( 616)		Bool _hx_tmp2;
HXDLIN( 616)		if ((this->alpha != (int)0)) {
HXLINE( 616)			_hx_tmp2 = (this->_frame->type == (int)2);
            		}
            		else {
HXLINE( 616)			_hx_tmp2 = true;
            		}
HXDLIN( 616)		if (_hx_tmp2) {
HXLINE( 617)			return;
            		}
HXLINE( 619)		Bool _hx_tmp3 = this->dirty;
HXDLIN( 619)		if (_hx_tmp3) {
HXLINE( 620)			this->calcFrame(this->useFramePixels);
            		}
HXLINE( 622)		{
HXLINE( 622)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 622)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->get_cameras();
HXDLIN( 622)			while((_g < _g1->length)){
HXLINE( 622)				HX_VARI(  ::flixel::FlxCamera,camera) = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 622)				++_g;
HXLINE( 624)				Bool _hx_tmp4;
HXDLIN( 624)				Bool _hx_tmp5;
HXDLIN( 624)				if (!(!(camera->visible))) {
HXLINE( 624)					_hx_tmp5 = !(camera->exists);
            				}
            				else {
HXLINE( 624)					_hx_tmp5 = true;
            				}
HXDLIN( 624)				if (!(_hx_tmp5)) {
HXLINE( 624)					_hx_tmp4 = !(this->isOnScreen(camera));
            				}
            				else {
HXLINE( 624)					_hx_tmp4 = true;
            				}
HXDLIN( 624)				if (_hx_tmp4) {
HXLINE( 625)					continue;
            				}
HXLINE( 627)				this->getScreenPosition(this->_point,camera)->subtractPoint(this->offset);
HXLINE( 629)				Bool _hx_tmp6 = this->isSimpleRender(camera);
HXDLIN( 629)				if (_hx_tmp6) {
HXLINE( 630)					this->drawSimple(camera);
            				}
            				else {
HXLINE( 632)					this->drawComplex(camera);
            				}
            			}
            		}
            	}


void FlxSprite_obj::drawSimple( ::flixel::FlxCamera camera){
            	HX_STACK_FRAME("flixel.FlxSprite","drawSimple",0x0dc977bf,"flixel.FlxSprite.drawSimple","flixel/FlxSprite.hx",646,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(camera,"camera")
HXLINE( 647)		Bool _hx_tmp = this->isPixelPerfectRender(camera);
HXDLIN( 647)		if (_hx_tmp) {
HXLINE( 648)			HX_VARI(  ::flixel::math::FlxPoint,_this) = this->_point;
HXDLIN( 648)			Int _hx_tmp1 = ::Math_obj::floor(_this->x);
HXDLIN( 648)			_this->set_x(_hx_tmp1);
HXDLIN( 648)			Int _hx_tmp2 = ::Math_obj::floor(_this->y);
HXDLIN( 648)			_this->set_y(_hx_tmp2);
            		}
HXLINE( 650)		{
HXLINE( 650)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = this->_point;
HXDLIN( 650)			HX_VARI(  ::openfl::_legacy::geom::Point,FlashPoint) = this->_flashPoint;
HXDLIN( 650)			Bool _hx_tmp3 = hx::IsNull( FlashPoint );
HXDLIN( 650)			if (_hx_tmp3) {
HXLINE( 650)				FlashPoint =  ::openfl::_legacy::geom::Point_obj::__new(null(),null());
            			}
HXDLIN( 650)			FlashPoint->x = _this1->x;
HXDLIN( 650)			FlashPoint->y = _this1->y;
            		}
HXLINE( 651)		camera->copyPixels(this->_frame,this->framePixels,this->_flashRect,this->_flashPoint,this->colorTransform,this->blend,this->antialiasing,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,drawSimple,(void))

void FlxSprite_obj::drawComplex( ::flixel::FlxCamera camera){
            	HX_STACK_FRAME("flixel.FlxSprite","drawComplex",0xcf4c0e03,"flixel.FlxSprite.drawComplex","flixel/FlxSprite.hx",656,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(camera,"camera")
HXLINE( 657)		HX_VARI( Bool,doFlipX) = (this->flipX != this->_frame->flipX);
HXDLIN( 657)		Bool _hx_tmp;
HXDLIN( 657)		Bool _hx_tmp1 = hx::IsNotNull( this->animation->_curAnim );
HXDLIN( 657)		if (_hx_tmp1) {
HXLINE( 657)			_hx_tmp = (doFlipX != this->animation->_curAnim->flipX);
            		}
            		else {
HXLINE( 657)			_hx_tmp = doFlipX;
            		}
HXDLIN( 657)		HX_VARI( Bool,doFlipY) = (this->flipY != this->_frame->flipY);
HXDLIN( 657)		Bool _hx_tmp2;
HXDLIN( 657)		Bool _hx_tmp3 = hx::IsNotNull( this->animation->_curAnim );
HXDLIN( 657)		if (_hx_tmp3) {
HXLINE( 657)			_hx_tmp2 = (doFlipY != this->animation->_curAnim->flipY);
            		}
            		else {
HXLINE( 657)			_hx_tmp2 = doFlipY;
            		}
HXDLIN( 657)		this->_frame->prepareMatrix(this->_matrix,(int)0,_hx_tmp,_hx_tmp2);
HXLINE( 658)		this->_matrix->translate(-(this->origin->x),-(this->origin->y));
HXLINE( 659)		this->_matrix->scale(this->scale->x,this->scale->y);
HXLINE( 661)		Bool _hx_tmp4 = (this->bakedRotationAngle <= (int)0);
HXDLIN( 661)		if (_hx_tmp4) {
HXLINE( 663)			Bool _hx_tmp5 = this->_angleChanged;
HXDLIN( 663)			if (_hx_tmp5) {
HXLINE( 663)				HX_VARI( Float,radians) = (this->angle * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 663)				this->_sinAngle = ::Math_obj::sin(radians);
HXDLIN( 663)				this->_cosAngle = ::Math_obj::cos(radians);
HXDLIN( 663)				this->_angleChanged = false;
            			}
HXLINE( 665)			Bool _hx_tmp6 = (this->angle != (int)0);
HXDLIN( 665)			if (_hx_tmp6) {
HXLINE( 666)				HX_VARI(  ::flixel::math::FlxMatrix,_this) = this->_matrix;
HXDLIN( 666)				HX_VARI( Float,cos) = this->_cosAngle;
HXDLIN( 666)				HX_VARI( Float,sin) = this->_sinAngle;
HXDLIN( 666)				HX_VARI( Float,a1) = ((_this->a * cos) - (_this->b * sin));
HXDLIN( 666)				Float _hx_tmp7 = (_this->a * sin);
HXDLIN( 666)				Float _hx_tmp8 = (_this->b * cos);
HXDLIN( 666)				_this->b = (_hx_tmp7 + _hx_tmp8);
HXDLIN( 666)				_this->a = a1;
HXDLIN( 666)				HX_VARI( Float,c1) = ((_this->c * cos) - (_this->d * sin));
HXDLIN( 666)				Float _hx_tmp9 = (_this->c * sin);
HXDLIN( 666)				Float _hx_tmp10 = (_this->d * cos);
HXDLIN( 666)				_this->d = (_hx_tmp9 + _hx_tmp10);
HXDLIN( 666)				_this->c = c1;
HXDLIN( 666)				HX_VARI( Float,tx1) = ((_this->tx * cos) - (_this->ty * sin));
HXDLIN( 666)				Float _hx_tmp11 = (_this->tx * sin);
HXDLIN( 666)				Float _hx_tmp12 = (_this->ty * cos);
HXDLIN( 666)				_this->ty = (_hx_tmp11 + _hx_tmp12);
HXDLIN( 666)				_this->tx = tx1;
            			}
            		}
HXLINE( 669)		{
HXLINE( 669)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = this->_point;
HXDLIN( 669)			Float X = this->origin->x;
HXDLIN( 669)			Float Y = this->origin->y;
HXDLIN( 669)			{
HXLINE( 669)				Float _hx_tmp13 = (_this1->x + X);
HXDLIN( 669)				_this1->set_x(_hx_tmp13);
            			}
HXDLIN( 669)			{
HXLINE( 669)				Float _hx_tmp14 = (_this1->y + Y);
HXDLIN( 669)				_this1->set_y(_hx_tmp14);
            			}
            		}
HXLINE( 670)		Bool _hx_tmp15 = this->isPixelPerfectRender(camera);
HXDLIN( 670)		if (_hx_tmp15) {
HXLINE( 671)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this2,"_this") = this->_point;
HXDLIN( 671)			Int _hx_tmp16 = ::Math_obj::floor(_this2->x);
HXDLIN( 671)			_this2->set_x(_hx_tmp16);
HXDLIN( 671)			Int _hx_tmp17 = ::Math_obj::floor(_this2->y);
HXDLIN( 671)			_this2->set_y(_hx_tmp17);
            		}
HXLINE( 673)		this->_matrix->translate(this->_point->x,this->_point->y);
HXLINE( 674)		camera->drawPixels(this->_frame,this->framePixels,this->_matrix,this->colorTransform,this->blend,this->antialiasing,this->shader);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,drawComplex,(void))

void FlxSprite_obj::stamp( ::flixel::FlxSprite Brush,hx::Null< Int >  __o_X,hx::Null< Int >  __o_Y){
Int X = __o_X.Default(0);
Int Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.FlxSprite","stamp",0x77d9503a,"flixel.FlxSprite.stamp","flixel/FlxSprite.hx",686,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Brush,"Brush")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 687)		Brush->drawFrame(null());
HXLINE( 689)		Bool _hx_tmp;
HXDLIN( 689)		Bool _hx_tmp1 = hx::IsNotNull( this->graphic );
HXDLIN( 689)		if (_hx_tmp1) {
HXLINE( 689)			_hx_tmp = hx::IsNull( Brush->graphic );
            		}
            		else {
HXLINE( 689)			_hx_tmp = true;
            		}
HXDLIN( 689)		if (_hx_tmp) {
HXLINE( 690)			HX_STACK_DO_THROW(HX_("Cannot stamp to or from a FlxSprite with no graphics.",72,0b,d4,aa));
            		}
HXLINE( 692)		HX_VARI(  ::openfl::_legacy::display::BitmapData,bitmapData) = Brush->framePixels;
HXLINE( 694)		Bool _hx_tmp2 = this->isSimpleRenderBlit(null());
HXDLIN( 694)		if (_hx_tmp2) {
HXLINE( 696)			this->_flashPoint->x = (X + this->frame->frame->x);
HXLINE( 697)			this->_flashPoint->y = (Y + this->frame->frame->y);
HXLINE( 698)			this->_flashRect2->width = bitmapData->get_width();
HXLINE( 699)			this->_flashRect2->height = bitmapData->get_height();
HXLINE( 700)			this->graphic->bitmap->copyPixels(bitmapData,this->_flashRect2,this->_flashPoint,null(),null(),true);
HXLINE( 701)			this->_flashRect2->width = this->graphic->bitmap->get_width();
HXLINE( 702)			this->_flashRect2->height = this->graphic->bitmap->get_height();
            		}
            		else {
HXLINE( 706)			this->_matrix->identity();
HXLINE( 707)			this->_matrix->translate(-(Brush->origin->x),-(Brush->origin->y));
HXLINE( 708)			this->_matrix->scale(Brush->scale->x,Brush->scale->y);
HXLINE( 709)			Bool _hx_tmp3 = (Brush->angle != (int)0);
HXDLIN( 709)			if (_hx_tmp3) {
HXLINE( 711)				Float _hx_tmp4 = (Brush->angle * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 711)				this->_matrix->rotate(_hx_tmp4);
            			}
HXLINE( 713)			Float _hx_tmp5 = ((X + this->frame->frame->x) + Brush->origin->x);
HXDLIN( 713)			Float _hx_tmp6 = ((Y + this->frame->frame->y) + Brush->origin->y);
HXDLIN( 713)			this->_matrix->translate(_hx_tmp5,_hx_tmp6);
HXLINE( 715)			this->graphic->bitmap->draw(bitmapData,this->_matrix,null(),Brush->blend,null(),Brush->antialiasing);
            		}
HXLINE( 718)		Bool _hx_tmp7 = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 718)		if (_hx_tmp7) {
HXLINE( 720)			this->dirty = true;
HXLINE( 721)			this->calcFrame(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSprite_obj,stamp,(void))

void FlxSprite_obj::drawFrame(hx::Null< Bool >  __o_Force){
Bool Force = __o_Force.Default(false);
            	HX_STACK_FRAME("flixel.FlxSprite","drawFrame",0x99d67540,"flixel.FlxSprite.drawFrame","flixel/FlxSprite.hx",733,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Force,"Force")
HXLINE( 733)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 733)		if (_hx_tmp) {
HXLINE( 735)			Bool _hx_tmp1;
HXDLIN( 735)			if (!(Force)) {
HXLINE( 735)				_hx_tmp1 = this->dirty;
            			}
            			else {
HXLINE( 735)				_hx_tmp1 = true;
            			}
HXDLIN( 735)			if (_hx_tmp1) {
HXLINE( 737)				this->dirty = true;
HXLINE( 738)				this->calcFrame(null());
            			}
            		}
            		else {
HXLINE( 743)			this->dirty = true;
HXLINE( 744)			this->calcFrame(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,drawFrame,(void))

void FlxSprite_obj::centerOffsets(hx::Null< Bool >  __o_AdjustPosition){
Bool AdjustPosition = __o_AdjustPosition.Default(false);
            	HX_STACK_FRAME("flixel.FlxSprite","centerOffsets",0x583e0f62,"flixel.FlxSprite.centerOffsets","flixel/FlxSprite.hx",754,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(AdjustPosition,"AdjustPosition")
HXLINE( 755)		Int _hx_tmp = this->frameWidth;
HXDLIN( 755)		Float _hx_tmp1 = this->get_width();
HXDLIN( 755)		this->offset->set_x(((_hx_tmp - _hx_tmp1) * ((Float)0.5)));
HXLINE( 756)		Int _hx_tmp2 = this->frameHeight;
HXDLIN( 756)		Float _hx_tmp3 = this->get_height();
HXDLIN( 756)		this->offset->set_y(((_hx_tmp2 - _hx_tmp3) * ((Float)0.5)));
HXLINE( 757)		if (AdjustPosition) {
HXLINE( 759)			{
HXLINE( 759)				HX_VARI(  ::flixel::FlxSprite,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 759)				Float _hx_tmp4 = (_g->x + this->offset->x);
HXDLIN( 759)				_g->set_x(_hx_tmp4);
            			}
HXLINE( 760)			{
HXLINE( 760)				HX_VARI_NAME(  ::flixel::FlxSprite,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 760)				Float _hx_tmp5 = (_g1->y + this->offset->y);
HXDLIN( 760)				_g1->set_y(_hx_tmp5);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,centerOffsets,(void))

void FlxSprite_obj::centerOrigin(){
            	HX_STACK_FRAME("flixel.FlxSprite","centerOrigin",0x4cbae644,"flixel.FlxSprite.centerOrigin","flixel/FlxSprite.hx",770,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 770)		Float _hx_tmp = (this->frameWidth * ((Float)0.5));
HXDLIN( 770)		Float _hx_tmp1 = (this->frameHeight * ((Float)0.5));
HXDLIN( 770)		this->origin->set(_hx_tmp,_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,centerOrigin,(void))

::Array< ::Dynamic> FlxSprite_obj::replaceColor(Int Color,Int NewColor,hx::Null< Bool >  __o_FetchPositions){
Bool FetchPositions = __o_FetchPositions.Default(false);
            	HX_STACK_FRAME("flixel.FlxSprite","replaceColor",0x7b700138,"flixel.FlxSprite.replaceColor","flixel/FlxSprite.hx",783,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Color,"Color")
            	HX_STACK_ARG(NewColor,"NewColor")
            	HX_STACK_ARG(FetchPositions,"FetchPositions")
HXLINE( 784)		HX_VARI( ::Array< ::Dynamic>,positions) = ::flixel::util::FlxBitmapDataUtil_obj::replaceColor(this->graphic->bitmap,Color,NewColor,FetchPositions,null());
HXLINE( 785)		Bool _hx_tmp = hx::IsNotNull( positions );
HXDLIN( 785)		if (_hx_tmp) {
HXLINE( 786)			this->dirty = true;
            		}
HXLINE( 787)		return positions;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSprite_obj,replaceColor,return )

void FlxSprite_obj::setColorTransform(hx::Null< Float >  __o_redMultiplier,hx::Null< Float >  __o_greenMultiplier,hx::Null< Float >  __o_blueMultiplier,hx::Null< Float >  __o_alphaMultiplier,hx::Null< Int >  __o_redOffset,hx::Null< Int >  __o_greenOffset,hx::Null< Int >  __o_blueOffset,hx::Null< Int >  __o_alphaOffset){
Float redMultiplier = __o_redMultiplier.Default(((Float)1.0));
Float greenMultiplier = __o_greenMultiplier.Default(((Float)1.0));
Float blueMultiplier = __o_blueMultiplier.Default(((Float)1.0));
Float alphaMultiplier = __o_alphaMultiplier.Default(((Float)1.0));
Int redOffset = __o_redOffset.Default(0);
Int greenOffset = __o_greenOffset.Default(0);
Int blueOffset = __o_blueOffset.Default(0);
Int alphaOffset = __o_alphaOffset.Default(0);
            	HX_STACK_FRAME("flixel.FlxSprite","setColorTransform",0xa09a3582,"flixel.FlxSprite.setColorTransform","flixel/FlxSprite.hx",805,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
            	HX_STACK_ARG(redOffset,"redOffset")
            	HX_STACK_ARG(greenOffset,"greenOffset")
            	HX_STACK_ARG(blueOffset,"blueOffset")
            	HX_STACK_ARG(alphaOffset,"alphaOffset")
HXLINE( 806)		HX_VARI( Float,Alpha) = (int)1;
HXDLIN( 806)		HX_VARI( Int,color) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 806)		{
HXLINE( 806)			HX_VARI( Int,Value) = ::Math_obj::round((redMultiplier * (int)255));
HXDLIN( 806)			hx::AndEq(color,(int)-16711681);
HXDLIN( 806)			Int _hx_tmp;
HXDLIN( 806)			if ((Value > (int)255)) {
HXLINE( 806)				_hx_tmp = (int)255;
            			}
            			else {
HXLINE( 806)				if ((Value < (int)0)) {
HXLINE( 806)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE( 806)					_hx_tmp = Value;
            				}
            			}
HXDLIN( 806)			hx::OrEq(color,((int)_hx_tmp << (int)(int)16));
            		}
HXDLIN( 806)		{
HXLINE( 806)			HX_VARI_NAME( Int,Value1,"Value") = ::Math_obj::round((greenMultiplier * (int)255));
HXDLIN( 806)			hx::AndEq(color,(int)-65281);
HXDLIN( 806)			Int _hx_tmp1;
HXDLIN( 806)			if ((Value1 > (int)255)) {
HXLINE( 806)				_hx_tmp1 = (int)255;
            			}
            			else {
HXLINE( 806)				if ((Value1 < (int)0)) {
HXLINE( 806)					_hx_tmp1 = (int)0;
            				}
            				else {
HXLINE( 806)					_hx_tmp1 = Value1;
            				}
            			}
HXDLIN( 806)			hx::OrEq(color,((int)_hx_tmp1 << (int)(int)8));
            		}
HXDLIN( 806)		{
HXLINE( 806)			HX_VARI_NAME( Int,Value2,"Value") = ::Math_obj::round((blueMultiplier * (int)255));
HXDLIN( 806)			hx::AndEq(color,(int)-256);
HXDLIN( 806)			Int _hx_tmp2;
HXDLIN( 806)			if ((Value2 > (int)255)) {
HXLINE( 806)				_hx_tmp2 = (int)255;
            			}
            			else {
HXLINE( 806)				if ((Value2 < (int)0)) {
HXLINE( 806)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE( 806)					_hx_tmp2 = Value2;
            				}
            			}
HXDLIN( 806)			hx::OrEq(color,_hx_tmp2);
            		}
HXDLIN( 806)		{
HXLINE( 806)			HX_VARI_NAME( Int,Value3,"Value") = ::Math_obj::round((Alpha * (int)255));
HXDLIN( 806)			hx::AndEq(color,(int)16777215);
HXDLIN( 806)			Int _hx_tmp3;
HXDLIN( 806)			if ((Value3 > (int)255)) {
HXLINE( 806)				_hx_tmp3 = (int)255;
            			}
            			else {
HXLINE( 806)				if ((Value3 < (int)0)) {
HXLINE( 806)					_hx_tmp3 = (int)0;
            				}
            				else {
HXLINE( 806)					_hx_tmp3 = Value3;
            				}
            			}
HXDLIN( 806)			hx::OrEq(color,((int)_hx_tmp3 << (int)(int)24));
            		}
HXDLIN( 806)		this->set_color(((int)color & (int)(int)16777215));
HXLINE( 807)		this->set_alpha(alphaMultiplier);
HXLINE( 809)		::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
HXLINE( 810)		::flixel::util::FlxColorTransformUtil_obj::setOffsets(this->colorTransform,redOffset,greenOffset,blueOffset,alphaOffset);
HXLINE( 812)		Bool _hx_tmp4;
HXDLIN( 812)		Bool _hx_tmp5;
HXDLIN( 812)		if ((this->alpha == (int)1)) {
HXLINE( 812)			_hx_tmp5 = (this->color != (int)16777215);
            		}
            		else {
HXLINE( 812)			_hx_tmp5 = true;
            		}
HXDLIN( 812)		if (!(_hx_tmp5)) {
HXLINE( 812)			_hx_tmp4 = ::flixel::util::FlxColorTransformUtil_obj::hasRGBOffsets(this->colorTransform);
            		}
            		else {
HXLINE( 812)			_hx_tmp4 = true;
            		}
HXDLIN( 812)		this->useColorTransform = _hx_tmp4;
HXLINE( 813)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxSprite_obj,setColorTransform,(void))

void FlxSprite_obj::updateColorTransform(){
            	HX_STACK_FRAME("flixel.FlxSprite","updateColorTransform",0x79f9051b,"flixel.FlxSprite.updateColorTransform","flixel/FlxSprite.hx",817,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 818)		Bool _hx_tmp = hx::IsNull( this->colorTransform );
HXDLIN( 818)		if (_hx_tmp) {
HXLINE( 819)			this->colorTransform =  ::openfl::_legacy::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE( 821)		Bool _hx_tmp1;
HXDLIN( 821)		if ((this->alpha == (int)1)) {
HXLINE( 821)			_hx_tmp1 = (this->color != (int)16777215);
            		}
            		else {
HXLINE( 821)			_hx_tmp1 = true;
            		}
HXDLIN( 821)		this->useColorTransform = _hx_tmp1;
HXLINE( 822)		Bool _hx_tmp2 = this->useColorTransform;
HXDLIN( 822)		if (_hx_tmp2) {
HXLINE( 823)			Float _hx_tmp3 = ((Float)((int)((int)this->color >> (int)(int)16) & (int)(int)255) / (Float)(int)255);
HXDLIN( 823)			Float _hx_tmp4 = ((Float)((int)((int)this->color >> (int)(int)8) & (int)(int)255) / (Float)(int)255);
HXDLIN( 823)			Int _hx_tmp5 = ((int)this->color & (int)(int)255);
HXDLIN( 823)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,_hx_tmp3,_hx_tmp4,((Float)_hx_tmp5 / (Float)(int)255),this->alpha);
            		}
            		else {
HXLINE( 825)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,(int)1,(int)1,(int)1,(int)1);
            		}
HXLINE( 827)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,updateColorTransform,(void))

Bool FlxSprite_obj::pixelsOverlapPoint( ::flixel::math::FlxPoint point,hx::Null< Int >  __o_Mask, ::flixel::FlxCamera Camera){
Int Mask = __o_Mask.Default(255);
            	HX_STACK_FRAME("flixel.FlxSprite","pixelsOverlapPoint",0x4c878b7f,"flixel.FlxSprite.pixelsOverlapPoint","flixel/FlxSprite.hx",840,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(Mask,"Mask")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 841)		Bool _hx_tmp = hx::IsNull( Camera );
HXDLIN( 841)		if (_hx_tmp) {
HXLINE( 842)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 844)		this->getScreenPosition(this->_point,Camera);
HXLINE( 845)		this->_point->subtractPoint(this->offset);
HXLINE( 846)		Float _hx_tmp1 = (point->x - Camera->scroll->x);
HXDLIN( 846)		this->_flashPoint->x = (_hx_tmp1 - this->_point->x);
HXLINE( 847)		Float _hx_tmp2 = (point->y - Camera->scroll->y);
HXDLIN( 847)		this->_flashPoint->y = (_hx_tmp2 - this->_point->y);
HXLINE( 849)		Bool _hx_tmp3 = point->_weak;
HXDLIN( 849)		if (_hx_tmp3) {
HXLINE( 849)			point->put();
            		}
HXLINE( 852)		Bool _hx_tmp4;
HXDLIN( 852)		Bool _hx_tmp5;
HXDLIN( 852)		Bool _hx_tmp6;
HXDLIN( 852)		if (!((this->_flashPoint->x < (int)0))) {
HXLINE( 852)			_hx_tmp6 = (this->_flashPoint->x > this->frameWidth);
            		}
            		else {
HXLINE( 852)			_hx_tmp6 = true;
            		}
HXDLIN( 852)		if (!(_hx_tmp6)) {
HXLINE( 852)			_hx_tmp5 = (this->_flashPoint->y < (int)0);
            		}
            		else {
HXLINE( 852)			_hx_tmp5 = true;
            		}
HXDLIN( 852)		if (!(_hx_tmp5)) {
HXLINE( 852)			_hx_tmp4 = (this->_flashPoint->y > this->frameHeight);
            		}
            		else {
HXLINE( 852)			_hx_tmp4 = true;
            		}
HXDLIN( 852)		if (_hx_tmp4) {
HXLINE( 854)			return false;
            		}
            		else {
HXLINE( 858)			HX_VARI(  ::openfl::_legacy::display::BitmapData,frameData) = this->updateFramePixels();
HXLINE( 859)			Int _hx_tmp7 = ::Std_obj::_hx_int(this->_flashPoint->x);
HXDLIN( 859)			Int _hx_tmp8 = ::Std_obj::_hx_int(this->_flashPoint->y);
HXDLIN( 859)			HX_VARI( Int,pixelColor) = frameData->getPixel32(_hx_tmp7,_hx_tmp8);
HXLINE( 860)			return ((((int)((int)pixelColor >> (int)(int)24) & (int)(int)255) * this->alpha) >= Mask);
            		}
HXLINE( 852)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSprite_obj,pixelsOverlapPoint,return )

void FlxSprite_obj::calcFrame(hx::Null< Bool >  __o_RunOnCpp){
Bool RunOnCpp = __o_RunOnCpp.Default(false);
            	HX_STACK_FRAME("flixel.FlxSprite","calcFrame",0xc4d45b0f,"flixel.FlxSprite.calcFrame","flixel/FlxSprite.hx",870,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(RunOnCpp,"RunOnCpp")
HXLINE( 871)		Bool _hx_tmp = hx::IsNull( this->frame );
HXDLIN( 871)		if (_hx_tmp) {
HXLINE( 872)			 ::flixel::graphics::FlxGraphic _hx_tmp1 = ::flixel::graphics::FlxGraphic_obj::fromClass(hx::ClassOf< ::flixel::_FlxSprite::GraphicDefault >(),null(),null(),null());
HXDLIN( 872)			this->loadGraphic(_hx_tmp1,null(),null(),null(),null(),null());
            		}
HXLINE( 874)		Bool _hx_tmp2;
HXDLIN( 874)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 874)			_hx_tmp2 = !(RunOnCpp);
            		}
            		else {
HXLINE( 874)			_hx_tmp2 = false;
            		}
HXDLIN( 874)		if (_hx_tmp2) {
HXLINE( 875)			return;
            		}
HXLINE( 877)		this->updateFramePixels();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,calcFrame,(void))

 ::openfl::_legacy::display::BitmapData FlxSprite_obj::updateFramePixels(){
            	HX_STACK_FRAME("flixel.FlxSprite","updateFramePixels",0x2cd43e68,"flixel.FlxSprite.updateFramePixels","flixel/FlxSprite.hx",884,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE( 885)		Bool _hx_tmp;
HXDLIN( 885)		Bool _hx_tmp1 = hx::IsNotNull( this->_frame );
HXDLIN( 885)		if (_hx_tmp1) {
HXLINE( 885)			_hx_tmp = !(this->dirty);
            		}
            		else {
HXLINE( 885)			_hx_tmp = true;
            		}
HXDLIN( 885)		if (_hx_tmp) {
HXLINE( 886)			return this->framePixels;
            		}
HXLINE( 890)		Bool _hx_tmp2;
HXDLIN( 890)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 890)			_hx_tmp2 = hx::IsNotNull( this->_frameGraphic );
            		}
            		else {
HXLINE( 890)			_hx_tmp2 = false;
            		}
HXDLIN( 890)		if (_hx_tmp2) {
HXLINE( 892)			this->dirty = false;
HXLINE( 893)			return this->framePixels;
            		}
HXLINE( 896)		HX_VARI( Bool,doFlipX) = (this->flipX != this->_frame->flipX);
HXDLIN( 896)		HX_VAR_NAME( Bool,doFlipX1,"doFlipX");
HXDLIN( 896)		Bool _hx_tmp3 = hx::IsNotNull( this->animation->_curAnim );
HXDLIN( 896)		if (_hx_tmp3) {
HXLINE( 896)			doFlipX1 = (doFlipX != this->animation->_curAnim->flipX);
            		}
            		else {
HXLINE( 896)			doFlipX1 = doFlipX;
            		}
HXLINE( 897)		HX_VARI( Bool,doFlipY) = (this->flipY != this->_frame->flipY);
HXDLIN( 897)		HX_VAR_NAME( Bool,doFlipY1,"doFlipY");
HXDLIN( 897)		Bool _hx_tmp4 = hx::IsNotNull( this->animation->_curAnim );
HXDLIN( 897)		if (_hx_tmp4) {
HXLINE( 897)			doFlipY1 = (doFlipY != this->animation->_curAnim->flipY);
            		}
            		else {
HXLINE( 897)			doFlipY1 = doFlipY;
            		}
HXLINE( 899)		Bool _hx_tmp5;
HXDLIN( 899)		Bool _hx_tmp6;
HXDLIN( 899)		if (!(doFlipX1)) {
HXLINE( 899)			_hx_tmp6 = !(doFlipY1);
            		}
            		else {
HXLINE( 899)			_hx_tmp6 = false;
            		}
HXDLIN( 899)		if (_hx_tmp6) {
HXLINE( 899)			_hx_tmp5 = (this->_frame->type == (int)0);
            		}
            		else {
HXLINE( 899)			_hx_tmp5 = false;
            		}
HXDLIN( 899)		if (_hx_tmp5) {
HXLINE( 901)			this->framePixels = this->_frame->paint(this->framePixels,this->_flashPointZero,false,true);
            		}
            		else {
HXLINE( 905)			this->framePixels = this->_frame->paintRotatedAndFlipped(this->framePixels,this->_flashPointZero,(int)0,doFlipX1,doFlipY1,false,true);
            		}
HXLINE( 909)		Bool _hx_tmp7 = this->useColorTransform;
HXDLIN( 909)		if (_hx_tmp7) {
HXLINE( 911)			this->framePixels->colorTransform(this->_flashRect,this->colorTransform);
            		}
HXLINE( 914)		Bool _hx_tmp8;
HXDLIN( 914)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 914)			_hx_tmp8 = this->useFramePixels;
            		}
            		else {
HXLINE( 914)			_hx_tmp8 = false;
            		}
HXDLIN( 914)		if (_hx_tmp8) {
HXLINE( 917)			this->_frameGraphic = ( ( ::flixel::graphics::FlxGraphic)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_frameGraphic)) );
HXLINE( 918)			this->_frameGraphic = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(this->framePixels,false,null(),false);
HXLINE( 919)			this->_frame = this->_frameGraphic->get_imageFrame()->get_frame()->copyTo(this->_frame);
            		}
HXLINE( 922)		this->dirty = false;
HXLINE( 923)		return this->framePixels;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,updateFramePixels,return )

 ::flixel::math::FlxPoint FlxSprite_obj::getGraphicMidpoint( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.FlxSprite","getGraphicMidpoint",0xc420be03,"flixel.FlxSprite.getGraphicMidpoint","flixel/FlxSprite.hx",933,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 934)		Bool _hx_tmp = hx::IsNull( point );
HXDLIN( 934)		if (_hx_tmp) {
HXLINE( 936)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 936)			point1->_inPool = false;
HXDLIN( 936)			point = point1;
            		}
HXLINE( 938)		Float _hx_tmp1 = (this->x + (this->frameWidth * ((Float)0.5)));
HXDLIN( 938)		Float _hx_tmp2 = (this->y + (this->frameHeight * ((Float)0.5)));
HXDLIN( 938)		return point->set(_hx_tmp1,_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,getGraphicMidpoint,return )

Bool FlxSprite_obj::isOnScreen( ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.FlxSprite","isOnScreen",0xb5403c5e,"flixel.FlxSprite.isOnScreen","flixel/FlxSprite.hx",949,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 950)		Bool _hx_tmp = hx::IsNull( Camera );
HXDLIN( 950)		if (_hx_tmp) {
HXLINE( 951)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 953)		HX_VARI( Float,minX) = ((this->x - this->offset->x) - (Camera->scroll->x * this->scrollFactor->x));
HXLINE( 954)		HX_VARI( Float,minY) = ((this->y - this->offset->y) - (Camera->scroll->y * this->scrollFactor->y));
HXLINE( 956)		Bool _hx_tmp1;
HXDLIN( 956)		Bool _hx_tmp2;
HXDLIN( 956)		Bool _hx_tmp3;
HXDLIN( 956)		if ((this->angle != (int)0)) {
HXLINE( 956)			_hx_tmp3 = (this->bakedRotationAngle > (int)0);
            		}
            		else {
HXLINE( 956)			_hx_tmp3 = true;
            		}
HXDLIN( 956)		if (_hx_tmp3) {
HXLINE( 956)			_hx_tmp2 = (this->scale->x == (int)1);
            		}
            		else {
HXLINE( 956)			_hx_tmp2 = false;
            		}
HXDLIN( 956)		if (_hx_tmp2) {
HXLINE( 956)			_hx_tmp1 = (this->scale->y == (int)1);
            		}
            		else {
HXLINE( 956)			_hx_tmp1 = false;
            		}
HXDLIN( 956)		if (_hx_tmp1) {
HXLINE( 958)			Bool _hx_tmp4;
HXDLIN( 958)			if (!((minX > Camera->width))) {
HXLINE( 958)				_hx_tmp4 = ((minX + this->frameWidth) < (int)0);
            			}
            			else {
HXLINE( 958)				_hx_tmp4 = true;
            			}
HXDLIN( 958)			if (_hx_tmp4) {
HXLINE( 959)				return false;
            			}
HXLINE( 961)			Bool _hx_tmp5;
HXDLIN( 961)			if (!((minY > Camera->height))) {
HXLINE( 961)				_hx_tmp5 = ((minY + this->frameHeight) < (int)0);
            			}
            			else {
HXLINE( 961)				_hx_tmp5 = true;
            			}
HXDLIN( 961)			if (_hx_tmp5) {
HXLINE( 962)				return false;
            			}
            		}
            		else {
HXLINE( 966)			HX_VARI( Float,radiusX) = this->_halfSize->x;
HXLINE( 967)			HX_VARI( Float,radiusY) = this->_halfSize->y;
HXLINE( 969)			HX_VARI( Float,ox) = this->origin->x;
HXLINE( 970)			if ((ox != radiusX)) {
HXLINE( 972)				HX_VARI( Float,x1) = ::Math_obj::abs(ox);
HXLINE( 973)				Float _hx_tmp6 = (this->frameWidth - ox);
HXDLIN( 973)				HX_VARI( Float,x2) = ::Math_obj::abs(_hx_tmp6);
HXLINE( 974)				radiusX = ::Math_obj::max(x2,x1);
            			}
HXLINE( 977)			HX_VARI( Float,oy) = this->origin->y;
HXLINE( 978)			if ((oy != radiusY)) {
HXLINE( 980)				HX_VARI( Float,y1) = ::Math_obj::abs(oy);
HXLINE( 981)				Float _hx_tmp7 = (this->frameHeight - oy);
HXDLIN( 981)				HX_VARI( Float,y2) = ::Math_obj::abs(_hx_tmp7);
HXLINE( 982)				radiusY = ::Math_obj::max(y2,y1);
            			}
HXLINE( 985)			Float _hx_tmp8 = ::Math_obj::abs(this->scale->x);
HXDLIN( 985)			hx::MultEq(radiusX,_hx_tmp8);
HXLINE( 986)			Float _hx_tmp9 = ::Math_obj::abs(this->scale->y);
HXDLIN( 986)			hx::MultEq(radiusY,_hx_tmp9);
HXLINE( 987)			HX_VARI( Float,radius) = ::Math_obj::max(radiusX,radiusY);
HXLINE( 988)			hx::MultEq(radius,((Float)1.41421356237));
HXLINE( 990)			hx::AddEq(minX,ox);
HXLINE( 991)			HX_VARI( Float,maxX) = (minX + radius);
HXLINE( 992)			hx::SubEq(minX,radius);
HXLINE( 994)			Bool _hx_tmp10;
HXDLIN( 994)			if (!((maxX < (int)0))) {
HXLINE( 994)				_hx_tmp10 = (minX > Camera->width);
            			}
            			else {
HXLINE( 994)				_hx_tmp10 = true;
            			}
HXDLIN( 994)			if (_hx_tmp10) {
HXLINE( 995)				return false;
            			}
HXLINE( 997)			hx::AddEq(minY,oy);
HXLINE( 998)			HX_VARI( Float,maxY) = (minY + radius);
HXLINE( 999)			hx::SubEq(minY,radius);
HXLINE(1001)			Bool _hx_tmp11;
HXDLIN(1001)			if (!((maxY < (int)0))) {
HXLINE(1001)				_hx_tmp11 = (minY > Camera->height);
            			}
            			else {
HXLINE(1001)				_hx_tmp11 = true;
            			}
HXDLIN(1001)			if (_hx_tmp11) {
HXLINE(1002)				return false;
            			}
            		}
HXLINE(1005)		return true;
            	}


Bool FlxSprite_obj::isSimpleRender( ::flixel::FlxCamera camera){
            	HX_STACK_FRAME("flixel.FlxSprite","isSimpleRender",0x6aa0d51b,"flixel.FlxSprite.isSimpleRender","flixel/FlxSprite.hx",1013,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(camera,"camera")
HXLINE(1014)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1015)			return false;
            		}
HXLINE(1017)		return this->isSimpleRenderBlit(camera);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,isSimpleRender,return )

Bool FlxSprite_obj::isSimpleRenderBlit( ::flixel::FlxCamera camera){
            	HX_STACK_FRAME("flixel.FlxSprite","isSimpleRenderBlit",0x4bf362f0,"flixel.FlxSprite.isSimpleRenderBlit","flixel/FlxSprite.hx",1027,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(camera,"camera")
HXLINE(1028)		HX_VAR( Bool,result);
HXDLIN(1028)		Bool _hx_tmp;
HXDLIN(1028)		Bool _hx_tmp1;
HXDLIN(1028)		Bool _hx_tmp2;
HXDLIN(1028)		if ((this->angle != (int)0)) {
HXLINE(1028)			_hx_tmp2 = (this->bakedRotationAngle > (int)0);
            		}
            		else {
HXLINE(1028)			_hx_tmp2 = true;
            		}
HXDLIN(1028)		if (_hx_tmp2) {
HXLINE(1028)			_hx_tmp1 = (this->scale->x == (int)1);
            		}
            		else {
HXLINE(1028)			_hx_tmp1 = false;
            		}
HXDLIN(1028)		if (_hx_tmp1) {
HXLINE(1028)			_hx_tmp = (this->scale->y == (int)1);
            		}
            		else {
HXLINE(1028)			_hx_tmp = false;
            		}
HXDLIN(1028)		if (_hx_tmp) {
HXLINE(1028)			result = hx::IsNull( this->blend );
            		}
            		else {
HXLINE(1028)			result = false;
            		}
HXLINE(1030)		if (result) {
HXLINE(1030)			Bool _hx_tmp3 = hx::IsNotNull( camera );
HXDLIN(1030)			if (_hx_tmp3) {
HXLINE(1030)				result = this->isPixelPerfectRender(camera);
            			}
            			else {
HXLINE(1030)				result = this->pixelPerfectRender;
            			}
            		}
            		else {
HXLINE(1030)			result = false;
            		}
HXLINE(1031)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,isSimpleRenderBlit,return )

void FlxSprite_obj::setFacingFlip(Int Direction,Bool FlipX,Bool FlipY){
            	HX_STACK_FRAME("flixel.FlxSprite","setFacingFlip",0x6816c060,"flixel.FlxSprite.setFacingFlip","flixel/FlxSprite.hx",1046,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Direction,"Direction")
            	HX_STACK_ARG(FlipX,"FlipX")
            	HX_STACK_ARG(FlipY,"FlipY")
HXLINE(1046)		this->_facingFlip->set(Direction, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),FlipX)
            			->setFixed(1,HX_("y",79,00,00,00),FlipY)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSprite_obj,setFacingFlip,(void))

 ::flixel::FlxSprite FlxSprite_obj::setFrames( ::flixel::graphics::frames::FlxFramesCollection Frames,hx::Null< Bool >  __o_saveAnimations){
Bool saveAnimations = __o_saveAnimations.Default(true);
            	HX_STACK_FRAME("flixel.FlxSprite","setFrames",0xd774ec9f,"flixel.FlxSprite.setFrames","flixel/FlxSprite.hx",1058,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Frames,"Frames")
            	HX_STACK_ARG(saveAnimations,"saveAnimations")
HXLINE(1059)		if (saveAnimations) {
HXLINE(1061)			HX_VARI(  ::haxe::ds::StringMap,animations) = this->animation->_animations;
HXLINE(1062)			HX_VARI( Bool,reverse) = false;
HXLINE(1063)			HX_VARI( Int,index) = (int)0;
HXLINE(1064)			HX_VARI( Int,frameIndex) = this->animation->frameIndex;
HXLINE(1065)			HX_VARI( ::String,currName) = null();
HXLINE(1067)			Bool _hx_tmp = hx::IsNotNull( this->animation->_curAnim );
HXDLIN(1067)			if (_hx_tmp) {
HXLINE(1069)				reverse = this->animation->_curAnim->reversed;
HXLINE(1070)				index = this->animation->_curAnim->curFrame;
HXLINE(1071)				currName = this->animation->_curAnim->name;
            			}
HXLINE(1074)			this->animation->_animations = null();
HXLINE(1075)			this->set_frames(Frames);
HXLINE(1076)			 ::flixel::graphics::frames::FlxFrame _hx_tmp1 = this->frames->frames->__get(frameIndex).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN(1076)			this->set_frame(_hx_tmp1);
HXLINE(1077)			this->animation->_animations = animations;
HXLINE(1079)			Bool _hx_tmp2 = hx::IsNotNull( currName );
HXDLIN(1079)			if (_hx_tmp2) {
HXLINE(1081)				this->animation->play(currName,false,reverse,index);
            			}
            		}
            		else {
HXLINE(1086)			this->set_frames(Frames);
            		}
HXLINE(1089)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSprite_obj,setFrames,return )

 ::openfl::_legacy::display::BitmapData FlxSprite_obj::get_pixels(){
            	HX_STACK_FRAME("flixel.FlxSprite","get_pixels",0x90b8575f,"flixel.FlxSprite.get_pixels","flixel/FlxSprite.hx",1094,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE(1094)		Bool _hx_tmp = hx::IsNull( this->graphic );
HXDLIN(1094)		if (_hx_tmp) {
HXLINE(1094)			return null();
            		}
            		else {
HXLINE(1094)			return this->graphic->bitmap;
            		}
HXDLIN(1094)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,get_pixels,return )

 ::openfl::_legacy::display::BitmapData FlxSprite_obj::set_pixels( ::openfl::_legacy::display::BitmapData Pixels){
            	HX_STACK_FRAME("flixel.FlxSprite","set_pixels",0x9435f5d3,"flixel.FlxSprite.set_pixels","flixel/FlxSprite.hx",1098,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Pixels,"Pixels")
HXLINE(1099)		HX_VARI( ::String,key) = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(Pixels);
HXLINE(1101)		Bool _hx_tmp = hx::IsNull( key );
HXDLIN(1101)		if (_hx_tmp) {
HXLINE(1103)			key = ::flixel::FlxG_obj::bitmap->getUniqueKey(null());
HXLINE(1104)			 ::flixel::graphics::FlxGraphic _hx_tmp1 = ::flixel::FlxG_obj::bitmap->add(Pixels,false,key);
HXDLIN(1104)			this->set_graphic(_hx_tmp1);
            		}
            		else {
HXLINE(1108)			 ::flixel::graphics::FlxGraphic _hx_tmp2 = ::flixel::FlxG_obj::bitmap->get(key);
HXDLIN(1108)			this->set_graphic(_hx_tmp2);
            		}
HXLINE(1111)		 ::flixel::graphics::frames::FlxImageFrame _hx_tmp3 = this->graphic->get_imageFrame();
HXDLIN(1111)		this->set_frames(_hx_tmp3);
HXLINE(1112)		return Pixels;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_pixels,return )

 ::flixel::graphics::frames::FlxFrame FlxSprite_obj::set_frame( ::flixel::graphics::frames::FlxFrame Value){
            	HX_STACK_FRAME("flixel.FlxSprite","set_frame",0xf8c58847,"flixel.FlxSprite.set_frame","flixel/FlxSprite.hx",1116,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1117)		this->frame = Value;
HXLINE(1118)		Bool _hx_tmp = hx::IsNotNull( this->frame );
HXDLIN(1118)		if (_hx_tmp) {
HXLINE(1120)			{
HXLINE(1120)				Bool _hx_tmp1 = hx::IsNotNull( this->frame );
HXDLIN(1120)				if (_hx_tmp1) {
HXLINE(1120)					this->frameWidth = ::Std_obj::_hx_int(this->frame->sourceSize->x);
HXDLIN(1120)					this->frameHeight = ::Std_obj::_hx_int(this->frame->sourceSize->y);
            				}
HXDLIN(1120)				Float _hx_tmp2 = (((Float)0.5) * this->frameWidth);
HXDLIN(1120)				Float _hx_tmp3 = (((Float)0.5) * this->frameHeight);
HXDLIN(1120)				this->_halfSize->set(_hx_tmp2,_hx_tmp3);
HXDLIN(1120)				{
HXLINE(1120)					this->_flashRect->x = (int)0;
HXDLIN(1120)					this->_flashRect->y = (int)0;
HXDLIN(1120)					this->_flashRect->width = this->frameWidth;
HXDLIN(1120)					this->_flashRect->height = this->frameHeight;
            				}
            			}
HXLINE(1121)			this->dirty = true;
            		}
            		else {
HXLINE(1123)			Bool _hx_tmp4;
HXDLIN(1123)			Bool _hx_tmp5;
HXDLIN(1123)			Bool _hx_tmp6 = hx::IsNotNull( this->frames );
HXDLIN(1123)			if (_hx_tmp6) {
HXLINE(1123)				_hx_tmp5 = hx::IsNotNull( this->frames->frames );
            			}
            			else {
HXLINE(1123)				_hx_tmp5 = false;
            			}
HXDLIN(1123)			if (_hx_tmp5) {
HXLINE(1123)				_hx_tmp4 = (this->numFrames > (int)0);
            			}
            			else {
HXLINE(1123)				_hx_tmp4 = false;
            			}
HXDLIN(1123)			if (_hx_tmp4) {
HXLINE(1125)				this->frame = this->frames->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXLINE(1126)				this->dirty = true;
            			}
            			else {
HXLINE(1130)				return null();
            			}
            		}
HXLINE(1133)		Bool _hx_tmp7 = ::flixel::FlxG_obj::renderTile;
HXDLIN(1133)		if (_hx_tmp7) {
HXLINE(1135)			this->_frameGraphic = ( ( ::flixel::graphics::FlxGraphic)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_frameGraphic)) );
            		}
HXLINE(1138)		Bool _hx_tmp8 = hx::IsNotNull( this->clipRect );
HXDLIN(1138)		if (_hx_tmp8) {
HXLINE(1140)			this->_frame = this->frame->clipTo(this->clipRect,this->_frame);
            		}
            		else {
HXLINE(1144)			this->_frame = this->frame->copyTo(this->_frame);
            		}
HXLINE(1147)		return this->frame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_frame,return )

Int FlxSprite_obj::set_facing(Int Direction){
            	HX_STACK_FRAME("flixel.FlxSprite","set_facing",0xeb9145c0,"flixel.FlxSprite.set_facing","flixel/FlxSprite.hx",1151,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Direction,"Direction")
HXLINE(1152)		HX_VARI(  ::Dynamic,flip) = this->_facingFlip->get(Direction);
HXLINE(1153)		Bool _hx_tmp = hx::IsNotNull( flip );
HXDLIN(1153)		if (_hx_tmp) {
HXLINE(1155)			this->set_flipX( ::Dynamic(flip->__Field(HX_("x",78,00,00,00),hx::paccDynamic)));
HXLINE(1156)			this->set_flipY( ::Dynamic(flip->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
            		}
HXLINE(1159)		return (this->facing = Direction);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_facing,return )

Float FlxSprite_obj::set_alpha(Float Alpha){
            	HX_STACK_FRAME("flixel.FlxSprite","set_alpha",0x13d8b778,"flixel.FlxSprite.set_alpha","flixel/FlxSprite.hx",1163,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Alpha,"Alpha")
HXLINE(1164)		if ((this->alpha == Alpha)) {
HXLINE(1166)			return Alpha;
            		}
HXLINE(1168)		HX_VAR( Float,lowerBound);
HXDLIN(1168)		if ((Alpha < (int)0)) {
HXLINE(1168)			lowerBound = (int)0;
            		}
            		else {
HXLINE(1168)			lowerBound = Alpha;
            		}
HXDLIN(1168)		 ::Dynamic _hx_tmp;
HXDLIN(1168)		if ((lowerBound > (int)1)) {
HXLINE(1168)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE(1168)			_hx_tmp = lowerBound;
            		}
HXDLIN(1168)		this->alpha = _hx_tmp;
HXLINE(1169)		this->updateColorTransform();
HXLINE(1170)		return this->alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_alpha,return )

Int FlxSprite_obj::set_color(Int Color){
            	HX_STACK_FRAME("flixel.FlxSprite","set_color",0x3c9e817d,"flixel.FlxSprite.set_color","flixel/FlxSprite.hx",1174,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Color,"Color")
HXLINE(1175)		if ((this->color == Color)) {
HXLINE(1177)			return Color;
            		}
HXLINE(1179)		this->color = Color;
HXLINE(1180)		this->updateColorTransform();
HXLINE(1181)		return this->color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_color,return )

Float FlxSprite_obj::set_angle(Float Value){
            	HX_STACK_FRAME("flixel.FlxSprite","set_angle",0x152453ed,"flixel.FlxSprite.set_angle","flixel/FlxSprite.hx",1185,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1186)		HX_VARI( Bool,newAngle) = (this->angle != Value);
HXLINE(1187)		HX_VARI( Float,ret) = this->super::set_angle(Value);
HXLINE(1188)		if (newAngle) {
HXLINE(1190)			this->_angleChanged = true;
HXLINE(1191)			this->animation->update((int)0);
            		}
HXLINE(1193)		return ret;
            	}


void FlxSprite_obj::updateTrig(){
            	HX_STACK_FRAME("flixel.FlxSprite","updateTrig",0x193f7fee,"flixel.FlxSprite.updateTrig","flixel/FlxSprite.hx",1198,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE(1198)		Bool _hx_tmp = this->_angleChanged;
HXDLIN(1198)		if (_hx_tmp) {
HXLINE(1200)			HX_VARI( Float,radians) = (this->angle * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE(1201)			this->_sinAngle = ::Math_obj::sin(radians);
HXLINE(1202)			this->_cosAngle = ::Math_obj::cos(radians);
HXLINE(1203)			this->_angleChanged = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,updateTrig,(void))

::hx::EnumBase FlxSprite_obj::set_blend(::hx::EnumBase Value){
            	HX_STACK_FRAME("flixel.FlxSprite","set_blend",0xa736f86b,"flixel.FlxSprite.set_blend","flixel/FlxSprite.hx",1209,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1209)		return (this->blend = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_blend,return )

 ::flixel::graphics::FlxGraphic FlxSprite_obj::set_graphic( ::flixel::graphics::FlxGraphic Value){
            	HX_STACK_FRAME("flixel.FlxSprite","set_graphic",0x07012542,"flixel.FlxSprite.set_graphic","flixel/FlxSprite.hx",1217,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1218)		HX_VARI(  ::flixel::graphics::FlxGraphic,oldGraphic) = this->graphic;
HXLINE(1220)		Bool _hx_tmp;
HXDLIN(1220)		if (hx::IsNotEq( this->graphic,Value )) {
HXLINE(1220)			_hx_tmp = hx::IsNotNull( Value );
            		}
            		else {
HXLINE(1220)			_hx_tmp = false;
            		}
HXDLIN(1220)		if (_hx_tmp) {
HXLINE(1222)			HX_VARI( Int,_g1) = Value->get_useCount();
HXDLIN(1222)			Value->set_useCount((_g1 + (int)1));
            		}
HXLINE(1225)		Bool _hx_tmp1;
HXDLIN(1225)		Bool _hx_tmp2 = hx::IsNotNull( oldGraphic );
HXDLIN(1225)		if (_hx_tmp2) {
HXLINE(1225)			_hx_tmp1 = hx::IsNotEq( oldGraphic,Value );
            		}
            		else {
HXLINE(1225)			_hx_tmp1 = false;
            		}
HXDLIN(1225)		if (_hx_tmp1) {
HXLINE(1227)			HX_VARI_NAME( Int,_g11,"_g1") = oldGraphic->get_useCount();
HXDLIN(1227)			oldGraphic->set_useCount((_g11 - (int)1));
            		}
HXLINE(1230)		return (this->graphic = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_graphic,return )

 ::flixel::math::FlxRect FlxSprite_obj::set_clipRect( ::flixel::math::FlxRect rect){
            	HX_STACK_FRAME("flixel.FlxSprite","set_clipRect",0x60020c3a,"flixel.FlxSprite.set_clipRect","flixel/FlxSprite.hx",1234,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE(1235)		Bool _hx_tmp = hx::IsNotNull( rect );
HXDLIN(1235)		if (_hx_tmp) {
HXLINE(1237)			rect->x = ::Math_obj::round(rect->x);
HXDLIN(1237)			rect->y = ::Math_obj::round(rect->y);
HXDLIN(1237)			rect->width = ::Math_obj::round(rect->width);
HXDLIN(1237)			rect->height = ::Math_obj::round(rect->height);
HXDLIN(1237)			this->clipRect = rect;
            		}
            		else {
HXLINE(1241)			this->clipRect = null();
            		}
HXLINE(1244)		Bool _hx_tmp1 = hx::IsNotNull( this->frames );
HXDLIN(1244)		if (_hx_tmp1) {
HXLINE(1246)			 ::flixel::graphics::frames::FlxFrame _hx_tmp2 = this->frames->frames->__get(this->animation->frameIndex).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN(1246)			this->set_frame(_hx_tmp2);
            		}
HXLINE(1249)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_clipRect,return )

 ::flixel::graphics::frames::FlxFramesCollection FlxSprite_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection Frames){
            	HX_STACK_FRAME("flixel.FlxSprite","set_frames",0xb411b64c,"flixel.FlxSprite.set_frames","flixel/FlxSprite.hx",1260,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Frames,"Frames")
HXLINE(1261)		Bool _hx_tmp = hx::IsNotNull( this->animation );
HXDLIN(1261)		if (_hx_tmp) {
HXLINE(1263)			this->animation->destroyAnimations();
            		}
HXLINE(1266)		Bool _hx_tmp1 = hx::IsNotNull( Frames );
HXDLIN(1266)		if (_hx_tmp1) {
HXLINE(1268)			this->set_graphic(Frames->parent);
HXLINE(1269)			this->frames = Frames;
HXLINE(1270)			 ::flixel::graphics::frames::FlxFrame _hx_tmp2 = this->frames->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN(1270)			this->set_frame(_hx_tmp2);
HXLINE(1271)			this->numFrames = this->frames->frames->length;
HXLINE(1272)			this->resetHelpers();
HXLINE(1273)			this->bakedRotationAngle = (int)0;
HXLINE(1274)			this->animation->set_frameIndex((int)0);
HXLINE(1275)			this->graphicLoaded();
            		}
            		else {
HXLINE(1279)			this->frames = null();
HXLINE(1280)			this->set_frame(null());
HXLINE(1281)			this->set_graphic(null());
            		}
HXLINE(1284)		this->set_clipRect(null());
HXLINE(1285)		return Frames;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_frames,return )

Bool FlxSprite_obj::set_flipX(Bool Value){
            	HX_STACK_FRAME("flixel.FlxSprite","set_flipX",0xf4d45525,"flixel.FlxSprite.set_flipX","flixel/FlxSprite.hx",1289,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1290)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN(1290)		if (_hx_tmp) {
HXLINE(1292)			Int _hx_tmp1;
HXDLIN(1292)			if (Value) {
HXLINE(1292)				_hx_tmp1 = (int)-1;
            			}
            			else {
HXLINE(1292)				_hx_tmp1 = (int)1;
            			}
HXDLIN(1292)			this->_facingHorizontalMult = _hx_tmp1;
            		}
HXLINE(1294)		Bool _hx_tmp2;
HXDLIN(1294)		if ((this->flipX == Value)) {
HXLINE(1294)			_hx_tmp2 = this->dirty;
            		}
            		else {
HXLINE(1294)			_hx_tmp2 = true;
            		}
HXDLIN(1294)		this->dirty = _hx_tmp2;
HXLINE(1295)		return (this->flipX = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_flipX,return )

Bool FlxSprite_obj::set_flipY(Bool Value){
            	HX_STACK_FRAME("flixel.FlxSprite","set_flipY",0xf4d45526,"flixel.FlxSprite.set_flipY","flixel/FlxSprite.hx",1299,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1300)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN(1300)		if (_hx_tmp) {
HXLINE(1302)			Int _hx_tmp1;
HXDLIN(1302)			if (Value) {
HXLINE(1302)				_hx_tmp1 = (int)-1;
            			}
            			else {
HXLINE(1302)				_hx_tmp1 = (int)1;
            			}
HXDLIN(1302)			this->_facingVerticalMult = _hx_tmp1;
            		}
HXLINE(1304)		Bool _hx_tmp2;
HXDLIN(1304)		if ((this->flipY == Value)) {
HXLINE(1304)			_hx_tmp2 = this->dirty;
            		}
            		else {
HXLINE(1304)			_hx_tmp2 = true;
            		}
HXDLIN(1304)		this->dirty = _hx_tmp2;
HXLINE(1305)		return (this->flipY = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_flipY,return )

Bool FlxSprite_obj::set_antialiasing(Bool value){
            	HX_STACK_FRAME("flixel.FlxSprite","set_antialiasing",0xf8f29e1a,"flixel.FlxSprite.set_antialiasing","flixel/FlxSprite.hx",1310,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1310)		return (this->antialiasing = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_antialiasing,return )

Bool FlxSprite_obj::set_useFramePixels(Bool value){
            	HX_STACK_FRAME("flixel.FlxSprite","set_useFramePixels",0x72e62ad9,"flixel.FlxSprite.set_useFramePixels","flixel/FlxSprite.hx",1315,0x0384bffa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1315)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN(1315)		if (_hx_tmp) {
HXLINE(1317)			Bool _hx_tmp1 = (value != this->useFramePixels);
HXDLIN(1317)			if (_hx_tmp1) {
HXLINE(1319)				this->useFramePixels = value;
HXLINE(1320)				this->set_frame(this->frame);
HXLINE(1322)				if (value) {
HXLINE(1324)					this->updateFramePixels();
            				}
            			}
HXLINE(1328)			return value;
            		}
            		else {
HXLINE(1332)			this->useFramePixels = true;
HXLINE(1333)			return true;
            		}
HXLINE(1315)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSprite_obj,set_useFramePixels,return )

Bool FlxSprite_obj::checkFlipX(){
            	HX_STACK_FRAME("flixel.FlxSprite","checkFlipX",0x26093f8c,"flixel.FlxSprite.checkFlipX","flixel/FlxSprite.hx",1338,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE(1339)		HX_VARI( Bool,doFlipX) = (this->flipX != this->_frame->flipX);
HXLINE(1340)		Bool _hx_tmp = hx::IsNotNull( this->animation->_curAnim );
HXDLIN(1340)		if (_hx_tmp) {
HXLINE(1342)			return (doFlipX != this->animation->_curAnim->flipX);
            		}
HXLINE(1344)		return doFlipX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,checkFlipX,return )

Bool FlxSprite_obj::checkFlipY(){
            	HX_STACK_FRAME("flixel.FlxSprite","checkFlipY",0x26093f8d,"flixel.FlxSprite.checkFlipY","flixel/FlxSprite.hx",1348,0x0384bffa)
            	HX_STACK_THIS(this)
HXLINE(1349)		HX_VARI( Bool,doFlipY) = (this->flipY != this->_frame->flipY);
HXLINE(1350)		Bool _hx_tmp = hx::IsNotNull( this->animation->_curAnim );
HXDLIN(1350)		if (_hx_tmp) {
HXLINE(1352)			return (doFlipY != this->animation->_curAnim->flipY);
            		}
HXLINE(1354)		return doFlipY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSprite_obj,checkFlipY,return )


FlxSprite_obj::FlxSprite_obj()
{
}

void FlxSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxSprite);
	HX_MARK_MEMBER_NAME(animation,"animation");
	HX_MARK_MEMBER_NAME(framePixels,"framePixels");
	HX_MARK_MEMBER_NAME(useFramePixels,"useFramePixels");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(frameWidth,"frameWidth");
	HX_MARK_MEMBER_NAME(frameHeight,"frameHeight");
	HX_MARK_MEMBER_NAME(numFrames,"numFrames");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(graphic,"graphic");
	HX_MARK_MEMBER_NAME(bakedRotationAngle,"bakedRotationAngle");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(facing,"facing");
	HX_MARK_MEMBER_NAME(flipX,"flipX");
	HX_MARK_MEMBER_NAME(flipY,"flipY");
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(blend,"blend");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(colorTransform,"colorTransform");
	HX_MARK_MEMBER_NAME(useColorTransform,"useColorTransform");
	HX_MARK_MEMBER_NAME(clipRect,"clipRect");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(_frame,"_frame");
	HX_MARK_MEMBER_NAME(_frameGraphic,"_frameGraphic");
	HX_MARK_MEMBER_NAME(_facingHorizontalMult,"_facingHorizontalMult");
	HX_MARK_MEMBER_NAME(_facingVerticalMult,"_facingVerticalMult");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_flashRect2,"_flashRect2");
	HX_MARK_MEMBER_NAME(_flashPointZero,"_flashPointZero");
	HX_MARK_MEMBER_NAME(_matrix,"_matrix");
	HX_MARK_MEMBER_NAME(_halfSize,"_halfSize");
	HX_MARK_MEMBER_NAME(_sinAngle,"_sinAngle");
	HX_MARK_MEMBER_NAME(_cosAngle,"_cosAngle");
	HX_MARK_MEMBER_NAME(_angleChanged,"_angleChanged");
	HX_MARK_MEMBER_NAME(_facingFlip,"_facingFlip");
	 ::flixel::FlxObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(animation,"animation");
	HX_VISIT_MEMBER_NAME(framePixels,"framePixels");
	HX_VISIT_MEMBER_NAME(useFramePixels,"useFramePixels");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(frameWidth,"frameWidth");
	HX_VISIT_MEMBER_NAME(frameHeight,"frameHeight");
	HX_VISIT_MEMBER_NAME(numFrames,"numFrames");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(graphic,"graphic");
	HX_VISIT_MEMBER_NAME(bakedRotationAngle,"bakedRotationAngle");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(facing,"facing");
	HX_VISIT_MEMBER_NAME(flipX,"flipX");
	HX_VISIT_MEMBER_NAME(flipY,"flipY");
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(blend,"blend");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(colorTransform,"colorTransform");
	HX_VISIT_MEMBER_NAME(useColorTransform,"useColorTransform");
	HX_VISIT_MEMBER_NAME(clipRect,"clipRect");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(_frame,"_frame");
	HX_VISIT_MEMBER_NAME(_frameGraphic,"_frameGraphic");
	HX_VISIT_MEMBER_NAME(_facingHorizontalMult,"_facingHorizontalMult");
	HX_VISIT_MEMBER_NAME(_facingVerticalMult,"_facingVerticalMult");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_flashRect2,"_flashRect2");
	HX_VISIT_MEMBER_NAME(_flashPointZero,"_flashPointZero");
	HX_VISIT_MEMBER_NAME(_matrix,"_matrix");
	HX_VISIT_MEMBER_NAME(_halfSize,"_halfSize");
	HX_VISIT_MEMBER_NAME(_sinAngle,"_sinAngle");
	HX_VISIT_MEMBER_NAME(_cosAngle,"_cosAngle");
	HX_VISIT_MEMBER_NAME(_angleChanged,"_angleChanged");
	HX_VISIT_MEMBER_NAME(_facingFlip,"_facingFlip");
	 ::flixel::FlxObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxSprite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty); }
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha); }
		if (HX_FIELD_EQ(inName,"flipX") ) { return hx::Val( flipX); }
		if (HX_FIELD_EQ(inName,"flipY") ) { return hx::Val( flipY); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale); }
		if (HX_FIELD_EQ(inName,"blend") ) { return hx::Val( blend); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"stamp") ) { return hx::Val( stamp_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pixels") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_pixels()); }
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames); }
		if (HX_FIELD_EQ(inName,"facing") ) { return hx::Val( facing); }
		if (HX_FIELD_EQ(inName,"origin") ) { return hx::Val( origin); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader); }
		if (HX_FIELD_EQ(inName,"_frame") ) { return hx::Val( _frame); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { return hx::Val( graphic); }
		if (HX_FIELD_EQ(inName,"_matrix") ) { return hx::Val( _matrix); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"clipRect") ) { return hx::Val( clipRect); }
		if (HX_FIELD_EQ(inName,"initVars") ) { return hx::Val( initVars_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animation") ) { return hx::Val( animation); }
		if (HX_FIELD_EQ(inName,"numFrames") ) { return hx::Val( numFrames); }
		if (HX_FIELD_EQ(inName,"_halfSize") ) { return hx::Val( _halfSize); }
		if (HX_FIELD_EQ(inName,"_sinAngle") ) { return hx::Val( _sinAngle); }
		if (HX_FIELD_EQ(inName,"_cosAngle") ) { return hx::Val( _cosAngle); }
		if (HX_FIELD_EQ(inName,"resetSize") ) { return hx::Val( resetSize_dyn()); }
		if (HX_FIELD_EQ(inName,"drawFrame") ) { return hx::Val( drawFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"calcFrame") ) { return hx::Val( calcFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"setFrames") ) { return hx::Val( setFrames_dyn()); }
		if (HX_FIELD_EQ(inName,"set_frame") ) { return hx::Val( set_frame_dyn()); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn()); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn()); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn()); }
		if (HX_FIELD_EQ(inName,"set_blend") ) { return hx::Val( set_blend_dyn()); }
		if (HX_FIELD_EQ(inName,"set_flipX") ) { return hx::Val( set_flipX_dyn()); }
		if (HX_FIELD_EQ(inName,"set_flipY") ) { return hx::Val( set_flipY_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameWidth") ) { return hx::Val( frameWidth); }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return hx::Val( _flashRect); }
		if (HX_FIELD_EQ(inName,"resetFrame") ) { return hx::Val( resetFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"drawSimple") ) { return hx::Val( drawSimple_dyn()); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return hx::Val( isOnScreen_dyn()); }
		if (HX_FIELD_EQ(inName,"get_pixels") ) { return hx::Val( get_pixels_dyn()); }
		if (HX_FIELD_EQ(inName,"set_pixels") ) { return hx::Val( set_pixels_dyn()); }
		if (HX_FIELD_EQ(inName,"set_facing") ) { return hx::Val( set_facing_dyn()); }
		if (HX_FIELD_EQ(inName,"updateTrig") ) { return hx::Val( updateTrig_dyn()); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return hx::Val( set_frames_dyn()); }
		if (HX_FIELD_EQ(inName,"checkFlipX") ) { return hx::Val( checkFlipX_dyn()); }
		if (HX_FIELD_EQ(inName,"checkFlipY") ) { return hx::Val( checkFlipY_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framePixels") ) { return hx::Val( framePixels); }
		if (HX_FIELD_EQ(inName,"frameHeight") ) { return hx::Val( frameHeight); }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return hx::Val( _flashPoint); }
		if (HX_FIELD_EQ(inName,"_flashRect2") ) { return hx::Val( _flashRect2); }
		if (HX_FIELD_EQ(inName,"_facingFlip") ) { return hx::Val( _facingFlip); }
		if (HX_FIELD_EQ(inName,"loadGraphic") ) { return hx::Val( loadGraphic_dyn()); }
		if (HX_FIELD_EQ(inName,"makeGraphic") ) { return hx::Val( makeGraphic_dyn()); }
		if (HX_FIELD_EQ(inName,"drawComplex") ) { return hx::Val( drawComplex_dyn()); }
		if (HX_FIELD_EQ(inName,"set_graphic") ) { return hx::Val( set_graphic_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return hx::Val( antialiasing); }
		if (HX_FIELD_EQ(inName,"updateHitbox") ) { return hx::Val( updateHitbox_dyn()); }
		if (HX_FIELD_EQ(inName,"resetHelpers") ) { return hx::Val( resetHelpers_dyn()); }
		if (HX_FIELD_EQ(inName,"centerOrigin") ) { return hx::Val( centerOrigin_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceColor") ) { return hx::Val( replaceColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_clipRect") ) { return hx::Val( set_clipRect_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_frameGraphic") ) { return hx::Val( _frameGraphic); }
		if (HX_FIELD_EQ(inName,"_angleChanged") ) { return hx::Val( _angleChanged); }
		if (HX_FIELD_EQ(inName,"graphicLoaded") ) { return hx::Val( graphicLoaded_dyn()); }
		if (HX_FIELD_EQ(inName,"centerOffsets") ) { return hx::Val( centerOffsets_dyn()); }
		if (HX_FIELD_EQ(inName,"setFacingFlip") ) { return hx::Val( setFacingFlip_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"useFramePixels") ) { return hx::Val( useFramePixels); }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform); }
		if (HX_FIELD_EQ(inName,"resetFrameSize") ) { return hx::Val( resetFrameSize_dyn()); }
		if (HX_FIELD_EQ(inName,"setGraphicSize") ) { return hx::Val( setGraphicSize_dyn()); }
		if (HX_FIELD_EQ(inName,"isSimpleRender") ) { return hx::Val( isSimpleRender_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_flashPointZero") ) { return hx::Val( _flashPointZero); }
		if (HX_FIELD_EQ(inName,"updateAnimation") ) { return hx::Val( updateAnimation_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadRotatedFrame") ) { return hx::Val( loadRotatedFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return hx::Val( set_antialiasing_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"useColorTransform") ) { return hx::Val( useColorTransform); }
		if (HX_FIELD_EQ(inName,"setColorTransform") ) { return hx::Val( setColorTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"updateFramePixels") ) { return hx::Val( updateFramePixels_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bakedRotationAngle") ) { return hx::Val( bakedRotationAngle); }
		if (HX_FIELD_EQ(inName,"loadRotatedGraphic") ) { return hx::Val( loadRotatedGraphic_dyn()); }
		if (HX_FIELD_EQ(inName,"resetSizeFromFrame") ) { return hx::Val( resetSizeFromFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"pixelsOverlapPoint") ) { return hx::Val( pixelsOverlapPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"getGraphicMidpoint") ) { return hx::Val( getGraphicMidpoint_dyn()); }
		if (HX_FIELD_EQ(inName,"isSimpleRenderBlit") ) { return hx::Val( isSimpleRenderBlit_dyn()); }
		if (HX_FIELD_EQ(inName,"set_useFramePixels") ) { return hx::Val( set_useFramePixels_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_facingVerticalMult") ) { return hx::Val( _facingVerticalMult); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateColorTransform") ) { return hx::Val( updateColorTransform_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_facingHorizontalMult") ) { return hx::Val( _facingHorizontalMult); }
		if (HX_FIELD_EQ(inName,"loadGraphicFromSprite") ) { return hx::Val( loadGraphicFromSprite_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxSprite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frame(inValue) );frame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_flipX(inValue) );flipX=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_flipY(inValue) );flipY=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend(inValue) );blend=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue) );color=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pixels") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pixels(inValue) ); }
		if (HX_FIELD_EQ(inName,"frames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frames(inValue) );frames=inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >(); return inValue; }
		if (HX_FIELD_EQ(inName,"facing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_facing(inValue) );facing=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_frame") ) { _frame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_graphic(inValue) );graphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"clipRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clipRect(inValue) );clipRect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animation") ) { animation=inValue.Cast<  ::flixel::animation::FlxAnimationController >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numFrames") ) { numFrames=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_halfSize") ) { _halfSize=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sinAngle") ) { _sinAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cosAngle") ) { _cosAngle=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameWidth") ) { frameWidth=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framePixels") ) { framePixels=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameHeight") ) { frameHeight=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashRect2") ) { _flashRect2=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_facingFlip") ) { _facingFlip=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antialiasing(inValue) );antialiasing=inValue.Cast< Bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_frameGraphic") ) { _frameGraphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_angleChanged") ) { _angleChanged=inValue.Cast< Bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"useFramePixels") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_useFramePixels(inValue) );useFramePixels=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { colorTransform=inValue.Cast<  ::openfl::_legacy::geom::ColorTransform >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_flashPointZero") ) { _flashPointZero=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"useColorTransform") ) { useColorTransform=inValue.Cast< Bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bakedRotationAngle") ) { bakedRotationAngle=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_facingVerticalMult") ) { _facingVerticalMult=inValue.Cast< Int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_facingHorizontalMult") ) { _facingHorizontalMult=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("animation","\x04","\xef","\x34","\x4b"));
	outFields->push(HX_HCSTRING("framePixels","\x3a","\xbb","\xf1","\x6a"));
	outFields->push(HX_HCSTRING("useFramePixels","\x33","\x0e","\x5a","\x8e"));
	outFields->push(HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("pixels","\x2d","\xef","\xa9","\x8c"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("frameWidth","\x99","\xea","\x88","\xad"));
	outFields->push(HX_HCSTRING("frameHeight","\xf4","\xd3","\x93","\xe0"));
	outFields->push(HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74"));
	outFields->push(HX_HCSTRING("bakedRotationAngle","\x8a","\xd1","\x9c","\x9b"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("facing","\x1a","\x3f","\x05","\xe4"));
	outFields->push(HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"));
	outFields->push(HX_HCSTRING("useColorTransform","\x30","\xe6","\xec","\x72"));
	outFields->push(HX_HCSTRING("clipRect","\x14","\x90","\x6a","\x58"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("_frame","\x6e","\xbf","\x6a","\x02"));
	outFields->push(HX_HCSTRING("_frameGraphic","\xda","\xac","\x00","\xf7"));
	outFields->push(HX_HCSTRING("_facingHorizontalMult","\x8d","\x29","\xa1","\x51"));
	outFields->push(HX_HCSTRING("_facingVerticalMult","\xdf","\x11","\x0c","\x86"));
	outFields->push(HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"));
	outFields->push(HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"));
	outFields->push(HX_HCSTRING("_flashRect2","\xdd","\x9b","\x56","\xd7"));
	outFields->push(HX_HCSTRING("_flashPointZero","\x67","\x14","\x7d","\xfb"));
	outFields->push(HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"));
	outFields->push(HX_HCSTRING("_halfSize","\x73","\x43","\x4d","\x66"));
	outFields->push(HX_HCSTRING("_sinAngle","\xfa","\x54","\xde","\xb8"));
	outFields->push(HX_HCSTRING("_cosAngle","\x6b","\xc9","\x00","\x1f"));
	outFields->push(HX_HCSTRING("_angleChanged","\x40","\x98","\x5c","\xb2"));
	outFields->push(HX_HCSTRING("_facingFlip","\x06","\xe0","\x9c","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxSprite_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::animation::FlxAnimationController*/ ,(int)offsetof(FlxSprite_obj,animation),HX_HCSTRING("animation","\x04","\xef","\x34","\x4b")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxSprite_obj,framePixels),HX_HCSTRING("framePixels","\x3a","\xbb","\xf1","\x6a")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,useFramePixels),HX_HCSTRING("useFramePixels","\x33","\x0e","\x5a","\x8e")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,antialiasing),HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxSprite_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,frameWidth),HX_HCSTRING("frameWidth","\x99","\xea","\x88","\xad")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,frameHeight),HX_HCSTRING("frameHeight","\xf4","\xd3","\x93","\xe0")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,numFrames),HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFramesCollection*/ ,(int)offsetof(FlxSprite_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsObject /*::flixel::graphics::FlxGraphic*/ ,(int)offsetof(FlxSprite_obj,graphic),HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74")},
	{hx::fsFloat,(int)offsetof(FlxSprite_obj,bakedRotationAngle),HX_HCSTRING("bakedRotationAngle","\x8a","\xd1","\x9c","\x9b")},
	{hx::fsFloat,(int)offsetof(FlxSprite_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,facing),HX_HCSTRING("facing","\x1a","\x3f","\x05","\xe4")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,flipX),HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,flipY),HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxSprite_obj,origin),HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxSprite_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxSprite_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsObject /*::openfl::_legacy::display::BlendMode*/ ,(int)offsetof(FlxSprite_obj,blend),HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsObject /*::openfl::_legacy::geom::ColorTransform*/ ,(int)offsetof(FlxSprite_obj,colorTransform),HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,useColorTransform),HX_HCSTRING("useColorTransform","\x30","\xe6","\xec","\x72")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxSprite_obj,clipRect),HX_HCSTRING("clipRect","\x14","\x90","\x6a","\x58")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxSprite_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxSprite_obj,_frame),HX_HCSTRING("_frame","\x6e","\xbf","\x6a","\x02")},
	{hx::fsObject /*::flixel::graphics::FlxGraphic*/ ,(int)offsetof(FlxSprite_obj,_frameGraphic),HX_HCSTRING("_frameGraphic","\xda","\xac","\x00","\xf7")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,_facingHorizontalMult),HX_HCSTRING("_facingHorizontalMult","\x8d","\x29","\xa1","\x51")},
	{hx::fsInt,(int)offsetof(FlxSprite_obj,_facingVerticalMult),HX_HCSTRING("_facingVerticalMult","\xdf","\x11","\x0c","\x86")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxSprite_obj,_flashPoint),HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxSprite_obj,_flashRect),HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxSprite_obj,_flashRect2),HX_HCSTRING("_flashRect2","\xdd","\x9b","\x56","\xd7")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxSprite_obj,_flashPointZero),HX_HCSTRING("_flashPointZero","\x67","\x14","\x7d","\xfb")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxSprite_obj,_matrix),HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxSprite_obj,_halfSize),HX_HCSTRING("_halfSize","\x73","\x43","\x4d","\x66")},
	{hx::fsFloat,(int)offsetof(FlxSprite_obj,_sinAngle),HX_HCSTRING("_sinAngle","\xfa","\x54","\xde","\xb8")},
	{hx::fsFloat,(int)offsetof(FlxSprite_obj,_cosAngle),HX_HCSTRING("_cosAngle","\x6b","\xc9","\x00","\x1f")},
	{hx::fsBool,(int)offsetof(FlxSprite_obj,_angleChanged),HX_HCSTRING("_angleChanged","\x40","\x98","\x5c","\xb2")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(FlxSprite_obj,_facingFlip),HX_HCSTRING("_facingFlip","\x06","\xe0","\x9c","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxSprite_obj_sMemberFields[] = {
	HX_HCSTRING("animation","\x04","\xef","\x34","\x4b"),
	HX_HCSTRING("framePixels","\x3a","\xbb","\xf1","\x6a"),
	HX_HCSTRING("useFramePixels","\x33","\x0e","\x5a","\x8e"),
	HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("frameWidth","\x99","\xea","\x88","\xad"),
	HX_HCSTRING("frameHeight","\xf4","\xd3","\x93","\xe0"),
	HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74"),
	HX_HCSTRING("bakedRotationAngle","\x8a","\xd1","\x9c","\x9b"),
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("facing","\x1a","\x3f","\x05","\xe4"),
	HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"),
	HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"),
	HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("useColorTransform","\x30","\xe6","\xec","\x72"),
	HX_HCSTRING("clipRect","\x14","\x90","\x6a","\x58"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("_frame","\x6e","\xbf","\x6a","\x02"),
	HX_HCSTRING("_frameGraphic","\xda","\xac","\x00","\xf7"),
	HX_HCSTRING("_facingHorizontalMult","\x8d","\x29","\xa1","\x51"),
	HX_HCSTRING("_facingVerticalMult","\xdf","\x11","\x0c","\x86"),
	HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"),
	HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"),
	HX_HCSTRING("_flashRect2","\xdd","\x9b","\x56","\xd7"),
	HX_HCSTRING("_flashPointZero","\x67","\x14","\x7d","\xfb"),
	HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"),
	HX_HCSTRING("_halfSize","\x73","\x43","\x4d","\x66"),
	HX_HCSTRING("_sinAngle","\xfa","\x54","\xde","\xb8"),
	HX_HCSTRING("_cosAngle","\x6b","\xc9","\x00","\x1f"),
	HX_HCSTRING("_angleChanged","\x40","\x98","\x5c","\xb2"),
	HX_HCSTRING("_facingFlip","\x06","\xe0","\x9c","\x02"),
	HX_HCSTRING("initVars","\xdc","\x5a","\x00","\x53"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("loadGraphicFromSprite","\xd1","\x7c","\x73","\x38"),
	HX_HCSTRING("loadGraphic","\x22","\x19","\xa5","\x44"),
	HX_HCSTRING("loadRotatedGraphic","\xc5","\x14","\x74","\x62"),
	HX_HCSTRING("loadRotatedFrame","\x0a","\x81","\x76","\x8b"),
	HX_HCSTRING("makeGraphic","\x5a","\x82","\x11","\xb8"),
	HX_HCSTRING("graphicLoaded","\xcd","\x84","\x20","\x16"),
	HX_HCSTRING("resetSize","\x30","\xaa","\x3f","\x92"),
	HX_HCSTRING("resetFrameSize","\xbf","\xc3","\x44","\x94"),
	HX_HCSTRING("resetSizeFromFrame","\x13","\xd2","\x50","\x8c"),
	HX_HCSTRING("resetFrame","\xde","\xaf","\x1f","\xef"),
	HX_HCSTRING("setGraphicSize","\x07","\xd7","\xf8","\x2d"),
	HX_HCSTRING("updateHitbox","\x81","\x94","\xeb","\x56"),
	HX_HCSTRING("resetHelpers","\x36","\x89","\x3d","\x32"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateAnimation","\xbb","\xbf","\xbf","\x9a"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawSimple","\x56","\x7f","\x42","\xfa"),
	HX_HCSTRING("drawComplex","\x8c","\xaa","\xb9","\xcc"),
	HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84"),
	HX_HCSTRING("drawFrame","\x89","\xad","\x8e","\xce"),
	HX_HCSTRING("centerOffsets","\x2b","\xa0","\xb2","\xc1"),
	HX_HCSTRING("centerOrigin","\x9b","\x41","\x36","\x0f"),
	HX_HCSTRING("replaceColor","\x8f","\x5c","\xeb","\x3d"),
	HX_HCSTRING("setColorTransform","\xcb","\x5e","\x21","\x43"),
	HX_HCSTRING("updateColorTransform","\x72","\x0f","\xd2","\x2f"),
	HX_HCSTRING("pixelsOverlapPoint","\x16","\x82","\x44","\xe0"),
	HX_HCSTRING("calcFrame","\x58","\x93","\x8c","\xf9"),
	HX_HCSTRING("updateFramePixels","\xb1","\x67","\x5b","\xcf"),
	HX_HCSTRING("getGraphicMidpoint","\x9a","\xb4","\xdd","\x57"),
	HX_HCSTRING("isOnScreen","\xf5","\x43","\xb9","\xa1"),
	HX_HCSTRING("isSimpleRender","\x32","\xf4","\x2a","\x47"),
	HX_HCSTRING("isSimpleRenderBlit","\x87","\x59","\xb0","\xdf"),
	HX_HCSTRING("setFacingFlip","\x29","\x51","\x8b","\xd1"),
	HX_HCSTRING("setFrames","\xe8","\x24","\x2d","\x0c"),
	HX_HCSTRING("get_pixels","\xf6","\x5e","\x31","\x7d"),
	HX_HCSTRING("set_pixels","\x6a","\xfd","\xae","\x80"),
	HX_HCSTRING("set_frame","\x90","\xc0","\x7d","\x2d"),
	HX_HCSTRING("set_facing","\x57","\x4d","\x0a","\xd8"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	HX_HCSTRING("updateTrig","\x85","\x87","\xb8","\x05"),
	HX_HCSTRING("set_blend","\xb4","\x30","\xef","\xdb"),
	HX_HCSTRING("set_graphic","\xcb","\xc1","\x6e","\x04"),
	HX_HCSTRING("set_clipRect","\x91","\x67","\x7d","\x22"),
	HX_HCSTRING("set_frames","\xe3","\xbd","\x8a","\xa0"),
	HX_HCSTRING("set_flipX","\x6e","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_flipY","\x6f","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_antialiasing","\xf1","\xf0","\x93","\xa3"),
	HX_HCSTRING("set_useFramePixels","\x70","\x21","\xa3","\x06"),
	HX_HCSTRING("checkFlipX","\x23","\x47","\x82","\x12"),
	HX_HCSTRING("checkFlipY","\x24","\x47","\x82","\x12"),
	::String(null()) };

static void FlxSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxSprite_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxSprite_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxSprite_obj::__mClass;

void FlxSprite_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxSprite","\x65","\xad","\xeb","\xe3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxSprite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxSprite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSprite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
