// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxFocusLostScreen
#include <flixel/system/ui/FlxFocusLostScreen.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Graphics
#include <openfl/_legacy/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

namespace flixel{
namespace _hx_system{
namespace ui{

void FlxFocusLostScreen_obj::__construct(){
            	HX_STACK_FRAME("flixel.system.ui.FlxFocusLostScreen","new",0xbe260b15,"flixel.system.ui.FlxFocusLostScreen.new","flixel/system/ui/FlxFocusLostScreen.hx",12,0x1e64ca7a)
            	HX_STACK_THIS(this)
HXLINE(  13)		super::__construct();
HXLINE(  14)		this->draw();
HXLINE(  16)		HX_VARI(  ::openfl::_legacy::display::Sprite,logo) =  ::openfl::_legacy::display::Sprite_obj::__new();
HXLINE(  17)		 ::openfl::_legacy::display::Graphics _hx_tmp = logo->get_graphics();
HXDLIN(  17)		::flixel::_hx_system::FlxAssets_obj::drawLogo(_hx_tmp);
HXLINE(  18)		Float _hx_tmp1 = logo->set_scaleY(((Float)0.2));
HXDLIN(  18)		logo->set_scaleX(_hx_tmp1);
HXLINE(  19)		Float _hx_tmp2 = logo->set_y((int)5);
HXDLIN(  19)		logo->set_x(_hx_tmp2);
HXLINE(  20)		logo->set_alpha(((Float)0.35));
HXLINE(  21)		this->addChild(logo);
HXLINE(  23)		this->set_visible(false);
            	}

Dynamic FlxFocusLostScreen_obj::__CreateEmpty() { return new FlxFocusLostScreen_obj; }

hx::ObjectPtr< FlxFocusLostScreen_obj > FlxFocusLostScreen_obj::__new()
{
	hx::ObjectPtr< FlxFocusLostScreen_obj > _hx_result = new FlxFocusLostScreen_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxFocusLostScreen_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxFocusLostScreen_obj > _hx_result = new FlxFocusLostScreen_obj();
	_hx_result->__construct();
	return _hx_result;
}

void FlxFocusLostScreen_obj::draw(){
            	HX_STACK_FRAME("flixel.system.ui.FlxFocusLostScreen","draw",0x9c914faf,"flixel.system.ui.FlxFocusLostScreen.draw","flixel/system/ui/FlxFocusLostScreen.hx",30,0x1e64ca7a)
            	HX_STACK_THIS(this)
HXLINE(  31)		HX_VARI(  ::openfl::_legacy::display::Graphics,gfx) = this->get_graphics();
HXLINE(  33)		Int _hx_tmp = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXDLIN(  33)		HX_VARI( Int,screenWidth) = ::Std_obj::_hx_int(_hx_tmp);
HXLINE(  34)		Int _hx_tmp1 = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageHeight();
HXDLIN(  34)		HX_VARI( Int,screenHeight) = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE(  37)		gfx->clear();
HXLINE(  38)		gfx->moveTo((int)0,(int)0);
HXLINE(  39)		gfx->beginFill((int)0,((Float)0.5));
HXLINE(  40)		gfx->drawRect((int)0,(int)0,screenWidth,screenHeight);
HXLINE(  41)		gfx->endFill();
HXLINE(  44)		HX_VARI( Int,halfWidth) = ::Std_obj::_hx_int(((Float)screenWidth / (Float)(int)2));
HXLINE(  45)		HX_VARI( Int,halfHeight) = ::Std_obj::_hx_int(((Float)screenHeight / (Float)(int)2));
HXLINE(  46)		Float _hx_tmp2 = ::Math_obj::min(halfWidth,halfHeight);
HXDLIN(  46)		HX_VARI( Int,helper) = ::Std_obj::_hx_int(((Float)_hx_tmp2 / (Float)(int)3));
HXLINE(  47)		gfx->moveTo((halfWidth - helper),(halfHeight - helper));
HXLINE(  48)		gfx->beginFill((int)16777215,((Float)0.65));
HXLINE(  49)		gfx->lineTo((halfWidth + helper),halfHeight);
HXLINE(  50)		gfx->lineTo((halfWidth - helper),(halfHeight + helper));
HXLINE(  51)		gfx->lineTo((halfWidth - helper),(halfHeight - helper));
HXLINE(  52)		gfx->endFill();
HXLINE(  54)		this->set_x(-(::flixel::FlxG_obj::scaleMode->offset->x));
HXLINE(  55)		this->set_y(-(::flixel::FlxG_obj::scaleMode->offset->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFocusLostScreen_obj,draw,(void))


FlxFocusLostScreen_obj::FlxFocusLostScreen_obj()
{
}

hx::Val FlxFocusLostScreen_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxFocusLostScreen_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FlxFocusLostScreen_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxFocusLostScreen_obj_sMemberFields[] = {
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	::String(null()) };

static void FlxFocusLostScreen_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxFocusLostScreen_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxFocusLostScreen_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxFocusLostScreen_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxFocusLostScreen_obj::__mClass;

void FlxFocusLostScreen_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.ui.FlxFocusLostScreen","\xa3","\xdc","\xfb","\x83");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxFocusLostScreen_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxFocusLostScreen_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxFocusLostScreen_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxFocusLostScreen_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxFocusLostScreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxFocusLostScreen_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace ui
