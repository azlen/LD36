// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSoundTray
#include <flixel/system/ui/FlxSoundTray.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Bitmap
#include <openfl/_legacy/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_PixelSnapping
#include <openfl/_legacy/display/PixelSnapping.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_Sound
#include <openfl/_legacy/media/Sound.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

namespace flixel{
namespace _hx_system{
namespace ui{

void FlxSoundTray_obj::__construct(){
            	HX_STACK_FRAME("flixel.system.ui.FlxSoundTray","new",0x221b6352,"flixel.system.ui.FlxSoundTray.new","flixel/system/ui/FlxSoundTray.hx",20,0x04618f9d)
            	HX_STACK_THIS(this)
HXLINE(  40)		this->_defaultScale = ((Float)2.0);
HXLINE(  38)		this->_width = (int)80;
HXLINE(  48)		super::__construct();
HXLINE(  50)		this->set_visible(false);
HXLINE(  51)		this->set_scaleX(this->_defaultScale);
HXLINE(  52)		this->set_scaleY(this->_defaultScale);
HXLINE(  53)		HX_VARI(  ::openfl::_legacy::display::Bitmap,tmp) =  ::openfl::_legacy::display::Bitmap_obj::__new( ::openfl::_legacy::display::BitmapData_obj::__new(this->_width,(int)30,true,(int)2130706432,null()),null(),null());
HXLINE(  54)		this->screenCenter();
HXLINE(  55)		this->addChild(tmp);
HXLINE(  57)		HX_VARI(  ::openfl::_legacy::text::TextField,text) =  ::openfl::_legacy::text::TextField_obj::__new();
HXLINE(  58)		Float _hx_tmp = tmp->get_width();
HXDLIN(  58)		text->set_width(_hx_tmp);
HXLINE(  59)		Float _hx_tmp1 = tmp->get_height();
HXDLIN(  59)		text->set_height(_hx_tmp1);
HXLINE(  60)		text->set_multiline(true);
HXLINE(  61)		text->set_wordWrap(true);
HXLINE(  62)		text->set_selectable(false);
HXLINE(  71)		HX_VARI(  ::openfl::_legacy::text::TextFormat,dtf) =  ::openfl::_legacy::text::TextFormat_obj::__new(::flixel::_hx_system::FlxAssets_obj::FONT_DEFAULT,(int)10,(int)16777215,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  72)		dtf->align = HX_("center",d5,25,db,05);
HXLINE(  73)		text->set_defaultTextFormat(dtf);
HXLINE(  74)		this->addChild(text);
HXLINE(  75)		text->set_text(HX_("VOLUME",da,d5,d5,11));
HXLINE(  76)		text->set_y((int)16);
HXLINE(  78)		HX_VARI( Int,bx) = (int)10;
HXLINE(  79)		HX_VARI( Int,by) = (int)14;
HXLINE(  80)		this->_bars = ::Array_obj< ::Dynamic>::__new();
HXLINE(  82)		{
HXLINE(  82)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  82)			while((_g < (int)10)){
HXLINE(  82)				HX_VARI( Int,i) = _g++;
HXLINE(  84)				tmp =  ::openfl::_legacy::display::Bitmap_obj::__new( ::openfl::_legacy::display::BitmapData_obj::__new((int)4,(i + (int)1),false,(int)-1,null()),null(),null());
HXLINE(  85)				tmp->set_x(bx);
HXLINE(  86)				tmp->set_y(by);
HXLINE(  87)				this->addChild(tmp);
HXLINE(  88)				this->_bars->push(tmp);
HXLINE(  89)				hx::AddEq(bx,(int)6);
HXLINE(  90)				--by;
            			}
            		}
HXLINE(  93)		this->set_y(-(this->get_height()));
HXLINE(  94)		this->set_visible(false);
            	}

Dynamic FlxSoundTray_obj::__CreateEmpty() { return new FlxSoundTray_obj; }

hx::ObjectPtr< FlxSoundTray_obj > FlxSoundTray_obj::__new()
{
	hx::ObjectPtr< FlxSoundTray_obj > _hx_result = new FlxSoundTray_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxSoundTray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxSoundTray_obj > _hx_result = new FlxSoundTray_obj();
	_hx_result->__construct();
	return _hx_result;
}

void FlxSoundTray_obj::update(Float MS){
            	HX_STACK_FRAME("flixel.system.ui.FlxSoundTray","update",0x9cbad657,"flixel.system.ui.FlxSoundTray.update","flixel/system/ui/FlxSoundTray.hx",103,0x04618f9d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MS,"MS")
HXLINE( 103)		Bool _hx_tmp = (this->_timer > (int)0);
HXDLIN( 103)		if (_hx_tmp) {
HXLINE( 105)			hx::SubEq(this->_timer,((Float)MS / (Float)(int)1000));
            		}
            		else {
HXLINE( 107)			Float _hx_tmp1 = this->get_y();
HXDLIN( 107)			Bool _hx_tmp2 = (_hx_tmp1 > -(this->get_height()));
HXDLIN( 107)			if (_hx_tmp2) {
HXLINE( 109)				{
HXLINE( 109)					HX_VARI(  ::flixel::_hx_system::ui::FlxSoundTray,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 109)					Float _hx_tmp3 = _g->get_y();
HXDLIN( 109)					Float _hx_tmp4 = (_hx_tmp3 - ((((Float)MS / (Float)(int)1000) * ::flixel::FlxG_obj::height) * (int)2));
HXDLIN( 109)					_g->set_y(_hx_tmp4);
            				}
HXLINE( 111)				Float _hx_tmp5 = this->get_y();
HXDLIN( 111)				Bool _hx_tmp6 = (_hx_tmp5 <= -(this->get_height()));
HXDLIN( 111)				if (_hx_tmp6) {
HXLINE( 113)					this->set_visible(false);
HXLINE( 114)					this->active = false;
HXLINE( 117)					::flixel::FlxG_obj::save->data->__SetField(HX_("mute",d9,6e,65,48),::flixel::FlxG_obj::sound->muted,hx::paccDynamic);
HXLINE( 118)					::flixel::FlxG_obj::save->data->__SetField(HX_("volume",da,29,53,5f),::flixel::FlxG_obj::sound->volume,hx::paccDynamic);
HXLINE( 119)					::flixel::FlxG_obj::save->flush(null(),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSoundTray_obj,update,(void))

void FlxSoundTray_obj::show(hx::Null< Bool >  __o_Silent){
Bool Silent = __o_Silent.Default(false);
            	HX_STACK_FRAME("flixel.system.ui.FlxSoundTray","show",0xb92bd5cb,"flixel.system.ui.FlxSoundTray.show","flixel/system/ui/FlxSoundTray.hx",130,0x04618f9d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Silent,"Silent")
HXLINE( 131)		if (!(Silent)) {
HXLINE( 133)			HX_VARI(  ::openfl::_legacy::media::Sound,sound) = ::openfl::_legacy::Assets_obj::getSound((HX_("flixel/sounds/beep",e6,b5,a9,33) + HX_(".ogg",e1,64,bc,1e)),null());
HXLINE( 134)			Bool _hx_tmp = hx::IsNotNull( sound );
HXDLIN( 134)			if (_hx_tmp) {
HXLINE( 135)				::flixel::FlxG_obj::sound->load(sound,null(),null(),null(),null(),null(),null(),null())->play(null(),null());
            			}
            		}
HXLINE( 138)		this->_timer = (int)1;
HXLINE( 139)		this->set_y((int)0);
HXLINE( 140)		this->set_visible(true);
HXLINE( 141)		this->active = true;
HXLINE( 142)		Float _hx_tmp1 = (::flixel::FlxG_obj::sound->volume * (int)10);
HXDLIN( 142)		HX_VARI( Int,globalVolume) = ::Math_obj::round(_hx_tmp1);
HXLINE( 144)		if (::flixel::FlxG_obj::sound->muted) {
HXLINE( 146)			globalVolume = (int)0;
            		}
HXLINE( 149)		{
HXLINE( 149)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 149)			HX_VARI( Int,_g) = this->_bars->length;
HXDLIN( 149)			while((_g1 < _g)){
HXLINE( 149)				HX_VARI( Int,i) = _g1++;
HXLINE( 151)				if ((i < globalVolume)) {
HXLINE( 153)					this->_bars->__get(i).StaticCast<  ::openfl::_legacy::display::Bitmap >()->set_alpha((int)1);
            				}
            				else {
HXLINE( 157)					this->_bars->__get(i).StaticCast<  ::openfl::_legacy::display::Bitmap >()->set_alpha(((Float)0.5));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSoundTray_obj,show,(void))

void FlxSoundTray_obj::screenCenter(){
            	HX_STACK_FRAME("flixel.system.ui.FlxSoundTray","screenCenter",0x0f14ad2f,"flixel.system.ui.FlxSoundTray.screenCenter","flixel/system/ui/FlxSoundTray.hx",163,0x04618f9d)
            	HX_STACK_THIS(this)
HXLINE( 164)		this->set_scaleX(this->_defaultScale);
HXLINE( 165)		this->set_scaleY(this->_defaultScale);
HXLINE( 167)		Int _hx_tmp = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXDLIN( 167)		Float _hx_tmp1 = (((Float)0.5) * (_hx_tmp - (this->_width * this->_defaultScale)));
HXDLIN( 167)		Float _hx_tmp2 = ::flixel::FlxG_obj::game->get_x();
HXDLIN( 167)		this->set_x((_hx_tmp1 - _hx_tmp2));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSoundTray_obj,screenCenter,(void))


FlxSoundTray_obj::FlxSoundTray_obj()
{
}

void FlxSoundTray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxSoundTray);
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	HX_MARK_MEMBER_NAME(_bars,"_bars");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_defaultScale,"_defaultScale");
	 ::openfl::_legacy::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxSoundTray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	HX_VISIT_MEMBER_NAME(_bars,"_bars");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_defaultScale,"_defaultScale");
	 ::openfl::_legacy::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxSoundTray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_bars") ) { return hx::Val( _bars); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active); }
		if (HX_FIELD_EQ(inName,"_timer") ) { return hx::Val( _timer); }
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenCenter") ) { return hx::Val( screenCenter_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_defaultScale") ) { return hx::Val( _defaultScale); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxSoundTray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_bars") ) { _bars=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_defaultScale") ) { _defaultScale=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxSoundTray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"));
	outFields->push(HX_HCSTRING("_bars","\x1f","\x03","\x22","\xf4"));
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_defaultScale","\xe8","\x9c","\x98","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxSoundTray_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxSoundTray_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsFloat,(int)offsetof(FlxSoundTray_obj,_timer),HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxSoundTray_obj,_bars),HX_HCSTRING("_bars","\x1f","\x03","\x22","\xf4")},
	{hx::fsInt,(int)offsetof(FlxSoundTray_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsFloat,(int)offsetof(FlxSoundTray_obj,_defaultScale),HX_HCSTRING("_defaultScale","\xe8","\x9c","\x98","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxSoundTray_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxSoundTray_obj_sMemberFields[] = {
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"),
	HX_HCSTRING("_bars","\x1f","\x03","\x22","\xf4"),
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_defaultScale","\xe8","\x9c","\x98","\x10"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("screenCenter","\x61","\x2e","\xf9","\xe2"),
	::String(null()) };

static void FlxSoundTray_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxSoundTray_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxSoundTray_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxSoundTray_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxSoundTray_obj::__mClass;

void FlxSoundTray_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.ui.FlxSoundTray","\x60","\x12","\xf7","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxSoundTray_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxSoundTray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxSoundTray_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxSoundTray_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSoundTray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSoundTray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace ui
