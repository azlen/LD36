// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_replay_CodeValuePair
#include <flixel/system/replay/CodeValuePair.h>
#endif
#ifndef INCLUDED_flixel_system_replay_FlxReplay
#include <flixel/system/replay/FlxReplay.h>
#endif
#ifndef INCLUDED_flixel_system_replay_FrameRecord
#include <flixel/system/replay/FrameRecord.h>
#endif
#ifndef INCLUDED_flixel_system_replay_MouseRecord
#include <flixel/system/replay/MouseRecord.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

namespace flixel{
namespace _hx_system{
namespace replay{

void FlxReplay_obj::__construct(){
            	HX_STACK_FRAME("flixel.system.replay.FlxReplay","new",0x4c74c9d1,"flixel.system.replay.FlxReplay.new","flixel/system/replay/FlxReplay.hx",49,0xb378fa20)
            	HX_STACK_THIS(this)
HXLINE(  50)		this->seed = (int)0;
HXLINE(  51)		this->frame = (int)0;
HXLINE(  52)		this->frameCount = (int)0;
HXLINE(  53)		this->finished = false;
HXLINE(  54)		this->_frames = null();
HXLINE(  55)		this->_capacity = (int)0;
HXLINE(  56)		this->_marker = (int)0;
            	}

Dynamic FlxReplay_obj::__CreateEmpty() { return new FlxReplay_obj; }

hx::ObjectPtr< FlxReplay_obj > FlxReplay_obj::__new()
{
	hx::ObjectPtr< FlxReplay_obj > _hx_result = new FlxReplay_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxReplay_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxReplay_obj > _hx_result = new FlxReplay_obj();
	_hx_result->__construct();
	return _hx_result;
}

void FlxReplay_obj::destroy(){
            	HX_STACK_FRAME("flixel.system.replay.FlxReplay","destroy",0xd75f32eb,"flixel.system.replay.FlxReplay.destroy","flixel/system/replay/FlxReplay.hx",63,0xb378fa20)
            	HX_STACK_THIS(this)
HXLINE(  64)		Bool _hx_tmp = hx::IsNull( this->_frames );
HXDLIN(  64)		if (_hx_tmp) {
HXLINE(  66)			return;
            		}
HXLINE(  68)		HX_VARI( Int,i) = (this->frameCount - (int)1);
HXLINE(  69)		while((i >= (int)0)){
HXLINE(  71)			Int _hx_tmp1 = i--;
HXDLIN(  71)			this->_frames->__get(_hx_tmp1).StaticCast<  ::flixel::_hx_system::replay::FrameRecord >()->destroy();
            		}
HXLINE(  73)		this->_frames = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,destroy,(void))

void FlxReplay_obj::create(Int Seed){
            	HX_STACK_FRAME("flixel.system.replay.FlxReplay","create",0x64c12a2b,"flixel.system.replay.FlxReplay.create","flixel/system/replay/FlxReplay.hx",82,0xb378fa20)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Seed,"Seed")
HXLINE(  83)		this->destroy();
HXLINE(  84)		this->init();
HXLINE(  85)		this->seed = Seed;
HXLINE(  86)		this->rewind();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxReplay_obj,create,(void))

void FlxReplay_obj::load(::String FileContents){
            	HX_STACK_FRAME("flixel.system.replay.FlxReplay","load",0x9870e395,"flixel.system.replay.FlxReplay.load","flixel/system/replay/FlxReplay.hx",96,0xb378fa20)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(FileContents,"FileContents")
HXLINE(  97)		this->init();
HXLINE(  99)		HX_VARI( ::Array< ::String >,lines) = FileContents.split(HX_("\n",0a,00,00,00));
HXLINE( 101)		::String _hx_tmp = lines->__get((int)0);
HXDLIN( 101)		this->seed = ::Std_obj::parseInt(_hx_tmp);
HXLINE( 103)		HX_VAR( ::String,line);
HXLINE( 104)		HX_VARI( Int,i) = (int)1;
HXLINE( 105)		HX_VARI( Int,l) = lines->length;
HXLINE( 106)		while((i < l)){
HXLINE( 108)			Int _hx_tmp1 = i++;
HXDLIN( 108)			line = lines->__get(_hx_tmp1);
HXLINE( 109)			Bool _hx_tmp2 = (line.length > (int)3);
HXDLIN( 109)			if (_hx_tmp2) {
HXLINE( 111)				Int _hx_tmp3 = this->frameCount++;
HXDLIN( 111)				 ::flixel::_hx_system::replay::FrameRecord _hx_tmp4 =  ::flixel::_hx_system::replay::FrameRecord_obj::__new()->load(line);
HXDLIN( 111)				this->_frames[_hx_tmp3] = _hx_tmp4;
HXLINE( 112)				Bool _hx_tmp5 = (this->frameCount >= this->_capacity);
HXDLIN( 112)				if (_hx_tmp5) {
HXLINE( 114)					hx::MultEq(this->_capacity,(int)2);
HXLINE( 115)					::flixel::util::FlxArrayUtil_obj::setLength_flixel_system_replay_FrameRecord(this->_frames,this->_capacity);
            				}
            			}
            		}
HXLINE( 120)		this->rewind();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxReplay_obj,load,(void))

::String FlxReplay_obj::save(){
            	HX_STACK_FRAME("flixel.system.replay.FlxReplay","save",0x9d06d4ac,"flixel.system.replay.FlxReplay.save","flixel/system/replay/FlxReplay.hx",129,0xb378fa20)
            	HX_STACK_THIS(this)
HXLINE( 130)		if ((this->frameCount <= (int)0)) {
HXLINE( 132)			return null();
            		}
HXLINE( 134)		HX_VARI( ::String,output) = (this->seed + HX_("\n",0a,00,00,00));
HXLINE( 135)		HX_VARI( Int,i) = (int)0;
HXLINE( 136)		while((i < this->frameCount)){
HXLINE( 138)			Int _hx_tmp = i++;
HXDLIN( 138)			::String _hx_tmp1 = this->_frames->__get(_hx_tmp).StaticCast<  ::flixel::_hx_system::replay::FrameRecord >()->save();
HXDLIN( 138)			hx::AddEq(output,(_hx_tmp1 + HX_("\n",0a,00,00,00)));
            		}
HXLINE( 140)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,save,return )

void FlxReplay_obj::recordFrame(){
            	HX_STACK_FRAME("flixel.system.replay.FlxReplay","recordFrame",0x1269564d,"flixel.system.replay.FlxReplay.recordFrame","flixel/system/replay/FlxReplay.hx",147,0xb378fa20)
            	HX_STACK_THIS(this)
HXLINE( 148)		HX_VARI( Bool,continueFrame) = true;
HXLINE( 151)		HX_VARI( ::Array< ::Dynamic>,keysRecord) = ::flixel::FlxG_obj::keys->record();
HXLINE( 152)		Bool _hx_tmp = hx::IsNotNull( keysRecord );
HXDLIN( 152)		if (_hx_tmp) {
HXLINE( 152)			continueFrame = false;
            		}
HXLINE( 156)		HX_VARI(  ::flixel::_hx_system::replay::MouseRecord,mouseRecord) = ::flixel::FlxG_obj::mouse->record();
HXLINE( 157)		Bool _hx_tmp1 = hx::IsNotNull( mouseRecord );
HXDLIN( 157)		if (_hx_tmp1) {
HXLINE( 157)			continueFrame = false;
            		}
HXLINE( 160)		if (continueFrame) {
HXLINE( 162)			this->frame++;
HXLINE( 163)			return;
            		}
HXLINE( 166)		HX_VARI(  ::flixel::_hx_system::replay::FrameRecord,frameRecorded) =  ::flixel::_hx_system::replay::FrameRecord_obj::__new()->create(this->frame++,null(),null());
HXLINE( 168)		frameRecorded->mouse = mouseRecord;
HXLINE( 171)		frameRecorded->keys = keysRecord;
HXLINE( 174)		this->_frames[this->frameCount++] = frameRecorded;
HXLINE( 176)		Bool _hx_tmp2 = (this->frameCount >= this->_capacity);
HXDLIN( 176)		if (_hx_tmp2) {
HXLINE( 178)			hx::MultEq(this->_capacity,(int)2);
HXLINE( 179)			::flixel::util::FlxArrayUtil_obj::setLength_flixel_system_replay_FrameRecord(this->_frames,this->_capacity);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,recordFrame,(void))

void FlxReplay_obj::playNextFrame(){
            	HX_STACK_FRAME("flixel.system.replay.FlxReplay","playNextFrame",0x34ad7657,"flixel.system.replay.FlxReplay.playNextFrame","flixel/system/replay/FlxReplay.hx",187,0xb378fa20)
            	HX_STACK_THIS(this)
HXLINE( 188)		::flixel::FlxG_obj::inputs->reset();
HXLINE( 190)		Bool _hx_tmp = (this->_marker >= this->frameCount);
HXDLIN( 190)		if (_hx_tmp) {
HXLINE( 192)			this->finished = true;
HXLINE( 193)			return;
            		}
HXLINE( 195)		Int _hx_tmp1 = this->_frames->__get(this->_marker).StaticCast<  ::flixel::_hx_system::replay::FrameRecord >()->frame;
HXDLIN( 195)		Bool _hx_tmp2 = (_hx_tmp1 != this->frame++);
HXDLIN( 195)		if (_hx_tmp2) {
HXLINE( 197)			return;
            		}
HXLINE( 200)		HX_VARI(  ::flixel::_hx_system::replay::FrameRecord,fr) = this->_frames->__get(this->_marker++).StaticCast<  ::flixel::_hx_system::replay::FrameRecord >();
HXLINE( 203)		Bool _hx_tmp3 = hx::IsNotNull( fr->keys );
HXDLIN( 203)		if (_hx_tmp3) {
HXLINE( 205)			::flixel::FlxG_obj::keys->playback(fr->keys);
            		}
HXLINE( 210)		Bool _hx_tmp4 = hx::IsNotNull( fr->mouse );
HXDLIN( 210)		if (_hx_tmp4) {
HXLINE( 212)			::flixel::FlxG_obj::mouse->playback(fr->mouse);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,playNextFrame,(void))

void FlxReplay_obj::rewind(){
            	HX_STACK_FRAME("flixel.system.replay.FlxReplay","rewind",0xf3d1ed2a,"flixel.system.replay.FlxReplay.rewind","flixel/system/replay/FlxReplay.hx",221,0xb378fa20)
            	HX_STACK_THIS(this)
HXLINE( 222)		this->_marker = (int)0;
HXLINE( 223)		this->frame = (int)0;
HXLINE( 224)		this->finished = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,rewind,(void))

void FlxReplay_obj::init(){
            	HX_STACK_FRAME("flixel.system.replay.FlxReplay","init",0x9674847f,"flixel.system.replay.FlxReplay.init","flixel/system/replay/FlxReplay.hx",231,0xb378fa20)
            	HX_STACK_THIS(this)
HXLINE( 232)		this->_capacity = (int)100;
HXLINE( 233)		this->_frames = ::Array_obj< ::Dynamic>::__new();
HXLINE( 234)		::flixel::util::FlxArrayUtil_obj::setLength_flixel_system_replay_FrameRecord(this->_frames,this->_capacity);
HXLINE( 235)		this->frameCount = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,init,(void))


FlxReplay_obj::FlxReplay_obj()
{
}

void FlxReplay_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxReplay);
	HX_MARK_MEMBER_NAME(seed,"seed");
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(frameCount,"frameCount");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_MEMBER_NAME(_frames,"_frames");
	HX_MARK_MEMBER_NAME(_capacity,"_capacity");
	HX_MARK_MEMBER_NAME(_marker,"_marker");
	HX_MARK_END_CLASS();
}

void FlxReplay_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(seed,"seed");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(frameCount,"frameCount");
	HX_VISIT_MEMBER_NAME(finished,"finished");
	HX_VISIT_MEMBER_NAME(_frames,"_frames");
	HX_VISIT_MEMBER_NAME(_capacity,"_capacity");
	HX_VISIT_MEMBER_NAME(_marker,"_marker");
}

hx::Val FlxReplay_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { return hx::Val( seed); }
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn()); }
		if (HX_FIELD_EQ(inName,"save") ) { return hx::Val( save_dyn()); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"rewind") ) { return hx::Val( rewind_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_frames") ) { return hx::Val( _frames); }
		if (HX_FIELD_EQ(inName,"_marker") ) { return hx::Val( _marker); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( finished); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_capacity") ) { return hx::Val( _capacity); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameCount") ) { return hx::Val( frameCount); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"recordFrame") ) { return hx::Val( recordFrame_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playNextFrame") ) { return hx::Val( playNextFrame_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxReplay_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { seed=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_frames") ) { _frames=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_marker") ) { _marker=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_capacity") ) { _capacity=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameCount") ) { frameCount=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxReplay_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("frameCount","\x62","\x79","\x89","\x2d"));
	outFields->push(HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"));
	outFields->push(HX_HCSTRING("_frames","\x45","\xc1","\xfc","\x1a"));
	outFields->push(HX_HCSTRING("_capacity","\x99","\xf8","\x50","\x0b"));
	outFields->push(HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxReplay_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxReplay_obj,seed),HX_HCSTRING("seed","\x71","\x85","\x50","\x4c")},
	{hx::fsInt,(int)offsetof(FlxReplay_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsInt,(int)offsetof(FlxReplay_obj,frameCount),HX_HCSTRING("frameCount","\x62","\x79","\x89","\x2d")},
	{hx::fsBool,(int)offsetof(FlxReplay_obj,finished),HX_HCSTRING("finished","\x72","\x93","\x0e","\x95")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxReplay_obj,_frames),HX_HCSTRING("_frames","\x45","\xc1","\xfc","\x1a")},
	{hx::fsInt,(int)offsetof(FlxReplay_obj,_capacity),HX_HCSTRING("_capacity","\x99","\xf8","\x50","\x0b")},
	{hx::fsInt,(int)offsetof(FlxReplay_obj,_marker),HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxReplay_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxReplay_obj_sMemberFields[] = {
	HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("frameCount","\x62","\x79","\x89","\x2d"),
	HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"),
	HX_HCSTRING("_frames","\x45","\xc1","\xfc","\x1a"),
	HX_HCSTRING("_capacity","\x99","\xf8","\x50","\x0b"),
	HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c"),
	HX_HCSTRING("recordFrame","\xdc","\x03","\x98","\xba"),
	HX_HCSTRING("playNextFrame","\xa6","\xe5","\x0d","\x48"),
	HX_HCSTRING("rewind","\xfb","\x29","\x20","\x0b"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void FlxReplay_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxReplay_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxReplay_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxReplay_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxReplay_obj::__mClass;

void FlxReplay_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.replay.FlxReplay","\x5f","\x8d","\x5d","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxReplay_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxReplay_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxReplay_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxReplay_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxReplay_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxReplay_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace replay
