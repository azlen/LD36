// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_system_replay_CodeValuePair
#include <flixel/system/replay/CodeValuePair.h>
#endif
#ifndef INCLUDED_flixel_system_replay_FrameRecord
#include <flixel/system/replay/FrameRecord.h>
#endif
#ifndef INCLUDED_flixel_system_replay_MouseRecord
#include <flixel/system/replay/MouseRecord.h>
#endif

namespace flixel{
namespace _hx_system{
namespace replay{

void FrameRecord_obj::__construct(){
            	HX_STACK_FRAME("flixel.system.replay.FrameRecord","new",0xf4a8b736,"flixel.system.replay.FrameRecord.new","flixel/system/replay/FrameRecord.hx",25,0xc059da9b)
            	HX_STACK_THIS(this)
HXLINE(  26)		this->frame = (int)0;
HXLINE(  27)		this->keys = null();
HXLINE(  28)		this->mouse = null();
            	}

Dynamic FrameRecord_obj::__CreateEmpty() { return new FrameRecord_obj; }

hx::ObjectPtr< FrameRecord_obj > FrameRecord_obj::__new()
{
	hx::ObjectPtr< FrameRecord_obj > _hx_result = new FrameRecord_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FrameRecord_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FrameRecord_obj > _hx_result = new FrameRecord_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::flixel::_hx_system::replay::FrameRecord FrameRecord_obj::create(Float Frame,::Array< ::Dynamic> Keys, ::flixel::_hx_system::replay::MouseRecord Mouse){
            	HX_STACK_FRAME("flixel.system.replay.FrameRecord","create",0x88c1e9e6,"flixel.system.replay.FrameRecord.create","flixel/system/replay/FrameRecord.hx",39,0xc059da9b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Frame,"Frame")
            	HX_STACK_ARG(Keys,"Keys")
            	HX_STACK_ARG(Mouse,"Mouse")
HXLINE(  40)		this->frame = ::Math_obj::floor(Frame);
HXLINE(  41)		this->keys = Keys;
HXLINE(  42)		this->mouse = Mouse;
HXLINE(  44)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FrameRecord_obj,create,return )

void FrameRecord_obj::destroy(){
            	HX_STACK_FRAME("flixel.system.replay.FrameRecord","destroy",0x340636d0,"flixel.system.replay.FrameRecord.destroy","flixel/system/replay/FrameRecord.hx",51,0xc059da9b)
            	HX_STACK_THIS(this)
HXLINE(  52)		this->keys = null();
HXLINE(  53)		this->mouse = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FrameRecord_obj,destroy,(void))

::String FrameRecord_obj::save(){
            	HX_STACK_FRAME("flixel.system.replay.FrameRecord","save",0x22429fa7,"flixel.system.replay.FrameRecord.save","flixel/system/replay/FrameRecord.hx",61,0xc059da9b)
            	HX_STACK_THIS(this)
HXLINE(  62)		HX_VARI( ::String,output) = (this->frame + HX_("k",6b,00,00,00));
HXLINE(  64)		Bool _hx_tmp = hx::IsNotNull( this->keys );
HXDLIN(  64)		if (_hx_tmp) {
HXLINE(  66)			HX_VAR(  ::flixel::_hx_system::replay::CodeValuePair,object);
HXLINE(  67)			HX_VARI( Int,i) = (int)0;
HXLINE(  68)			HX_VARI( Int,l) = this->keys->length;
HXLINE(  69)			while((i < l)){
HXLINE(  71)				if ((i > (int)0)) {
HXLINE(  73)					hx::AddEq(output,HX_(",",2c,00,00,00));
            				}
HXLINE(  75)				Int _hx_tmp1 = i++;
HXDLIN(  75)				object = this->keys->__get(_hx_tmp1).StaticCast<  ::flixel::_hx_system::replay::CodeValuePair >();
HXLINE(  76)				hx::AddEq(output,((object->code + HX_(":",3a,00,00,00)) + object->value));
            			}
            		}
HXLINE(  80)		hx::AddEq(output,HX_("m",6d,00,00,00));
HXLINE(  81)		Bool _hx_tmp2 = hx::IsNotNull( this->mouse );
HXDLIN(  81)		if (_hx_tmp2) {
HXLINE(  83)			hx::AddEq(output,((((((this->mouse->x + HX_(",",2c,00,00,00)) + this->mouse->y) + HX_(",",2c,00,00,00)) + this->mouse->button) + HX_(",",2c,00,00,00)) + this->mouse->wheel));
            		}
HXLINE(  86)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FrameRecord_obj,save,return )

 ::flixel::_hx_system::replay::FrameRecord FrameRecord_obj::load(::String Data){
            	HX_STACK_FRAME("flixel.system.replay.FrameRecord","load",0x1dacae90,"flixel.system.replay.FrameRecord.load","flixel/system/replay/FrameRecord.hx",94,0xc059da9b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Data,"Data")
HXLINE(  95)		HX_VAR( Int,i);
HXLINE(  96)		HX_VAR( Int,l);
HXLINE(  99)		HX_VARI( ::Array< ::String >,array) = Data.split(HX_("k",6b,00,00,00));
HXLINE( 100)		::String _hx_tmp = array->__get((int)0);
HXDLIN( 100)		this->frame = ::Std_obj::parseInt(_hx_tmp);
HXLINE( 103)		array = array->__get((int)1).split(HX_("m",6d,00,00,00));
HXLINE( 104)		HX_VARI( ::String,keyData) = array->__get((int)0);
HXLINE( 105)		HX_VARI( ::String,mouseData) = array->__get((int)1);
HXLINE( 108)		Bool _hx_tmp1 = (keyData.length > (int)0);
HXDLIN( 108)		if (_hx_tmp1) {
HXLINE( 111)			array = keyData.split(HX_(",",2c,00,00,00));
HXLINE( 114)			HX_VAR( ::Array< ::String >,keyPair);
HXLINE( 115)			i = (int)0;
HXLINE( 116)			l = array->length;
HXLINE( 117)			while((i < l)){
HXLINE( 119)				Int _hx_tmp2 = i++;
HXDLIN( 119)				keyPair = array->__get(_hx_tmp2).split(HX_(":",3a,00,00,00));
HXLINE( 120)				Bool _hx_tmp3 = (keyPair->length == (int)2);
HXDLIN( 120)				if (_hx_tmp3) {
HXLINE( 122)					Bool _hx_tmp4 = hx::IsNull( this->keys );
HXDLIN( 122)					if (_hx_tmp4) {
HXLINE( 124)						this->keys = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE( 126)					::String _hx_tmp5 = keyPair->__get((int)0);
HXDLIN( 126)					 ::Dynamic _hx_tmp6 = ::Std_obj::parseInt(_hx_tmp5);
HXDLIN( 126)					::String _hx_tmp7 = keyPair->__get((int)1);
HXDLIN( 126)					 ::Dynamic _hx_tmp8 = ::Std_obj::parseInt(_hx_tmp7);
HXDLIN( 126)					this->keys->push( ::flixel::_hx_system::replay::CodeValuePair_obj::__new(_hx_tmp6,_hx_tmp8));
            				}
            			}
            		}
HXLINE( 132)		Bool _hx_tmp9 = (mouseData.length > (int)0);
HXDLIN( 132)		if (_hx_tmp9) {
HXLINE( 134)			array = mouseData.split(HX_(",",2c,00,00,00));
HXLINE( 135)			Bool _hx_tmp10 = (array->length >= (int)4);
HXDLIN( 135)			if (_hx_tmp10) {
HXLINE( 137)				::String _hx_tmp11 = array->__get((int)0);
HXDLIN( 137)				 ::Dynamic _hx_tmp12 = ::Std_obj::parseInt(_hx_tmp11);
HXDLIN( 137)				::String _hx_tmp13 = array->__get((int)1);
HXDLIN( 137)				 ::Dynamic _hx_tmp14 = ::Std_obj::parseInt(_hx_tmp13);
HXDLIN( 137)				::String _hx_tmp15 = array->__get((int)2);
HXDLIN( 137)				 ::Dynamic _hx_tmp16 = ::Std_obj::parseInt(_hx_tmp15);
HXDLIN( 137)				::String _hx_tmp17 = array->__get((int)3);
HXDLIN( 137)				 ::Dynamic _hx_tmp18 = ::Std_obj::parseInt(_hx_tmp17);
HXDLIN( 137)				this->mouse =  ::flixel::_hx_system::replay::MouseRecord_obj::__new(_hx_tmp12,_hx_tmp14,_hx_tmp16,_hx_tmp18);
            			}
            		}
HXLINE( 141)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FrameRecord_obj,load,return )


FrameRecord_obj::FrameRecord_obj()
{
}

void FrameRecord_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FrameRecord);
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_MEMBER_NAME(mouse,"mouse");
	HX_MARK_END_CLASS();
}

void FrameRecord_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(keys,"keys");
	HX_VISIT_MEMBER_NAME(mouse,"mouse");
}

hx::Val FrameRecord_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys); }
		if (HX_FIELD_EQ(inName,"save") ) { return hx::Val( save_dyn()); }
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame); }
		if (HX_FIELD_EQ(inName,"mouse") ) { return hx::Val( mouse); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FrameRecord_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouse") ) { mouse=inValue.Cast<  ::flixel::_hx_system::replay::MouseRecord >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FrameRecord_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"));
	outFields->push(HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FrameRecord_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FrameRecord_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FrameRecord_obj,keys),HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47")},
	{hx::fsObject /*::flixel::_hx_system::replay::MouseRecord*/ ,(int)offsetof(FrameRecord_obj,mouse),HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FrameRecord_obj_sStaticStorageInfo = 0;
#endif

static ::String FrameRecord_obj_sMemberFields[] = {
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	::String(null()) };

static void FrameRecord_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FrameRecord_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FrameRecord_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FrameRecord_obj::__mClass,"__mClass");
};

#endif

hx::Class FrameRecord_obj::__mClass;

void FrameRecord_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.replay.FrameRecord","\x44","\xa4","\x0b","\x96");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FrameRecord_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FrameRecord_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FrameRecord_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FrameRecord_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FrameRecord_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FrameRecord_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace replay
