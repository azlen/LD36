// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif

namespace flixel{
namespace tile{

void FlxBaseTilemap_obj::__construct(){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","new",0x601e788b,"flixel.tile.FlxBaseTilemap.new","flixel/tile/FlxBaseTilemap.hx",17,0x0139d8e5)
            	HX_STACK_THIS(this)
HXLINE(  81)		this->_collideIndex = (int)0;
HXLINE(  80)		this->_drawIndex = (int)0;
HXLINE(  74)		this->_startingIndex = (int)0;
HXLINE(  69)		this->_tileObjects = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  28)		this->totalTiles = (int)0;
HXLINE(  26)		this->heightInTiles = (int)0;
HXLINE(  24)		this->widthInTiles = (int)0;
HXLINE(  22)		this->_hx_auto = ::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn();
HXLINE( 142)		super::__construct(null(),null(),null(),null());
HXLINE( 144)		this->flixelType = (int)3;
HXLINE( 145)		this->set_immovable(true);
HXLINE( 146)		this->set_moves(false);
            	}

Dynamic FlxBaseTilemap_obj::__CreateEmpty() { return new FlxBaseTilemap_obj; }

hx::ObjectPtr< FlxBaseTilemap_obj > FlxBaseTilemap_obj::__new()
{
	hx::ObjectPtr< FlxBaseTilemap_obj > _hx_result = new FlxBaseTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxBaseTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxBaseTilemap_obj > _hx_result = new FlxBaseTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

void FlxBaseTilemap_obj::updateTile(Int Index){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","updateTile",0x4985390c,"flixel.tile.FlxBaseTilemap.updateTile","flixel/tile/FlxBaseTilemap.hx",88,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE(  88)		HX_STACK_DO_THROW(HX_("updateTile must be implemented",53,76,b0,30));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,updateTile,(void))

void FlxBaseTilemap_obj::cacheGraphics(Int TileWidth,Int TileHeight, ::Dynamic TileGraphic){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","cacheGraphics",0x589e0d18,"flixel.tile.FlxBaseTilemap.cacheGraphics","flixel/tile/FlxBaseTilemap.hx",93,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
HXLINE(  93)		HX_STACK_DO_THROW(HX_("cacheGraphics must be implemented",a9,10,20,38));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBaseTilemap_obj,cacheGraphics,(void))

void FlxBaseTilemap_obj::initTileObjects(){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","initTileObjects",0x1ec17ac1,"flixel.tile.FlxBaseTilemap.initTileObjects","flixel/tile/FlxBaseTilemap.hx",98,0x0139d8e5)
            	HX_STACK_THIS(this)
HXLINE(  98)		HX_STACK_DO_THROW(HX_("initTileObjects must be implemented",12,b8,a6,2f));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,initTileObjects,(void))

void FlxBaseTilemap_obj::updateMap(){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","updateMap",0xe833827e,"flixel.tile.FlxBaseTilemap.updateMap","flixel/tile/FlxBaseTilemap.hx",103,0x0139d8e5)
            	HX_STACK_THIS(this)
HXLINE( 103)		HX_STACK_DO_THROW(HX_("updateMap must be implemented",8f,ae,0f,b7));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,updateMap,(void))

void FlxBaseTilemap_obj::computeDimensions(){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","computeDimensions",0xc850220f,"flixel.tile.FlxBaseTilemap.computeDimensions","flixel/tile/FlxBaseTilemap.hx",108,0x0139d8e5)
            	HX_STACK_THIS(this)
HXLINE( 108)		HX_STACK_DO_THROW(HX_("computeDimensions must be implemented",a0,79,f6,10));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,computeDimensions,(void))

Int FlxBaseTilemap_obj::getTileIndexByCoords( ::flixel::math::FlxPoint Coord){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","getTileIndexByCoords",0x5f0cf078,"flixel.tile.FlxBaseTilemap.getTileIndexByCoords","flixel/tile/FlxBaseTilemap.hx",113,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Coord,"Coord")
HXLINE( 113)		HX_STACK_DO_THROW(HX_("getTileIndexByCoords must be implemented",7f,57,93,9c));
HXDLIN( 113)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileIndexByCoords,return )

 ::flixel::math::FlxPoint FlxBaseTilemap_obj::getTileCoordsByIndex(Int Index,hx::Null< Bool >  __o_Midpoint){
Bool Midpoint = __o_Midpoint.Default(true);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","getTileCoordsByIndex",0x89a6db2e,"flixel.tile.FlxBaseTilemap.getTileCoordsByIndex","flixel/tile/FlxBaseTilemap.hx",119,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
            	HX_STACK_ARG(Midpoint,"Midpoint")
HXLINE( 119)		HX_STACK_DO_THROW(HX_("getTileCoordsByIndex must be implemented",35,21,39,05));
HXDLIN( 119)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBaseTilemap_obj,getTileCoordsByIndex,return )

Bool FlxBaseTilemap_obj::ray( ::flixel::math::FlxPoint Start, ::flixel::math::FlxPoint End, ::flixel::math::FlxPoint Result,hx::Null< Float >  __o_Resolution){
Float Resolution = __o_Resolution.Default(1);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","ray",0x60217e15,"flixel.tile.FlxBaseTilemap.ray","flixel/tile/FlxBaseTilemap.hx",125,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Start,"Start")
            	HX_STACK_ARG(End,"End")
            	HX_STACK_ARG(Result,"Result")
            	HX_STACK_ARG(Resolution,"Resolution")
HXLINE( 125)		HX_STACK_DO_THROW(HX_("ray must be implemented",e6,31,5e,58));
HXDLIN( 125)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,ray,return )

Bool FlxBaseTilemap_obj::overlapsWithCallback( ::flixel::FlxObject Object, ::Dynamic Callback,hx::Null< Bool >  __o_FlipCallbackParams, ::flixel::math::FlxPoint Position){
Bool FlipCallbackParams = __o_FlipCallbackParams.Default(false);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","overlapsWithCallback",0x90f43a8c,"flixel.tile.FlxBaseTilemap.overlapsWithCallback","flixel/tile/FlxBaseTilemap.hx",131,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(Callback,"Callback")
            	HX_STACK_ARG(FlipCallbackParams,"FlipCallbackParams")
            	HX_STACK_ARG(Position,"Position")
HXLINE( 131)		HX_STACK_DO_THROW(HX_("overlapsWithCallback must be implemented",93,a3,ff,38));
HXDLIN( 131)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,overlapsWithCallback,return )

void FlxBaseTilemap_obj::setDirty(hx::Null< Bool >  __o_Dirty){
Bool Dirty = __o_Dirty.Default(true);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","setDirty",0x31f19505,"flixel.tile.FlxBaseTilemap.setDirty","flixel/tile/FlxBaseTilemap.hx",137,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Dirty,"Dirty")
HXLINE( 137)		HX_STACK_DO_THROW(HX_("setDirty must be implemented",0c,cc,e0,5f));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,setDirty,(void))

void FlxBaseTilemap_obj::destroy(){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","destroy",0x44ffc6a5,"flixel.tile.FlxBaseTilemap.destroy","flixel/tile/FlxBaseTilemap.hx",150,0x0139d8e5)
            	HX_STACK_THIS(this)
HXLINE( 151)		this->_data = null();
HXLINE( 152)		this->super::destroy();
            	}


 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFromCSV(::String MapData, ::Dynamic TileGraphic,hx::Null< Int >  __o_TileWidth,hx::Null< Int >  __o_TileHeight,::hx::EnumBase AutoTile,hx::Null< Int >  __o_StartingIndex,hx::Null< Int >  __o_DrawIndex,hx::Null< Int >  __o_CollideIndex){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run(::String line){
            			HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","loadMapFromCSV",0xbac5ecbb,"flixel.tile.FlxBaseTilemap.loadMapFromCSV","flixel/tile/FlxBaseTilemap.hx",188,0x0139d8e5)
            			HX_STACK_ARG(line,"line")
HXLINE( 188)			return (line != HX_("",00,00,00,00));
            		}
            		HX_END_LOCAL_FUNC1(return)

Int TileWidth = __o_TileWidth.Default(0);
Int TileHeight = __o_TileHeight.Default(0);
Int StartingIndex = __o_StartingIndex.Default(0);
Int DrawIndex = __o_DrawIndex.Default(1);
Int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","loadMapFromCSV",0xbac5ecbb,"flixel.tile.FlxBaseTilemap.loadMapFromCSV","flixel/tile/FlxBaseTilemap.hx",175,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapData,"MapData")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 177)		Bool _hx_tmp = ::openfl::_legacy::Assets_obj::exists(MapData,null());
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 179)			MapData = ::openfl::_legacy::Assets_obj::getText(MapData);
            		}
HXLINE( 183)		this->_data = ::Array_obj< Int >::__new();
HXLINE( 184)		HX_VAR( ::Array< ::String >,columns);
HXLINE( 186)		HX_VARI(  ::EReg,regex) =  ::EReg_obj::__new(HX_("[ \t]*((\r\n)|\r|\n)[ \t]*",22,2c,8d,6d),HX_("g",67,00,00,00));
HXLINE( 187)		HX_VARI( ::Array< ::String >,lines) = regex->split(MapData);
HXLINE( 188)		HX_VARI( ::Array< ::String >,rows) = lines->filter( ::Dynamic(new _hx_Closure_0()));
HXLINE( 190)		this->heightInTiles = rows->length;
HXLINE( 191)		this->widthInTiles = (int)0;
HXLINE( 193)		HX_VARI( Int,row) = (int)0;
HXLINE( 194)		while((row < this->heightInTiles)){
HXLINE( 196)			HX_VARI( ::String,rowString) = rows->__get(row);
HXLINE( 197)			Bool _hx_tmp1 = ::StringTools_obj::endsWith(rowString,HX_(",",2c,00,00,00));
HXDLIN( 197)			if (_hx_tmp1) {
HXLINE( 198)				Int _hx_tmp2 = (rowString.length - (int)1);
HXDLIN( 198)				rowString = rowString.substr((int)0,_hx_tmp2);
            			}
HXLINE( 199)			columns = rowString.split(HX_(",",2c,00,00,00));
HXLINE( 201)			Bool _hx_tmp3 = (columns->length == (int)0);
HXDLIN( 201)			if (_hx_tmp3) {
HXLINE( 203)				this->heightInTiles--;
HXLINE( 204)				continue;
            			}
HXLINE( 206)			Bool _hx_tmp4 = (this->widthInTiles == (int)0);
HXDLIN( 206)			if (_hx_tmp4) {
HXLINE( 208)				this->widthInTiles = columns->length;
            			}
HXLINE( 211)			HX_VARI( Int,column) = (int)0;
HXLINE( 212)			while((column < this->widthInTiles)){
HXLINE( 215)				HX_VARI( ::String,columnString) = columns->__get(column);
HXLINE( 216)				HX_VARI(  ::Dynamic,curTile) = ::Std_obj::parseInt(columnString);
HXLINE( 218)				Bool _hx_tmp5 = hx::IsNull( curTile );
HXDLIN( 218)				if (_hx_tmp5) {
HXLINE( 219)					HX_STACK_DO_THROW(((((((HX_("String in row ",b2,a4,63,43) + row) + HX_(", column ",96,fc,25,5b)) + column) + HX_(" is not a valid integer: \"",44,67,cc,45)) + columnString) + HX_("\"",22,00,00,00)));
            				}
HXLINE( 222)				Bool _hx_tmp6 = hx::IsLess( curTile,(int)0 );
HXDLIN( 222)				if (_hx_tmp6) {
HXLINE( 223)					curTile = (int)0;
            				}
HXLINE( 225)				this->_data->push(curTile);
HXLINE( 226)				++column;
            			}
HXLINE( 229)			++row;
            		}
HXLINE( 232)		this->loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE( 233)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxBaseTilemap_obj,loadMapFromCSV,return )

 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFromArray(::Array< Int > MapData,Int WidthInTiles,Int HeightInTiles, ::Dynamic TileGraphic,hx::Null< Int >  __o_TileWidth,hx::Null< Int >  __o_TileHeight,::hx::EnumBase AutoTile,hx::Null< Int >  __o_StartingIndex,hx::Null< Int >  __o_DrawIndex,hx::Null< Int >  __o_CollideIndex){
Int TileWidth = __o_TileWidth.Default(0);
Int TileHeight = __o_TileHeight.Default(0);
Int StartingIndex = __o_StartingIndex.Default(0);
Int DrawIndex = __o_DrawIndex.Default(1);
Int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","loadMapFromArray",0x576cd9ce,"flixel.tile.FlxBaseTilemap.loadMapFromArray","flixel/tile/FlxBaseTilemap.hx",258,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapData,"MapData")
            	HX_STACK_ARG(WidthInTiles,"WidthInTiles")
            	HX_STACK_ARG(HeightInTiles,"HeightInTiles")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 259)		this->widthInTiles = WidthInTiles;
HXLINE( 260)		this->heightInTiles = HeightInTiles;
HXLINE( 261)		this->_data = MapData->copy();
HXLINE( 263)		this->loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE( 264)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC10(FlxBaseTilemap_obj,loadMapFromArray,return )

 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFrom2DArray(::Array< ::Dynamic> MapData, ::Dynamic TileGraphic,hx::Null< Int >  __o_TileWidth,hx::Null< Int >  __o_TileHeight,::hx::EnumBase AutoTile,hx::Null< Int >  __o_StartingIndex,hx::Null< Int >  __o_DrawIndex,hx::Null< Int >  __o_CollideIndex){
Int TileWidth = __o_TileWidth.Default(0);
Int TileHeight = __o_TileHeight.Default(0);
Int StartingIndex = __o_StartingIndex.Default(0);
Int DrawIndex = __o_DrawIndex.Default(1);
Int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","loadMapFrom2DArray",0xb01a13fc,"flixel.tile.FlxBaseTilemap.loadMapFrom2DArray","flixel/tile/FlxBaseTilemap.hx",287,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapData,"MapData")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 288)		this->widthInTiles = MapData->__get((int)0).StaticCast< ::Array< Int > >()->length;
HXLINE( 289)		this->heightInTiles = MapData->length;
HXLINE( 290)		this->_data = ::flixel::util::FlxArrayUtil_obj::flatten2DArray_Int(MapData);
HXLINE( 292)		this->loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE( 293)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxBaseTilemap_obj,loadMapFrom2DArray,return )

 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFromGraphic( ::Dynamic MapGraphic,hx::Null< Bool >  __o_Invert,hx::Null< Int >  __o_Scale,::Array< Int > ColorMap, ::Dynamic TileGraphic,hx::Null< Int >  __o_TileWidth,hx::Null< Int >  __o_TileHeight,::hx::EnumBase AutoTile,hx::Null< Int >  __o_StartingIndex,hx::Null< Int >  __o_DrawIndex,hx::Null< Int >  __o_CollideIndex){
Bool Invert = __o_Invert.Default(false);
Int Scale = __o_Scale.Default(1);
Int TileWidth = __o_TileWidth.Default(0);
Int TileHeight = __o_TileHeight.Default(0);
Int StartingIndex = __o_StartingIndex.Default(0);
Int DrawIndex = __o_DrawIndex.Default(1);
Int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","loadMapFromGraphic",0xe93ffe1d,"flixel.tile.FlxBaseTilemap.loadMapFromGraphic","flixel/tile/FlxBaseTilemap.hx",320,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapGraphic,"MapGraphic")
            	HX_STACK_ARG(Invert,"Invert")
            	HX_STACK_ARG(Scale,"Scale")
            	HX_STACK_ARG(ColorMap,"ColorMap")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 321)		HX_VARI(  ::openfl::_legacy::display::BitmapData,mapBitmap) = ::flixel::_hx_system::FlxAssets_obj::resolveBitmapData(MapGraphic);
HXLINE( 322)		HX_VARI( ::String,mapData) = ::flixel::util::FlxStringUtil_obj::bitmapToCSV(mapBitmap,Invert,Scale,ColorMap);
HXLINE( 323)		return this->loadMapFromCSV(mapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC11(FlxBaseTilemap_obj,loadMapFromGraphic,return )

void FlxBaseTilemap_obj::loadMapHelper( ::Dynamic TileGraphic,hx::Null< Int >  __o_TileWidth,hx::Null< Int >  __o_TileHeight,::hx::EnumBase AutoTile,hx::Null< Int >  __o_StartingIndex,hx::Null< Int >  __o_DrawIndex,hx::Null< Int >  __o_CollideIndex){
Int TileWidth = __o_TileWidth.Default(0);
Int TileHeight = __o_TileHeight.Default(0);
Int StartingIndex = __o_StartingIndex.Default(0);
Int DrawIndex = __o_DrawIndex.Default(1);
Int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","loadMapHelper",0xc59c560f,"flixel.tile.FlxBaseTilemap.loadMapHelper","flixel/tile/FlxBaseTilemap.hx",328,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 329)		this->totalTiles = this->_data->length;
HXLINE( 330)		::hx::EnumBase _hx_tmp;
HXDLIN( 330)		Bool _hx_tmp1 = hx::IsNull( AutoTile );
HXDLIN( 330)		if (_hx_tmp1) {
HXLINE( 330)			_hx_tmp = ::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn();
            		}
            		else {
HXLINE( 330)			_hx_tmp = AutoTile;
            		}
HXDLIN( 330)		this->_hx_auto = _hx_tmp;
HXLINE( 331)		Int _hx_tmp2;
HXDLIN( 331)		if ((StartingIndex <= (int)0)) {
HXLINE( 331)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE( 331)			_hx_tmp2 = StartingIndex;
            		}
HXDLIN( 331)		this->_startingIndex = _hx_tmp2;
HXLINE( 333)		if (hx::IsNotEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn() )) {
HXLINE( 335)			this->_startingIndex = (int)1;
HXLINE( 336)			DrawIndex = (int)1;
HXLINE( 337)			CollideIndex = (int)1;
            		}
HXLINE( 340)		this->_drawIndex = DrawIndex;
HXLINE( 341)		this->_collideIndex = CollideIndex;
HXLINE( 343)		this->applyAutoTile();
HXLINE( 344)		this->applyCustomRemap();
HXLINE( 345)		this->randomizeIndices();
HXLINE( 346)		this->cacheGraphics(TileWidth,TileHeight,TileGraphic);
HXLINE( 347)		this->postGraphicLoad();
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxBaseTilemap_obj,loadMapHelper,(void))

void FlxBaseTilemap_obj::postGraphicLoad(){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","postGraphicLoad",0x0dc00119,"flixel.tile.FlxBaseTilemap.postGraphicLoad","flixel/tile/FlxBaseTilemap.hx",351,0x0139d8e5)
            	HX_STACK_THIS(this)
HXLINE( 352)		this->initTileObjects();
HXLINE( 353)		this->computeDimensions();
HXLINE( 354)		this->updateMap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,postGraphicLoad,(void))

void FlxBaseTilemap_obj::applyAutoTile(){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","applyAutoTile",0xcc60c5b6,"flixel.tile.FlxBaseTilemap.applyAutoTile","flixel/tile/FlxBaseTilemap.hx",360,0x0139d8e5)
            	HX_STACK_THIS(this)
HXLINE( 360)		if (hx::IsNotEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn() )) {
HXLINE( 362)			HX_VARI( Int,i) = (int)0;
HXLINE( 363)			while((i < this->totalTiles)){
HXLINE( 365)				Int _hx_tmp = i++;
HXDLIN( 365)				this->autoTile(_hx_tmp);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,applyAutoTile,(void))

void FlxBaseTilemap_obj::applyCustomRemap(){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","applyCustomRemap",0x2fd5c57f,"flixel.tile.FlxBaseTilemap.applyCustomRemap","flixel/tile/FlxBaseTilemap.hx",371,0x0139d8e5)
            	HX_STACK_THIS(this)
HXLINE( 372)		HX_VARI( Int,i) = (int)0;
HXLINE( 374)		Bool _hx_tmp = hx::IsNotNull( this->customTileRemap );
HXDLIN( 374)		if (_hx_tmp) {
HXLINE( 376)			while((i < this->totalTiles)){
HXLINE( 378)				HX_VARI( Int,oldIndex) = this->_data->__get(i);
HXLINE( 379)				HX_VARI( Int,newIndex) = oldIndex;
HXLINE( 380)				if ((oldIndex < this->customTileRemap->length)) {
HXLINE( 382)					newIndex = this->customTileRemap->__get(oldIndex);
            				}
HXLINE( 384)				this->_data[i] = newIndex;
HXLINE( 385)				++i;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,applyCustomRemap,(void))

void FlxBaseTilemap_obj::randomizeIndices(){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","randomizeIndices",0x9015e6eb,"flixel.tile.FlxBaseTilemap.randomizeIndices","flixel/tile/FlxBaseTilemap.hx",391,0x0139d8e5)
            	HX_STACK_THIS(this)
HXLINE( 392)		HX_VARI( Int,i) = (int)0;
HXLINE( 394)		Bool _hx_tmp = hx::IsNotNull( this->_randomIndices );
HXDLIN( 394)		if (_hx_tmp) {
HXLINE( 396)			HX_VAR(  ::Dynamic,randLambda);
HXDLIN( 396)			Bool _hx_tmp1 = hx::IsNotNull( this->_randomLambda );
HXDLIN( 396)			if (_hx_tmp1) {
HXLINE( 396)				randLambda = this->_randomLambda;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				Float _hx_run(){
            					HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","randomizeIndices",0x9015e6eb,"flixel.tile.FlxBaseTilemap.randomizeIndices","flixel/tile/FlxBaseTilemap.hx",398,0x0139d8e5)
HXLINE( 398)					return ::flixel::FlxG_obj::random->_hx_float(null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 396)				randLambda =  ::Dynamic(new _hx_Closure_0());
            			}
HXLINE( 401)			while((i < this->totalTiles)){
HXLINE( 403)				HX_VARI( Int,oldIndex) = this->_data->__get(i);
HXLINE( 404)				HX_VARI( Int,j) = (int)0;
HXLINE( 405)				HX_VARI( Int,newIndex) = oldIndex;
HXLINE( 406)				{
HXLINE( 406)					HX_VARI( Int,_g) = (int)0;
HXDLIN( 406)					HX_VARI( ::Array< Int >,_g1) = this->_randomIndices;
HXDLIN( 406)					while((_g < _g1->length)){
HXLINE( 406)						HX_VARI( Int,rand) = _g1->__get(_g);
HXDLIN( 406)						++_g;
HXLINE( 408)						if ((oldIndex == rand)) {
HXLINE( 410)							Float _hx_tmp2 = ( (Float)(randLambda()) );
HXDLIN( 410)							Float _hx_tmp3 = (_hx_tmp2 * this->_randomChoices->__get(j).StaticCast< ::Array< Int > >()->length);
HXDLIN( 410)							HX_VARI( Int,k) = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE( 411)							newIndex = this->_randomChoices->__get(j).StaticCast< ::Array< Int > >()->__get(k);
            						}
HXLINE( 413)						++j;
            					}
            				}
HXLINE( 415)				this->_data[i] = newIndex;
HXLINE( 416)				++i;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,randomizeIndices,(void))

void FlxBaseTilemap_obj::autoTile(Int Index){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","autoTile",0x7a0f9632,"flixel.tile.FlxBaseTilemap.autoTile","flixel/tile/FlxBaseTilemap.hx",427,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE( 428)		if ((this->_data->__get(Index) == (int)0)) {
HXLINE( 430)			return;
            		}
HXLINE( 433)		this->_data[Index] = (int)0;
HXLINE( 436)		Bool _hx_tmp;
HXDLIN( 436)		if (((Index - this->widthInTiles) >= (int)0)) {
HXLINE( 436)			_hx_tmp = (this->_data->__get((Index - this->widthInTiles)) > (int)0);
            		}
            		else {
HXLINE( 436)			_hx_tmp = true;
            		}
HXDLIN( 436)		if (_hx_tmp) {
HXLINE( 438)			hx::AddEq(this->_data[Index],(int)1);
            		}
HXLINE( 441)		Bool _hx_tmp1;
HXDLIN( 441)		if ((hx::Mod(Index,this->widthInTiles) < (this->widthInTiles - (int)1))) {
HXLINE( 441)			_hx_tmp1 = (this->_data->__get((Index + (int)1)) > (int)0);
            		}
            		else {
HXLINE( 441)			_hx_tmp1 = true;
            		}
HXDLIN( 441)		if (_hx_tmp1) {
HXLINE( 443)			hx::AddEq(this->_data[Index],(int)2);
            		}
HXLINE( 446)		Bool _hx_tmp2;
HXDLIN( 446)		Int _hx_tmp3 = (Index + this->widthInTiles);
HXDLIN( 446)		Int _hx_tmp4 = ::Std_obj::_hx_int(_hx_tmp3);
HXDLIN( 446)		if ((_hx_tmp4 < this->totalTiles)) {
HXLINE( 446)			_hx_tmp2 = (this->_data->__get((Index + this->widthInTiles)) > (int)0);
            		}
            		else {
HXLINE( 446)			_hx_tmp2 = true;
            		}
HXDLIN( 446)		if (_hx_tmp2) {
HXLINE( 448)			hx::AddEq(this->_data[Index],(int)4);
            		}
HXLINE( 451)		Bool _hx_tmp5;
HXDLIN( 451)		if ((hx::Mod(Index,this->widthInTiles) > (int)0)) {
HXLINE( 451)			_hx_tmp5 = (this->_data->__get((Index - (int)1)) > (int)0);
            		}
            		else {
HXLINE( 451)			_hx_tmp5 = true;
            		}
HXDLIN( 451)		if (_hx_tmp5) {
HXLINE( 453)			hx::AddEq(this->_data[Index],(int)8);
            		}
HXLINE( 457)		Bool _hx_tmp6;
HXDLIN( 457)		if (hx::IsEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::ALT_dyn() )) {
HXLINE( 457)			_hx_tmp6 = (this->_data->__get(Index) == (int)15);
            		}
            		else {
HXLINE( 457)			_hx_tmp6 = false;
            		}
HXDLIN( 457)		if (_hx_tmp6) {
HXLINE( 460)			Bool _hx_tmp7;
HXDLIN( 460)			Bool _hx_tmp8;
HXDLIN( 460)			Bool _hx_tmp9 = (hx::Mod(Index,this->widthInTiles) > (int)0);
HXDLIN( 460)			if (_hx_tmp9) {
HXLINE( 460)				Int _hx_tmp10 = (Index + this->widthInTiles);
HXDLIN( 460)				Int _hx_tmp11 = ::Std_obj::_hx_int(_hx_tmp10);
HXDLIN( 460)				_hx_tmp8 = (_hx_tmp11 < this->totalTiles);
            			}
            			else {
HXLINE( 460)				_hx_tmp8 = false;
            			}
HXDLIN( 460)			if (_hx_tmp8) {
HXLINE( 460)				_hx_tmp7 = (this->_data->__get(((Index + this->widthInTiles) - (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 460)				_hx_tmp7 = false;
            			}
HXDLIN( 460)			if (_hx_tmp7) {
HXLINE( 462)				this->_data[Index] = (int)1;
            			}
HXLINE( 465)			Bool _hx_tmp12;
HXDLIN( 465)			Bool _hx_tmp13;
HXDLIN( 465)			if ((hx::Mod(Index,this->widthInTiles) > (int)0)) {
HXLINE( 465)				_hx_tmp13 = ((Index - this->widthInTiles) >= (int)0);
            			}
            			else {
HXLINE( 465)				_hx_tmp13 = false;
            			}
HXDLIN( 465)			if (_hx_tmp13) {
HXLINE( 465)				_hx_tmp12 = (this->_data->__get(((Index - this->widthInTiles) - (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 465)				_hx_tmp12 = false;
            			}
HXDLIN( 465)			if (_hx_tmp12) {
HXLINE( 467)				this->_data[Index] = (int)2;
            			}
HXLINE( 470)			Bool _hx_tmp14;
HXDLIN( 470)			Bool _hx_tmp15;
HXDLIN( 470)			if ((hx::Mod(Index,this->widthInTiles) < (this->widthInTiles - (int)1))) {
HXLINE( 470)				_hx_tmp15 = ((Index - this->widthInTiles) >= (int)0);
            			}
            			else {
HXLINE( 470)				_hx_tmp15 = false;
            			}
HXDLIN( 470)			if (_hx_tmp15) {
HXLINE( 470)				_hx_tmp14 = (this->_data->__get(((Index - this->widthInTiles) + (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 470)				_hx_tmp14 = false;
            			}
HXDLIN( 470)			if (_hx_tmp14) {
HXLINE( 472)				this->_data[Index] = (int)4;
            			}
HXLINE( 475)			Bool _hx_tmp16;
HXDLIN( 475)			Bool _hx_tmp17;
HXDLIN( 475)			Bool _hx_tmp18 = (hx::Mod(Index,this->widthInTiles) < (this->widthInTiles - (int)1));
HXDLIN( 475)			if (_hx_tmp18) {
HXLINE( 475)				Int _hx_tmp19 = (Index + this->widthInTiles);
HXDLIN( 475)				Int _hx_tmp20 = ::Std_obj::_hx_int(_hx_tmp19);
HXDLIN( 475)				_hx_tmp17 = (_hx_tmp20 < this->totalTiles);
            			}
            			else {
HXLINE( 475)				_hx_tmp17 = false;
            			}
HXDLIN( 475)			if (_hx_tmp17) {
HXLINE( 475)				_hx_tmp16 = (this->_data->__get(((Index + this->widthInTiles) + (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 475)				_hx_tmp16 = false;
            			}
HXDLIN( 475)			if (_hx_tmp16) {
HXLINE( 477)				this->_data[Index] = (int)8;
            			}
            		}
HXLINE( 481)		hx::AddEq(this->_data[Index],(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,autoTile,(void))

void FlxBaseTilemap_obj::setCustomTileMappings(::Array< Int > mappings,::Array< Int > randomIndices,::Array< ::Dynamic> randomChoices, ::Dynamic randomLambda){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","setCustomTileMappings",0x91d80f71,"flixel.tile.FlxBaseTilemap.setCustomTileMappings","flixel/tile/FlxBaseTilemap.hx",494,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mappings,"mappings")
            	HX_STACK_ARG(randomIndices,"randomIndices")
            	HX_STACK_ARG(randomChoices,"randomChoices")
            	HX_STACK_ARG(randomLambda,"randomLambda")
HXLINE( 495)		this->customTileRemap = mappings;
HXLINE( 496)		this->_randomIndices = randomIndices;
HXLINE( 497)		this->_randomChoices = randomChoices;
HXLINE( 498)		this->_randomLambda = randomLambda;
HXLINE( 501)		Bool _hx_tmp;
HXDLIN( 501)		Bool _hx_tmp1 = hx::IsNotNull( this->_randomIndices );
HXDLIN( 501)		if (_hx_tmp1) {
HXLINE( 501)			Bool _hx_tmp2 = hx::IsNotNull( this->_randomChoices );
HXDLIN( 501)			if (_hx_tmp2) {
HXLINE( 501)				_hx_tmp = (this->_randomChoices->length == (int)0);
            			}
            			else {
HXLINE( 501)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 501)			_hx_tmp = false;
            		}
HXDLIN( 501)		if (_hx_tmp) {
HXLINE( 503)			HX_STACK_DO_THROW(HX_("You must provide valid 'randomChoices' if you wish to randomize tilemap indicies, please read documentation of 'setCustomTileMappings' function.",58,d6,21,51));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,setCustomTileMappings,(void))

Int FlxBaseTilemap_obj::getTile(Int X,Int Y){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","getTile",0x3ff9148f,"flixel.tile.FlxBaseTilemap.getTile","flixel/tile/FlxBaseTilemap.hx",516,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 516)		return this->_data->__get(((Y * this->widthInTiles) + X));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBaseTilemap_obj,getTile,return )

Int FlxBaseTilemap_obj::getTileByIndex(Int Index){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","getTileByIndex",0xf0387cec,"flixel.tile.FlxBaseTilemap.getTileByIndex","flixel/tile/FlxBaseTilemap.hx",527,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE( 527)		return this->_data->__get(Index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileByIndex,return )

Int FlxBaseTilemap_obj::getTileCollisions(Int Index){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","getTileCollisions",0x9ca1bd30,"flixel.tile.FlxBaseTilemap.getTileCollisions","flixel/tile/FlxBaseTilemap.hx",538,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE( 538)		return ( ( ::flixel::FlxObject)(this->_tileObjects->__get(Index)) )->allowCollisions;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileCollisions,return )

::Array< Int > FlxBaseTilemap_obj::getTileInstances(Int Index){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","getTileInstances",0xa0cac4af,"flixel.tile.FlxBaseTilemap.getTileInstances","flixel/tile/FlxBaseTilemap.hx",548,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE( 549)		HX_VARI( ::Array< Int >,array) = null();
HXLINE( 550)		HX_VARI( Int,i) = (int)0;
HXLINE( 551)		HX_VARI( Int,l) = (this->widthInTiles * this->heightInTiles);
HXLINE( 553)		while((i < l)){
HXLINE( 555)			Bool _hx_tmp = (this->_data->__get(i) == Index);
HXDLIN( 555)			if (_hx_tmp) {
HXLINE( 557)				Bool _hx_tmp1 = hx::IsNull( array );
HXDLIN( 557)				if (_hx_tmp1) {
HXLINE( 559)					array = ::Array_obj< Int >::__new(0);
            				}
HXLINE( 561)				array->push(i);
            			}
HXLINE( 563)			++i;
            		}
HXLINE( 566)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileInstances,return )

Bool FlxBaseTilemap_obj::setTile(Int X,Int Y,Int Tile,hx::Null< Bool >  __o_UpdateGraphics){
Bool UpdateGraphics = __o_UpdateGraphics.Default(true);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","setTile",0x32faa59b,"flixel.tile.FlxBaseTilemap.setTile","flixel/tile/FlxBaseTilemap.hx",579,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Tile,"Tile")
            	HX_STACK_ARG(UpdateGraphics,"UpdateGraphics")
HXLINE( 580)		Bool _hx_tmp;
HXDLIN( 580)		if ((X < this->widthInTiles)) {
HXLINE( 580)			_hx_tmp = (Y >= this->heightInTiles);
            		}
            		else {
HXLINE( 580)			_hx_tmp = true;
            		}
HXDLIN( 580)		if (_hx_tmp) {
HXLINE( 582)			return false;
            		}
HXLINE( 585)		Int _hx_tmp1 = ((Y * this->widthInTiles) + X);
HXDLIN( 585)		return this->setTileByIndex(_hx_tmp1,Tile,UpdateGraphics);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,setTile,return )

Bool FlxBaseTilemap_obj::setTileByIndex(Int Index,Int Tile,hx::Null< Bool >  __o_UpdateGraphics){
Bool UpdateGraphics = __o_UpdateGraphics.Default(true);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","setTileByIndex",0x10586560,"flixel.tile.FlxBaseTilemap.setTileByIndex","flixel/tile/FlxBaseTilemap.hx",597,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
            	HX_STACK_ARG(Tile,"Tile")
            	HX_STACK_ARG(UpdateGraphics,"UpdateGraphics")
HXLINE( 598)		if ((Index >= this->_data->length)) {
HXLINE( 600)			return false;
            		}
HXLINE( 604)		this->_data[Index] = Tile;
HXLINE( 606)		if (!(UpdateGraphics)) {
HXLINE( 608)			return true;
            		}
HXLINE( 611)		this->setDirty(null());
HXLINE( 613)		if (hx::IsEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn() )) {
HXLINE( 615)			Int _hx_tmp = this->_data->__get(Index);
HXDLIN( 615)			this->updateTile(_hx_tmp);
HXLINE( 616)			return true;
            		}
HXLINE( 620)		HX_VAR( Int,i);
HXLINE( 621)		Float _hx_tmp1 = ((Float)Index / (Float)this->widthInTiles);
HXDLIN( 621)		Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 621)		HX_VARI( Int,row) = (_hx_tmp2 - (int)1);
HXLINE( 622)		HX_VARI( Int,rowLength) = (row + (int)3);
HXLINE( 623)		HX_VARI( Int,column) = (hx::Mod(Index,this->widthInTiles) - (int)1);
HXLINE( 624)		HX_VARI( Int,columnHeight) = (column + (int)3);
HXLINE( 626)		while((row < rowLength)){
HXLINE( 628)			column = (columnHeight - (int)3);
HXLINE( 630)			while((column < columnHeight)){
HXLINE( 632)				Bool _hx_tmp3;
HXDLIN( 632)				Bool _hx_tmp4;
HXDLIN( 632)				Bool _hx_tmp5;
HXDLIN( 632)				if ((row >= (int)0)) {
HXLINE( 632)					_hx_tmp5 = (row < this->heightInTiles);
            				}
            				else {
HXLINE( 632)					_hx_tmp5 = false;
            				}
HXDLIN( 632)				if (_hx_tmp5) {
HXLINE( 632)					_hx_tmp4 = (column >= (int)0);
            				}
            				else {
HXLINE( 632)					_hx_tmp4 = false;
            				}
HXDLIN( 632)				if (_hx_tmp4) {
HXLINE( 632)					_hx_tmp3 = (column < this->widthInTiles);
            				}
            				else {
HXLINE( 632)					_hx_tmp3 = false;
            				}
HXDLIN( 632)				if (_hx_tmp3) {
HXLINE( 634)					i = ((row * this->widthInTiles) + column);
HXLINE( 635)					this->autoTile(i);
HXLINE( 636)					Int _hx_tmp6 = this->_data->__get(i);
HXDLIN( 636)					this->updateTile(_hx_tmp6);
            				}
HXLINE( 638)				++column;
            			}
HXLINE( 640)			++row;
            		}
HXLINE( 643)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBaseTilemap_obj,setTileByIndex,return )

void FlxBaseTilemap_obj::setTileProperties(Int Tile,hx::Null< Int >  __o_AllowCollisions, ::Dynamic Callback,hx::Class CallbackFilter,hx::Null< Int >  __o_Range){
Int AllowCollisions = __o_AllowCollisions.Default(4369);
Int Range = __o_Range.Default(1);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","setTileProperties",0x2905d56e,"flixel.tile.FlxBaseTilemap.setTileProperties","flixel/tile/FlxBaseTilemap.hx",657,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Tile,"Tile")
            	HX_STACK_ARG(AllowCollisions,"AllowCollisions")
            	HX_STACK_ARG(Callback,"Callback")
            	HX_STACK_ARG(CallbackFilter,"CallbackFilter")
            	HX_STACK_ARG(Range,"Range")
HXLINE( 658)		Bool _hx_tmp = (Range <= (int)0);
HXDLIN( 658)		if (_hx_tmp) {
HXLINE( 660)			Range = (int)1;
            		}
HXLINE( 663)		HX_VAR(  ::Dynamic,tile);
HXLINE( 664)		HX_VARI( Int,i) = Tile;
HXLINE( 665)		HX_VARI( Int,l) = (Tile + Range);
HXLINE( 667)		HX_VARI( Int,maxIndex) = this->_tileObjects->get_length();
HXLINE( 668)		if ((l > maxIndex)) {
HXLINE( 670)			HX_STACK_DO_THROW(((((((((HX_("Index ",ee,88,87,c8) + l) + HX_(" exceeds the maximum tile index of ",d9,51,06,f4)) + maxIndex) + HX_(". Please verfiy the Tile (",ee,52,a5,6c)) + Tile) + HX_(") and Range (",25,ce,96,19)) + Range) + HX_(") parameters.",cd,e3,29,61)));
            		}
HXLINE( 673)		while((i < l)){
HXLINE( 675)			Int _hx_tmp1 = i++;
HXDLIN( 675)			tile = this->_tileObjects->__get(_hx_tmp1);
HXLINE( 676)			( ( ::flixel::FlxObject)(tile) )->set_allowCollisions(AllowCollisions);
HXLINE( 677)			tile->__SetField(HX_("callbackFunction",fd,cd,91,7e),Callback,hx::paccDynamic);
HXLINE( 678)			tile->__SetField(HX_("filter",b8,1f,35,85),CallbackFilter,hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,setTileProperties,(void))

::Array< Int > FlxBaseTilemap_obj::getData(hx::Null< Bool >  __o_Simple){
Bool Simple = __o_Simple.Default(false);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","getData",0x355f9f8b,"flixel.tile.FlxBaseTilemap.getData","flixel/tile/FlxBaseTilemap.hx",690,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Simple,"Simple")
HXLINE( 691)		if (!(Simple)) {
HXLINE( 693)			return this->_data;
            		}
HXLINE( 696)		HX_VARI( Int,i) = (int)0;
HXLINE( 697)		HX_VARI( Int,l) = this->_data->length;
HXLINE( 698)		HX_VARI( ::Array< Int >,data) = ::Array_obj< Int >::__new();
HXLINE( 699)		::flixel::util::FlxArrayUtil_obj::setLength_Int(data,l);
HXLINE( 701)		while((i < l)){
HXLINE( 703)			Int _hx_tmp;
HXDLIN( 703)			if ((( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(i))) )->allowCollisions > (int)0)) {
HXLINE( 703)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE( 703)				_hx_tmp = (int)0;
            			}
HXDLIN( 703)			data[i] = _hx_tmp;
HXLINE( 704)			++i;
            		}
HXLINE( 707)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getData,return )

::Array< ::Dynamic> FlxBaseTilemap_obj::findPath( ::flixel::math::FlxPoint Start, ::flixel::math::FlxPoint End,hx::Null< Bool >  __o_Simplify,hx::Null< Bool >  __o_RaySimplify,hx::Null< Int >  __o_DiagonalPolicy){
Bool Simplify = __o_Simplify.Default(true);
Bool RaySimplify = __o_RaySimplify.Default(false);
Int DiagonalPolicy = __o_DiagonalPolicy.Default(2);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","findPath",0xe6d2ce73,"flixel.tile.FlxBaseTilemap.findPath","flixel/tile/FlxBaseTilemap.hx",722,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Start,"Start")
            	HX_STACK_ARG(End,"End")
            	HX_STACK_ARG(Simplify,"Simplify")
            	HX_STACK_ARG(RaySimplify,"RaySimplify")
            	HX_STACK_ARG(DiagonalPolicy,"DiagonalPolicy")
HXLINE( 724)		HX_VARI( Int,startIndex) = this->getTileIndexByCoords(Start);
HXLINE( 725)		HX_VARI( Int,endIndex) = this->getTileIndexByCoords(End);
HXLINE( 728)		Bool _hx_tmp;
HXDLIN( 728)		if ((( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(startIndex))) )->allowCollisions <= (int)0)) {
HXLINE( 728)			_hx_tmp = (( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(endIndex))) )->allowCollisions > (int)0);
            		}
            		else {
HXLINE( 728)			_hx_tmp = true;
            		}
HXDLIN( 728)		if (_hx_tmp) {
HXLINE( 730)			return null();
            		}
HXLINE( 734)		HX_VARI( ::Array< Int >,distances) = this->computePathDistance(startIndex,endIndex,DiagonalPolicy,null());
HXLINE( 736)		Bool _hx_tmp1 = hx::IsNull( distances );
HXDLIN( 736)		if (_hx_tmp1) {
HXLINE( 738)			return null();
            		}
HXLINE( 742)		HX_VARI( ::Array< ::Dynamic>,points) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 743)		this->walkPath(distances,endIndex,points);
HXLINE( 746)		HX_VARI(  ::flixel::math::FlxPoint,node) = points->__get((points->length - (int)1)).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 748)		{
HXLINE( 748)			node->set_x(Start->x);
HXDLIN( 748)			node->set_y(Start->y);
HXDLIN( 748)			Bool _hx_tmp2 = Start->_weak;
HXDLIN( 748)			if (_hx_tmp2) {
HXLINE( 748)				Start->put();
            			}
            		}
HXLINE( 749)		node = points->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 750)		{
HXLINE( 750)			node->set_x(End->x);
HXDLIN( 750)			node->set_y(End->y);
HXDLIN( 750)			Bool _hx_tmp3 = End->_weak;
HXDLIN( 750)			if (_hx_tmp3) {
HXLINE( 750)				End->put();
            			}
            		}
HXLINE( 753)		if (Simplify) {
HXLINE( 755)			this->simplifyPath(points);
            		}
HXLINE( 757)		if (RaySimplify) {
HXLINE( 759)			this->raySimplifyPath(points);
            		}
HXLINE( 763)		HX_VARI( ::Array< ::Dynamic>,path) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 764)		HX_VARI( Int,i) = (points->length - (int)1);
HXLINE( 766)		while((i >= (int)0)){
HXLINE( 768)			Int _hx_tmp4 = i--;
HXDLIN( 768)			node = points->__get(_hx_tmp4).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 770)			Bool _hx_tmp5 = hx::IsNotNull( node );
HXDLIN( 770)			if (_hx_tmp5) {
HXLINE( 772)				path->push(node);
            			}
            		}
HXLINE( 776)		return path;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,findPath,return )

::Array< Int > FlxBaseTilemap_obj::computePathDistance(Int StartIndex,Int EndIndex,Int DiagonalPolicy,hx::Null< Bool >  __o_StopOnEnd){
Bool StopOnEnd = __o_StopOnEnd.Default(true);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","computePathDistance",0x34e53a3c,"flixel.tile.FlxBaseTilemap.computePathDistance","flixel/tile/FlxBaseTilemap.hx",790,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(StartIndex,"StartIndex")
            	HX_STACK_ARG(EndIndex,"EndIndex")
            	HX_STACK_ARG(DiagonalPolicy,"DiagonalPolicy")
            	HX_STACK_ARG(StopOnEnd,"StopOnEnd")
HXLINE( 793)		HX_VARI( Int,mapSize) = (this->widthInTiles * this->heightInTiles);
HXLINE( 794)		HX_VARI( ::Array< Int >,distances) = ::Array_obj< Int >::__new();
HXLINE( 795)		::flixel::util::FlxArrayUtil_obj::setLength_Int(distances,mapSize);
HXLINE( 796)		HX_VARI( Int,i) = (int)0;
HXLINE( 798)		while((i < mapSize)){
HXLINE( 800)			Bool _hx_tmp = (( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(i))) )->allowCollisions != (int)0);
HXDLIN( 800)			if (_hx_tmp) {
HXLINE( 802)				distances[i] = (int)-2;
            			}
            			else {
HXLINE( 806)				distances[i] = (int)-1;
            			}
HXLINE( 808)			++i;
            		}
HXLINE( 811)		distances[StartIndex] = (int)0;
HXLINE( 812)		HX_VARI( Int,distance) = (int)1;
HXLINE( 813)		HX_VARI( ::Array< Int >,neighbors) = ::Array_obj< Int >::__new(1)->init(0,StartIndex);
HXLINE( 814)		HX_VAR( ::Array< Int >,current);
HXLINE( 815)		HX_VAR( Int,currentIndex);
HXLINE( 816)		HX_VAR( Bool,left);
HXLINE( 817)		HX_VAR( Bool,right);
HXLINE( 818)		HX_VAR( Bool,up);
HXLINE( 819)		HX_VAR( Bool,down);
HXLINE( 820)		HX_VAR( Int,currentLength);
HXLINE( 821)		HX_VARI( Bool,foundEnd) = false;
HXLINE( 823)		while((neighbors->length > (int)0)){
HXLINE( 825)			current = neighbors;
HXLINE( 826)			neighbors = ::Array_obj< Int >::__new();
HXLINE( 828)			i = (int)0;
HXLINE( 829)			currentLength = current->length;
HXLINE( 830)			while((i < currentLength)){
HXLINE( 832)				Int _hx_tmp1 = i++;
HXDLIN( 832)				currentIndex = current->__get(_hx_tmp1);
HXLINE( 834)				Int _hx_tmp2 = ::Std_obj::_hx_int(EndIndex);
HXDLIN( 834)				if ((currentIndex == _hx_tmp2)) {
HXLINE( 836)					foundEnd = true;
HXLINE( 837)					if (StopOnEnd) {
HXLINE( 839)						neighbors = ::Array_obj< Int >::__new(0);
HXLINE( 840)						goto _hx_goto_14;
            					}
            				}
HXLINE( 845)				left = (hx::Mod(currentIndex,this->widthInTiles) > (int)0);
HXLINE( 846)				right = (hx::Mod(currentIndex,this->widthInTiles) < (this->widthInTiles - (int)1));
HXLINE( 847)				up = (((Float)currentIndex / (Float)this->widthInTiles) > (int)0);
HXLINE( 848)				down = (((Float)currentIndex / (Float)this->widthInTiles) < (this->heightInTiles - (int)1));
HXLINE( 850)				HX_VAR( Int,index);
HXLINE( 852)				if (up) {
HXLINE( 854)					index = (currentIndex - this->widthInTiles);
HXLINE( 856)					Bool _hx_tmp3 = (distances->__get(index) == (int)-1);
HXDLIN( 856)					if (_hx_tmp3) {
HXLINE( 858)						distances[index] = distance;
HXLINE( 859)						neighbors->push(index);
            					}
            				}
HXLINE( 862)				if (right) {
HXLINE( 864)					index = (currentIndex + (int)1);
HXLINE( 866)					Bool _hx_tmp4 = (distances->__get(index) == (int)-1);
HXDLIN( 866)					if (_hx_tmp4) {
HXLINE( 868)						distances[index] = distance;
HXLINE( 869)						neighbors->push(index);
            					}
            				}
HXLINE( 872)				if (down) {
HXLINE( 874)					index = (currentIndex + this->widthInTiles);
HXLINE( 876)					Bool _hx_tmp5 = (distances->__get(index) == (int)-1);
HXDLIN( 876)					if (_hx_tmp5) {
HXLINE( 878)						distances[index] = distance;
HXLINE( 879)						neighbors->push(index);
            					}
            				}
HXLINE( 882)				if (left) {
HXLINE( 884)					index = (currentIndex - (int)1);
HXLINE( 886)					Bool _hx_tmp6 = (distances->__get(index) == (int)-1);
HXDLIN( 886)					if (_hx_tmp6) {
HXLINE( 888)						distances[index] = distance;
HXLINE( 889)						neighbors->push(index);
            					}
            				}
HXLINE( 893)				if ((DiagonalPolicy != (int)0)) {
HXLINE( 895)					HX_VARI( Bool,wideDiagonal) = (DiagonalPolicy == (int)2);
HXLINE( 896)					Bool _hx_tmp7;
HXDLIN( 896)					if (up) {
HXLINE( 896)						_hx_tmp7 = right;
            					}
            					else {
HXLINE( 896)						_hx_tmp7 = false;
            					}
HXDLIN( 896)					if (_hx_tmp7) {
HXLINE( 898)						index = ((currentIndex - this->widthInTiles) + (int)1);
HXLINE( 900)						Bool _hx_tmp8;
HXDLIN( 900)						Bool _hx_tmp9;
HXDLIN( 900)						Bool _hx_tmp10;
HXDLIN( 900)						if (wideDiagonal) {
HXLINE( 900)							_hx_tmp10 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 900)							_hx_tmp10 = false;
            						}
HXDLIN( 900)						if (_hx_tmp10) {
HXLINE( 900)							_hx_tmp9 = (distances->__get((currentIndex - this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 900)							_hx_tmp9 = false;
            						}
HXDLIN( 900)						if (_hx_tmp9) {
HXLINE( 900)							_hx_tmp8 = (distances->__get((currentIndex + (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 900)							_hx_tmp8 = false;
            						}
HXDLIN( 900)						if (_hx_tmp8) {
HXLINE( 904)							distances[index] = distance;
HXLINE( 905)							neighbors->push(index);
            						}
            						else {
HXLINE( 907)							Bool _hx_tmp11;
HXDLIN( 907)							if (!(wideDiagonal)) {
HXLINE( 907)								_hx_tmp11 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 907)								_hx_tmp11 = false;
            							}
HXDLIN( 907)							if (_hx_tmp11) {
HXLINE( 909)								distances[index] = distance;
HXLINE( 910)								neighbors->push(index);
            							}
            						}
            					}
HXLINE( 913)					Bool _hx_tmp12;
HXDLIN( 913)					if (right) {
HXLINE( 913)						_hx_tmp12 = down;
            					}
            					else {
HXLINE( 913)						_hx_tmp12 = false;
            					}
HXDLIN( 913)					if (_hx_tmp12) {
HXLINE( 915)						index = ((currentIndex + this->widthInTiles) + (int)1);
HXLINE( 917)						Bool _hx_tmp13;
HXDLIN( 917)						Bool _hx_tmp14;
HXDLIN( 917)						Bool _hx_tmp15;
HXDLIN( 917)						if (wideDiagonal) {
HXLINE( 917)							_hx_tmp15 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 917)							_hx_tmp15 = false;
            						}
HXDLIN( 917)						if (_hx_tmp15) {
HXLINE( 917)							_hx_tmp14 = (distances->__get((currentIndex + this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 917)							_hx_tmp14 = false;
            						}
HXDLIN( 917)						if (_hx_tmp14) {
HXLINE( 917)							_hx_tmp13 = (distances->__get((currentIndex + (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 917)							_hx_tmp13 = false;
            						}
HXDLIN( 917)						if (_hx_tmp13) {
HXLINE( 921)							distances[index] = distance;
HXLINE( 922)							neighbors->push(index);
            						}
            						else {
HXLINE( 924)							Bool _hx_tmp16;
HXDLIN( 924)							if (!(wideDiagonal)) {
HXLINE( 924)								_hx_tmp16 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 924)								_hx_tmp16 = false;
            							}
HXDLIN( 924)							if (_hx_tmp16) {
HXLINE( 926)								distances[index] = distance;
HXLINE( 927)								neighbors->push(index);
            							}
            						}
            					}
HXLINE( 930)					Bool _hx_tmp17;
HXDLIN( 930)					if (left) {
HXLINE( 930)						_hx_tmp17 = down;
            					}
            					else {
HXLINE( 930)						_hx_tmp17 = false;
            					}
HXDLIN( 930)					if (_hx_tmp17) {
HXLINE( 932)						index = ((currentIndex + this->widthInTiles) - (int)1);
HXLINE( 934)						Bool _hx_tmp18;
HXDLIN( 934)						Bool _hx_tmp19;
HXDLIN( 934)						Bool _hx_tmp20;
HXDLIN( 934)						if (wideDiagonal) {
HXLINE( 934)							_hx_tmp20 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 934)							_hx_tmp20 = false;
            						}
HXDLIN( 934)						if (_hx_tmp20) {
HXLINE( 934)							_hx_tmp19 = (distances->__get((currentIndex + this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 934)							_hx_tmp19 = false;
            						}
HXDLIN( 934)						if (_hx_tmp19) {
HXLINE( 934)							_hx_tmp18 = (distances->__get((currentIndex - (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 934)							_hx_tmp18 = false;
            						}
HXDLIN( 934)						if (_hx_tmp18) {
HXLINE( 938)							distances[index] = distance;
HXLINE( 939)							neighbors->push(index);
            						}
            						else {
HXLINE( 941)							Bool _hx_tmp21;
HXDLIN( 941)							if (!(wideDiagonal)) {
HXLINE( 941)								_hx_tmp21 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 941)								_hx_tmp21 = false;
            							}
HXDLIN( 941)							if (_hx_tmp21) {
HXLINE( 943)								distances[index] = distance;
HXLINE( 944)								neighbors->push(index);
            							}
            						}
            					}
HXLINE( 947)					Bool _hx_tmp22;
HXDLIN( 947)					if (up) {
HXLINE( 947)						_hx_tmp22 = left;
            					}
            					else {
HXLINE( 947)						_hx_tmp22 = false;
            					}
HXDLIN( 947)					if (_hx_tmp22) {
HXLINE( 949)						index = ((currentIndex - this->widthInTiles) - (int)1);
HXLINE( 951)						Bool _hx_tmp23;
HXDLIN( 951)						Bool _hx_tmp24;
HXDLIN( 951)						Bool _hx_tmp25;
HXDLIN( 951)						if (wideDiagonal) {
HXLINE( 951)							_hx_tmp25 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 951)							_hx_tmp25 = false;
            						}
HXDLIN( 951)						if (_hx_tmp25) {
HXLINE( 951)							_hx_tmp24 = (distances->__get((currentIndex - this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 951)							_hx_tmp24 = false;
            						}
HXDLIN( 951)						if (_hx_tmp24) {
HXLINE( 951)							_hx_tmp23 = (distances->__get((currentIndex - (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 951)							_hx_tmp23 = false;
            						}
HXDLIN( 951)						if (_hx_tmp23) {
HXLINE( 955)							distances[index] = distance;
HXLINE( 956)							neighbors->push(index);
            						}
            						else {
HXLINE( 958)							Bool _hx_tmp26;
HXDLIN( 958)							if (!(wideDiagonal)) {
HXLINE( 958)								_hx_tmp26 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 958)								_hx_tmp26 = false;
            							}
HXDLIN( 958)							if (_hx_tmp26) {
HXLINE( 960)								distances[index] = distance;
HXLINE( 961)								neighbors->push(index);
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_14:;
HXLINE( 967)			++distance;
            		}
HXLINE( 969)		if (!(foundEnd)) {
HXLINE( 971)			distances = null();
            		}
HXLINE( 974)		return distances;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,computePathDistance,return )

void FlxBaseTilemap_obj::walkPath(::Array< Int > Data,Int Start,::Array< ::Dynamic> Points){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","walkPath",0xa1980343,"flixel.tile.FlxBaseTilemap.walkPath","flixel/tile/FlxBaseTilemap.hx",985,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Data,"Data")
            	HX_STACK_ARG(Start,"Start")
            	HX_STACK_ARG(Points,"Points")
HXLINE( 986)		 ::flixel::math::FlxPoint _hx_tmp = this->getTileCoordsByIndex(Start,null());
HXDLIN( 986)		Points->push(_hx_tmp);
HXLINE( 988)		if ((Data->__get(Start) == (int)0)) {
HXLINE( 990)			return;
            		}
HXLINE( 994)		HX_VARI( Bool,left) = (hx::Mod(Start,this->widthInTiles) > (int)0);
HXLINE( 995)		HX_VARI( Bool,right) = (hx::Mod(Start,this->widthInTiles) < (this->widthInTiles - (int)1));
HXLINE( 996)		HX_VARI( Bool,up) = (((Float)Start / (Float)this->widthInTiles) > (int)0);
HXLINE( 997)		HX_VARI( Bool,down) = (((Float)Start / (Float)this->widthInTiles) < (this->heightInTiles - (int)1));
HXLINE( 999)		HX_VARI( Int,current) = Data->__get(Start);
HXLINE(1000)		HX_VAR( Int,i);
HXLINE(1002)		if (up) {
HXLINE(1004)			i = (Start - this->widthInTiles);
HXLINE(1006)			Bool _hx_tmp1;
HXDLIN(1006)			Bool _hx_tmp2;
HXDLIN(1006)			if ((i >= (int)0)) {
HXLINE(1006)				_hx_tmp2 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1006)				_hx_tmp2 = false;
            			}
HXDLIN(1006)			if (_hx_tmp2) {
HXLINE(1006)				_hx_tmp1 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1006)				_hx_tmp1 = false;
            			}
HXDLIN(1006)			if (_hx_tmp1) {
HXLINE(1008)				this->walkPath(Data,i,Points);
HXDLIN(1008)				return;
            			}
            		}
HXLINE(1011)		if (right) {
HXLINE(1013)			i = (Start + (int)1);
HXLINE(1015)			Bool _hx_tmp3;
HXDLIN(1015)			Bool _hx_tmp4;
HXDLIN(1015)			if ((i >= (int)0)) {
HXLINE(1015)				_hx_tmp4 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1015)				_hx_tmp4 = false;
            			}
HXDLIN(1015)			if (_hx_tmp4) {
HXLINE(1015)				_hx_tmp3 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1015)				_hx_tmp3 = false;
            			}
HXDLIN(1015)			if (_hx_tmp3) {
HXLINE(1017)				this->walkPath(Data,i,Points);
HXDLIN(1017)				return;
            			}
            		}
HXLINE(1020)		if (down) {
HXLINE(1022)			i = (Start + this->widthInTiles);
HXLINE(1024)			Bool _hx_tmp5;
HXDLIN(1024)			Bool _hx_tmp6;
HXDLIN(1024)			if ((i >= (int)0)) {
HXLINE(1024)				_hx_tmp6 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1024)				_hx_tmp6 = false;
            			}
HXDLIN(1024)			if (_hx_tmp6) {
HXLINE(1024)				_hx_tmp5 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1024)				_hx_tmp5 = false;
            			}
HXDLIN(1024)			if (_hx_tmp5) {
HXLINE(1026)				this->walkPath(Data,i,Points);
HXDLIN(1026)				return;
            			}
            		}
HXLINE(1029)		if (left) {
HXLINE(1031)			i = (Start - (int)1);
HXLINE(1033)			Bool _hx_tmp7;
HXDLIN(1033)			Bool _hx_tmp8;
HXDLIN(1033)			if ((i >= (int)0)) {
HXLINE(1033)				_hx_tmp8 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1033)				_hx_tmp8 = false;
            			}
HXDLIN(1033)			if (_hx_tmp8) {
HXLINE(1033)				_hx_tmp7 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1033)				_hx_tmp7 = false;
            			}
HXDLIN(1033)			if (_hx_tmp7) {
HXLINE(1035)				this->walkPath(Data,i,Points);
HXDLIN(1035)				return;
            			}
            		}
HXLINE(1038)		Bool _hx_tmp9;
HXDLIN(1038)		if (up) {
HXLINE(1038)			_hx_tmp9 = right;
            		}
            		else {
HXLINE(1038)			_hx_tmp9 = false;
            		}
HXDLIN(1038)		if (_hx_tmp9) {
HXLINE(1040)			i = ((Start - this->widthInTiles) + (int)1);
HXLINE(1042)			Bool _hx_tmp10;
HXDLIN(1042)			Bool _hx_tmp11;
HXDLIN(1042)			if ((i >= (int)0)) {
HXLINE(1042)				_hx_tmp11 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1042)				_hx_tmp11 = false;
            			}
HXDLIN(1042)			if (_hx_tmp11) {
HXLINE(1042)				_hx_tmp10 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1042)				_hx_tmp10 = false;
            			}
HXDLIN(1042)			if (_hx_tmp10) {
HXLINE(1044)				this->walkPath(Data,i,Points);
HXDLIN(1044)				return;
            			}
            		}
HXLINE(1047)		Bool _hx_tmp12;
HXDLIN(1047)		if (right) {
HXLINE(1047)			_hx_tmp12 = down;
            		}
            		else {
HXLINE(1047)			_hx_tmp12 = false;
            		}
HXDLIN(1047)		if (_hx_tmp12) {
HXLINE(1049)			i = ((Start + this->widthInTiles) + (int)1);
HXLINE(1051)			Bool _hx_tmp13;
HXDLIN(1051)			Bool _hx_tmp14;
HXDLIN(1051)			if ((i >= (int)0)) {
HXLINE(1051)				_hx_tmp14 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1051)				_hx_tmp14 = false;
            			}
HXDLIN(1051)			if (_hx_tmp14) {
HXLINE(1051)				_hx_tmp13 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1051)				_hx_tmp13 = false;
            			}
HXDLIN(1051)			if (_hx_tmp13) {
HXLINE(1053)				this->walkPath(Data,i,Points);
HXDLIN(1053)				return;
            			}
            		}
HXLINE(1056)		Bool _hx_tmp15;
HXDLIN(1056)		if (left) {
HXLINE(1056)			_hx_tmp15 = down;
            		}
            		else {
HXLINE(1056)			_hx_tmp15 = false;
            		}
HXDLIN(1056)		if (_hx_tmp15) {
HXLINE(1058)			i = ((Start + this->widthInTiles) - (int)1);
HXLINE(1060)			Bool _hx_tmp16;
HXDLIN(1060)			Bool _hx_tmp17;
HXDLIN(1060)			if ((i >= (int)0)) {
HXLINE(1060)				_hx_tmp17 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1060)				_hx_tmp17 = false;
            			}
HXDLIN(1060)			if (_hx_tmp17) {
HXLINE(1060)				_hx_tmp16 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1060)				_hx_tmp16 = false;
            			}
HXDLIN(1060)			if (_hx_tmp16) {
HXLINE(1062)				this->walkPath(Data,i,Points);
HXDLIN(1062)				return;
            			}
            		}
HXLINE(1065)		Bool _hx_tmp18;
HXDLIN(1065)		if (up) {
HXLINE(1065)			_hx_tmp18 = left;
            		}
            		else {
HXLINE(1065)			_hx_tmp18 = false;
            		}
HXDLIN(1065)		if (_hx_tmp18) {
HXLINE(1067)			i = ((Start - this->widthInTiles) - (int)1);
HXLINE(1069)			Bool _hx_tmp19;
HXDLIN(1069)			Bool _hx_tmp20;
HXDLIN(1069)			if ((i >= (int)0)) {
HXLINE(1069)				_hx_tmp20 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1069)				_hx_tmp20 = false;
            			}
HXDLIN(1069)			if (_hx_tmp20) {
HXLINE(1069)				_hx_tmp19 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1069)				_hx_tmp19 = false;
            			}
HXDLIN(1069)			if (_hx_tmp19) {
HXLINE(1071)				this->walkPath(Data,i,Points);
HXDLIN(1071)				return;
            			}
            		}
HXLINE(1075)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBaseTilemap_obj,walkPath,(void))

void FlxBaseTilemap_obj::simplifyPath(::Array< ::Dynamic> Points){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","simplifyPath",0xe8519bc3,"flixel.tile.FlxBaseTilemap.simplifyPath","flixel/tile/FlxBaseTilemap.hx",1084,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Points,"Points")
HXLINE(1085)		HX_VAR( Float,deltaPrevious);
HXLINE(1086)		HX_VAR( Float,deltaNext);
HXLINE(1087)		HX_VARI(  ::flixel::math::FlxPoint,last) = Points->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1088)		HX_VAR(  ::flixel::math::FlxPoint,node);
HXLINE(1089)		HX_VARI( Int,i) = (int)1;
HXLINE(1090)		HX_VARI( Int,l) = (Points->length - (int)1);
HXLINE(1092)		while((i < l)){
HXLINE(1094)			node = Points->__get(i).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1095)			deltaPrevious = ((Float)(node->x - last->x) / (Float)(node->y - last->y));
HXLINE(1096)			deltaNext = ((Float)(node->x - Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->x) / (Float)(node->y - Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->y));
HXLINE(1098)			Bool _hx_tmp;
HXDLIN(1098)			Bool _hx_tmp1;
HXDLIN(1098)			if ((last->x != Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->x)) {
HXLINE(1098)				_hx_tmp1 = (last->y == Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->y);
            			}
            			else {
HXLINE(1098)				_hx_tmp1 = true;
            			}
HXDLIN(1098)			if (!(_hx_tmp1)) {
HXLINE(1098)				_hx_tmp = (deltaPrevious == deltaNext);
            			}
            			else {
HXLINE(1098)				_hx_tmp = true;
            			}
HXDLIN(1098)			if (_hx_tmp) {
HXLINE(1100)				Points[i] = null();
            			}
            			else {
HXLINE(1104)				last = node;
            			}
HXLINE(1107)			++i;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,simplifyPath,(void))

void FlxBaseTilemap_obj::raySimplifyPath(::Array< ::Dynamic> Points){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","raySimplifyPath",0x32723703,"flixel.tile.FlxBaseTilemap.raySimplifyPath","flixel/tile/FlxBaseTilemap.hx",1117,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Points,"Points")
HXLINE(1118)		HX_VARI(  ::flixel::math::FlxPoint,source) = Points->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1119)		HX_VARI( Int,lastIndex) = (int)-1;
HXLINE(1120)		HX_VAR(  ::flixel::math::FlxPoint,node);
HXLINE(1121)		HX_VARI( Int,i) = (int)1;
HXLINE(1122)		HX_VARI( Int,l) = Points->length;
HXLINE(1124)		while((i < l)){
HXLINE(1126)			Int _hx_tmp = i++;
HXDLIN(1126)			node = Points->__get(_hx_tmp).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1128)			Bool _hx_tmp1 = hx::IsNull( node );
HXDLIN(1128)			if (_hx_tmp1) {
HXLINE(1130)				continue;
            			}
HXLINE(1133)			Bool _hx_tmp2 = this->ray(source,node,this->_point,null());
HXDLIN(1133)			if (_hx_tmp2) {
HXLINE(1135)				if ((lastIndex >= (int)0)) {
HXLINE(1137)					Points[lastIndex] = null();
            				}
            			}
            			else {
HXLINE(1142)				source = Points->__get(lastIndex).StaticCast<  ::flixel::math::FlxPoint >();
            			}
HXLINE(1145)			lastIndex = (i - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,raySimplifyPath,(void))

Bool FlxBaseTilemap_obj::overlaps( ::flixel::FlxBasic ObjectOrGroup,hx::Null< Bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","overlaps",0x8f17af01,"flixel.tile.FlxBaseTilemap.overlaps","flixel/tile/FlxBaseTilemap.hx",1161,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1162)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE(1163)		Bool _hx_tmp = hx::IsNotNull( group );
HXDLIN(1163)		if (_hx_tmp) {
HXLINE(1165)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->tilemapOverlapsCallback_dyn(),group,(int)0,(int)0,InScreenSpace,Camera);
            		}
            		else {
HXLINE(1167)			Bool _hx_tmp1;
HXDLIN(1167)			Bool _hx_tmp2;
HXDLIN(1167)			if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1167)				_hx_tmp2 = (ObjectOrGroup->flixelType == (int)3);
            			}
            			else {
HXLINE(1167)				_hx_tmp2 = true;
            			}
HXDLIN(1167)			if (_hx_tmp2) {
HXLINE(1167)				_hx_tmp1 = this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),null(),null());
            			}
            			else {
HXLINE(1167)				_hx_tmp1 = this->overlaps(ObjectOrGroup,false,null());
            			}
HXDLIN(1167)			if (_hx_tmp1) {
HXLINE(1169)				return true;
            			}
            		}
HXLINE(1171)		return false;
            	}


Bool FlxBaseTilemap_obj::tilemapOverlapsCallback( ::flixel::FlxBasic ObjectOrGroup,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","tilemapOverlapsCallback",0x40d17cea,"flixel.tile.FlxBaseTilemap.tilemapOverlapsCallback","flixel/tile/FlxBaseTilemap.hx",1176,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1176)		Bool _hx_tmp;
HXDLIN(1176)		if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1176)			_hx_tmp = (ObjectOrGroup->flixelType == (int)3);
            		}
            		else {
HXLINE(1176)			_hx_tmp = true;
            		}
HXDLIN(1176)		if (_hx_tmp) {
HXLINE(1178)			return this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),null(),null());
            		}
            		else {
HXLINE(1182)			return this->overlaps(ObjectOrGroup,InScreenSpace,Camera);
            		}
HXLINE(1176)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,tilemapOverlapsCallback,return )

Bool FlxBaseTilemap_obj::overlapsAt(Float X,Float Y, ::flixel::FlxBasic ObjectOrGroup,hx::Null< Bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","overlapsAt",0x47a26a54,"flixel.tile.FlxBaseTilemap.overlapsAt","flixel/tile/FlxBaseTilemap.hx",1200,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1201)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE(1202)		Bool _hx_tmp = hx::IsNotNull( group );
HXDLIN(1202)		if (_hx_tmp) {
HXLINE(1204)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->tilemapOverlapsAtCallback_dyn(),group,X,Y,InScreenSpace,Camera);
            		}
            		else {
HXLINE(1206)			Bool _hx_tmp1;
HXDLIN(1206)			Bool _hx_tmp2;
HXDLIN(1206)			if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1206)				_hx_tmp2 = (ObjectOrGroup->flixelType == (int)3);
            			}
            			else {
HXLINE(1206)				_hx_tmp2 = true;
            			}
HXDLIN(1206)			if (_hx_tmp2) {
HXLINE(1206)				 ::flixel::math::FlxPoint _hx_tmp3 = this->_point->set(X,Y);
HXDLIN(1206)				_hx_tmp1 = this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),false,_hx_tmp3);
            			}
            			else {
HXLINE(1206)				_hx_tmp1 = this->overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
            			}
HXDLIN(1206)			if (_hx_tmp1) {
HXLINE(1208)				return true;
            			}
            		}
HXLINE(1211)		return false;
            	}


Bool FlxBaseTilemap_obj::tilemapOverlapsAtCallback( ::flixel::FlxBasic ObjectOrGroup,Float X,Float Y,Bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","tilemapOverlapsAtCallback",0xbef90c3d,"flixel.tile.FlxBaseTilemap.tilemapOverlapsAtCallback","flixel/tile/FlxBaseTilemap.hx",1216,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1216)		Bool _hx_tmp;
HXDLIN(1216)		if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1216)			_hx_tmp = (ObjectOrGroup->flixelType == (int)3);
            		}
            		else {
HXLINE(1216)			_hx_tmp = true;
            		}
HXDLIN(1216)		if (_hx_tmp) {
HXLINE(1218)			 ::flixel::math::FlxPoint _hx_tmp1 = this->_point->set(X,Y);
HXDLIN(1218)			return this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),false,_hx_tmp1);
            		}
            		else {
HXLINE(1222)			return this->overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
            		}
HXLINE(1216)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,tilemapOverlapsAtCallback,return )

Bool FlxBaseTilemap_obj::overlapsPoint( ::flixel::math::FlxPoint WorldPoint,hx::Null< Bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","overlapsPoint",0x91c6718f,"flixel.tile.FlxBaseTilemap.overlapsPoint","flixel/tile/FlxBaseTilemap.hx",1235,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(WorldPoint,"WorldPoint")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1236)		if (!(InScreenSpace)) {
HXLINE(1237)			return this->tileAtPointAllowsCollisions(WorldPoint);
            		}
HXLINE(1239)		Bool _hx_tmp = hx::IsNull( Camera );
HXDLIN(1239)		if (_hx_tmp) {
HXLINE(1240)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE(1242)		WorldPoint->subtractPoint(Camera->scroll);
HXLINE(1243)		Bool _hx_tmp1 = WorldPoint->_weak;
HXDLIN(1243)		if (_hx_tmp1) {
HXLINE(1243)			WorldPoint->put();
            		}
HXLINE(1244)		return this->tileAtPointAllowsCollisions(WorldPoint);
            	}


Bool FlxBaseTilemap_obj::tileAtPointAllowsCollisions( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","tileAtPointAllowsCollisions",0x26e8ec45,"flixel.tile.FlxBaseTilemap.tileAtPointAllowsCollisions","flixel/tile/FlxBaseTilemap.hx",1248,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE(1249)		HX_VARI( Int,tileIndex) = this->getTileIndexByCoords(point);
HXLINE(1250)		Bool _hx_tmp;
HXDLIN(1250)		if ((tileIndex >= (int)0)) {
HXLINE(1250)			_hx_tmp = (tileIndex >= this->_data->length);
            		}
            		else {
HXLINE(1250)			_hx_tmp = true;
            		}
HXDLIN(1250)		if (_hx_tmp) {
HXLINE(1251)			return false;
            		}
HXLINE(1252)		return (( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(tileIndex))) )->allowCollisions > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,tileAtPointAllowsCollisions,return )

 ::flixel::math::FlxRect FlxBaseTilemap_obj::getBounds( ::flixel::math::FlxRect Bounds){
            	HX_STACK_FRAME("flixel.tile.FlxBaseTilemap","getBounds",0x47c7aa16,"flixel.tile.FlxBaseTilemap.getBounds","flixel/tile/FlxBaseTilemap.hx",1262,0x0139d8e5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Bounds,"Bounds")
HXLINE(1263)		Bool _hx_tmp = hx::IsNull( Bounds );
HXDLIN(1263)		if (_hx_tmp) {
HXLINE(1264)			Float X = (int)0;
HXDLIN(1264)			Float Y = (int)0;
HXDLIN(1264)			Float Width = (int)0;
HXDLIN(1264)			Float Height = (int)0;
HXDLIN(1264)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1264)			_this->x = X;
HXDLIN(1264)			_this->y = Y;
HXDLIN(1264)			_this->width = Width;
HXDLIN(1264)			_this->height = Height;
HXDLIN(1264)			_this->_inPool = false;
HXDLIN(1264)			Bounds = _this;
            		}
HXLINE(1266)		Float X1 = this->x;
HXDLIN(1266)		Float Y1 = this->y;
HXDLIN(1266)		Float Width1 = this->get_width();
HXDLIN(1266)		Float Height1 = this->get_height();
HXDLIN(1266)		Bounds->x = X1;
HXDLIN(1266)		Bounds->y = Y1;
HXDLIN(1266)		Bounds->width = Width1;
HXDLIN(1266)		Bounds->height = Height1;
HXDLIN(1266)		return Bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getBounds,return )


FlxBaseTilemap_obj::FlxBaseTilemap_obj()
{
}

void FlxBaseTilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxBaseTilemap);
	HX_MARK_MEMBER_NAME(_hx_auto,"auto");
	HX_MARK_MEMBER_NAME(widthInTiles,"widthInTiles");
	HX_MARK_MEMBER_NAME(heightInTiles,"heightInTiles");
	HX_MARK_MEMBER_NAME(totalTiles,"totalTiles");
	HX_MARK_MEMBER_NAME(customTileRemap,"customTileRemap");
	HX_MARK_MEMBER_NAME(_randomIndices,"_randomIndices");
	HX_MARK_MEMBER_NAME(_randomChoices,"_randomChoices");
	HX_MARK_MEMBER_NAME(_randomLambda,"_randomLambda");
	HX_MARK_MEMBER_NAME(_tileObjects,"_tileObjects");
	HX_MARK_MEMBER_NAME(_startingIndex,"_startingIndex");
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_MEMBER_NAME(_drawIndex,"_drawIndex");
	HX_MARK_MEMBER_NAME(_collideIndex,"_collideIndex");
	 ::flixel::FlxObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxBaseTilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx_auto,"auto");
	HX_VISIT_MEMBER_NAME(widthInTiles,"widthInTiles");
	HX_VISIT_MEMBER_NAME(heightInTiles,"heightInTiles");
	HX_VISIT_MEMBER_NAME(totalTiles,"totalTiles");
	HX_VISIT_MEMBER_NAME(customTileRemap,"customTileRemap");
	HX_VISIT_MEMBER_NAME(_randomIndices,"_randomIndices");
	HX_VISIT_MEMBER_NAME(_randomChoices,"_randomChoices");
	HX_VISIT_MEMBER_NAME(_randomLambda,"_randomLambda");
	HX_VISIT_MEMBER_NAME(_tileObjects,"_tileObjects");
	HX_VISIT_MEMBER_NAME(_startingIndex,"_startingIndex");
	HX_VISIT_MEMBER_NAME(_data,"_data");
	HX_VISIT_MEMBER_NAME(_drawIndex,"_drawIndex");
	HX_VISIT_MEMBER_NAME(_collideIndex,"_collideIndex");
	 ::flixel::FlxObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxBaseTilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { return hx::Val( ray_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"auto") ) { return hx::Val( _hx_auto); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { return hx::Val( _data); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"getTile") ) { return hx::Val( getTile_dyn()); }
		if (HX_FIELD_EQ(inName,"setTile") ) { return hx::Val( setTile_dyn()); }
		if (HX_FIELD_EQ(inName,"getData") ) { return hx::Val( getData_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setDirty") ) { return hx::Val( setDirty_dyn()); }
		if (HX_FIELD_EQ(inName,"autoTile") ) { return hx::Val( autoTile_dyn()); }
		if (HX_FIELD_EQ(inName,"findPath") ) { return hx::Val( findPath_dyn()); }
		if (HX_FIELD_EQ(inName,"walkPath") ) { return hx::Val( walkPath_dyn()); }
		if (HX_FIELD_EQ(inName,"overlaps") ) { return hx::Val( overlaps_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateMap") ) { return hx::Val( updateMap_dyn()); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalTiles") ) { return hx::Val( totalTiles); }
		if (HX_FIELD_EQ(inName,"_drawIndex") ) { return hx::Val( _drawIndex); }
		if (HX_FIELD_EQ(inName,"updateTile") ) { return hx::Val( updateTile_dyn()); }
		if (HX_FIELD_EQ(inName,"overlapsAt") ) { return hx::Val( overlapsAt_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"widthInTiles") ) { return hx::Val( widthInTiles); }
		if (HX_FIELD_EQ(inName,"_tileObjects") ) { return hx::Val( _tileObjects); }
		if (HX_FIELD_EQ(inName,"simplifyPath") ) { return hx::Val( simplifyPath_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"heightInTiles") ) { return hx::Val( heightInTiles); }
		if (HX_FIELD_EQ(inName,"_randomLambda") ) { return hx::Val( _randomLambda); }
		if (HX_FIELD_EQ(inName,"_collideIndex") ) { return hx::Val( _collideIndex); }
		if (HX_FIELD_EQ(inName,"cacheGraphics") ) { return hx::Val( cacheGraphics_dyn()); }
		if (HX_FIELD_EQ(inName,"loadMapHelper") ) { return hx::Val( loadMapHelper_dyn()); }
		if (HX_FIELD_EQ(inName,"applyAutoTile") ) { return hx::Val( applyAutoTile_dyn()); }
		if (HX_FIELD_EQ(inName,"overlapsPoint") ) { return hx::Val( overlapsPoint_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_randomIndices") ) { return hx::Val( _randomIndices); }
		if (HX_FIELD_EQ(inName,"_randomChoices") ) { return hx::Val( _randomChoices); }
		if (HX_FIELD_EQ(inName,"_startingIndex") ) { return hx::Val( _startingIndex); }
		if (HX_FIELD_EQ(inName,"loadMapFromCSV") ) { return hx::Val( loadMapFromCSV_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileByIndex") ) { return hx::Val( getTileByIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"setTileByIndex") ) { return hx::Val( setTileByIndex_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"customTileRemap") ) { return hx::Val( customTileRemap); }
		if (HX_FIELD_EQ(inName,"initTileObjects") ) { return hx::Val( initTileObjects_dyn()); }
		if (HX_FIELD_EQ(inName,"postGraphicLoad") ) { return hx::Val( postGraphicLoad_dyn()); }
		if (HX_FIELD_EQ(inName,"raySimplifyPath") ) { return hx::Val( raySimplifyPath_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadMapFromArray") ) { return hx::Val( loadMapFromArray_dyn()); }
		if (HX_FIELD_EQ(inName,"applyCustomRemap") ) { return hx::Val( applyCustomRemap_dyn()); }
		if (HX_FIELD_EQ(inName,"randomizeIndices") ) { return hx::Val( randomizeIndices_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileInstances") ) { return hx::Val( getTileInstances_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"computeDimensions") ) { return hx::Val( computeDimensions_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileCollisions") ) { return hx::Val( getTileCollisions_dyn()); }
		if (HX_FIELD_EQ(inName,"setTileProperties") ) { return hx::Val( setTileProperties_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"loadMapFrom2DArray") ) { return hx::Val( loadMapFrom2DArray_dyn()); }
		if (HX_FIELD_EQ(inName,"loadMapFromGraphic") ) { return hx::Val( loadMapFromGraphic_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"computePathDistance") ) { return hx::Val( computePathDistance_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getTileIndexByCoords") ) { return hx::Val( getTileIndexByCoords_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileCoordsByIndex") ) { return hx::Val( getTileCoordsByIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"overlapsWithCallback") ) { return hx::Val( overlapsWithCallback_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setCustomTileMappings") ) { return hx::Val( setCustomTileMappings_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"tilemapOverlapsCallback") ) { return hx::Val( tilemapOverlapsCallback_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"tilemapOverlapsAtCallback") ) { return hx::Val( tilemapOverlapsAtCallback_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"tileAtPointAllowsCollisions") ) { return hx::Val( tileAtPointAllowsCollisions_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxBaseTilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"auto") ) { _hx_auto=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalTiles") ) { totalTiles=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_drawIndex") ) { _drawIndex=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"widthInTiles") ) { widthInTiles=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tileObjects") ) { _tileObjects=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"heightInTiles") ) { heightInTiles=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_randomLambda") ) { _randomLambda=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_collideIndex") ) { _collideIndex=inValue.Cast< Int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_randomIndices") ) { _randomIndices=inValue.Cast< ::Array< Int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_randomChoices") ) { _randomChoices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_startingIndex") ) { _startingIndex=inValue.Cast< Int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"customTileRemap") ) { customTileRemap=inValue.Cast< ::Array< Int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxBaseTilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40"));
	outFields->push(HX_HCSTRING("widthInTiles","\xfa","\xb1","\x71","\xd4"));
	outFields->push(HX_HCSTRING("heightInTiles","\x39","\xce","\x1a","\x97"));
	outFields->push(HX_HCSTRING("totalTiles","\x21","\xf3","\xd5","\x16"));
	outFields->push(HX_HCSTRING("customTileRemap","\xca","\x70","\xd3","\x8a"));
	outFields->push(HX_HCSTRING("_randomIndices","\xa5","\xd3","\x07","\x36"));
	outFields->push(HX_HCSTRING("_randomChoices","\x70","\x42","\xcb","\x2b"));
	outFields->push(HX_HCSTRING("_tileObjects","\x47","\x55","\xbd","\x87"));
	outFields->push(HX_HCSTRING("_startingIndex","\x73","\xa1","\x49","\x3d"));
	outFields->push(HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"));
	outFields->push(HX_HCSTRING("_drawIndex","\x2f","\x4c","\xc2","\xe1"));
	outFields->push(HX_HCSTRING("_collideIndex","\x93","\x05","\x8a","\xb4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxBaseTilemap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::tile::FlxTilemapAutoTiling*/ ,(int)offsetof(FlxBaseTilemap_obj,_hx_auto),HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,widthInTiles),HX_HCSTRING("widthInTiles","\xfa","\xb1","\x71","\xd4")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,heightInTiles),HX_HCSTRING("heightInTiles","\x39","\xce","\x1a","\x97")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,totalTiles),HX_HCSTRING("totalTiles","\x21","\xf3","\xd5","\x16")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxBaseTilemap_obj,customTileRemap),HX_HCSTRING("customTileRemap","\xca","\x70","\xd3","\x8a")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxBaseTilemap_obj,_randomIndices),HX_HCSTRING("_randomIndices","\xa5","\xd3","\x07","\x36")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxBaseTilemap_obj,_randomChoices),HX_HCSTRING("_randomChoices","\x70","\x42","\xcb","\x2b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxBaseTilemap_obj,_randomLambda),HX_HCSTRING("_randomLambda","\x49","\x40","\x18","\x0b")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxBaseTilemap_obj,_tileObjects),HX_HCSTRING("_tileObjects","\x47","\x55","\xbd","\x87")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,_startingIndex),HX_HCSTRING("_startingIndex","\x73","\xa1","\x49","\x3d")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxBaseTilemap_obj,_data),HX_HCSTRING("_data","\x09","\x72","\x74","\xf5")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,_drawIndex),HX_HCSTRING("_drawIndex","\x2f","\x4c","\xc2","\xe1")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,_collideIndex),HX_HCSTRING("_collideIndex","\x93","\x05","\x8a","\xb4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxBaseTilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxBaseTilemap_obj_sMemberFields[] = {
	HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40"),
	HX_HCSTRING("widthInTiles","\xfa","\xb1","\x71","\xd4"),
	HX_HCSTRING("heightInTiles","\x39","\xce","\x1a","\x97"),
	HX_HCSTRING("totalTiles","\x21","\xf3","\xd5","\x16"),
	HX_HCSTRING("customTileRemap","\xca","\x70","\xd3","\x8a"),
	HX_HCSTRING("_randomIndices","\xa5","\xd3","\x07","\x36"),
	HX_HCSTRING("_randomChoices","\x70","\x42","\xcb","\x2b"),
	HX_HCSTRING("_randomLambda","\x49","\x40","\x18","\x0b"),
	HX_HCSTRING("_tileObjects","\x47","\x55","\xbd","\x87"),
	HX_HCSTRING("_startingIndex","\x73","\xa1","\x49","\x3d"),
	HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"),
	HX_HCSTRING("_drawIndex","\x2f","\x4c","\xc2","\xe1"),
	HX_HCSTRING("_collideIndex","\x93","\x05","\x8a","\xb4"),
	HX_HCSTRING("updateTile","\xd7","\xb5","\xb1","\x05"),
	HX_HCSTRING("cacheGraphics","\x2d","\x61","\x95","\xfc"),
	HX_HCSTRING("initTileObjects","\x16","\xbe","\x45","\x2e"),
	HX_HCSTRING("updateMap","\x13","\xe8","\xdf","\x82"),
	HX_HCSTRING("computeDimensions","\xa4","\xa4","\xeb","\xf3"),
	HX_HCSTRING("getTileIndexByCoords","\x03","\x79","\x8b","\x76"),
	HX_HCSTRING("getTileCoordsByIndex","\xb9","\x63","\x25","\xa1"),
	HX_HCSTRING("ray","\xea","\xd5","\x56","\x00"),
	HX_HCSTRING("overlapsWithCallback","\x17","\xc3","\x72","\xa8"),
	HX_HCSTRING("setDirty","\x10","\xb9","\x04","\xe8"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("loadMapFromCSV","\x06","\x2b","\x38","\x8f"),
	HX_HCSTRING("loadMapFromArray","\xd9","\x80","\xa3","\xdb"),
	HX_HCSTRING("loadMapFrom2DArray","\xc7","\xd3","\x90","\xac"),
	HX_HCSTRING("loadMapFromGraphic","\xe8","\xbd","\xb6","\xe5"),
	HX_HCSTRING("loadMapHelper","\x24","\xaa","\x93","\x69"),
	HX_HCSTRING("postGraphicLoad","\x6e","\x44","\x44","\x1d"),
	HX_HCSTRING("applyAutoTile","\xcb","\x19","\x58","\x70"),
	HX_HCSTRING("applyCustomRemap","\x8a","\x6c","\x0c","\xb4"),
	HX_HCSTRING("randomizeIndices","\xf6","\x8d","\x4c","\x14"),
	HX_HCSTRING("autoTile","\x3d","\xba","\x22","\x30"),
	HX_HCSTRING("setCustomTileMappings","\x86","\x00","\x11","\x09"),
	HX_HCSTRING("getTile","\xe4","\x7a","\x7f","\x1f"),
	HX_HCSTRING("getTileByIndex","\x37","\xbb","\xaa","\xc4"),
	HX_HCSTRING("getTileCollisions","\xc5","\x3f","\x3d","\xc8"),
	HX_HCSTRING("getTileInstances","\xba","\x6b","\x01","\x25"),
	HX_HCSTRING("setTile","\xf0","\x0b","\x81","\x12"),
	HX_HCSTRING("setTileByIndex","\xab","\xa3","\xca","\xe4"),
	HX_HCSTRING("setTileProperties","\x03","\x58","\xa1","\x54"),
	HX_HCSTRING("getData","\xe0","\x05","\xe6","\x14"),
	HX_HCSTRING("findPath","\x7e","\xf2","\xe5","\x9c"),
	HX_HCSTRING("computePathDistance","\x11","\x4c","\x56","\x20"),
	HX_HCSTRING("walkPath","\x4e","\x27","\xab","\x57"),
	HX_HCSTRING("simplifyPath","\x4e","\x21","\x2f","\x66"),
	HX_HCSTRING("raySimplifyPath","\x58","\x7a","\xf6","\x41"),
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("tilemapOverlapsCallback","\x3f","\x9d","\xf8","\xac"),
	HX_HCSTRING("overlapsAt","\x1f","\xe7","\xce","\x03"),
	HX_HCSTRING("tilemapOverlapsAtCallback","\xd2","\xab","\x68","\xdb"),
	HX_HCSTRING("overlapsPoint","\xa4","\xc5","\xbd","\x35"),
	HX_HCSTRING("tileAtPointAllowsCollisions","\x1a","\x5b","\x2f","\xf6"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	::String(null()) };

static void FlxBaseTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxBaseTilemap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxBaseTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxBaseTilemap_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxBaseTilemap_obj::__mClass;

void FlxBaseTilemap_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tile.FlxBaseTilemap","\x19","\xd7","\xa6","\x6a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxBaseTilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxBaseTilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxBaseTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxBaseTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBaseTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBaseTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tile
