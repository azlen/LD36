// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTileblock
#include <flixel/tile/FlxTileblock.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

namespace flixel{
namespace tile{

void FlxTileblock_obj::__construct(Int X,Int Y,Int Width,Int Height){
            	HX_STACK_FRAME("flixel.tile.FlxTileblock","new",0x8f1d69cd,"flixel.tile.FlxTileblock.new","flixel/tile/FlxTileblock.hx",30,0xecdf1de3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE(  31)		super::__construct(X,Y,null());
HXLINE(  32)		this->makeGraphic(Width,Height,(int)0,true,null());
HXLINE(  33)		this->set_active(false);
HXLINE(  34)		this->set_immovable(true);
HXLINE(  35)		this->set_moves(false);
            	}

Dynamic FlxTileblock_obj::__CreateEmpty() { return new FlxTileblock_obj; }

hx::ObjectPtr< FlxTileblock_obj > FlxTileblock_obj::__new(Int X,Int Y,Int Width,Int Height)
{
	hx::ObjectPtr< FlxTileblock_obj > _hx_result = new FlxTileblock_obj();
	_hx_result->__construct(X,Y,Width,Height);
	return _hx_result;
}

Dynamic FlxTileblock_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTileblock_obj > _hx_result = new FlxTileblock_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

void FlxTileblock_obj::destroy(){
            	HX_STACK_FRAME("flixel.tile.FlxTileblock","destroy",0x5d3d80e7,"flixel.tile.FlxTileblock.destroy","flixel/tile/FlxTileblock.hx",39,0xecdf1de3)
            	HX_STACK_THIS(this)
HXLINE(  40)		this->tileSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->tileSprite)) );
HXLINE(  41)		this->super::destroy();
            	}


 ::flixel::tile::FlxTileblock FlxTileblock_obj::loadFrames( ::flixel::graphics::frames::FlxTileFrames tileFrames,hx::Null< Int >  __o_empties){
Int empties = __o_empties.Default(0);
            	HX_STACK_FRAME("flixel.tile.FlxTileblock","loadFrames",0xaeb6fc9f,"flixel.tile.FlxTileblock.loadFrames","flixel/tile/FlxTileblock.hx",52,0xecdf1de3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tileFrames,"tileFrames")
            	HX_STACK_ARG(empties,"empties")
HXLINE(  53)		Bool _hx_tmp = hx::IsNull( tileFrames );
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  55)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  59)		 ::flixel::FlxSprite _hx_tmp1;
HXDLIN(  59)		Bool _hx_tmp2 = hx::IsNull( this->tileSprite );
HXDLIN(  59)		if (_hx_tmp2) {
HXLINE(  59)			_hx_tmp1 =  ::flixel::FlxSprite_obj::__new(null(),null(),null());
            		}
            		else {
HXLINE(  59)			_hx_tmp1 = this->tileSprite;
            		}
HXDLIN(  59)		this->tileSprite = _hx_tmp1;
HXLINE(  60)		this->tileSprite->set_frames(tileFrames);
HXLINE(  61)		Float _hx_tmp3 = this->tileSprite->get_width();
HXDLIN(  61)		HX_VARI( Int,spriteWidth) = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE(  62)		Float _hx_tmp4 = this->tileSprite->get_height();
HXDLIN(  62)		HX_VARI( Int,spriteHeight) = ::Std_obj::_hx_int(_hx_tmp4);
HXLINE(  63)		HX_VARI( Int,total) = (this->tileSprite->numFrames + empties);
HXLINE(  66)		HX_VARI( Bool,regen) = false;
HXLINE(  68)		Float _hx_tmp5 = this->get_width();
HXDLIN(  68)		Float _hx_tmp6 = this->tileSprite->get_width();
HXDLIN(  68)		if ((hx::Mod(_hx_tmp5,_hx_tmp6) != (int)0)) {
HXLINE(  70)			Float _hx_tmp7 = this->get_width();
HXDLIN(  70)			Int _hx_tmp8 = ::Std_obj::_hx_int((((Float)_hx_tmp7 / (Float)spriteWidth) + (int)1));
HXDLIN(  70)			this->set_width((_hx_tmp8 * spriteWidth));
HXLINE(  71)			regen = true;
            		}
HXLINE(  74)		Float _hx_tmp9 = this->get_height();
HXDLIN(  74)		Float _hx_tmp10 = this->tileSprite->get_height();
HXDLIN(  74)		if ((hx::Mod(_hx_tmp9,_hx_tmp10) != (int)0)) {
HXLINE(  76)			Float _hx_tmp11 = this->get_height();
HXDLIN(  76)			Int _hx_tmp12 = ::Std_obj::_hx_int((((Float)_hx_tmp11 / (Float)spriteHeight) + (int)1));
HXDLIN(  76)			this->set_height((_hx_tmp12 * spriteHeight));
HXLINE(  77)			regen = true;
            		}
HXLINE(  80)		if (regen) {
HXLINE(  82)			Float _hx_tmp13 = this->get_width();
HXDLIN(  82)			Int _hx_tmp14 = ::Std_obj::_hx_int(_hx_tmp13);
HXDLIN(  82)			Float _hx_tmp15 = this->get_height();
HXDLIN(  82)			Int _hx_tmp16 = ::Std_obj::_hx_int(_hx_tmp15);
HXDLIN(  82)			this->makeGraphic(_hx_tmp14,_hx_tmp16,(int)0,true,null());
            		}
            		else {
HXLINE(  86)			::flixel::util::FlxSpriteUtil_obj::fill(hx::ObjectPtr<OBJ_>(this),(int)0);
            		}
HXLINE(  90)		HX_VARI( Int,row) = (int)0;
HXLINE(  91)		HX_VAR( Int,column);
HXLINE(  92)		HX_VAR( Int,destinationX);
HXLINE(  93)		HX_VARI( Int,destinationY) = (int)0;
HXLINE(  94)		Float _hx_tmp17 = this->get_width();
HXDLIN(  94)		HX_VARI( Int,widthInTiles) = ::Std_obj::_hx_int(((Float)_hx_tmp17 / (Float)spriteWidth));
HXLINE(  95)		Float _hx_tmp18 = this->get_height();
HXDLIN(  95)		HX_VARI( Int,heightInTiles) = ::Std_obj::_hx_int(((Float)_hx_tmp18 / (Float)spriteHeight));
HXLINE(  97)		while((row < heightInTiles)){
HXLINE(  99)			destinationX = (int)0;
HXLINE( 100)			column = (int)0;
HXLINE( 102)			while((column < widthInTiles)){
HXLINE( 104)				Float _hx_tmp19 = ::flixel::FlxG_obj::random->_hx_float(null(),null(),null());
HXDLIN( 104)				if (((_hx_tmp19 * total) > empties)) {
HXLINE( 106)					this->tileSprite->animation->randomFrame();
HXLINE( 107)					this->tileSprite->drawFrame(null());
HXLINE( 108)					this->stamp(this->tileSprite,destinationX,destinationY);
            				}
HXLINE( 111)				hx::AddEq(destinationX,spriteWidth);
HXLINE( 112)				++column;
            			}
HXLINE( 115)			hx::AddEq(destinationY,spriteHeight);
HXLINE( 116)			++row;
            		}
HXLINE( 119)		this->dirty = true;
HXLINE( 120)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTileblock_obj,loadFrames,return )

 ::flixel::tile::FlxTileblock FlxTileblock_obj::loadTiles( ::Dynamic TileGraphic,hx::Null< Int >  __o_TileWidth,hx::Null< Int >  __o_TileHeight,hx::Null< Int >  __o_Empties){
Int TileWidth = __o_TileWidth.Default(0);
Int TileHeight = __o_TileHeight.Default(0);
Int Empties = __o_Empties.Default(0);
            	HX_STACK_FRAME("flixel.tile.FlxTileblock","loadTiles",0x7f9232ac,"flixel.tile.FlxTileblock.loadTiles","flixel/tile/FlxTileblock.hx",133,0xecdf1de3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(Empties,"Empties")
HXLINE( 134)		Bool _hx_tmp = hx::IsNull( TileGraphic );
HXDLIN( 134)		if (_hx_tmp) {
HXLINE( 136)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 139)		HX_VARI(  ::flixel::graphics::FlxGraphic,graph) = ::flixel::FlxG_obj::bitmap->add(TileGraphic,null(),null());
HXLINE( 140)		Bool _hx_tmp1 = hx::IsNull( graph );
HXDLIN( 140)		if (_hx_tmp1) {
HXLINE( 142)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 145)		Bool _hx_tmp2 = (TileWidth == (int)0);
HXDLIN( 145)		if (_hx_tmp2) {
HXLINE( 147)			TileWidth = graph->height;
HXLINE( 148)			Bool _hx_tmp3 = (TileWidth > graph->width);
HXDLIN( 148)			if (_hx_tmp3) {
HXLINE( 148)				TileWidth = graph->width;
            			}
            			else {
HXLINE( 148)				TileWidth = TileWidth;
            			}
            		}
HXLINE( 151)		Bool _hx_tmp4 = (TileHeight == (int)0);
HXDLIN( 151)		if (_hx_tmp4) {
HXLINE( 153)			TileHeight = TileWidth;
HXLINE( 154)			Bool _hx_tmp5 = (TileHeight > graph->height);
HXDLIN( 154)			if (_hx_tmp5) {
HXLINE( 154)				TileHeight = graph->height;
            			}
            			else {
HXLINE( 154)				TileHeight = TileHeight;
            			}
            		}
HXLINE( 157)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(TileWidth,TileHeight);
HXDLIN( 157)		point->_inPool = false;
HXDLIN( 157)		HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,tileFrames) = ::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graph,point,null(),null());
HXLINE( 158)		return this->loadFrames(tileFrames,Empties);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTileblock_obj,loadTiles,return )

void FlxTileblock_obj::setTile(Int x,Int y,Int index){
            	HX_STACK_FRAME("flixel.tile.FlxTileblock","setTile",0x4b385fdd,"flixel.tile.FlxTileblock.setTile","flixel/tile/FlxTileblock.hx",162,0xecdf1de3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(index,"index")
HXLINE( 163)		this->tileSprite->animation->set_frameIndex(index);
HXLINE( 164)		Float _hx_tmp = this->tileSprite->get_width();
HXDLIN( 164)		Int _hx_tmp1 = ::Std_obj::_hx_int(_hx_tmp);
HXDLIN( 164)		Int _hx_tmp2 = (x * _hx_tmp1);
HXDLIN( 164)		Float _hx_tmp3 = this->tileSprite->get_height();
HXDLIN( 164)		Int _hx_tmp4 = ::Std_obj::_hx_int(_hx_tmp3);
HXDLIN( 164)		this->stamp(this->tileSprite,_hx_tmp2,(y * _hx_tmp4));
HXLINE( 165)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTileblock_obj,setTile,(void))


FlxTileblock_obj::FlxTileblock_obj()
{
}

void FlxTileblock_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTileblock);
	HX_MARK_MEMBER_NAME(tileSprite,"tileSprite");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTileblock_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tileSprite,"tileSprite");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTileblock_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"setTile") ) { return hx::Val( setTile_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadTiles") ) { return hx::Val( loadTiles_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileSprite") ) { return hx::Val( tileSprite); }
		if (HX_FIELD_EQ(inName,"loadFrames") ) { return hx::Val( loadFrames_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTileblock_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"tileSprite") ) { tileSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTileblock_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tileSprite","\xd3","\xb1","\x2c","\x28"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTileblock_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxTileblock_obj,tileSprite),HX_HCSTRING("tileSprite","\xd3","\xb1","\x2c","\x28")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTileblock_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTileblock_obj_sMemberFields[] = {
	HX_HCSTRING("tileSprite","\xd3","\xb1","\x2c","\x28"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("loadFrames","\x6c","\xde","\xb0","\x61"),
	HX_HCSTRING("loadTiles","\x7f","\x49","\x6c","\x2b"),
	HX_HCSTRING("setTile","\xf0","\x0b","\x81","\x12"),
	::String(null()) };

static void FlxTileblock_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTileblock_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTileblock_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTileblock_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTileblock_obj::__mClass;

void FlxTileblock_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tile.FlxTileblock","\x5b","\x7f","\xbf","\xdb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTileblock_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTileblock_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTileblock_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTileblock_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTileblock_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTileblock_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tile
