// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawItemType
#include <flixel/graphics/tile/FlxDrawItemType.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawTilesItem
#include <flixel/graphics/tile/FlxDrawTilesItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawTrianglesItem
#include <flixel/graphics/tile/FlxDrawTrianglesItem.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Bitmap
#include <openfl/_legacy/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Graphics
#include <openfl/_legacy/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_PixelSnapping
#include <openfl/_legacy/display/PixelSnapping.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_TriangleCulling
#include <openfl/_legacy/display/TriangleCulling.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Transform
#include <openfl/_legacy/geom/Transform.h>
#endif

namespace flixel{

void FlxCamera_obj::__construct(hx::Null< Int >  __o_X,hx::Null< Int >  __o_Y,hx::Null< Int >  __o_Width,hx::Null< Int >  __o_Height,hx::Null< Float >  __o_Zoom){
Int X = __o_X.Default(0);
Int Y = __o_Y.Default(0);
Int Width = __o_Width.Default(0);
Int Height = __o_Height.Default(0);
Float Zoom = __o_Zoom.Default(0);
            	HX_STACK_FRAME("flixel.FlxCamera","new",0x0e8a9f77,"flixel.FlxCamera.new","flixel/FlxCamera.hx",42,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(Zoom,"Zoom")
HXLINE( 393)		this->_helperMatrix =  ::flixel::math::FlxMatrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 370)		Float X1 = (int)0;
HXDLIN( 370)		Float Y1 = (int)0;
HXDLIN( 370)		Float Width1 = (int)0;
HXDLIN( 370)		Float Height1 = (int)0;
HXDLIN( 370)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 370)		_this->x = X1;
HXDLIN( 370)		_this->y = Y1;
HXDLIN( 370)		_this->width = Width1;
HXDLIN( 370)		_this->height = Height1;
HXDLIN( 370)		_this->_inPool = false;
HXDLIN( 370)		this->_bounds = _this;
HXLINE( 365)		this->_scrollRect =  ::openfl::_legacy::display::Sprite_obj::__new();
HXLINE( 345)		this->initialZoom = ((Float)1);
HXLINE( 336)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 336)		point->_inPool = false;
HXDLIN( 336)		this->_point = point;
HXLINE( 332)		this->_fxShakeAxes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXLINE( 328)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 328)		point1->_inPool = false;
HXDLIN( 328)		this->_fxShakeOffset = point1;
HXLINE( 318)		this->_fxShakeDuration = ((Float)0);
HXLINE( 313)		this->_fxShakeIntensity = ((Float)0);
HXLINE( 308)		this->_fxFadeAlpha = ((Float)0);
HXLINE( 303)		this->_fxFadeCompleted = true;
HXLINE( 299)		this->_fxFadeComplete = null();
HXLINE( 294)		this->_fxFadeIn = false;
HXLINE( 288)		this->_fxFadeDuration = ((Float)0);
HXLINE( 283)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 283)		point2->_inPool = false;
HXDLIN( 283)		this->_scrollTarget = point2;
HXLINE( 275)		this->_fxFadeColor = (int)0;
HXLINE( 271)		this->_fxFlashAlpha = ((Float)0);
HXLINE( 267)		this->_fxFlashComplete = null();
HXLINE( 262)		this->_fxFlashDuration = ((Float)0);
HXLINE( 257)		this->_fxFlashColor = (int)0;
HXLINE( 252)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 252)		point3->_inPool = false;
HXDLIN( 252)		this->_flashOffset = point3;
HXLINE( 244)		this->_flashPoint =  ::openfl::_legacy::geom::Point_obj::__new(null(),null());
HXLINE( 231)		this->filtersEnabled = true;
HXLINE( 227)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point4,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 227)		point4->_inPool = false;
HXDLIN( 227)		this->followLead = point4;
HXLINE( 223)		this->antialiasing = false;
HXLINE( 218)		this->color = (int)-1;
HXLINE( 213)		this->angle = ((Float)0);
HXLINE( 208)		this->alpha = ((Float)1);
HXLINE( 199)		this->height = (int)0;
HXLINE( 195)		this->width = (int)0;
HXLINE( 182)		this->flashSprite =  ::openfl::_legacy::display::Sprite_obj::__new();
HXLINE( 173)		this->useBgAlphaBlending = false;
HXLINE( 145)		this->regen = false;
HXLINE( 135)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point5,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 135)		point5->_inPool = false;
HXDLIN( 135)		this->scroll = point5;
HXLINE( 106)		this->followLerp = ((Float)(int)60 / (Float)::flixel::FlxG_obj::updateFramerate);
HXLINE( 100)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point6,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 100)		point6->_inPool = false;
HXDLIN( 100)		this->targetOffset = point6;
HXLINE(  66)		this->y = ((Float)0);
HXLINE(  60)		this->x = ((Float)0);
HXLINE( 739)		super::__construct();
HXLINE( 741)		this->set_x(X);
HXLINE( 742)		this->set_y(Y);
HXLINE( 745)		Int _hx_tmp;
HXDLIN( 745)		if ((Width <= (int)0)) {
HXLINE( 745)			_hx_tmp = ::flixel::FlxG_obj::width;
            		}
            		else {
HXLINE( 745)			_hx_tmp = Width;
            		}
HXDLIN( 745)		this->set_width(_hx_tmp);
HXLINE( 746)		Int _hx_tmp1;
HXDLIN( 746)		if ((Height <= (int)0)) {
HXLINE( 746)			_hx_tmp1 = ::flixel::FlxG_obj::height;
            		}
            		else {
HXLINE( 746)			_hx_tmp1 = Height;
            		}
HXDLIN( 746)		this->set_height(_hx_tmp1);
HXLINE( 747)		this->_flashRect =  ::openfl::_legacy::geom::Rectangle_obj::__new((int)0,(int)0,this->width,this->height);
HXLINE( 749)		this->flashSprite->addChild(this->_scrollRect);
HXLINE( 750)		this->_scrollRect->set_scrollRect( ::openfl::_legacy::geom::Rectangle_obj::__new(null(),null(),null(),null()));
HXLINE( 752)		this->pixelPerfectRender = ::flixel::FlxG_obj::renderBlit;
HXLINE( 754)		Bool _hx_tmp2 = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 754)		if (_hx_tmp2) {
HXLINE( 756)			this->screen =  ::flixel::FlxSprite_obj::__new(null(),null(),null());
HXLINE( 757)			this->buffer =  ::openfl::_legacy::display::BitmapData_obj::__new(this->width,this->height,true,(int)0,null());
HXLINE( 758)			this->screen->set_pixels(this->buffer);
HXLINE( 759)			this->screen->origin->set(null(),null());
HXLINE( 760)			this->_flashBitmap =  ::openfl::_legacy::display::Bitmap_obj::__new(this->buffer,null(),null());
HXLINE( 761)			this->_scrollRect->addChild(this->_flashBitmap);
HXLINE( 762)			this->_fill =  ::openfl::_legacy::display::BitmapData_obj::__new(this->width,this->height,true,(int)0,null());
            		}
            		else {
HXLINE( 766)			this->canvas =  ::openfl::_legacy::display::Sprite_obj::__new();
HXLINE( 767)			this->_scrollRect->addChild(this->canvas);
HXLINE( 768)			this->_transform =  ::openfl::_legacy::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXLINE( 776)		this->set_color((int)-1);
HXLINE( 778)		this->set_zoom(Zoom);
HXLINE( 779)		this->initialZoom = this->zoom;
HXLINE( 781)		this->updateScrollRect();
HXLINE( 782)		this->updateFlashOffset();
HXLINE( 783)		this->updateFlashSpritePosition();
HXLINE( 784)		this->updateInternalSpritePositions();
HXLINE( 786)		this->bgColor = ::flixel::FlxG_obj::cameras->get_bgColor();
            	}

Dynamic FlxCamera_obj::__CreateEmpty() { return new FlxCamera_obj; }

hx::ObjectPtr< FlxCamera_obj > FlxCamera_obj::__new(hx::Null< Int >  __o_X,hx::Null< Int >  __o_Y,hx::Null< Int >  __o_Width,hx::Null< Int >  __o_Height,hx::Null< Float >  __o_Zoom)
{
	hx::ObjectPtr< FlxCamera_obj > _hx_result = new FlxCamera_obj();
	_hx_result->__construct(__o_X,__o_Y,__o_Width,__o_Height,__o_Zoom);
	return _hx_result;
}

Dynamic FlxCamera_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxCamera_obj > _hx_result = new FlxCamera_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

 ::flixel::graphics::tile::FlxDrawTilesItem FlxCamera_obj::startQuadBatch( ::flixel::graphics::FlxGraphic graphic,Bool colored,hx::Null< Bool >  __o_hasColorOffsets,::hx::EnumBase blend,hx::Null< Bool >  __o_smooth, ::Dynamic shader){
Bool hasColorOffsets = __o_hasColorOffsets.Default(false);
Bool smooth = __o_smooth.Default(false);
            	HX_STACK_FRAME("flixel.FlxCamera","startQuadBatch",0xe17326fa,"flixel.FlxCamera.startQuadBatch","flixel/FlxCamera.hx",440,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(graphic,"graphic")
            	HX_STACK_ARG(colored,"colored")
            	HX_STACK_ARG(hasColorOffsets,"hasColorOffsets")
            	HX_STACK_ARG(blend,"blend")
            	HX_STACK_ARG(smooth,"smooth")
            	HX_STACK_ARG(shader,"shader")
HXLINE( 444)		HX_VARI(  ::flixel::graphics::tile::FlxDrawTilesItem,itemToReturn) = null();
HXLINE( 445)		HX_VARI( Int,blendInt) = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 447)		Bool _hx_tmp;
HXDLIN( 447)		Bool _hx_tmp1;
HXDLIN( 447)		Bool _hx_tmp2;
HXDLIN( 447)		Bool _hx_tmp3;
HXDLIN( 447)		Bool _hx_tmp4;
HXDLIN( 447)		Bool _hx_tmp5;
HXDLIN( 447)		Bool _hx_tmp6;
HXDLIN( 447)		Bool _hx_tmp7 = hx::IsNotNull( this->_currentDrawItem );
HXDLIN( 447)		if (_hx_tmp7) {
HXLINE( 447)			_hx_tmp6 = hx::IsEq( this->_currentDrawItem->type,::flixel::graphics::tile::FlxDrawItemType_obj::TILES_dyn() );
            		}
            		else {
HXLINE( 447)			_hx_tmp6 = false;
            		}
HXDLIN( 447)		if (_hx_tmp6) {
HXLINE( 447)			_hx_tmp5 = hx::IsEq( this->_headTiles->graphics,graphic );
            		}
            		else {
HXLINE( 447)			_hx_tmp5 = false;
            		}
HXDLIN( 447)		if (_hx_tmp5) {
HXLINE( 447)			_hx_tmp4 = (this->_headTiles->colored == colored);
            		}
            		else {
HXLINE( 447)			_hx_tmp4 = false;
            		}
HXDLIN( 447)		if (_hx_tmp4) {
HXLINE( 447)			_hx_tmp3 = (this->_headTiles->hasColorOffsets == hasColorOffsets);
            		}
            		else {
HXLINE( 447)			_hx_tmp3 = false;
            		}
HXDLIN( 447)		if (_hx_tmp3) {
HXLINE( 447)			_hx_tmp2 = (this->_headTiles->blending == blendInt);
            		}
            		else {
HXLINE( 447)			_hx_tmp2 = false;
            		}
HXDLIN( 447)		if (_hx_tmp2) {
HXLINE( 447)			_hx_tmp1 = (this->_headTiles->antialiasing == smooth);
            		}
            		else {
HXLINE( 447)			_hx_tmp1 = false;
            		}
HXDLIN( 447)		if (_hx_tmp1) {
HXLINE( 447)			_hx_tmp = hx::IsEq( this->_headTiles->shader,shader );
            		}
            		else {
HXLINE( 447)			_hx_tmp = false;
            		}
HXDLIN( 447)		if (_hx_tmp) {
HXLINE( 455)			return this->_headTiles;
            		}
HXLINE( 458)		Bool _hx_tmp8 = hx::IsNotNull( ::flixel::FlxCamera_obj::_storageTilesHead );
HXDLIN( 458)		if (_hx_tmp8) {
HXLINE( 460)			itemToReturn = ::flixel::FlxCamera_obj::_storageTilesHead;
HXLINE( 461)			HX_VARI(  ::flixel::graphics::tile::FlxDrawTilesItem,newHead) = ( ( ::flixel::graphics::tile::FlxDrawTilesItem)(::flixel::FlxCamera_obj::_storageTilesHead->nextTyped) );
HXLINE( 462)			itemToReturn->reset();
HXLINE( 463)			::flixel::FlxCamera_obj::_storageTilesHead = newHead;
            		}
            		else {
HXLINE( 467)			itemToReturn =  ::flixel::graphics::tile::FlxDrawTilesItem_obj::__new();
            		}
HXLINE( 470)		itemToReturn->graphics = graphic;
HXLINE( 471)		itemToReturn->antialiasing = smooth;
HXLINE( 472)		itemToReturn->colored = colored;
HXLINE( 473)		itemToReturn->hasColorOffsets = hasColorOffsets;
HXLINE( 474)		itemToReturn->blending = blendInt;
HXLINE( 475)		itemToReturn->shader = shader;
HXLINE( 477)		itemToReturn->nextTyped = this->_headTiles;
HXLINE( 478)		this->_headTiles = itemToReturn;
HXLINE( 480)		Bool _hx_tmp9 = hx::IsNull( this->_headOfDrawStack );
HXDLIN( 480)		if (_hx_tmp9) {
HXLINE( 482)			this->_headOfDrawStack = itemToReturn;
            		}
HXLINE( 485)		Bool _hx_tmp10 = hx::IsNotNull( this->_currentDrawItem );
HXDLIN( 485)		if (_hx_tmp10) {
HXLINE( 487)			this->_currentDrawItem->next = itemToReturn;
            		}
HXLINE( 490)		this->_currentDrawItem = itemToReturn;
HXLINE( 492)		return itemToReturn;
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxCamera_obj,startQuadBatch,return )

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::startTrianglesBatch( ::flixel::graphics::FlxGraphic graphic,hx::Null< Bool >  __o_smoothing,hx::Null< Bool >  __o_isColored,::hx::EnumBase blend){
Bool smoothing = __o_smoothing.Default(false);
Bool isColored = __o_isColored.Default(false);
            	HX_STACK_FRAME("flixel.FlxCamera","startTrianglesBatch",0xb3a3b828,"flixel.FlxCamera.startTrianglesBatch","flixel/FlxCamera.hx",499,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(graphic,"graphic")
            	HX_STACK_ARG(smoothing,"smoothing")
            	HX_STACK_ARG(isColored,"isColored")
            	HX_STACK_ARG(blend,"blend")
HXLINE( 501)		HX_VARI( Int,blendInt) = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 503)		Bool _hx_tmp;
HXDLIN( 503)		Bool _hx_tmp1;
HXDLIN( 503)		Bool _hx_tmp2;
HXDLIN( 503)		Bool _hx_tmp3;
HXDLIN( 503)		Bool _hx_tmp4;
HXDLIN( 503)		Bool _hx_tmp5 = hx::IsNotNull( this->_currentDrawItem );
HXDLIN( 503)		if (_hx_tmp5) {
HXLINE( 503)			_hx_tmp4 = hx::IsEq( this->_currentDrawItem->type,::flixel::graphics::tile::FlxDrawItemType_obj::TRIANGLES_dyn() );
            		}
            		else {
HXLINE( 503)			_hx_tmp4 = false;
            		}
HXDLIN( 503)		if (_hx_tmp4) {
HXLINE( 503)			_hx_tmp3 = hx::IsEq( this->_headTriangles->graphics,graphic );
            		}
            		else {
HXLINE( 503)			_hx_tmp3 = false;
            		}
HXDLIN( 503)		if (_hx_tmp3) {
HXLINE( 503)			_hx_tmp2 = (this->_headTriangles->antialiasing == smoothing);
            		}
            		else {
HXLINE( 503)			_hx_tmp2 = false;
            		}
HXDLIN( 503)		if (_hx_tmp2) {
HXLINE( 503)			_hx_tmp1 = (this->_headTriangles->colored == isColored);
            		}
            		else {
HXLINE( 503)			_hx_tmp1 = false;
            		}
HXDLIN( 503)		if (_hx_tmp1) {
HXLINE( 503)			_hx_tmp = (this->_headTriangles->blending == blendInt);
            		}
            		else {
HXLINE( 503)			_hx_tmp = false;
            		}
HXDLIN( 503)		if (_hx_tmp) {
HXLINE( 509)			return this->_headTriangles;
            		}
HXLINE( 512)		return this->getNewDrawTrianglesItem(graphic,smoothing,isColored,blend);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,startTrianglesBatch,return )

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::getNewDrawTrianglesItem( ::flixel::graphics::FlxGraphic graphic,hx::Null< Bool >  __o_smoothing,hx::Null< Bool >  __o_isColored,::hx::EnumBase blend){
Bool smoothing = __o_smoothing.Default(false);
Bool isColored = __o_isColored.Default(false);
            	HX_STACK_FRAME("flixel.FlxCamera","getNewDrawTrianglesItem",0xcd894887,"flixel.FlxCamera.getNewDrawTrianglesItem","flixel/FlxCamera.hx",518,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(graphic,"graphic")
            	HX_STACK_ARG(smoothing,"smoothing")
            	HX_STACK_ARG(isColored,"isColored")
            	HX_STACK_ARG(blend,"blend")
HXLINE( 519)		HX_VARI(  ::flixel::graphics::tile::FlxDrawTrianglesItem,itemToReturn) = null();
HXLINE( 520)		HX_VARI( Int,blendInt) = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 522)		Bool _hx_tmp = hx::IsNotNull( ::flixel::FlxCamera_obj::_storageTrianglesHead );
HXDLIN( 522)		if (_hx_tmp) {
HXLINE( 524)			itemToReturn = ::flixel::FlxCamera_obj::_storageTrianglesHead;
HXLINE( 525)			HX_VARI(  ::flixel::graphics::tile::FlxDrawTrianglesItem,newHead) = ( ( ::flixel::graphics::tile::FlxDrawTrianglesItem)(::flixel::FlxCamera_obj::_storageTrianglesHead->nextTyped) );
HXLINE( 526)			itemToReturn->reset();
HXLINE( 527)			::flixel::FlxCamera_obj::_storageTrianglesHead = newHead;
            		}
            		else {
HXLINE( 531)			itemToReturn =  ::flixel::graphics::tile::FlxDrawTrianglesItem_obj::__new();
            		}
HXLINE( 534)		itemToReturn->graphics = graphic;
HXLINE( 535)		itemToReturn->antialiasing = smoothing;
HXLINE( 536)		itemToReturn->colored = isColored;
HXLINE( 537)		itemToReturn->blending = blendInt;
HXLINE( 539)		itemToReturn->nextTyped = this->_headTriangles;
HXLINE( 540)		this->_headTriangles = itemToReturn;
HXLINE( 542)		Bool _hx_tmp1 = hx::IsNull( this->_headOfDrawStack );
HXDLIN( 542)		if (_hx_tmp1) {
HXLINE( 544)			this->_headOfDrawStack = itemToReturn;
            		}
HXLINE( 547)		Bool _hx_tmp2 = hx::IsNotNull( this->_currentDrawItem );
HXDLIN( 547)		if (_hx_tmp2) {
HXLINE( 549)			this->_currentDrawItem->next = itemToReturn;
            		}
HXLINE( 552)		this->_currentDrawItem = itemToReturn;
HXLINE( 554)		return itemToReturn;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,getNewDrawTrianglesItem,return )

void FlxCamera_obj::clearDrawStack(){
            	HX_STACK_FRAME("flixel.FlxCamera","clearDrawStack",0x8d7c5ba0,"flixel.FlxCamera.clearDrawStack","flixel/FlxCamera.hx",559,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE( 560)		HX_VARI(  ::flixel::graphics::tile::FlxDrawTilesItem,currTiles) = this->_headTiles;
HXLINE( 561)		HX_VAR(  ::flixel::graphics::tile::FlxDrawTilesItem,newTilesHead);
HXLINE( 563)		while(true){
HXLINE( 563)			Bool _hx_tmp = !(hx::IsNotNull( currTiles ));
HXDLIN( 563)			if (_hx_tmp) {
HXLINE( 563)				goto _hx_goto_0;
            			}
HXLINE( 565)			newTilesHead = ( ( ::flixel::graphics::tile::FlxDrawTilesItem)(currTiles->nextTyped) );
HXLINE( 566)			currTiles->reset();
HXLINE( 567)			currTiles->nextTyped = ::flixel::FlxCamera_obj::_storageTilesHead;
HXLINE( 568)			::flixel::FlxCamera_obj::_storageTilesHead = currTiles;
HXLINE( 569)			currTiles = newTilesHead;
            		}
            		_hx_goto_0:;
HXLINE( 572)		HX_VARI(  ::flixel::graphics::tile::FlxDrawTrianglesItem,currTriangles) = this->_headTriangles;
HXLINE( 573)		HX_VAR(  ::flixel::graphics::tile::FlxDrawTrianglesItem,newTrianglesHead);
HXLINE( 575)		while(true){
HXLINE( 575)			Bool _hx_tmp1 = !(hx::IsNotNull( currTriangles ));
HXDLIN( 575)			if (_hx_tmp1) {
HXLINE( 575)				goto _hx_goto_1;
            			}
HXLINE( 577)			newTrianglesHead = ( ( ::flixel::graphics::tile::FlxDrawTrianglesItem)(currTriangles->nextTyped) );
HXLINE( 578)			currTriangles->reset();
HXLINE( 579)			currTriangles->nextTyped = ::flixel::FlxCamera_obj::_storageTrianglesHead;
HXLINE( 580)			::flixel::FlxCamera_obj::_storageTrianglesHead = currTriangles;
HXLINE( 581)			currTriangles = newTrianglesHead;
            		}
            		_hx_goto_1:;
HXLINE( 584)		this->_currentDrawItem = null();
HXLINE( 585)		this->_headOfDrawStack = null();
HXLINE( 586)		this->_headTiles = null();
HXLINE( 587)		this->_headTriangles = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,clearDrawStack,(void))

void FlxCamera_obj::render(){
            	HX_STACK_FRAME("flixel.FlxCamera","render",0x1f11e49f,"flixel.FlxCamera.render","flixel/FlxCamera.hx",592,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE( 593)		HX_VARI(  ::flixel::graphics::tile::FlxDrawBaseItem,currItem) = this->_headOfDrawStack;
HXLINE( 594)		while(true){
HXLINE( 594)			Bool _hx_tmp = !(hx::IsNotNull( currItem ));
HXDLIN( 594)			if (_hx_tmp) {
HXLINE( 594)				goto _hx_goto_2;
            			}
HXLINE( 596)			currItem->render(hx::ObjectPtr<OBJ_>(this));
HXLINE( 597)			currItem = currItem->next;
            		}
            		_hx_goto_2:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,render,(void))

void FlxCamera_obj::drawPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::_legacy::display::BitmapData pixels, ::flixel::math::FlxMatrix matrix, ::openfl::_legacy::geom::ColorTransform transform,::hx::EnumBase blend, ::Dynamic __o_smoothing, ::Dynamic shader){
 ::Dynamic smoothing = __o_smoothing.Default(false);
            	HX_STACK_FRAME("flixel.FlxCamera","drawPixels",0x80c6bc1a,"flixel.FlxCamera.drawPixels","flixel/FlxCamera.hx",604,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(frame,"frame")
            	HX_STACK_ARG(pixels,"pixels")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(transform,"transform")
            	HX_STACK_ARG(blend,"blend")
            	HX_STACK_ARG(smoothing,"smoothing")
            	HX_STACK_ARG(shader,"shader")
HXLINE( 604)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 604)		if (_hx_tmp) {
HXLINE( 606)			Bool _hx_tmp1;
HXDLIN( 606)			if (!(smoothing)) {
HXLINE( 606)				_hx_tmp1 = this->antialiasing;
            			}
            			else {
HXLINE( 606)				_hx_tmp1 = true;
            			}
HXDLIN( 606)			this->buffer->draw(pixels,matrix,null(),blend,null(),_hx_tmp1);
            		}
            		else {
HXLINE( 610)			HX_VAR( Bool,isColored);
HXDLIN( 610)			Bool _hx_tmp2 = hx::IsNotNull( transform );
HXDLIN( 610)			if (_hx_tmp2) {
HXLINE( 610)				isColored = ::flixel::util::FlxColorTransformUtil_obj::hasRGBMultipliers(transform);
            			}
            			else {
HXLINE( 610)				isColored = false;
            			}
HXLINE( 611)			HX_VAR( Bool,hasColorOffsets);
HXDLIN( 611)			Bool _hx_tmp3 = hx::IsNotNull( transform );
HXDLIN( 611)			if (_hx_tmp3) {
HXLINE( 611)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(transform);
            			}
            			else {
HXLINE( 611)				hasColorOffsets = false;
            			}
HXLINE( 616)			HX_VARI(  ::flixel::graphics::tile::FlxDrawTilesItem,drawItem) = this->startQuadBatch(frame->parent,isColored,hasColorOffsets,blend,smoothing,shader);
HXLINE( 618)			drawItem->addQuad(frame,matrix,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxCamera_obj,drawPixels,(void))

void FlxCamera_obj::copyPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::_legacy::display::BitmapData pixels, ::openfl::_legacy::geom::Rectangle sourceRect, ::openfl::_legacy::geom::Point destPoint, ::openfl::_legacy::geom::ColorTransform transform,::hx::EnumBase blend, ::Dynamic __o_smoothing, ::Dynamic shader){
 ::Dynamic smoothing = __o_smoothing.Default(false);
            	HX_STACK_FRAME("flixel.FlxCamera","copyPixels",0xf4c7a68b,"flixel.FlxCamera.copyPixels","flixel/FlxCamera.hx",625,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(frame,"frame")
            	HX_STACK_ARG(pixels,"pixels")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(transform,"transform")
            	HX_STACK_ARG(blend,"blend")
            	HX_STACK_ARG(smoothing,"smoothing")
            	HX_STACK_ARG(shader,"shader")
HXLINE( 625)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 625)		if (_hx_tmp) {
HXLINE( 627)			Bool _hx_tmp1 = hx::IsNotNull( pixels );
HXDLIN( 627)			if (_hx_tmp1) {
HXLINE( 629)				this->buffer->copyPixels(pixels,sourceRect,destPoint,null(),null(),true);
            			}
            			else {
HXLINE( 631)				Bool _hx_tmp2 = hx::IsNotNull( frame );
HXDLIN( 631)				if (_hx_tmp2) {
HXLINE( 633)					frame->paint(this->buffer,destPoint,true,null());
            				}
            			}
            		}
            		else {
HXLINE( 638)			this->_helperMatrix->identity();
HXLINE( 639)			Float _hx_tmp3 = (destPoint->x + frame->offset->x);
HXDLIN( 639)			Float _hx_tmp4 = (destPoint->y + frame->offset->y);
HXDLIN( 639)			this->_helperMatrix->translate(_hx_tmp3,_hx_tmp4);
HXLINE( 641)			HX_VAR( Bool,isColored);
HXDLIN( 641)			Bool _hx_tmp5 = hx::IsNotNull( transform );
HXDLIN( 641)			if (_hx_tmp5) {
HXLINE( 641)				isColored = ::flixel::util::FlxColorTransformUtil_obj::hasRGBMultipliers(transform);
            			}
            			else {
HXLINE( 641)				isColored = false;
            			}
HXLINE( 642)			HX_VAR( Bool,hasColorOffsets);
HXDLIN( 642)			Bool _hx_tmp6 = hx::IsNotNull( transform );
HXDLIN( 642)			if (_hx_tmp6) {
HXLINE( 642)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(transform);
            			}
            			else {
HXLINE( 642)				hasColorOffsets = false;
            			}
HXLINE( 645)			HX_VARI(  ::flixel::graphics::tile::FlxDrawTilesItem,drawItem) = this->startQuadBatch(frame->parent,isColored,hasColorOffsets,blend,smoothing,shader);
HXLINE( 649)			drawItem->addQuad(frame,this->_helperMatrix,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxCamera_obj,copyPixels,(void))

void FlxCamera_obj::drawTriangles( ::flixel::graphics::FlxGraphic graphic,::Array< Float > vertices,::Array< Int > indices,::Array< Float > uvtData,::Array< Int > colors, ::flixel::math::FlxPoint position,::hx::EnumBase blend,hx::Null< Bool >  __o_repeat,hx::Null< Bool >  __o_smoothing){
Bool repeat = __o_repeat.Default(false);
Bool smoothing = __o_smoothing.Default(false);
            	HX_STACK_FRAME("flixel.FlxCamera","drawTriangles",0x78d375de,"flixel.FlxCamera.drawTriangles","flixel/FlxCamera.hx",657,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(graphic,"graphic")
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(indices,"indices")
            	HX_STACK_ARG(uvtData,"uvtData")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(position,"position")
            	HX_STACK_ARG(blend,"blend")
            	HX_STACK_ARG(repeat,"repeat")
            	HX_STACK_ARG(smoothing,"smoothing")
HXLINE( 657)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 657)		if (_hx_tmp) {
HXLINE( 659)			Bool _hx_tmp1 = hx::IsNull( position );
HXDLIN( 659)			if (_hx_tmp1) {
HXLINE( 660)				position = ::flixel::FlxCamera_obj::renderPoint->set(null(),null());
            			}
HXLINE( 662)			{
HXLINE( 662)				HX_VARI(  ::flixel::math::FlxRect,_this) = this->_bounds;
HXDLIN( 662)				Float Width = this->width;
HXDLIN( 662)				Float Height = this->height;
HXDLIN( 662)				_this->x = (int)0;
HXDLIN( 662)				_this->y = (int)0;
HXDLIN( 662)				_this->width = Width;
HXDLIN( 662)				_this->height = Height;
            			}
HXLINE( 664)			HX_VARI( Int,verticesLength) = vertices->length;
HXLINE( 665)			HX_VARI( Int,currentVertexPosition) = (int)0;
HXLINE( 667)			HX_VAR( Float,tempX);
HXDLIN( 667)			HX_VAR( Float,tempY);
HXLINE( 668)			HX_VARI( Int,i) = (int)0;
HXLINE( 669)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::FlxCamera_obj::renderRect;
HXDLIN( 669)			Float X = (int)0;
HXDLIN( 669)			Float Y = (int)0;
HXDLIN( 669)			Float Width1 = (int)0;
HXDLIN( 669)			Float Height1 = (int)0;
HXDLIN( 669)			_this1->x = X;
HXDLIN( 669)			_this1->y = Y;
HXDLIN( 669)			_this1->width = Width1;
HXDLIN( 669)			_this1->height = Height1;
HXLINE( 670)			{
HXLINE( 670)				Int len = ::flixel::FlxCamera_obj::drawVertices->length;
HXDLIN( 670)				::flixel::FlxCamera_obj::drawVertices->removeRange((int)0,len);
            			}
HXLINE( 672)			while((i < verticesLength)){
HXLINE( 674)				tempX = (position->x + vertices->__get(i));
HXLINE( 675)				tempY = (position->y + vertices->__get((i + (int)1)));
HXLINE( 677)				{
HXLINE( 677)					Int index = currentVertexPosition++;
HXDLIN( 677)					::flixel::FlxCamera_obj::drawVertices[index] = tempX;
            				}
HXLINE( 678)				{
HXLINE( 678)					Int index1 = currentVertexPosition++;
HXDLIN( 678)					::flixel::FlxCamera_obj::drawVertices[index1] = tempY;
            				}
HXLINE( 680)				if ((i == (int)0)) {
HXLINE( 682)					_this1->x = tempX;
HXDLIN( 682)					_this1->y = tempY;
HXDLIN( 682)					_this1->width = (int)0;
HXDLIN( 682)					_this1->height = (int)0;
            				}
            				else {
HXLINE( 686)					Bool _hx_tmp2 = (tempX < _this1->x);
HXDLIN( 686)					if (_hx_tmp2) {
HXLINE( 686)						hx::AddEq(_this1->width,(_this1->x - tempX));
HXDLIN( 686)						_this1->x = tempX;
            					}
HXDLIN( 686)					Bool _hx_tmp3 = (tempY < _this1->y);
HXDLIN( 686)					if (_hx_tmp3) {
HXLINE( 686)						hx::AddEq(_this1->height,(_this1->y - tempY));
HXDLIN( 686)						_this1->y = tempY;
            					}
HXDLIN( 686)					Bool _hx_tmp4 = (tempX > (_this1->x + _this1->width));
HXDLIN( 686)					if (_hx_tmp4) {
HXLINE( 686)						_this1->width = (tempX - _this1->x);
            					}
HXDLIN( 686)					Bool _hx_tmp5 = (tempY > (_this1->y + _this1->height));
HXDLIN( 686)					if (_hx_tmp5) {
HXLINE( 686)						_this1->height = (tempY - _this1->y);
            					}
            				}
HXLINE( 689)				hx::AddEq(i,(int)2);
            			}
HXLINE( 692)			Bool _hx_tmp6 = position->_weak;
HXDLIN( 692)			if (_hx_tmp6) {
HXLINE( 692)				position->put();
            			}
HXLINE( 694)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = this->_bounds;
HXDLIN( 694)			HX_VAR( Bool,result);
HXDLIN( 694)			Bool _hx_tmp7;
HXDLIN( 694)			Bool _hx_tmp8;
HXDLIN( 694)			if (((_this1->x + _this1->width) > _this2->x)) {
HXLINE( 694)				_hx_tmp8 = (_this1->x < (_this2->x + _this2->width));
            			}
            			else {
HXLINE( 694)				_hx_tmp8 = false;
            			}
HXDLIN( 694)			if (_hx_tmp8) {
HXLINE( 694)				_hx_tmp7 = ((_this1->y + _this1->height) > _this2->y);
            			}
            			else {
HXLINE( 694)				_hx_tmp7 = false;
            			}
HXDLIN( 694)			if (_hx_tmp7) {
HXLINE( 694)				result = (_this1->y < (_this2->y + _this2->height));
            			}
            			else {
HXLINE( 694)				result = false;
            			}
HXDLIN( 694)			Bool _hx_tmp9 = _this1->_weak;
HXDLIN( 694)			if (_hx_tmp9) {
HXLINE( 694)				Bool _hx_tmp10 = !(_this1->_inPool);
HXDLIN( 694)				if (_hx_tmp10) {
HXLINE( 694)					_this1->_inPool = true;
HXDLIN( 694)					_this1->_weak = false;
HXDLIN( 694)					::flixel::math::FlxRect_obj::_pool->putUnsafe(_this1);
            				}
            			}
HXDLIN( 694)			if (!(result)) {
HXLINE( 696)				Int pos = (::flixel::FlxCamera_obj::drawVertices->length - verticesLength);
HXDLIN( 696)				::flixel::FlxCamera_obj::drawVertices->removeRange(pos,verticesLength);
            			}
            			else {
HXLINE( 700)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->clear();
HXLINE( 701)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->beginBitmapFill(graphic->bitmap,null(),repeat,smoothing);
HXLINE( 702)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->drawTriangles(::flixel::FlxCamera_obj::drawVertices,indices,uvtData,null(),null(),null());
HXLINE( 703)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->endFill();
HXLINE( 704)				this->buffer->draw(::flixel::FlxCamera_obj::trianglesSprite,null(),null(),null(),null(),null());
            			}
HXLINE( 717)			Bool _hx_tmp11 = !(_this1->_inPool);
HXDLIN( 717)			if (_hx_tmp11) {
HXLINE( 717)				_this1->_inPool = true;
HXDLIN( 717)				_this1->_weak = false;
HXDLIN( 717)				::flixel::math::FlxRect_obj::_pool->putUnsafe(_this1);
            			}
            		}
            		else {
HXLINE( 721)			{
HXLINE( 721)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this3,"_this") = this->_bounds;
HXDLIN( 721)				Float Width2 = this->width;
HXDLIN( 721)				Float Height2 = this->height;
HXDLIN( 721)				_this3->x = (int)0;
HXDLIN( 721)				_this3->y = (int)0;
HXDLIN( 721)				_this3->width = Width2;
HXDLIN( 721)				_this3->height = Height2;
            			}
HXLINE( 722)			HX_VAR( Bool,isColored);
HXDLIN( 722)			Bool _hx_tmp12 = hx::IsNotNull( colors );
HXDLIN( 722)			if (_hx_tmp12) {
HXLINE( 722)				isColored = (colors->length != (int)0);
            			}
            			else {
HXLINE( 722)				isColored = false;
            			}
HXLINE( 723)			HX_VARI(  ::flixel::graphics::tile::FlxDrawTrianglesItem,drawItem) = this->startTrianglesBatch(graphic,smoothing,isColored,blend);
HXLINE( 724)			drawItem->addTriangles(vertices,indices,uvtData,colors,position,this->_bounds);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC9(FlxCamera_obj,drawTriangles,(void))

void FlxCamera_obj::destroy(){
            	HX_STACK_FRAME("flixel.FlxCamera","destroy",0xb607d391,"flixel.FlxCamera.destroy","flixel/FlxCamera.hx",793,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE( 794)		::flixel::util::FlxDestroyUtil_obj::removeChild(this->flashSprite,this->_scrollRect);
HXLINE( 796)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 796)		if (_hx_tmp) {
HXLINE( 798)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->_flashBitmap);
HXLINE( 799)			this->screen = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->screen)) );
HXLINE( 800)			this->buffer = null();
HXLINE( 801)			this->_flashBitmap = null();
HXLINE( 802)			this->_fill = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_fill);
            		}
            		else {
HXLINE( 811)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->canvas);
HXLINE( 812)			Bool _hx_tmp1 = hx::IsNotNull( this->canvas );
HXDLIN( 812)			if (_hx_tmp1) {
HXLINE( 814)				{
HXLINE( 814)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 814)					HX_VARI( Int,_g) = this->canvas->get_numChildren();
HXDLIN( 814)					while((_g1 < _g)){
HXLINE( 814)						++_g1;
HXLINE( 816)						this->canvas->removeChildAt((int)0);
            					}
            				}
HXLINE( 818)				this->canvas = null();
            			}
HXLINE( 821)			Bool _hx_tmp2 = hx::IsNotNull( this->_headOfDrawStack );
HXDLIN( 821)			if (_hx_tmp2) {
HXLINE( 823)				this->clearDrawStack();
            			}
HXLINE( 826)			this->_transform = null();
HXLINE( 827)			this->_helperMatrix = null();
            		}
HXLINE( 830)		this->_bounds = null();
HXLINE( 831)		this->scroll = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scroll)) );
HXLINE( 832)		this->targetOffset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->targetOffset)) );
HXLINE( 833)		this->deadzone = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->deadzone)) );
HXLINE( 835)		this->target = null();
HXLINE( 836)		this->flashSprite = null();
HXLINE( 837)		this->_scrollRect = null();
HXLINE( 838)		this->_flashRect = null();
HXLINE( 839)		this->_flashPoint = null();
HXLINE( 840)		this->_fxFlashComplete = null();
HXLINE( 841)		this->_fxFadeComplete = null();
HXLINE( 842)		this->_fxShakeComplete = null();
HXLINE( 843)		this->_fxShakeOffset = null();
HXLINE( 845)		this->super::destroy();
            	}


void FlxCamera_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.FlxCamera","update",0xa0edff52,"flixel.FlxCamera.update","flixel/FlxCamera.hx",852,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 854)		Bool _hx_tmp = hx::IsNotNull( this->target );
HXDLIN( 854)		if (_hx_tmp) {
HXLINE( 856)			this->updateFollow();
            		}
HXLINE( 859)		this->updateScroll();
HXLINE( 860)		this->updateFlash(elapsed);
HXLINE( 861)		this->updateFade(elapsed);
HXLINE( 862)		this->updateShake(elapsed);
HXLINE( 864)		::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 864)		if (this->filtersEnabled) {
HXLINE( 864)			_hx_tmp1 = this->_filters;
            		}
            		else {
HXLINE( 864)			_hx_tmp1 = null();
            		}
HXDLIN( 864)		this->flashSprite->set_filters(_hx_tmp1);
HXLINE( 866)		this->updateFlashSpritePosition();
            	}


void FlxCamera_obj::updateScroll(){
            	HX_STACK_FRAME("flixel.FlxCamera","updateScroll",0x3fd094ff,"flixel.FlxCamera.updateScroll","flixel/FlxCamera.hx",874,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE( 876)		HX_VARI( Float,Value) = this->scroll->x;
HXDLIN( 876)		HX_VARI(  ::Dynamic,Min) = this->minScrollX;
HXDLIN( 876)		HX_VAR(  ::Dynamic,Max);
HXDLIN( 876)		Bool _hx_tmp = hx::IsNotNull( this->maxScrollX );
HXDLIN( 876)		if (_hx_tmp) {
HXLINE( 876)			Max = (this->maxScrollX - this->width);
            		}
            		else {
HXLINE( 876)			Max = null();
            		}
HXDLIN( 876)		HX_VAR( Float,lowerBound);
HXDLIN( 876)		Bool _hx_tmp1;
HXDLIN( 876)		Bool _hx_tmp2 = hx::IsNotNull( Min );
HXDLIN( 876)		if (_hx_tmp2) {
HXLINE( 876)			_hx_tmp1 = hx::IsLess( Value,Min );
            		}
            		else {
HXLINE( 876)			_hx_tmp1 = false;
            		}
HXDLIN( 876)		if (_hx_tmp1) {
HXLINE( 876)			lowerBound = Min;
            		}
            		else {
HXLINE( 876)			lowerBound = Value;
            		}
HXDLIN( 876)		Float _hx_tmp3;
HXDLIN( 876)		Bool _hx_tmp4;
HXDLIN( 876)		Bool _hx_tmp5 = hx::IsNotNull( Max );
HXDLIN( 876)		if (_hx_tmp5) {
HXLINE( 876)			_hx_tmp4 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 876)			_hx_tmp4 = false;
            		}
HXDLIN( 876)		if (_hx_tmp4) {
HXLINE( 876)			_hx_tmp3 = Max;
            		}
            		else {
HXLINE( 876)			_hx_tmp3 = lowerBound;
            		}
HXDLIN( 876)		this->scroll->set_x(_hx_tmp3);
HXLINE( 877)		HX_VARI_NAME( Float,Value1,"Value") = this->scroll->y;
HXDLIN( 877)		HX_VARI_NAME(  ::Dynamic,Min1,"Min") = this->minScrollY;
HXDLIN( 877)		HX_VAR_NAME(  ::Dynamic,Max1,"Max");
HXDLIN( 877)		Bool _hx_tmp6 = hx::IsNotNull( this->maxScrollY );
HXDLIN( 877)		if (_hx_tmp6) {
HXLINE( 877)			Max1 = (this->maxScrollY - this->height);
            		}
            		else {
HXLINE( 877)			Max1 = null();
            		}
HXDLIN( 877)		HX_VAR_NAME( Float,lowerBound1,"lowerBound");
HXDLIN( 877)		Bool _hx_tmp7;
HXDLIN( 877)		Bool _hx_tmp8 = hx::IsNotNull( Min1 );
HXDLIN( 877)		if (_hx_tmp8) {
HXLINE( 877)			_hx_tmp7 = hx::IsLess( Value1,Min1 );
            		}
            		else {
HXLINE( 877)			_hx_tmp7 = false;
            		}
HXDLIN( 877)		if (_hx_tmp7) {
HXLINE( 877)			lowerBound1 = Min1;
            		}
            		else {
HXLINE( 877)			lowerBound1 = Value1;
            		}
HXDLIN( 877)		Float _hx_tmp9;
HXDLIN( 877)		Bool _hx_tmp10;
HXDLIN( 877)		Bool _hx_tmp11 = hx::IsNotNull( Max1 );
HXDLIN( 877)		if (_hx_tmp11) {
HXLINE( 877)			_hx_tmp10 = hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 877)			_hx_tmp10 = false;
            		}
HXDLIN( 877)		if (_hx_tmp10) {
HXLINE( 877)			_hx_tmp9 = Max1;
            		}
            		else {
HXLINE( 877)			_hx_tmp9 = lowerBound1;
            		}
HXDLIN( 877)		this->scroll->set_y(_hx_tmp9);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateScroll,(void))

void FlxCamera_obj::updateFollow(){
            	HX_STACK_FRAME("flixel.FlxCamera","updateFollow",0xf2024e63,"flixel.FlxCamera.updateFollow","flixel/FlxCamera.hx",888,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE( 888)		Bool _hx_tmp = hx::IsNull( this->deadzone );
HXDLIN( 888)		if (_hx_tmp) {
HXLINE( 890)			this->target->getMidpoint(this->_point);
HXLINE( 891)			this->_point->addPoint(this->targetOffset);
HXLINE( 892)			{
HXLINE( 892)				HX_VARI(  ::flixel::math::FlxPoint,point) = this->_point;
HXDLIN( 892)				Float _hx_tmp1 = (point->x - (this->width * ((Float)0.5)));
HXDLIN( 892)				Float _hx_tmp2 = (point->y - (this->height * ((Float)0.5)));
HXDLIN( 892)				this->scroll->set(_hx_tmp1,_hx_tmp2);
HXDLIN( 892)				Bool _hx_tmp3 = point->_weak;
HXDLIN( 892)				if (_hx_tmp3) {
HXLINE( 892)					point->put();
            				}
            			}
            		}
            		else {
HXLINE( 896)			HX_VAR( Float,edge);
HXLINE( 897)			HX_VARI( Float,targetX) = (this->target->x + this->targetOffset->x);
HXLINE( 898)			HX_VARI( Float,targetY) = (this->target->y + this->targetOffset->y);
HXLINE( 900)			if (hx::IsEq( this->style,::flixel::FlxCameraFollowStyle_obj::SCREEN_BY_SCREEN_dyn() )) {
HXLINE( 902)				Bool _hx_tmp4 = (targetX >= (this->scroll->x + this->width));
HXDLIN( 902)				if (_hx_tmp4) {
HXLINE( 904)					HX_VARI(  ::flixel::math::FlxPoint,_g) = this->_scrollTarget;
HXDLIN( 904)					Float _hx_tmp5 = (_g->x + this->width);
HXDLIN( 904)					_g->set_x(_hx_tmp5);
            				}
            				else {
HXLINE( 906)					Bool _hx_tmp6 = (targetX < this->scroll->x);
HXDLIN( 906)					if (_hx_tmp6) {
HXLINE( 908)						HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = this->_scrollTarget;
HXDLIN( 908)						Float _hx_tmp7 = (_g1->x - this->width);
HXDLIN( 908)						_g1->set_x(_hx_tmp7);
            					}
            				}
HXLINE( 911)				Bool _hx_tmp8 = (targetY >= (this->scroll->y + this->height));
HXDLIN( 911)				if (_hx_tmp8) {
HXLINE( 913)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g2,"_g") = this->_scrollTarget;
HXDLIN( 913)					Float _hx_tmp9 = (_g2->y + this->height);
HXDLIN( 913)					_g2->set_y(_hx_tmp9);
            				}
            				else {
HXLINE( 915)					Bool _hx_tmp10 = (targetY < this->scroll->y);
HXDLIN( 915)					if (_hx_tmp10) {
HXLINE( 917)						HX_VARI_NAME(  ::flixel::math::FlxPoint,_g3,"_g") = this->_scrollTarget;
HXDLIN( 917)						Float _hx_tmp11 = (_g3->y - this->height);
HXDLIN( 917)						_g3->set_y(_hx_tmp11);
            					}
            				}
            			}
            			else {
HXLINE( 922)				edge = (targetX - this->deadzone->x);
HXLINE( 923)				Bool _hx_tmp12 = (this->_scrollTarget->x > edge);
HXDLIN( 923)				if (_hx_tmp12) {
HXLINE( 925)					this->_scrollTarget->set_x(edge);
            				}
HXLINE( 927)				Float _hx_tmp13 = this->target->get_width();
HXDLIN( 927)				edge = (((targetX + _hx_tmp13) - this->deadzone->x) - this->deadzone->width);
HXLINE( 928)				Bool _hx_tmp14 = (this->_scrollTarget->x < edge);
HXDLIN( 928)				if (_hx_tmp14) {
HXLINE( 930)					this->_scrollTarget->set_x(edge);
            				}
HXLINE( 933)				edge = (targetY - this->deadzone->y);
HXLINE( 934)				Bool _hx_tmp15 = (this->_scrollTarget->y > edge);
HXDLIN( 934)				if (_hx_tmp15) {
HXLINE( 936)					this->_scrollTarget->set_y(edge);
            				}
HXLINE( 938)				Float _hx_tmp16 = this->target->get_height();
HXDLIN( 938)				edge = (((targetY + _hx_tmp16) - this->deadzone->y) - this->deadzone->height);
HXLINE( 939)				Bool _hx_tmp17 = (this->_scrollTarget->y < edge);
HXDLIN( 939)				if (_hx_tmp17) {
HXLINE( 941)					this->_scrollTarget->set_y(edge);
            				}
            			}
HXLINE( 945)			Bool _hx_tmp18 = ::Std_obj::is(this->target,hx::ClassOf< ::flixel::FlxSprite >());
HXDLIN( 945)			if (_hx_tmp18) {
HXLINE( 947)				Bool _hx_tmp19 = hx::IsNull( this->_lastTargetPosition );
HXDLIN( 947)				if (_hx_tmp19) {
HXLINE( 949)					Float X = this->target->x;
HXDLIN( 949)					Float Y = this->target->y;
HXDLIN( 949)					HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 949)					point1->_inPool = false;
HXDLIN( 949)					this->_lastTargetPosition = point1;
            				}
HXLINE( 951)				{
HXLINE( 951)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g4,"_g") = this->_scrollTarget;
HXDLIN( 951)					Float _hx_tmp20 = _g4->x;
HXDLIN( 951)					Float _hx_tmp21 = ((this->target->x - this->_lastTargetPosition->x) * this->followLead->x);
HXDLIN( 951)					_g4->set_x((_hx_tmp20 + _hx_tmp21));
            				}
HXLINE( 952)				{
HXLINE( 952)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g5,"_g") = this->_scrollTarget;
HXDLIN( 952)					Float _hx_tmp22 = _g5->y;
HXDLIN( 952)					Float _hx_tmp23 = ((this->target->y - this->_lastTargetPosition->y) * this->followLead->y);
HXDLIN( 952)					_g5->set_y((_hx_tmp22 + _hx_tmp23));
            				}
HXLINE( 954)				this->_lastTargetPosition->set_x(this->target->x);
HXLINE( 955)				this->_lastTargetPosition->set_y(this->target->y);
            			}
HXLINE( 958)			Bool _hx_tmp24 = (this->followLerp >= ((Float)(int)60 / (Float)::flixel::FlxG_obj::updateFramerate));
HXDLIN( 958)			if (_hx_tmp24) {
HXLINE( 960)				HX_VARI(  ::flixel::math::FlxPoint,_this) = this->scroll;
HXDLIN( 960)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = this->_scrollTarget;
HXDLIN( 960)				_this->set_x(point2->x);
HXDLIN( 960)				_this->set_y(point2->y);
HXDLIN( 960)				Bool _hx_tmp25 = point2->_weak;
HXDLIN( 960)				if (_hx_tmp25) {
HXLINE( 960)					point2->put();
            				}
            			}
            			else {
HXLINE( 964)				{
HXLINE( 964)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g6,"_g") = this->scroll;
HXDLIN( 964)					Float _hx_tmp26 = _g6->x;
HXDLIN( 964)					Float _hx_tmp27 = ((Float)(((this->_scrollTarget->x - this->scroll->x) * this->followLerp) * ::flixel::FlxG_obj::updateFramerate) / (Float)(int)60);
HXDLIN( 964)					_g6->set_x((_hx_tmp26 + _hx_tmp27));
            				}
HXLINE( 965)				{
HXLINE( 965)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g7,"_g") = this->scroll;
HXDLIN( 965)					Float _hx_tmp28 = _g7->y;
HXDLIN( 965)					Float _hx_tmp29 = ((Float)(((this->_scrollTarget->y - this->scroll->y) * this->followLerp) * ::flixel::FlxG_obj::updateFramerate) / (Float)(int)60);
HXDLIN( 965)					_g7->set_y((_hx_tmp28 + _hx_tmp29));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFollow,(void))

void FlxCamera_obj::updateFlash(Float elapsed){
            	HX_STACK_FRAME("flixel.FlxCamera","updateFlash",0x43f2dcfe,"flixel.FlxCamera.updateFlash","flixel/FlxCamera.hx",973,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 973)		Bool _hx_tmp = (this->_fxFlashAlpha > ((Float)0.0));
HXDLIN( 973)		if (_hx_tmp) {
HXLINE( 975)			hx::SubEq(this->_fxFlashAlpha,((Float)elapsed / (Float)this->_fxFlashDuration));
HXLINE( 976)			Bool _hx_tmp1;
HXDLIN( 976)			if ((this->_fxFlashAlpha <= (int)0)) {
HXLINE( 976)				_hx_tmp1 = hx::IsNotNull( this->_fxFlashComplete );
            			}
            			else {
HXLINE( 976)				_hx_tmp1 = false;
            			}
HXDLIN( 976)			if (_hx_tmp1) {
HXLINE( 978)				this->_fxFlashComplete();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateFlash,(void))

void FlxCamera_obj::updateFade(Float elapsed){
            	HX_STACK_FRAME("flixel.FlxCamera","updateFade",0xaec3f1ee,"flixel.FlxCamera.updateFade","flixel/FlxCamera.hx",984,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 985)		if (this->_fxFadeCompleted) {
HXLINE( 986)			return;
            		}
HXLINE( 988)		Bool _hx_tmp = this->_fxFadeIn;
HXDLIN( 988)		if (_hx_tmp) {
HXLINE( 990)			hx::SubEq(this->_fxFadeAlpha,((Float)elapsed / (Float)this->_fxFadeDuration));
HXLINE( 991)			Bool _hx_tmp1 = (this->_fxFadeAlpha <= ((Float)0.0));
HXDLIN( 991)			if (_hx_tmp1) {
HXLINE( 993)				this->_fxFadeAlpha = ((Float)0.0);
HXLINE( 994)				this->completeFade();
            			}
            		}
            		else {
HXLINE( 999)			hx::AddEq(this->_fxFadeAlpha,((Float)elapsed / (Float)this->_fxFadeDuration));
HXLINE(1000)			Bool _hx_tmp2 = (this->_fxFadeAlpha >= ((Float)1.0));
HXDLIN(1000)			if (_hx_tmp2) {
HXLINE(1002)				this->_fxFadeAlpha = ((Float)1.0);
HXLINE(1003)				this->completeFade();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateFade,(void))

void FlxCamera_obj::completeFade(){
            	HX_STACK_FRAME("flixel.FlxCamera","completeFade",0xb02048de,"flixel.FlxCamera.completeFade","flixel/FlxCamera.hx",1009,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1010)		this->_fxFadeCompleted = true;
HXLINE(1011)		Bool _hx_tmp = hx::IsNotNull( this->_fxFadeComplete );
HXDLIN(1011)		if (_hx_tmp) {
HXLINE(1012)			this->_fxFadeComplete();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,completeFade,(void))

void FlxCamera_obj::updateShake(Float elapsed){
            	HX_STACK_FRAME("flixel.FlxCamera","updateShake",0xbd838614,"flixel.FlxCamera.updateShake","flixel/FlxCamera.hx",1017,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(1017)		Bool _hx_tmp = (this->_fxShakeDuration > (int)0);
HXDLIN(1017)		if (_hx_tmp) {
HXLINE(1019)			hx::SubEq(this->_fxShakeDuration,elapsed);
HXLINE(1020)			Bool _hx_tmp1 = (this->_fxShakeDuration <= (int)0);
HXDLIN(1020)			if (_hx_tmp1) {
HXLINE(1022)				this->_fxShakeOffset->set(null(),null());
HXLINE(1023)				Bool _hx_tmp2 = hx::IsNotNull( this->_fxShakeComplete );
HXDLIN(1023)				if (_hx_tmp2) {
HXLINE(1025)					this->_fxShakeComplete();
            				}
            			}
            			else {
HXLINE(1030)				if (hx::IsNotEq( this->_fxShakeAxes,::flixel::util::FlxAxes_obj::Y_dyn() )) {
HXLINE(1032)					Float _hx_tmp3 = (-(this->_fxShakeIntensity) * this->width);
HXDLIN(1032)					Float _hx_tmp4 = (this->_fxShakeIntensity * this->width);
HXDLIN(1032)					Float _hx_tmp5 = ::flixel::FlxG_obj::random->_hx_float(_hx_tmp3,_hx_tmp4,null());
HXDLIN(1032)					Float _hx_tmp6 = (_hx_tmp5 * this->zoom);
HXDLIN(1032)					this->_fxShakeOffset->set_x(_hx_tmp6);
            				}
HXLINE(1034)				if (hx::IsNotEq( this->_fxShakeAxes,::flixel::util::FlxAxes_obj::X_dyn() )) {
HXLINE(1036)					Float _hx_tmp7 = (-(this->_fxShakeIntensity) * this->height);
HXDLIN(1036)					Float _hx_tmp8 = (this->_fxShakeIntensity * this->height);
HXDLIN(1036)					Float _hx_tmp9 = ::flixel::FlxG_obj::random->_hx_float(_hx_tmp7,_hx_tmp8,null());
HXDLIN(1036)					Float _hx_tmp10 = (_hx_tmp9 * this->zoom);
HXDLIN(1036)					this->_fxShakeOffset->set_y(_hx_tmp10);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateShake,(void))

void FlxCamera_obj::updateFlashSpritePosition(){
            	HX_STACK_FRAME("flixel.FlxCamera","updateFlashSpritePosition",0x5aef376c,"flixel.FlxCamera.updateFlashSpritePosition","flixel/FlxCamera.hx",1048,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1048)		Bool _hx_tmp = hx::IsNotNull( this->flashSprite );
HXDLIN(1048)		if (_hx_tmp) {
HXLINE(1050)			Float _hx_tmp1 = ((this->x * ::flixel::FlxG_obj::scaleMode->scale->x) + this->_flashOffset->x);
HXDLIN(1050)			this->flashSprite->set_x(_hx_tmp1);
HXLINE(1051)			Float _hx_tmp2 = ((this->y * ::flixel::FlxG_obj::scaleMode->scale->y) + this->_flashOffset->y);
HXDLIN(1051)			this->flashSprite->set_y(_hx_tmp2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFlashSpritePosition,(void))

void FlxCamera_obj::updateFlashOffset(){
            	HX_STACK_FRAME("flixel.FlxCamera","updateFlashOffset",0x0e9fbb31,"flixel.FlxCamera.updateFlashOffset","flixel/FlxCamera.hx",1060,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1061)		Float _hx_tmp = (((this->width * ((Float)0.5)) * ::flixel::FlxG_obj::scaleMode->scale->x) * this->initialZoom);
HXDLIN(1061)		this->_flashOffset->set_x(_hx_tmp);
HXLINE(1062)		Float _hx_tmp1 = (((this->height * ((Float)0.5)) * ::flixel::FlxG_obj::scaleMode->scale->y) * this->initialZoom);
HXDLIN(1062)		this->_flashOffset->set_y(_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFlashOffset,(void))

void FlxCamera_obj::updateScrollRect(){
            	HX_STACK_FRAME("flixel.FlxCamera","updateScrollRect",0xbf58f9c3,"flixel.FlxCamera.updateScrollRect","flixel/FlxCamera.hx",1074,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1075)		HX_VAR(  ::openfl::_legacy::geom::Rectangle,rect);
HXDLIN(1075)		Bool _hx_tmp = hx::IsNotNull( this->_scrollRect );
HXDLIN(1075)		if (_hx_tmp) {
HXLINE(1075)			rect = this->_scrollRect->get_scrollRect();
            		}
            		else {
HXLINE(1075)			rect = null();
            		}
HXLINE(1077)		Bool _hx_tmp1 = hx::IsNotNull( rect );
HXDLIN(1077)		if (_hx_tmp1) {
HXLINE(1079)			rect->x = (rect->y = (int)0);
HXLINE(1080)			Float _hx_tmp2 = (this->width * this->initialZoom);
HXDLIN(1080)			rect->width = (_hx_tmp2 * ::flixel::FlxG_obj::scaleMode->scale->x);
HXLINE(1081)			Float _hx_tmp3 = (this->height * this->initialZoom);
HXDLIN(1081)			rect->height = (_hx_tmp3 * ::flixel::FlxG_obj::scaleMode->scale->y);
HXLINE(1082)			this->_scrollRect->set_scrollRect(rect);
HXLINE(1083)			Float _hx_tmp4 = (((Float)-0.5) * rect->width);
HXDLIN(1083)			this->_scrollRect->set_x(_hx_tmp4);
HXLINE(1084)			Float _hx_tmp5 = (((Float)-0.5) * rect->height);
HXDLIN(1084)			this->_scrollRect->set_y(_hx_tmp5);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateScrollRect,(void))

void FlxCamera_obj::updateInternalSpritePositions(){
            	HX_STACK_FRAME("flixel.FlxCamera","updateInternalSpritePositions",0x7d5baef6,"flixel.FlxCamera.updateInternalSpritePositions","flixel/FlxCamera.hx",1095,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1095)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1095)		if (_hx_tmp) {
HXLINE(1097)			Bool _hx_tmp1 = hx::IsNotNull( this->_flashBitmap );
HXDLIN(1097)			if (_hx_tmp1) {
HXLINE(1099)				Bool _hx_tmp2;
HXDLIN(1099)				Bool _hx_tmp3;
HXDLIN(1099)				Bool _hx_tmp4 = !(this->regen);
HXDLIN(1099)				if (_hx_tmp4) {
HXLINE(1099)					Int _hx_tmp5 = this->width;
HXDLIN(1099)					Int _hx_tmp6 = this->buffer->get_width();
HXDLIN(1099)					_hx_tmp3 = (_hx_tmp5 != _hx_tmp6);
            				}
            				else {
HXLINE(1099)					_hx_tmp3 = true;
            				}
HXDLIN(1099)				if (!(_hx_tmp3)) {
HXLINE(1099)					Int _hx_tmp7 = this->height;
HXDLIN(1099)					Int _hx_tmp8 = this->buffer->get_height();
HXDLIN(1099)					_hx_tmp2 = (_hx_tmp7 != _hx_tmp8);
            				}
            				else {
HXLINE(1099)					_hx_tmp2 = true;
            				}
HXDLIN(1099)				this->regen = _hx_tmp2;
HXLINE(1101)				Float _hx_tmp9 = (((((Float)-0.5) * this->width) * (this->scaleX - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->x);
HXDLIN(1101)				this->_flashBitmap->set_x(_hx_tmp9);
HXLINE(1102)				Float _hx_tmp10 = (((((Float)-0.5) * this->height) * (this->scaleY - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->y);
HXDLIN(1102)				this->_flashBitmap->set_y(_hx_tmp10);
            			}
            		}
            		else {
HXLINE(1107)			Bool _hx_tmp11 = hx::IsNotNull( this->canvas );
HXDLIN(1107)			if (_hx_tmp11) {
HXLINE(1109)				Float _hx_tmp12 = (((((Float)-0.5) * this->width) * (this->scaleX - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->x);
HXDLIN(1109)				this->canvas->set_x(_hx_tmp12);
HXLINE(1110)				Float _hx_tmp13 = (((((Float)-0.5) * this->height) * (this->scaleY - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->y);
HXDLIN(1110)				this->canvas->set_y(_hx_tmp13);
HXLINE(1112)				this->canvas->set_scaleX(this->totalScaleX);
HXLINE(1113)				this->canvas->set_scaleY(this->totalScaleY);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateInternalSpritePositions,(void))

void FlxCamera_obj::follow( ::flixel::FlxObject Target,::hx::EnumBase Style, ::Dynamic Lerp){
            	HX_STACK_FRAME("flixel.FlxCamera","follow",0x137f0aba,"flixel.FlxCamera.follow","flixel/FlxCamera.hx",1138,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Target,"Target")
            	HX_STACK_ARG(Style,"Style")
            	HX_STACK_ARG(Lerp,"Lerp")
HXLINE(1139)		Bool _hx_tmp = hx::IsNull( Style );
HXDLIN(1139)		if (_hx_tmp) {
HXLINE(1140)			Style = ::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn();
            		}
HXLINE(1142)		Bool _hx_tmp1 = hx::IsNull( Lerp );
HXDLIN(1142)		if (_hx_tmp1) {
HXLINE(1143)			Lerp = ((Float)(int)60 / (Float)::flixel::FlxG_obj::updateFramerate);
            		}
HXLINE(1145)		this->style = Style;
HXLINE(1146)		this->target = Target;
HXLINE(1147)		this->set_followLerp(Lerp);
HXLINE(1148)		HX_VAR( Float,helper);
HXLINE(1149)		HX_VARI( Float,w) = (int)0;
HXLINE(1150)		HX_VARI( Float,h) = (int)0;
HXLINE(1151)		this->_lastTargetPosition = null();
HXLINE(1153)		Int _hx_tmp2 = ( ( ::hx::EnumBase)(Style) )->_hx_getIndex();
HXDLIN(1153)		switch((int)(_hx_tmp2)){
            			case (int)0: {
HXLINE(1156)				Bool _hx_tmp3 = hx::IsNotNull( this->target );
HXDLIN(1156)				if (_hx_tmp3) {
HXLINE(1158)					w = this->target->get_width();
HXLINE(1159)					h = this->target->get_height();
            				}
HXLINE(1161)				Float X = ((Float)(this->width - w) / (Float)(int)2);
HXDLIN(1161)				Float Y = (((Float)(this->height - h) / (Float)(int)2) - (h * ((Float)0.25)));
HXDLIN(1161)				HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1161)				_this->x = X;
HXDLIN(1161)				_this->y = Y;
HXDLIN(1161)				_this->width = w;
HXDLIN(1161)				_this->height = h;
HXDLIN(1161)				_this->_inPool = false;
HXDLIN(1161)				this->deadzone = _this;
            			}
            			break;
            			case (int)1: {
HXLINE(1164)				HX_VARI_NAME( Float,w1,"w") = ((Float)this->width / (Float)(int)8);
HXLINE(1165)				HX_VARI_NAME( Float,h1,"h") = ((Float)this->height / (Float)(int)3);
HXLINE(1166)				Float X1 = ((Float)(this->width - w1) / (Float)(int)2);
HXDLIN(1166)				Float Y1 = (((Float)(this->height - h1) / (Float)(int)2) - (h1 * ((Float)0.25)));
HXDLIN(1166)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1166)				_this1->x = X1;
HXDLIN(1166)				_this1->y = Y1;
HXDLIN(1166)				_this1->width = w1;
HXDLIN(1166)				_this1->height = h1;
HXDLIN(1166)				_this1->_inPool = false;
HXDLIN(1166)				this->deadzone = _this1;
            			}
            			break;
            			case (int)2: {
HXLINE(1169)				Float _hx_tmp4 = ::Math_obj::max(this->width,this->height);
HXDLIN(1169)				helper = ((Float)_hx_tmp4 / (Float)(int)4);
HXLINE(1170)				Float X2 = ((Float)(this->width - helper) / (Float)(int)2);
HXDLIN(1170)				Float Y2 = ((Float)(this->height - helper) / (Float)(int)2);
HXDLIN(1170)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1170)				_this2->x = X2;
HXDLIN(1170)				_this2->y = Y2;
HXDLIN(1170)				_this2->width = helper;
HXDLIN(1170)				_this2->height = helper;
HXDLIN(1170)				_this2->_inPool = false;
HXDLIN(1170)				this->deadzone = _this2;
            			}
            			break;
            			case (int)3: {
HXLINE(1173)				Float _hx_tmp5 = ::Math_obj::max(this->width,this->height);
HXDLIN(1173)				helper = ((Float)_hx_tmp5 / (Float)(int)8);
HXLINE(1174)				Float X3 = ((Float)(this->width - helper) / (Float)(int)2);
HXDLIN(1174)				Float Y3 = ((Float)(this->height - helper) / (Float)(int)2);
HXDLIN(1174)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this3,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1174)				_this3->x = X3;
HXDLIN(1174)				_this3->y = Y3;
HXDLIN(1174)				_this3->width = helper;
HXDLIN(1174)				_this3->height = helper;
HXDLIN(1174)				_this3->_inPool = false;
HXDLIN(1174)				this->deadzone = _this3;
            			}
            			break;
            			case (int)4: {
HXLINE(1177)				Float Width = this->width;
HXDLIN(1177)				Float Height = this->height;
HXDLIN(1177)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this4,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1177)				_this4->x = (int)0;
HXDLIN(1177)				_this4->y = (int)0;
HXDLIN(1177)				_this4->width = Width;
HXDLIN(1177)				_this4->height = Height;
HXDLIN(1177)				_this4->_inPool = false;
HXDLIN(1177)				this->deadzone = _this4;
            			}
            			break;
            			case (int)5: {
HXLINE(1180)				this->deadzone = null();
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxCamera_obj,follow,(void))

void FlxCamera_obj::snapToTarget(){
            	HX_STACK_FRAME("flixel.FlxCamera","snapToTarget",0x8eeb1d9f,"flixel.FlxCamera.snapToTarget","flixel/FlxCamera.hx",1189,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1190)		this->updateFollow();
HXLINE(1191)		{
HXLINE(1191)			HX_VARI(  ::flixel::math::FlxPoint,_this) = this->scroll;
HXDLIN(1191)			HX_VARI(  ::flixel::math::FlxPoint,point) = this->_scrollTarget;
HXDLIN(1191)			_this->set_x(point->x);
HXDLIN(1191)			_this->set_y(point->y);
HXDLIN(1191)			Bool _hx_tmp = point->_weak;
HXDLIN(1191)			if (_hx_tmp) {
HXLINE(1191)				point->put();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,snapToTarget,(void))

void FlxCamera_obj::focusOn( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.FlxCamera","focusOn",0xd304f1ae,"flixel.FlxCamera.focusOn","flixel/FlxCamera.hx",1200,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE(1201)		Float _hx_tmp = (point->x - (this->width * ((Float)0.5)));
HXDLIN(1201)		Float _hx_tmp1 = (point->y - (this->height * ((Float)0.5)));
HXDLIN(1201)		this->scroll->set(_hx_tmp,_hx_tmp1);
HXLINE(1202)		Bool _hx_tmp2 = point->_weak;
HXDLIN(1202)		if (_hx_tmp2) {
HXLINE(1202)			point->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,focusOn,(void))

void FlxCamera_obj::flash(hx::Null< Int >  __o_Color,hx::Null< Float >  __o_Duration, ::Dynamic OnComplete,hx::Null< Bool >  __o_Force){
Int Color = __o_Color.Default(-1);
Float Duration = __o_Duration.Default(1);
Bool Force = __o_Force.Default(false);
            	HX_STACK_FRAME("flixel.FlxCamera","flash",0x27663887,"flixel.FlxCamera.flash","flixel/FlxCamera.hx",1214,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Color,"Color")
            	HX_STACK_ARG(Duration,"Duration")
            	HX_STACK_ARG(OnComplete,"OnComplete")
            	HX_STACK_ARG(Force,"Force")
HXLINE(1215)		Bool _hx_tmp;
HXDLIN(1215)		if (!(Force)) {
HXLINE(1215)			_hx_tmp = (this->_fxFlashAlpha > ((Float)0.0));
            		}
            		else {
HXLINE(1215)			_hx_tmp = false;
            		}
HXDLIN(1215)		if (_hx_tmp) {
HXLINE(1217)			return;
            		}
HXLINE(1219)		this->_fxFlashColor = Color;
HXLINE(1220)		Bool _hx_tmp1 = (Duration <= (int)0);
HXDLIN(1220)		if (_hx_tmp1) {
HXLINE(1222)			Duration = ((Float)0.000001);
            		}
HXLINE(1224)		this->_fxFlashDuration = Duration;
HXLINE(1225)		this->_fxFlashComplete = OnComplete;
HXLINE(1226)		this->_fxFlashAlpha = ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,flash,(void))

void FlxCamera_obj::fade(hx::Null< Int >  __o_Color,hx::Null< Float >  __o_Duration,hx::Null< Bool >  __o_FadeIn, ::Dynamic OnComplete,hx::Null< Bool >  __o_Force){
Int Color = __o_Color.Default(-16777216);
Float Duration = __o_Duration.Default(1);
Bool FadeIn = __o_FadeIn.Default(false);
Bool Force = __o_Force.Default(false);
            	HX_STACK_FRAME("flixel.FlxCamera","fade",0xa5741a85,"flixel.FlxCamera.fade","flixel/FlxCamera.hx",1239,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Color,"Color")
            	HX_STACK_ARG(Duration,"Duration")
            	HX_STACK_ARG(FadeIn,"FadeIn")
            	HX_STACK_ARG(OnComplete,"OnComplete")
            	HX_STACK_ARG(Force,"Force")
HXLINE(1240)		Bool _hx_tmp;
HXDLIN(1240)		if (!(this->_fxFadeCompleted)) {
HXLINE(1240)			_hx_tmp = !(Force);
            		}
            		else {
HXLINE(1240)			_hx_tmp = false;
            		}
HXDLIN(1240)		if (_hx_tmp) {
HXLINE(1241)			return;
            		}
HXLINE(1243)		this->_fxFadeColor = Color;
HXLINE(1244)		Bool _hx_tmp1 = (Duration <= (int)0);
HXDLIN(1244)		if (_hx_tmp1) {
HXLINE(1245)			Duration = ((Float)0.000001);
            		}
HXLINE(1247)		this->_fxFadeIn = FadeIn;
HXLINE(1248)		this->_fxFadeDuration = Duration;
HXLINE(1249)		this->_fxFadeComplete = OnComplete;
HXLINE(1251)		Float _hx_tmp2;
HXDLIN(1251)		if (this->_fxFadeIn) {
HXLINE(1251)			_hx_tmp2 = ((Float)0.999999);
            		}
            		else {
HXLINE(1251)			_hx_tmp2 = ((Float)0.000001);
            		}
HXDLIN(1251)		this->_fxFadeAlpha = _hx_tmp2;
HXLINE(1252)		this->_fxFadeCompleted = false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,fade,(void))

void FlxCamera_obj::shake(hx::Null< Float >  __o_Intensity,hx::Null< Float >  __o_Duration, ::Dynamic OnComplete,hx::Null< Bool >  __o_Force,::hx::EnumBase Axes){
Float Intensity = __o_Intensity.Default(((Float)0.05));
Float Duration = __o_Duration.Default(((Float)0.5));
Bool Force = __o_Force.Default(true);
            	HX_STACK_FRAME("flixel.FlxCamera","shake",0xa0f6e19d,"flixel.FlxCamera.shake","flixel/FlxCamera.hx",1265,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Intensity,"Intensity")
            	HX_STACK_ARG(Duration,"Duration")
            	HX_STACK_ARG(OnComplete,"OnComplete")
            	HX_STACK_ARG(Force,"Force")
            	HX_STACK_ARG(Axes,"Axes")
HXLINE(1266)		Bool _hx_tmp = hx::IsNull( Axes );
HXDLIN(1266)		if (_hx_tmp) {
HXLINE(1267)			Axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            		}
HXLINE(1269)		Bool _hx_tmp1;
HXDLIN(1269)		if (!(Force)) {
HXLINE(1269)			if ((this->_fxShakeOffset->x == (int)0)) {
HXLINE(1269)				_hx_tmp1 = (this->_fxShakeOffset->y != (int)0);
            			}
            			else {
HXLINE(1269)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(1269)			_hx_tmp1 = false;
            		}
HXDLIN(1269)		if (_hx_tmp1) {
HXLINE(1271)			return;
            		}
HXLINE(1273)		this->_fxShakeIntensity = Intensity;
HXLINE(1274)		this->_fxShakeDuration = Duration;
HXLINE(1275)		this->_fxShakeComplete = OnComplete;
HXLINE(1276)		this->_fxShakeAxes = Axes;
HXLINE(1277)		this->_fxShakeOffset->set(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,shake,(void))

void FlxCamera_obj::stopFX(){
            	HX_STACK_FRAME("flixel.FlxCamera","stopFX",0x29222b1d,"flixel.FlxCamera.stopFX","flixel/FlxCamera.hx",1284,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1285)		this->_fxFlashAlpha = ((Float)0.0);
HXLINE(1286)		this->_fxFadeAlpha = ((Float)0.0);
HXLINE(1287)		this->_fxShakeDuration = (int)0;
HXLINE(1288)		this->updateFlashSpritePosition();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,stopFX,(void))

void FlxCamera_obj::setFilters(::Array< ::Dynamic> filters){
            	HX_STACK_FRAME("flixel.FlxCamera","setFilters",0x0e7f1802,"flixel.FlxCamera.setFilters","flixel/FlxCamera.hx",1296,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filters,"filters")
HXLINE(1296)		this->_filters = filters;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,setFilters,(void))

 ::flixel::FlxCamera FlxCamera_obj::copyFrom( ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.FlxCamera","copyFrom",0x88512948,"flixel.FlxCamera.copyFrom","flixel/FlxCamera.hx",1306,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1307)		this->setScrollBounds(Camera->minScrollX,Camera->maxScrollX,Camera->minScrollY,Camera->maxScrollY);
HXLINE(1309)		this->target = Camera->target;
HXLINE(1311)		Bool _hx_tmp = hx::IsNotNull( this->target );
HXDLIN(1311)		if (_hx_tmp) {
HXLINE(1313)			Bool _hx_tmp1 = hx::IsNull( Camera->deadzone );
HXDLIN(1313)			if (_hx_tmp1) {
HXLINE(1315)				this->deadzone = null();
            			}
            			else {
HXLINE(1319)				Bool _hx_tmp2 = hx::IsNull( this->deadzone );
HXDLIN(1319)				if (_hx_tmp2) {
HXLINE(1321)					Float X = (int)0;
HXDLIN(1321)					Float Y = (int)0;
HXDLIN(1321)					Float Width = (int)0;
HXDLIN(1321)					Float Height = (int)0;
HXDLIN(1321)					HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1321)					_this->x = X;
HXDLIN(1321)					_this->y = Y;
HXDLIN(1321)					_this->width = Width;
HXDLIN(1321)					_this->height = Height;
HXDLIN(1321)					_this->_inPool = false;
HXDLIN(1321)					this->deadzone = _this;
            				}
HXLINE(1323)				{
HXLINE(1323)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->deadzone;
HXDLIN(1323)					HX_VARI(  ::flixel::math::FlxRect,Rect) = Camera->deadzone;
HXDLIN(1323)					_this1->x = Rect->x;
HXDLIN(1323)					_this1->y = Rect->y;
HXDLIN(1323)					_this1->width = Rect->width;
HXDLIN(1323)					_this1->height = Rect->height;
HXDLIN(1323)					Bool _hx_tmp3 = Rect->_weak;
HXDLIN(1323)					if (_hx_tmp3) {
HXLINE(1323)						Bool _hx_tmp4 = !(Rect->_inPool);
HXDLIN(1323)						if (_hx_tmp4) {
HXLINE(1323)							Rect->_inPool = true;
HXDLIN(1323)							Rect->_weak = false;
HXDLIN(1323)							::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            						}
            					}
            				}
            			}
            		}
HXLINE(1326)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,copyFrom,return )

void FlxCamera_obj::fill(Int Color,hx::Null< Bool >  __o_BlendAlpha,hx::Null< Float >  __o_FxAlpha, ::openfl::_legacy::display::Graphics graphics){
Bool BlendAlpha = __o_BlendAlpha.Default(true);
Float FxAlpha = __o_FxAlpha.Default(((Float)1.0));
            	HX_STACK_FRAME("flixel.FlxCamera","fill",0xa57a338c,"flixel.FlxCamera.fill","flixel/FlxCamera.hx",1337,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Color,"Color")
            	HX_STACK_ARG(BlendAlpha,"BlendAlpha")
            	HX_STACK_ARG(FxAlpha,"FxAlpha")
            	HX_STACK_ARG(graphics,"graphics")
HXLINE(1337)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1337)		if (_hx_tmp) {
HXLINE(1339)			if (BlendAlpha) {
HXLINE(1341)				this->_fill->fillRect(this->_flashRect,Color);
HXLINE(1342)				this->buffer->copyPixels(this->_fill,this->_flashRect,this->_flashPoint,null(),null(),BlendAlpha);
            			}
            			else {
HXLINE(1346)				this->buffer->fillRect(this->_flashRect,Color);
            			}
            		}
            		else {
HXLINE(1351)			if ((FxAlpha == (int)0)) {
HXLINE(1353)				return;
            			}
HXLINE(1356)			HX_VAR(  ::openfl::_legacy::display::Graphics,targetGraphics);
HXDLIN(1356)			Bool _hx_tmp1 = hx::IsNull( graphics );
HXDLIN(1356)			if (_hx_tmp1) {
HXLINE(1356)				targetGraphics = this->canvas->get_graphics();
            			}
            			else {
HXLINE(1356)				targetGraphics = graphics;
            			}
HXLINE(1358)			targetGraphics->beginFill(Color,FxAlpha);
HXLINE(1361)			Int _hx_tmp2 = (this->width + (int)2);
HXDLIN(1361)			Int _hx_tmp3 = (this->height + (int)2);
HXDLIN(1361)			targetGraphics->drawRect((int)-1,(int)-1,_hx_tmp2,_hx_tmp3);
HXLINE(1362)			targetGraphics->endFill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,fill,(void))

void FlxCamera_obj::drawFX(){
            	HX_STACK_FRAME("flixel.FlxCamera","drawFX",0xf9beeb9f,"flixel.FlxCamera.drawFX","flixel/FlxCamera.hx",1371,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1372)		HX_VAR( Float,alphaComponent);
HXLINE(1375)		Bool _hx_tmp = (this->_fxFlashAlpha > ((Float)0.0));
HXDLIN(1375)		if (_hx_tmp) {
HXLINE(1377)			alphaComponent = ((int)((int)this->_fxFlashColor >> (int)(int)24) & (int)(int)255);
HXLINE(1379)			Bool _hx_tmp1 = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1379)			if (_hx_tmp1) {
HXLINE(1381)				Float _hx_tmp2;
HXDLIN(1381)				if ((alphaComponent <= (int)0)) {
HXLINE(1381)					_hx_tmp2 = (int)255;
            				}
            				else {
HXLINE(1381)					_hx_tmp2 = alphaComponent;
            				}
HXDLIN(1381)				Float _hx_tmp3 = (_hx_tmp2 * this->_fxFlashAlpha);
HXDLIN(1381)				Int _hx_tmp4 = ::Std_obj::_hx_int(_hx_tmp3);
HXDLIN(1381)				Int _hx_tmp5 = (((int)_hx_tmp4 << (int)(int)24) + ((int)this->_fxFlashColor & (int)(int)16777215));
HXDLIN(1381)				this->fill(_hx_tmp5,null(),null(),null());
            			}
            			else {
HXLINE(1385)				Int _hx_tmp6 = ((int)this->_fxFlashColor & (int)(int)16777215);
HXDLIN(1385)				Float _hx_tmp7;
HXDLIN(1385)				if ((alphaComponent <= (int)0)) {
HXLINE(1385)					_hx_tmp7 = (int)255;
            				}
            				else {
HXLINE(1385)					_hx_tmp7 = alphaComponent;
            				}
HXDLIN(1385)				Float _hx_tmp8 = ((Float)(_hx_tmp7 * this->_fxFlashAlpha) / (Float)(int)255);
HXDLIN(1385)				 ::openfl::_legacy::display::Graphics _hx_tmp9 = this->canvas->get_graphics();
HXDLIN(1385)				this->fill(_hx_tmp6,true,_hx_tmp8,_hx_tmp9);
            			}
            		}
HXLINE(1390)		Bool _hx_tmp10 = (this->_fxFadeAlpha > ((Float)0.0));
HXDLIN(1390)		if (_hx_tmp10) {
HXLINE(1392)			alphaComponent = ((int)((int)this->_fxFadeColor >> (int)(int)24) & (int)(int)255);
HXLINE(1394)			Bool _hx_tmp11 = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1394)			if (_hx_tmp11) {
HXLINE(1396)				Float _hx_tmp12;
HXDLIN(1396)				if ((alphaComponent <= (int)0)) {
HXLINE(1396)					_hx_tmp12 = (int)255;
            				}
            				else {
HXLINE(1396)					_hx_tmp12 = alphaComponent;
            				}
HXDLIN(1396)				Float _hx_tmp13 = (_hx_tmp12 * this->_fxFadeAlpha);
HXDLIN(1396)				Int _hx_tmp14 = ::Std_obj::_hx_int(_hx_tmp13);
HXDLIN(1396)				Int _hx_tmp15 = (((int)_hx_tmp14 << (int)(int)24) + ((int)this->_fxFadeColor & (int)(int)16777215));
HXDLIN(1396)				this->fill(_hx_tmp15,null(),null(),null());
            			}
            			else {
HXLINE(1400)				Int _hx_tmp16 = ((int)this->_fxFadeColor & (int)(int)16777215);
HXDLIN(1400)				Float _hx_tmp17;
HXDLIN(1400)				if ((alphaComponent <= (int)0)) {
HXLINE(1400)					_hx_tmp17 = (int)255;
            				}
            				else {
HXLINE(1400)					_hx_tmp17 = alphaComponent;
            				}
HXDLIN(1400)				Float _hx_tmp18 = ((Float)(_hx_tmp17 * this->_fxFadeAlpha) / (Float)(int)255);
HXDLIN(1400)				 ::openfl::_legacy::display::Graphics _hx_tmp19 = this->canvas->get_graphics();
HXDLIN(1400)				this->fill(_hx_tmp16,true,_hx_tmp18,_hx_tmp19);
            			}
            		}
HXLINE(1404)		Bool _hx_tmp20;
HXDLIN(1404)		if ((this->_fxShakeOffset->x == (int)0)) {
HXLINE(1404)			_hx_tmp20 = (this->_fxShakeOffset->y != (int)0);
            		}
            		else {
HXLINE(1404)			_hx_tmp20 = true;
            		}
HXDLIN(1404)		if (_hx_tmp20) {
HXLINE(1406)			{
HXLINE(1406)				HX_VARI(  ::openfl::_legacy::display::Sprite,_g) = this->flashSprite;
HXDLIN(1406)				Float _hx_tmp21 = _g->get_x();
HXDLIN(1406)				Float _hx_tmp22 = (_hx_tmp21 + (this->_fxShakeOffset->x * ::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN(1406)				_g->set_x(_hx_tmp22);
            			}
HXLINE(1407)			{
HXLINE(1407)				HX_VARI_NAME(  ::openfl::_legacy::display::Sprite,_g1,"_g") = this->flashSprite;
HXDLIN(1407)				Float _hx_tmp23 = _g1->get_y();
HXDLIN(1407)				Float _hx_tmp24 = (_hx_tmp23 + (this->_fxShakeOffset->y * ::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN(1407)				_g1->set_y(_hx_tmp24);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,drawFX,(void))

void FlxCamera_obj::checkResize(){
            	HX_STACK_FRAME("flixel.FlxCamera","checkResize",0x465b6af3,"flixel.FlxCamera.checkResize","flixel/FlxCamera.hx",1413,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1414)		Bool _hx_tmp;
HXDLIN(1414)		if (!(::flixel::FlxG_obj::renderBlit)) {
HXLINE(1414)			_hx_tmp = !(this->regen);
            		}
            		else {
HXLINE(1414)			_hx_tmp = false;
            		}
HXDLIN(1414)		if (_hx_tmp) {
HXLINE(1415)			return;
            		}
HXLINE(1417)		Bool _hx_tmp1;
HXDLIN(1417)		Int _hx_tmp2 = this->width;
HXDLIN(1417)		Int _hx_tmp3 = this->buffer->get_width();
HXDLIN(1417)		if ((_hx_tmp2 == _hx_tmp3)) {
HXLINE(1417)			Int _hx_tmp4 = this->height;
HXDLIN(1417)			Int _hx_tmp5 = this->buffer->get_height();
HXDLIN(1417)			_hx_tmp1 = (_hx_tmp4 != _hx_tmp5);
            		}
            		else {
HXLINE(1417)			_hx_tmp1 = true;
            		}
HXDLIN(1417)		if (_hx_tmp1) {
HXLINE(1419)			HX_VARI(  ::flixel::graphics::FlxGraphic,oldBuffer) = this->screen->graphic;
HXLINE(1420)			this->buffer =  ::openfl::_legacy::display::BitmapData_obj::__new(this->width,this->height,true,(int)0,null());
HXLINE(1421)			this->screen->set_pixels(this->buffer);
HXLINE(1422)			this->screen->origin->set(null(),null());
HXLINE(1423)			this->_flashBitmap->set_bitmapData(this->buffer);
HXLINE(1424)			this->_flashRect->width = this->width;
HXLINE(1425)			this->_flashRect->height = this->height;
HXLINE(1426)			this->_fill = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_fill);
HXLINE(1427)			this->_fill =  ::openfl::_legacy::display::BitmapData_obj::__new(this->width,this->height,true,(int)0,null());
HXLINE(1428)			::flixel::FlxG_obj::bitmap->removeIfNoUse(oldBuffer);
            		}
HXLINE(1431)		this->regen = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,checkResize,(void))

void FlxCamera_obj::setSize(Int Width,Int Height){
            	HX_STACK_FRAME("flixel.FlxCamera","setSize",0xa359881a,"flixel.FlxCamera.setSize","flixel/FlxCamera.hx",1441,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE(1442)		this->set_width(Width);
HXLINE(1443)		this->set_height(Height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setSize,(void))

void FlxCamera_obj::setPosition(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.FlxCamera","setPosition",0x5729a882,"flixel.FlxCamera.setPosition","flixel/FlxCamera.hx",1454,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(1455)		this->set_x(X);
HXLINE(1456)		this->set_y(Y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setPosition,(void))

void FlxCamera_obj::setScrollBoundsRect(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< Bool >  __o_UpdateWorld){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Float Width = __o_Width.Default(0);
Float Height = __o_Height.Default(0);
Bool UpdateWorld = __o_UpdateWorld.Default(false);
            	HX_STACK_FRAME("flixel.FlxCamera","setScrollBoundsRect",0xd34a357f,"flixel.FlxCamera.setScrollBoundsRect","flixel/FlxCamera.hx",1469,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(UpdateWorld,"UpdateWorld")
HXLINE(1470)		if (UpdateWorld) {
HXLINE(1472)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::FlxG_obj::worldBounds;
HXDLIN(1472)			_this->x = X;
HXDLIN(1472)			_this->y = Y;
HXDLIN(1472)			_this->width = Width;
HXDLIN(1472)			_this->height = Height;
            		}
HXLINE(1475)		this->setScrollBounds(X,(X + Width),Y,(Y + Height));
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,setScrollBoundsRect,(void))

void FlxCamera_obj::setScrollBounds( ::Dynamic MinX, ::Dynamic MaxX, ::Dynamic MinY, ::Dynamic MaxY){
            	HX_STACK_FRAME("flixel.FlxCamera","setScrollBounds",0x4d9242bb,"flixel.FlxCamera.setScrollBounds","flixel/FlxCamera.hx",1488,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MinX,"MinX")
            	HX_STACK_ARG(MaxX,"MaxX")
            	HX_STACK_ARG(MinY,"MinY")
            	HX_STACK_ARG(MaxY,"MaxY")
HXLINE(1489)		this->minScrollX = MinX;
HXLINE(1490)		this->maxScrollX = MaxX;
HXLINE(1491)		this->minScrollY = MinY;
HXLINE(1492)		this->maxScrollY = MaxY;
HXLINE(1493)		this->updateScroll();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,setScrollBounds,(void))

void FlxCamera_obj::setScale(Float X,Float Y){
            	HX_STACK_FRAME("flixel.FlxCamera","setScale",0x46f35511,"flixel.FlxCamera.setScale","flixel/FlxCamera.hx",1504,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(1505)		this->scaleX = X;
HXLINE(1506)		this->scaleY = Y;
HXLINE(1508)		this->totalScaleX = (this->scaleX * ::flixel::FlxG_obj::scaleMode->scale->x);
HXLINE(1509)		this->totalScaleY = (this->scaleY * ::flixel::FlxG_obj::scaleMode->scale->y);
HXLINE(1511)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1511)		if (_hx_tmp) {
HXLINE(1513)			this->_flashBitmap->set_scaleX(this->totalScaleX);
HXLINE(1514)			this->_flashBitmap->set_scaleY(this->totalScaleY);
            		}
            		else {
HXLINE(1518)			this->_transform->identity();
HXLINE(1519)			this->_transform->scale(this->totalScaleX,this->totalScaleY);
            		}
HXLINE(1522)		this->updateFlashSpritePosition();
HXLINE(1523)		this->updateScrollRect();
HXLINE(1524)		this->updateInternalSpritePositions();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setScale,(void))

void FlxCamera_obj::onResize(){
            	HX_STACK_FRAME("flixel.FlxCamera","onResize",0xa8186dfc,"flixel.FlxCamera.onResize","flixel/FlxCamera.hx",1532,0xe7aeb95a)
            	HX_STACK_THIS(this)
HXLINE(1533)		this->updateFlashOffset();
HXLINE(1534)		this->setScale(this->scaleX,this->scaleY);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,onResize,(void))

Float FlxCamera_obj::set_followLerp(Float Value){
            	HX_STACK_FRAME("flixel.FlxCamera","set_followLerp",0xf2f9b78e,"flixel.FlxCamera.set_followLerp","flixel/FlxCamera.hx",1539,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1539)		HX_VARI(  ::Dynamic,Max) = ((Float)(int)60 / (Float)::flixel::FlxG_obj::updateFramerate);
HXDLIN(1539)		HX_VAR( Float,lowerBound);
HXDLIN(1539)		if ((Value < (int)0)) {
HXLINE(1539)			lowerBound = (int)0;
            		}
            		else {
HXLINE(1539)			lowerBound = Value;
            		}
HXDLIN(1539)		Float _hx_tmp;
HXDLIN(1539)		Bool _hx_tmp1;
HXDLIN(1539)		Bool _hx_tmp2 = hx::IsNotNull( Max );
HXDLIN(1539)		if (_hx_tmp2) {
HXLINE(1539)			_hx_tmp1 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE(1539)			_hx_tmp1 = false;
            		}
HXDLIN(1539)		if (_hx_tmp1) {
HXLINE(1539)			_hx_tmp = Max;
            		}
            		else {
HXLINE(1539)			_hx_tmp = lowerBound;
            		}
HXDLIN(1539)		return (this->followLerp = _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_followLerp,return )

Int FlxCamera_obj::set_width(Int Value){
            	HX_STACK_FRAME("flixel.FlxCamera","set_width",0x2386b8c0,"flixel.FlxCamera.set_width","flixel/FlxCamera.hx",1543,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1544)		if ((Value > (int)0)) {
HXLINE(1546)			this->width = Value;
HXLINE(1548)			this->updateFlashOffset();
HXLINE(1549)			this->updateScrollRect();
HXLINE(1550)			this->updateInternalSpritePositions();
            		}
HXLINE(1552)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_width,return )

Int FlxCamera_obj::set_height(Int Value){
            	HX_STACK_FRAME("flixel.FlxCamera","set_height",0xa8aa67ed,"flixel.FlxCamera.set_height","flixel/FlxCamera.hx",1556,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1557)		if ((Value > (int)0)) {
HXLINE(1559)			this->height = Value;
HXLINE(1561)			this->updateFlashOffset();
HXLINE(1562)			this->updateScrollRect();
HXLINE(1563)			this->updateInternalSpritePositions();
            		}
HXLINE(1565)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_height,return )

Float FlxCamera_obj::set_zoom(Float Zoom){
            	HX_STACK_FRAME("flixel.FlxCamera","set_zoom",0x3f00d599,"flixel.FlxCamera.set_zoom","flixel/FlxCamera.hx",1569,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Zoom,"Zoom")
HXLINE(1570)		Float _hx_tmp;
HXDLIN(1570)		if ((Zoom == (int)0)) {
HXLINE(1570)			_hx_tmp = ::flixel::FlxCamera_obj::defaultZoom;
            		}
            		else {
HXLINE(1570)			_hx_tmp = Zoom;
            		}
HXDLIN(1570)		this->zoom = _hx_tmp;
HXLINE(1571)		this->setScale(this->zoom,this->zoom);
HXLINE(1572)		return this->zoom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_zoom,return )

Float FlxCamera_obj::set_alpha(Float Alpha){
            	HX_STACK_FRAME("flixel.FlxCamera","set_alpha",0x7abaaa18,"flixel.FlxCamera.set_alpha","flixel/FlxCamera.hx",1576,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Alpha,"Alpha")
HXLINE(1577)		HX_VAR( Float,lowerBound);
HXDLIN(1577)		if ((Alpha < (int)0)) {
HXLINE(1577)			lowerBound = (int)0;
            		}
            		else {
HXLINE(1577)			lowerBound = Alpha;
            		}
HXDLIN(1577)		 ::Dynamic _hx_tmp;
HXDLIN(1577)		if ((lowerBound > (int)1)) {
HXLINE(1577)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE(1577)			_hx_tmp = lowerBound;
            		}
HXDLIN(1577)		this->alpha = _hx_tmp;
HXLINE(1578)		Bool _hx_tmp1 = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1578)		if (_hx_tmp1) {
HXLINE(1580)			this->_flashBitmap->set_alpha(Alpha);
            		}
            		else {
HXLINE(1584)			this->canvas->set_alpha(Alpha);
            		}
HXLINE(1586)		return Alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_alpha,return )

Float FlxCamera_obj::set_angle(Float Angle){
            	HX_STACK_FRAME("flixel.FlxCamera","set_angle",0x7c06468d,"flixel.FlxCamera.set_angle","flixel/FlxCamera.hx",1590,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Angle,"Angle")
HXLINE(1591)		this->angle = Angle;
HXLINE(1592)		this->flashSprite->set_rotation(Angle);
HXLINE(1593)		return Angle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_angle,return )

Int FlxCamera_obj::set_color(Int Color){
            	HX_STACK_FRAME("flixel.FlxCamera","set_color",0xa380741d,"flixel.FlxCamera.set_color","flixel/FlxCamera.hx",1597,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Color,"Color")
HXLINE(1598)		this->color = Color;
HXLINE(1599)		HX_VAR(  ::openfl::_legacy::geom::ColorTransform,colorTransform);
HXLINE(1601)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1601)		if (_hx_tmp) {
HXLINE(1603)			Bool _hx_tmp1 = hx::IsNull( this->_flashBitmap );
HXDLIN(1603)			if (_hx_tmp1) {
HXLINE(1605)				return Color;
            			}
HXLINE(1607)			colorTransform = this->_flashBitmap->get_transform()->get_colorTransform();
            		}
            		else {
HXLINE(1611)			colorTransform = this->canvas->get_transform()->get_colorTransform();
            		}
HXLINE(1614)		Float _hx_tmp2 = ((Float)((int)((int)this->color >> (int)(int)16) & (int)(int)255) / (Float)(int)255);
HXDLIN(1614)		colorTransform->redMultiplier = _hx_tmp2;
HXLINE(1615)		Float _hx_tmp3 = ((Float)((int)((int)this->color >> (int)(int)8) & (int)(int)255) / (Float)(int)255);
HXDLIN(1615)		colorTransform->greenMultiplier = _hx_tmp3;
HXLINE(1616)		Int _hx_tmp4 = ((int)this->color & (int)(int)255);
HXDLIN(1616)		colorTransform->blueMultiplier = ((Float)_hx_tmp4 / (Float)(int)255);
HXLINE(1618)		Bool _hx_tmp5 = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1618)		if (_hx_tmp5) {
HXLINE(1620)			this->_flashBitmap->get_transform()->set_colorTransform(colorTransform);
            		}
            		else {
HXLINE(1624)			this->canvas->get_transform()->set_colorTransform(colorTransform);
            		}
HXLINE(1627)		return Color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_color,return )

Bool FlxCamera_obj::set_antialiasing(Bool Antialiasing){
            	HX_STACK_FRAME("flixel.FlxCamera","set_antialiasing",0x0f9a3f7a,"flixel.FlxCamera.set_antialiasing","flixel/FlxCamera.hx",1631,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Antialiasing,"Antialiasing")
HXLINE(1632)		this->antialiasing = Antialiasing;
HXLINE(1633)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1633)		if (_hx_tmp) {
HXLINE(1635)			this->_flashBitmap->set_smoothing(Antialiasing);
            		}
HXLINE(1637)		return Antialiasing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_antialiasing,return )

Float FlxCamera_obj::set_x(Float x){
            	HX_STACK_FRAME("flixel.FlxCamera","set_x",0x9f099e32,"flixel.FlxCamera.set_x","flixel/FlxCamera.hx",1641,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(1642)		this->x = x;
HXLINE(1643)		this->updateFlashSpritePosition();
HXLINE(1644)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_x,return )

Float FlxCamera_obj::set_y(Float y){
            	HX_STACK_FRAME("flixel.FlxCamera","set_y",0x9f099e33,"flixel.FlxCamera.set_y","flixel/FlxCamera.hx",1648,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(y,"y")
HXLINE(1649)		this->y = y;
HXLINE(1650)		this->updateFlashSpritePosition();
HXLINE(1651)		return y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_y,return )

Bool FlxCamera_obj::set_visible(Bool visible){
            	HX_STACK_FRAME("flixel.FlxCamera","set_visible",0x8f5a1dac,"flixel.FlxCamera.set_visible","flixel/FlxCamera.hx",1655,0xe7aeb95a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(visible,"visible")
HXLINE(1656)		Bool _hx_tmp = hx::IsNotNull( this->flashSprite );
HXDLIN(1656)		if (_hx_tmp) {
HXLINE(1658)			this->flashSprite->set_visible(visible);
            		}
HXLINE(1660)		return (this->visible = visible);
            	}


Float FlxCamera_obj::defaultZoom;

::Array< ::Dynamic> FlxCamera_obj::defaultCameras;

 ::flixel::graphics::tile::FlxDrawTilesItem FlxCamera_obj::_storageTilesHead;

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::_storageTrianglesHead;

::Array< Float > FlxCamera_obj::drawVertices;

 ::openfl::_legacy::display::Sprite FlxCamera_obj::trianglesSprite;

 ::flixel::math::FlxPoint FlxCamera_obj::renderPoint;

 ::flixel::math::FlxRect FlxCamera_obj::renderRect;


FlxCamera_obj::FlxCamera_obj()
{
}

void FlxCamera_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxCamera);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(scaleX,"scaleX");
	HX_MARK_MEMBER_NAME(scaleY,"scaleY");
	HX_MARK_MEMBER_NAME(totalScaleX,"totalScaleX");
	HX_MARK_MEMBER_NAME(totalScaleY,"totalScaleY");
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(targetOffset,"targetOffset");
	HX_MARK_MEMBER_NAME(followLerp,"followLerp");
	HX_MARK_MEMBER_NAME(deadzone,"deadzone");
	HX_MARK_MEMBER_NAME(minScrollX,"minScrollX");
	HX_MARK_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_MARK_MEMBER_NAME(minScrollY,"minScrollY");
	HX_MARK_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_MARK_MEMBER_NAME(scroll,"scroll");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(regen,"regen");
	HX_MARK_MEMBER_NAME(bgColor,"bgColor");
	HX_MARK_MEMBER_NAME(screen,"screen");
	HX_MARK_MEMBER_NAME(useBgAlphaBlending,"useBgAlphaBlending");
	HX_MARK_MEMBER_NAME(flashSprite,"flashSprite");
	HX_MARK_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(followLead,"followLead");
	HX_MARK_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashOffset,"_flashOffset");
	HX_MARK_MEMBER_NAME(_fxFlashColor,"_fxFlashColor");
	HX_MARK_MEMBER_NAME(_fxFlashDuration,"_fxFlashDuration");
	HX_MARK_MEMBER_NAME(_fxFlashComplete,"_fxFlashComplete");
	HX_MARK_MEMBER_NAME(_fxFlashAlpha,"_fxFlashAlpha");
	HX_MARK_MEMBER_NAME(_fxFadeColor,"_fxFadeColor");
	HX_MARK_MEMBER_NAME(_lastTargetPosition,"_lastTargetPosition");
	HX_MARK_MEMBER_NAME(_scrollTarget,"_scrollTarget");
	HX_MARK_MEMBER_NAME(_fxFadeDuration,"_fxFadeDuration");
	HX_MARK_MEMBER_NAME(_fxFadeIn,"_fxFadeIn");
	HX_MARK_MEMBER_NAME(_fxFadeComplete,"_fxFadeComplete");
	HX_MARK_MEMBER_NAME(_fxFadeCompleted,"_fxFadeCompleted");
	HX_MARK_MEMBER_NAME(_fxFadeAlpha,"_fxFadeAlpha");
	HX_MARK_MEMBER_NAME(_fxShakeIntensity,"_fxShakeIntensity");
	HX_MARK_MEMBER_NAME(_fxShakeDuration,"_fxShakeDuration");
	HX_MARK_MEMBER_NAME(_fxShakeComplete,"_fxShakeComplete");
	HX_MARK_MEMBER_NAME(_fxShakeOffset,"_fxShakeOffset");
	HX_MARK_MEMBER_NAME(_fxShakeAxes,"_fxShakeAxes");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(_filters,"_filters");
	HX_MARK_MEMBER_NAME(initialZoom,"initialZoom");
	HX_MARK_MEMBER_NAME(_fill,"_fill");
	HX_MARK_MEMBER_NAME(_flashBitmap,"_flashBitmap");
	HX_MARK_MEMBER_NAME(_scrollRect,"_scrollRect");
	HX_MARK_MEMBER_NAME(_bounds,"_bounds");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(_transform,"_transform");
	HX_MARK_MEMBER_NAME(_helperMatrix,"_helperMatrix");
	HX_MARK_MEMBER_NAME(_currentDrawItem,"_currentDrawItem");
	HX_MARK_MEMBER_NAME(_headOfDrawStack,"_headOfDrawStack");
	HX_MARK_MEMBER_NAME(_headTiles,"_headTiles");
	HX_MARK_MEMBER_NAME(_headTriangles,"_headTriangles");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxCamera_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(scaleX,"scaleX");
	HX_VISIT_MEMBER_NAME(scaleY,"scaleY");
	HX_VISIT_MEMBER_NAME(totalScaleX,"totalScaleX");
	HX_VISIT_MEMBER_NAME(totalScaleY,"totalScaleY");
	HX_VISIT_MEMBER_NAME(style,"style");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(targetOffset,"targetOffset");
	HX_VISIT_MEMBER_NAME(followLerp,"followLerp");
	HX_VISIT_MEMBER_NAME(deadzone,"deadzone");
	HX_VISIT_MEMBER_NAME(minScrollX,"minScrollX");
	HX_VISIT_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_VISIT_MEMBER_NAME(minScrollY,"minScrollY");
	HX_VISIT_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_VISIT_MEMBER_NAME(scroll,"scroll");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(regen,"regen");
	HX_VISIT_MEMBER_NAME(bgColor,"bgColor");
	HX_VISIT_MEMBER_NAME(screen,"screen");
	HX_VISIT_MEMBER_NAME(useBgAlphaBlending,"useBgAlphaBlending");
	HX_VISIT_MEMBER_NAME(flashSprite,"flashSprite");
	HX_VISIT_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(followLead,"followLead");
	HX_VISIT_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashOffset,"_flashOffset");
	HX_VISIT_MEMBER_NAME(_fxFlashColor,"_fxFlashColor");
	HX_VISIT_MEMBER_NAME(_fxFlashDuration,"_fxFlashDuration");
	HX_VISIT_MEMBER_NAME(_fxFlashComplete,"_fxFlashComplete");
	HX_VISIT_MEMBER_NAME(_fxFlashAlpha,"_fxFlashAlpha");
	HX_VISIT_MEMBER_NAME(_fxFadeColor,"_fxFadeColor");
	HX_VISIT_MEMBER_NAME(_lastTargetPosition,"_lastTargetPosition");
	HX_VISIT_MEMBER_NAME(_scrollTarget,"_scrollTarget");
	HX_VISIT_MEMBER_NAME(_fxFadeDuration,"_fxFadeDuration");
	HX_VISIT_MEMBER_NAME(_fxFadeIn,"_fxFadeIn");
	HX_VISIT_MEMBER_NAME(_fxFadeComplete,"_fxFadeComplete");
	HX_VISIT_MEMBER_NAME(_fxFadeCompleted,"_fxFadeCompleted");
	HX_VISIT_MEMBER_NAME(_fxFadeAlpha,"_fxFadeAlpha");
	HX_VISIT_MEMBER_NAME(_fxShakeIntensity,"_fxShakeIntensity");
	HX_VISIT_MEMBER_NAME(_fxShakeDuration,"_fxShakeDuration");
	HX_VISIT_MEMBER_NAME(_fxShakeComplete,"_fxShakeComplete");
	HX_VISIT_MEMBER_NAME(_fxShakeOffset,"_fxShakeOffset");
	HX_VISIT_MEMBER_NAME(_fxShakeAxes,"_fxShakeAxes");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(_filters,"_filters");
	HX_VISIT_MEMBER_NAME(initialZoom,"initialZoom");
	HX_VISIT_MEMBER_NAME(_fill,"_fill");
	HX_VISIT_MEMBER_NAME(_flashBitmap,"_flashBitmap");
	HX_VISIT_MEMBER_NAME(_scrollRect,"_scrollRect");
	HX_VISIT_MEMBER_NAME(_bounds,"_bounds");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(_transform,"_transform");
	HX_VISIT_MEMBER_NAME(_helperMatrix,"_helperMatrix");
	HX_VISIT_MEMBER_NAME(_currentDrawItem,"_currentDrawItem");
	HX_VISIT_MEMBER_NAME(_headOfDrawStack,"_headOfDrawStack");
	HX_VISIT_MEMBER_NAME(_headTiles,"_headTiles");
	HX_VISIT_MEMBER_NAME(_headTriangles,"_headTriangles");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxCamera_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return hx::Val( zoom); }
		if (HX_FIELD_EQ(inName,"fade") ) { return hx::Val( fade_dyn()); }
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { return hx::Val( style); }
		if (HX_FIELD_EQ(inName,"regen") ) { return hx::Val( regen); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color); }
		if (HX_FIELD_EQ(inName,"_fill") ) { return hx::Val( _fill); }
		if (HX_FIELD_EQ(inName,"flash") ) { return hx::Val( flash_dyn()); }
		if (HX_FIELD_EQ(inName,"shake") ) { return hx::Val( shake_dyn()); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { return hx::Val( scaleX); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { return hx::Val( scaleY); }
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll); }
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		if (HX_FIELD_EQ(inName,"screen") ) { return hx::Val( screen); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"_point") ) { return hx::Val( _point); }
		if (HX_FIELD_EQ(inName,"canvas") ) { return hx::Val( canvas); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"follow") ) { return hx::Val( follow_dyn()); }
		if (HX_FIELD_EQ(inName,"stopFX") ) { return hx::Val( stopFX_dyn()); }
		if (HX_FIELD_EQ(inName,"drawFX") ) { return hx::Val( drawFX_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { return hx::Val( bgColor); }
		if (HX_FIELD_EQ(inName,"_bounds") ) { return hx::Val( _bounds); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"focusOn") ) { return hx::Val( focusOn_dyn()); }
		if (HX_FIELD_EQ(inName,"setSize") ) { return hx::Val( setSize_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { return hx::Val( deadzone); }
		if (HX_FIELD_EQ(inName,"_filters") ) { return hx::Val( _filters); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"setScale") ) { return hx::Val( setScale_dyn()); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return hx::Val( onResize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_zoom") ) { return hx::Val( set_zoom_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_fxFadeIn") ) { return hx::Val( _fxFadeIn); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn()); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn()); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"followLerp") ) { return hx::Val( followLerp); }
		if (HX_FIELD_EQ(inName,"minScrollX") ) { return hx::Val( minScrollX); }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { return hx::Val( maxScrollX); }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { return hx::Val( minScrollY); }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { return hx::Val( maxScrollY); }
		if (HX_FIELD_EQ(inName,"followLead") ) { return hx::Val( followLead); }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return hx::Val( _flashRect); }
		if (HX_FIELD_EQ(inName,"_transform") ) { return hx::Val( _transform); }
		if (HX_FIELD_EQ(inName,"_headTiles") ) { return hx::Val( _headTiles); }
		if (HX_FIELD_EQ(inName,"drawPixels") ) { return hx::Val( drawPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"updateFade") ) { return hx::Val( updateFade_dyn()); }
		if (HX_FIELD_EQ(inName,"setFilters") ) { return hx::Val( setFilters_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalScaleX") ) { return hx::Val( totalScaleX); }
		if (HX_FIELD_EQ(inName,"totalScaleY") ) { return hx::Val( totalScaleY); }
		if (HX_FIELD_EQ(inName,"flashSprite") ) { return hx::Val( flashSprite); }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return hx::Val( _flashPoint); }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { return hx::Val( initialZoom); }
		if (HX_FIELD_EQ(inName,"_scrollRect") ) { return hx::Val( _scrollRect); }
		if (HX_FIELD_EQ(inName,"updateFlash") ) { return hx::Val( updateFlash_dyn()); }
		if (HX_FIELD_EQ(inName,"updateShake") ) { return hx::Val( updateShake_dyn()); }
		if (HX_FIELD_EQ(inName,"checkResize") ) { return hx::Val( checkResize_dyn()); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"targetOffset") ) { return hx::Val( targetOffset); }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return hx::Val( antialiasing); }
		if (HX_FIELD_EQ(inName,"_flashOffset") ) { return hx::Val( _flashOffset); }
		if (HX_FIELD_EQ(inName,"_fxFadeColor") ) { return hx::Val( _fxFadeColor); }
		if (HX_FIELD_EQ(inName,"_fxFadeAlpha") ) { return hx::Val( _fxFadeAlpha); }
		if (HX_FIELD_EQ(inName,"_fxShakeAxes") ) { return hx::Val( _fxShakeAxes); }
		if (HX_FIELD_EQ(inName,"_flashBitmap") ) { return hx::Val( _flashBitmap); }
		if (HX_FIELD_EQ(inName,"updateScroll") ) { return hx::Val( updateScroll_dyn()); }
		if (HX_FIELD_EQ(inName,"updateFollow") ) { return hx::Val( updateFollow_dyn()); }
		if (HX_FIELD_EQ(inName,"completeFade") ) { return hx::Val( completeFade_dyn()); }
		if (HX_FIELD_EQ(inName,"snapToTarget") ) { return hx::Val( snapToTarget_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fxFlashColor") ) { return hx::Val( _fxFlashColor); }
		if (HX_FIELD_EQ(inName,"_fxFlashAlpha") ) { return hx::Val( _fxFlashAlpha); }
		if (HX_FIELD_EQ(inName,"_scrollTarget") ) { return hx::Val( _scrollTarget); }
		if (HX_FIELD_EQ(inName,"_helperMatrix") ) { return hx::Val( _helperMatrix); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { return hx::Val( filtersEnabled); }
		if (HX_FIELD_EQ(inName,"_fxShakeOffset") ) { return hx::Val( _fxShakeOffset); }
		if (HX_FIELD_EQ(inName,"_headTriangles") ) { return hx::Val( _headTriangles); }
		if (HX_FIELD_EQ(inName,"startQuadBatch") ) { return hx::Val( startQuadBatch_dyn()); }
		if (HX_FIELD_EQ(inName,"clearDrawStack") ) { return hx::Val( clearDrawStack_dyn()); }
		if (HX_FIELD_EQ(inName,"set_followLerp") ) { return hx::Val( set_followLerp_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_fxFadeDuration") ) { return hx::Val( _fxFadeDuration); }
		if (HX_FIELD_EQ(inName,"_fxFadeComplete") ) { return hx::Val( _fxFadeComplete); }
		if (HX_FIELD_EQ(inName,"setScrollBounds") ) { return hx::Val( setScrollBounds_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_fxFlashDuration") ) { return hx::Val( _fxFlashDuration); }
		if (HX_FIELD_EQ(inName,"_fxFlashComplete") ) { return hx::Val( _fxFlashComplete); }
		if (HX_FIELD_EQ(inName,"_fxFadeCompleted") ) { return hx::Val( _fxFadeCompleted); }
		if (HX_FIELD_EQ(inName,"_fxShakeDuration") ) { return hx::Val( _fxShakeDuration); }
		if (HX_FIELD_EQ(inName,"_fxShakeComplete") ) { return hx::Val( _fxShakeComplete); }
		if (HX_FIELD_EQ(inName,"_currentDrawItem") ) { return hx::Val( _currentDrawItem); }
		if (HX_FIELD_EQ(inName,"_headOfDrawStack") ) { return hx::Val( _headOfDrawStack); }
		if (HX_FIELD_EQ(inName,"updateScrollRect") ) { return hx::Val( updateScrollRect_dyn()); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return hx::Val( set_antialiasing_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_fxShakeIntensity") ) { return hx::Val( _fxShakeIntensity); }
		if (HX_FIELD_EQ(inName,"updateFlashOffset") ) { return hx::Val( updateFlashOffset_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useBgAlphaBlending") ) { return hx::Val( useBgAlphaBlending); }
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { return hx::Val( pixelPerfectRender); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastTargetPosition") ) { return hx::Val( _lastTargetPosition); }
		if (HX_FIELD_EQ(inName,"startTrianglesBatch") ) { return hx::Val( startTrianglesBatch_dyn()); }
		if (HX_FIELD_EQ(inName,"setScrollBoundsRect") ) { return hx::Val( setScrollBoundsRect_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getNewDrawTrianglesItem") ) { return hx::Val( getNewDrawTrianglesItem_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"updateFlashSpritePosition") ) { return hx::Val( updateFlashSpritePosition_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"updateInternalSpritePositions") ) { return hx::Val( updateInternalSpritePositions_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxCamera_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"renderRect") ) { outValue = renderRect; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultZoom") ) { outValue = defaultZoom; return true; }
		if (HX_FIELD_EQ(inName,"renderPoint") ) { outValue = renderPoint; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawVertices") ) { outValue = drawVertices; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCameras") ) { outValue = defaultCameras; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"trianglesSprite") ) { outValue = trianglesSprite; return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_storageTilesHead") ) { outValue = _storageTilesHead; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_storageTrianglesHead") ) { outValue = _storageTrianglesHead; return true; }
	}
	return false;
}

hx::Val FlxCamera_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_zoom(inValue) );zoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { style=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"regen") ) { regen=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue) );width=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angle(inValue) );angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue) );color=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fill") ) { _fill=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleY") ) { scaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scroll") ) { scroll=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"screen") ) { screen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue) );height=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { bgColor=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bounds") ) { _bounds=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { deadzone=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filters") ) { _filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_fxFadeIn") ) { _fxFadeIn=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"followLerp") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_followLerp(inValue) );followLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minScrollX") ) { minScrollX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { maxScrollX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { minScrollY=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { maxScrollY=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"followLead") ) { followLead=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_transform") ) { _transform=inValue.Cast<  ::openfl::_legacy::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headTiles") ) { _headTiles=inValue.Cast<  ::flixel::graphics::tile::FlxDrawTilesItem >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalScaleX") ) { totalScaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalScaleY") ) { totalScaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flashSprite") ) { flashSprite=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { initialZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollRect") ) { _scrollRect=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"targetOffset") ) { targetOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antialiasing(inValue) );antialiasing=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashOffset") ) { _flashOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeColor") ) { _fxFadeColor=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeAlpha") ) { _fxFadeAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeAxes") ) { _fxShakeAxes=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashBitmap") ) { _flashBitmap=inValue.Cast<  ::openfl::_legacy::display::Bitmap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fxFlashColor") ) { _fxFlashColor=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashAlpha") ) { _fxFlashAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollTarget") ) { _scrollTarget=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperMatrix") ) { _helperMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { filtersEnabled=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeOffset") ) { _fxShakeOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headTriangles") ) { _headTriangles=inValue.Cast<  ::flixel::graphics::tile::FlxDrawTrianglesItem >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_fxFadeDuration") ) { _fxFadeDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeComplete") ) { _fxFadeComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_fxFlashDuration") ) { _fxFlashDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashComplete") ) { _fxFlashComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeCompleted") ) { _fxFadeCompleted=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeDuration") ) { _fxShakeDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeComplete") ) { _fxShakeComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currentDrawItem") ) { _currentDrawItem=inValue.Cast<  ::flixel::graphics::tile::FlxDrawBaseItem >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headOfDrawStack") ) { _headOfDrawStack=inValue.Cast<  ::flixel::graphics::tile::FlxDrawBaseItem >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_fxShakeIntensity") ) { _fxShakeIntensity=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useBgAlphaBlending") ) { useBgAlphaBlending=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { pixelPerfectRender=inValue.Cast< Bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastTargetPosition") ) { _lastTargetPosition=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxCamera_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"renderRect") ) { renderRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultZoom") ) { defaultZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"renderPoint") ) { renderPoint=ioValue.Cast<  ::flixel::math::FlxPoint >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawVertices") ) { drawVertices=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCameras") ) { defaultCameras=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"trianglesSprite") ) { trianglesSprite=ioValue.Cast<  ::openfl::_legacy::display::Sprite >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_storageTilesHead") ) { _storageTilesHead=ioValue.Cast<  ::flixel::graphics::tile::FlxDrawTilesItem >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_storageTrianglesHead") ) { _storageTrianglesHead=ioValue.Cast<  ::flixel::graphics::tile::FlxDrawTrianglesItem >(); return true; }
	}
	return false;
}

void FlxCamera_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("totalScaleX","\x72","\xdd","\x5b","\x02"));
	outFields->push(HX_HCSTRING("totalScaleY","\x73","\xdd","\x5b","\x02"));
	outFields->push(HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"));
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("targetOffset","\xc4","\xd1","\xc3","\x1c"));
	outFields->push(HX_HCSTRING("followLerp","\x88","\xdc","\x83","\xd9"));
	outFields->push(HX_HCSTRING("deadzone","\xd0","\x12","\x55","\x6d"));
	outFields->push(HX_HCSTRING("minScrollX","\x39","\x80","\x8f","\xf6"));
	outFields->push(HX_HCSTRING("maxScrollX","\x67","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("minScrollY","\x3a","\x80","\x8f","\xf6"));
	outFields->push(HX_HCSTRING("maxScrollY","\x68","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("regen","\xbd","\x2e","\xbf","\xe6"));
	outFields->push(HX_HCSTRING("bgColor","\x5e","\x81","\x83","\xf7"));
	outFields->push(HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"));
	outFields->push(HX_HCSTRING("useBgAlphaBlending","\x23","\x25","\x12","\xb2"));
	outFields->push(HX_HCSTRING("flashSprite","\xd5","\xe9","\x0d","\xf4"));
	outFields->push(HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"));
	outFields->push(HX_HCSTRING("followLead","\xad","\xcd","\x83","\xd9"));
	outFields->push(HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18"));
	outFields->push(HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"));
	outFields->push(HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"));
	outFields->push(HX_HCSTRING("_flashOffset","\x64","\x53","\xc1","\xf6"));
	outFields->push(HX_HCSTRING("_fxFlashColor","\x64","\x98","\x14","\xdc"));
	outFields->push(HX_HCSTRING("_fxFlashDuration","\xf3","\x7e","\xd1","\x2d"));
	outFields->push(HX_HCSTRING("_fxFlashAlpha","\x5f","\xce","\x4e","\xb3"));
	outFields->push(HX_HCSTRING("_fxFadeColor","\x96","\x44","\xa8","\xb9"));
	outFields->push(HX_HCSTRING("_lastTargetPosition","\x2f","\xd6","\x08","\xc4"));
	outFields->push(HX_HCSTRING("_scrollTarget","\x1d","\xda","\x1d","\xc1"));
	outFields->push(HX_HCSTRING("_fxFadeDuration","\x01","\xfe","\xdd","\x9f"));
	outFields->push(HX_HCSTRING("_fxFadeIn","\xd2","\xda","\xfe","\xa8"));
	outFields->push(HX_HCSTRING("_fxFadeCompleted","\x3e","\x8a","\xd9","\xa9"));
	outFields->push(HX_HCSTRING("_fxFadeAlpha","\x91","\x7a","\xe2","\x90"));
	outFields->push(HX_HCSTRING("_fxShakeIntensity","\x5e","\x86","\x94","\x7a"));
	outFields->push(HX_HCSTRING("_fxShakeDuration","\x09","\x2e","\x72","\x36"));
	outFields->push(HX_HCSTRING("_fxShakeOffset","\x08","\x2f","\x77","\x93"));
	outFields->push(HX_HCSTRING("_fxShakeAxes","\x5a","\x79","\xf0","\x5e"));
	outFields->push(HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"));
	outFields->push(HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42"));
	outFields->push(HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d"));
	outFields->push(HX_HCSTRING("_fill","\x62","\xea","\xcc","\xf6"));
	outFields->push(HX_HCSTRING("_flashBitmap","\xc0","\xcb","\x8d","\x87"));
	outFields->push(HX_HCSTRING("_scrollRect","\xf0","\xa8","\xf0","\xdb"));
	outFields->push(HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4"));
	outFields->push(HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"));
	outFields->push(HX_HCSTRING("_transform","\x2d","\xa9","\x35","\xa1"));
	outFields->push(HX_HCSTRING("_helperMatrix","\x2e","\x81","\xce","\xde"));
	outFields->push(HX_HCSTRING("_currentDrawItem","\x11","\x6b","\x5a","\x19"));
	outFields->push(HX_HCSTRING("_headOfDrawStack","\xce","\xc5","\x68","\xac"));
	outFields->push(HX_HCSTRING("_headTiles","\x06","\xac","\x50","\xff"));
	outFields->push(HX_HCSTRING("_headTriangles","\xac","\xb3","\x7c","\x97"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxCamera_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,scaleX),HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,scaleY),HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,totalScaleX),HX_HCSTRING("totalScaleX","\x72","\xdd","\x5b","\x02")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,totalScaleY),HX_HCSTRING("totalScaleY","\x73","\xdd","\x5b","\x02")},
	{hx::fsObject /*::flixel::FlxCameraFollowStyle*/ ,(int)offsetof(FlxCamera_obj,style),HX_HCSTRING("style","\x31","\xa5","\x1d","\x84")},
	{hx::fsObject /*::flixel::FlxObject*/ ,(int)offsetof(FlxCamera_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,targetOffset),HX_HCSTRING("targetOffset","\xc4","\xd1","\xc3","\x1c")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,followLerp),HX_HCSTRING("followLerp","\x88","\xdc","\x83","\xd9")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxCamera_obj,deadzone),HX_HCSTRING("deadzone","\xd0","\x12","\x55","\x6d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,minScrollX),HX_HCSTRING("minScrollX","\x39","\x80","\x8f","\xf6")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,maxScrollX),HX_HCSTRING("maxScrollX","\x67","\xad","\xfc","\x9a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,minScrollY),HX_HCSTRING("minScrollY","\x3a","\x80","\x8f","\xf6")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,maxScrollY),HX_HCSTRING("maxScrollY","\x68","\xad","\xfc","\x9a")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,scroll),HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxCamera_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,regen),HX_HCSTRING("regen","\xbd","\x2e","\xbf","\xe6")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,bgColor),HX_HCSTRING("bgColor","\x5e","\x81","\x83","\xf7")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxCamera_obj,screen),HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,useBgAlphaBlending),HX_HCSTRING("useBgAlphaBlending","\x23","\x25","\x12","\xb2")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxCamera_obj,flashSprite),HX_HCSTRING("flashSprite","\xd5","\xe9","\x0d","\xf4")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,pixelPerfectRender),HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,zoom),HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,antialiasing),HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,followLead),HX_HCSTRING("followLead","\xad","\xcd","\x83","\xd9")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,filtersEnabled),HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxCamera_obj,_flashRect),HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxCamera_obj,_flashPoint),HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,_flashOffset),HX_HCSTRING("_flashOffset","\x64","\x53","\xc1","\xf6")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,_fxFlashColor),HX_HCSTRING("_fxFlashColor","\x64","\x98","\x14","\xdc")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFlashDuration),HX_HCSTRING("_fxFlashDuration","\xf3","\x7e","\xd1","\x2d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,_fxFlashComplete),HX_HCSTRING("_fxFlashComplete","\x58","\x70","\x0b","\x99")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFlashAlpha),HX_HCSTRING("_fxFlashAlpha","\x5f","\xce","\x4e","\xb3")},
	{hx::fsInt,(int)offsetof(FlxCamera_obj,_fxFadeColor),HX_HCSTRING("_fxFadeColor","\x96","\x44","\xa8","\xb9")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,_lastTargetPosition),HX_HCSTRING("_lastTargetPosition","\x2f","\xd6","\x08","\xc4")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,_scrollTarget),HX_HCSTRING("_scrollTarget","\x1d","\xda","\x1d","\xc1")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFadeDuration),HX_HCSTRING("_fxFadeDuration","\x01","\xfe","\xdd","\x9f")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,_fxFadeIn),HX_HCSTRING("_fxFadeIn","\xd2","\xda","\xfe","\xa8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,_fxFadeComplete),HX_HCSTRING("_fxFadeComplete","\x66","\xef","\x17","\x0b")},
	{hx::fsBool,(int)offsetof(FlxCamera_obj,_fxFadeCompleted),HX_HCSTRING("_fxFadeCompleted","\x3e","\x8a","\xd9","\xa9")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFadeAlpha),HX_HCSTRING("_fxFadeAlpha","\x91","\x7a","\xe2","\x90")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxShakeIntensity),HX_HCSTRING("_fxShakeIntensity","\x5e","\x86","\x94","\x7a")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxShakeDuration),HX_HCSTRING("_fxShakeDuration","\x09","\x2e","\x72","\x36")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxCamera_obj,_fxShakeComplete),HX_HCSTRING("_fxShakeComplete","\x6e","\x1f","\xac","\xa1")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,_fxShakeOffset),HX_HCSTRING("_fxShakeOffset","\x08","\x2f","\x77","\x93")},
	{hx::fsObject /*::flixel::util::FlxAxes*/ ,(int)offsetof(FlxCamera_obj,_fxShakeAxes),HX_HCSTRING("_fxShakeAxes","\x5a","\x79","\xf0","\x5e")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxCamera_obj,_point),HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxCamera_obj,_filters),HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42")},
	{hx::fsFloat,(int)offsetof(FlxCamera_obj,initialZoom),HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxCamera_obj,_fill),HX_HCSTRING("_fill","\x62","\xea","\xcc","\xf6")},
	{hx::fsObject /*::openfl::_legacy::display::Bitmap*/ ,(int)offsetof(FlxCamera_obj,_flashBitmap),HX_HCSTRING("_flashBitmap","\xc0","\xcb","\x8d","\x87")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxCamera_obj,_scrollRect),HX_HCSTRING("_scrollRect","\xf0","\xa8","\xf0","\xdb")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxCamera_obj,_bounds),HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxCamera_obj,canvas),HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8")},
	{hx::fsObject /*::openfl::_legacy::geom::Matrix*/ ,(int)offsetof(FlxCamera_obj,_transform),HX_HCSTRING("_transform","\x2d","\xa9","\x35","\xa1")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxCamera_obj,_helperMatrix),HX_HCSTRING("_helperMatrix","\x2e","\x81","\xce","\xde")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawBaseItem*/ ,(int)offsetof(FlxCamera_obj,_currentDrawItem),HX_HCSTRING("_currentDrawItem","\x11","\x6b","\x5a","\x19")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawBaseItem*/ ,(int)offsetof(FlxCamera_obj,_headOfDrawStack),HX_HCSTRING("_headOfDrawStack","\xce","\xc5","\x68","\xac")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawTilesItem*/ ,(int)offsetof(FlxCamera_obj,_headTiles),HX_HCSTRING("_headTiles","\x06","\xac","\x50","\xff")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawTrianglesItem*/ ,(int)offsetof(FlxCamera_obj,_headTriangles),HX_HCSTRING("_headTriangles","\xac","\xb3","\x7c","\x97")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxCamera_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &FlxCamera_obj::defaultZoom,HX_HCSTRING("defaultZoom","\x74","\x9c","\xb7","\x22")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &FlxCamera_obj::defaultCameras,HX_HCSTRING("defaultCameras","\x6d","\xe3","\x71","\x12")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawTilesItem*/ ,(void *) &FlxCamera_obj::_storageTilesHead,HX_HCSTRING("_storageTilesHead","\xe9","\xa8","\x61","\xaf")},
	{hx::fsObject /*::flixel::graphics::tile::FlxDrawTrianglesItem*/ ,(void *) &FlxCamera_obj::_storageTrianglesHead,HX_HCSTRING("_storageTrianglesHead","\x0f","\x09","\x78","\x17")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &FlxCamera_obj::drawVertices,HX_HCSTRING("drawVertices","\x1d","\x4c","\x09","\x40")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(void *) &FlxCamera_obj::trianglesSprite,HX_HCSTRING("trianglesSprite","\x10","\xd3","\x45","\xab")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(void *) &FlxCamera_obj::renderPoint,HX_HCSTRING("renderPoint","\x1a","\xe1","\x40","\x92")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxCamera_obj::renderRect,HX_HCSTRING("renderRect","\x9a","\x47","\xb1","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxCamera_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"),
	HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"),
	HX_HCSTRING("totalScaleX","\x72","\xdd","\x5b","\x02"),
	HX_HCSTRING("totalScaleY","\x73","\xdd","\x5b","\x02"),
	HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"),
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("targetOffset","\xc4","\xd1","\xc3","\x1c"),
	HX_HCSTRING("followLerp","\x88","\xdc","\x83","\xd9"),
	HX_HCSTRING("deadzone","\xd0","\x12","\x55","\x6d"),
	HX_HCSTRING("minScrollX","\x39","\x80","\x8f","\xf6"),
	HX_HCSTRING("maxScrollX","\x67","\xad","\xfc","\x9a"),
	HX_HCSTRING("minScrollY","\x3a","\x80","\x8f","\xf6"),
	HX_HCSTRING("maxScrollY","\x68","\xad","\xfc","\x9a"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("regen","\xbd","\x2e","\xbf","\xe6"),
	HX_HCSTRING("bgColor","\x5e","\x81","\x83","\xf7"),
	HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"),
	HX_HCSTRING("useBgAlphaBlending","\x23","\x25","\x12","\xb2"),
	HX_HCSTRING("flashSprite","\xd5","\xe9","\x0d","\xf4"),
	HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50"),
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"),
	HX_HCSTRING("followLead","\xad","\xcd","\x83","\xd9"),
	HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18"),
	HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"),
	HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"),
	HX_HCSTRING("_flashOffset","\x64","\x53","\xc1","\xf6"),
	HX_HCSTRING("_fxFlashColor","\x64","\x98","\x14","\xdc"),
	HX_HCSTRING("_fxFlashDuration","\xf3","\x7e","\xd1","\x2d"),
	HX_HCSTRING("_fxFlashComplete","\x58","\x70","\x0b","\x99"),
	HX_HCSTRING("_fxFlashAlpha","\x5f","\xce","\x4e","\xb3"),
	HX_HCSTRING("_fxFadeColor","\x96","\x44","\xa8","\xb9"),
	HX_HCSTRING("_lastTargetPosition","\x2f","\xd6","\x08","\xc4"),
	HX_HCSTRING("_scrollTarget","\x1d","\xda","\x1d","\xc1"),
	HX_HCSTRING("_fxFadeDuration","\x01","\xfe","\xdd","\x9f"),
	HX_HCSTRING("_fxFadeIn","\xd2","\xda","\xfe","\xa8"),
	HX_HCSTRING("_fxFadeComplete","\x66","\xef","\x17","\x0b"),
	HX_HCSTRING("_fxFadeCompleted","\x3e","\x8a","\xd9","\xa9"),
	HX_HCSTRING("_fxFadeAlpha","\x91","\x7a","\xe2","\x90"),
	HX_HCSTRING("_fxShakeIntensity","\x5e","\x86","\x94","\x7a"),
	HX_HCSTRING("_fxShakeDuration","\x09","\x2e","\x72","\x36"),
	HX_HCSTRING("_fxShakeComplete","\x6e","\x1f","\xac","\xa1"),
	HX_HCSTRING("_fxShakeOffset","\x08","\x2f","\x77","\x93"),
	HX_HCSTRING("_fxShakeAxes","\x5a","\x79","\xf0","\x5e"),
	HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"),
	HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42"),
	HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d"),
	HX_HCSTRING("_fill","\x62","\xea","\xcc","\xf6"),
	HX_HCSTRING("_flashBitmap","\xc0","\xcb","\x8d","\x87"),
	HX_HCSTRING("_scrollRect","\xf0","\xa8","\xf0","\xdb"),
	HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4"),
	HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"),
	HX_HCSTRING("_transform","\x2d","\xa9","\x35","\xa1"),
	HX_HCSTRING("_helperMatrix","\x2e","\x81","\xce","\xde"),
	HX_HCSTRING("_currentDrawItem","\x11","\x6b","\x5a","\x19"),
	HX_HCSTRING("_headOfDrawStack","\xce","\xc5","\x68","\xac"),
	HX_HCSTRING("_headTiles","\x06","\xac","\x50","\xff"),
	HX_HCSTRING("_headTriangles","\xac","\xb3","\x7c","\x97"),
	HX_HCSTRING("startQuadBatch","\xb1","\xbc","\x12","\x5e"),
	HX_HCSTRING("startTrianglesBatch","\x11","\x0b","\xb7","\x6e"),
	HX_HCSTRING("getNewDrawTrianglesItem","\xf0","\xc3","\x0a","\x12"),
	HX_HCSTRING("clearDrawStack","\x57","\xf1","\x1b","\x0a"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("drawPixels","\x51","\x6a","\x6d","\xce"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateScroll","\xf6","\x7e","\x28","\x47"),
	HX_HCSTRING("updateFollow","\x5a","\x38","\x5a","\xf9"),
	HX_HCSTRING("updateFlash","\xe7","\x9e","\x24","\xe8"),
	HX_HCSTRING("updateFade","\x25","\xa0","\x6a","\xfc"),
	HX_HCSTRING("completeFade","\xd5","\x32","\x78","\xb7"),
	HX_HCSTRING("updateShake","\xfd","\x47","\xb5","\x61"),
	HX_HCSTRING("updateFlashSpritePosition","\x15","\x1f","\x55","\xdf"),
	HX_HCSTRING("updateFlashOffset","\xda","\x51","\x21","\xf5"),
	HX_HCSTRING("updateScrollRect","\x3a","\xab","\x52","\x53"),
	HX_HCSTRING("updateInternalSpritePositions","\x1f","\x1f","\xf9","\x76"),
	HX_HCSTRING("follow","\x71","\x91","\x96","\xf9"),
	HX_HCSTRING("snapToTarget","\x96","\x07","\x43","\x96"),
	HX_HCSTRING("focusOn","\x17","\x4b","\x83","\x41"),
	HX_HCSTRING("flash","\xb0","\x35","\x8c","\x02"),
	HX_HCSTRING("fade","\x7c","\xb5","\xb5","\x43"),
	HX_HCSTRING("shake","\xc6","\xde","\x1c","\x7c"),
	HX_HCSTRING("stopFX","\xd4","\xb1","\x39","\x0f"),
	HX_HCSTRING("setFilters","\x39","\xc6","\x25","\x5c"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"),
	HX_HCSTRING("drawFX","\x56","\x72","\xd6","\xdf"),
	HX_HCSTRING("checkResize","\xdc","\x2c","\x8d","\xea"),
	HX_HCSTRING("setSize","\x83","\xe1","\xd7","\x11"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	HX_HCSTRING("setScrollBoundsRect","\x68","\x88","\x5d","\x8e"),
	HX_HCSTRING("setScrollBounds","\x24","\xad","\x95","\xdc"),
	HX_HCSTRING("setScale","\x88","\x37","\x03","\x87"),
	HX_HCSTRING("onResize","\x73","\x50","\x28","\xe8"),
	HX_HCSTRING("set_followLerp","\x45","\x4d","\x99","\x6f"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("set_zoom","\x10","\xb8","\x10","\x7f"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_antialiasing","\xf1","\xf0","\x93","\xa3"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	::String(null()) };

static void FlxCamera_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxCamera_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::defaultZoom,"defaultZoom");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::defaultCameras,"defaultCameras");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::_storageTilesHead,"_storageTilesHead");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::_storageTrianglesHead,"_storageTrianglesHead");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::drawVertices,"drawVertices");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::trianglesSprite,"trianglesSprite");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::renderPoint,"renderPoint");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::renderRect,"renderRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxCamera_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::defaultZoom,"defaultZoom");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::defaultCameras,"defaultCameras");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::_storageTilesHead,"_storageTilesHead");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::_storageTrianglesHead,"_storageTrianglesHead");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::drawVertices,"drawVertices");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::trianglesSprite,"trianglesSprite");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::renderPoint,"renderPoint");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::renderRect,"renderRect");
};

#endif

hx::Class FlxCamera_obj::__mClass;

static ::String FlxCamera_obj_sStaticFields[] = {
	HX_HCSTRING("defaultZoom","\x74","\x9c","\xb7","\x22"),
	HX_HCSTRING("defaultCameras","\x6d","\xe3","\x71","\x12"),
	HX_HCSTRING("_storageTilesHead","\xe9","\xa8","\x61","\xaf"),
	HX_HCSTRING("_storageTrianglesHead","\x0f","\x09","\x78","\x17"),
	HX_HCSTRING("drawVertices","\x1d","\x4c","\x09","\x40"),
	HX_HCSTRING("trianglesSprite","\x10","\xd3","\x45","\xab"),
	HX_HCSTRING("renderPoint","\x1a","\xe1","\x40","\x92"),
	HX_HCSTRING("renderRect","\x9a","\x47","\xb1","\xe8"),
	::String(null())
};

void FlxCamera_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxCamera","\x05","\x18","\xe2","\xd7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxCamera_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxCamera_obj::__SetStatic;
	__mClass->mMarkFunc = FlxCamera_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxCamera_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxCamera_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxCamera_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxCamera_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxCamera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxCamera_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxCamera_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",425,0xe7aeb95a)
HXLINE( 425)		HX_VARI_NAME( ::Array< Float >,this1,"this") = ::Array_obj< Float >::__new();
HXDLIN( 425)		this1->__SetSizeExact(null());
HXDLIN( 425)		drawVertices = this1;
            	}
{
            	HX_STACK_FRAME("flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",429,0xe7aeb95a)
HXLINE( 429)		trianglesSprite =  ::openfl::_legacy::display::Sprite_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",434,0xe7aeb95a)
HXLINE( 434)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 434)		point->_inPool = false;
HXDLIN( 434)		renderPoint = point;
            	}
{
            	HX_STACK_FRAME("flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",435,0xe7aeb95a)
HXLINE( 435)		Float X = (int)0;
HXDLIN( 435)		Float Y = (int)0;
HXDLIN( 435)		Float Width = (int)0;
HXDLIN( 435)		Float Height = (int)0;
HXDLIN( 435)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 435)		_this->x = X;
HXDLIN( 435)		_this->y = Y;
HXDLIN( 435)		_this->width = Width;
HXDLIN( 435)		_this->height = Height;
HXDLIN( 435)		_this->_inPool = false;
HXDLIN( 435)		renderRect = _this;
            	}
}

} // end namespace flixel
