// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxRenderMethod
#include <flixel/FlxRenderMethod.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_effects_postprocess_PostProcess
#include <flixel/effects/postprocess/PostProcess.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_FlxSwipe
#include <flixel/input/FlxSwipe.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxQuadTree
#include <flixel/system/FlxQuadTree.h>
#endif
#ifndef INCLUDED_flixel_system_FlxVersion
#include <flixel/system/FlxVersion.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapLogFrontEnd
#include <flixel/system/frontEnds/BitmapLogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_ConsoleFrontEnd
#include <flixel/system/frontEnds/ConsoleFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_PluginFrontEnd
#include <flixel/system/frontEnds/PluginFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_VCRFrontEnd
#include <flixel/system/frontEnds/VCRFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_RatioScaleMode
#include <flixel/system/scaleModes/RatioScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxCollision
#include <flixel/util/FlxCollision.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DirectRenderer
#include <openfl/_legacy/display/DirectRenderer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_OpenGLView
#include <openfl/_legacy/display/OpenGLView.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_StageDisplayState
#include <openfl/_legacy/display/StageDisplayState.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif

namespace flixel{

void FlxG_obj::__construct() { }

Dynamic FlxG_obj::__CreateEmpty() { return new FlxG_obj; }

hx::ObjectPtr< FlxG_obj > FlxG_obj::__new()
{
	hx::ObjectPtr< FlxG_obj > _hx_result = new FlxG_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxG_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxG_obj > _hx_result = new FlxG_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool FlxG_obj::autoPause;

Bool FlxG_obj::fixedTimestep;

Float FlxG_obj::timeScale;

Int FlxG_obj::worldDivisions;

 ::flixel::FlxCamera FlxG_obj::camera;

 ::flixel::_hx_system::FlxVersion FlxG_obj::VERSION;

 ::flixel::FlxGame FlxG_obj::game;

Int FlxG_obj::updateFramerate;

Int FlxG_obj::drawFramerate;

::hx::EnumBase FlxG_obj::renderMethod;

Bool FlxG_obj::renderBlit;

Bool FlxG_obj::renderTile;

Float FlxG_obj::elapsed;

Float FlxG_obj::maxElapsed;

Int FlxG_obj::width;

Int FlxG_obj::height;

 ::flixel::_hx_system::scaleModes::BaseScaleMode FlxG_obj::scaleMode;

 ::flixel::math::FlxRect FlxG_obj::worldBounds;

 ::flixel::util::FlxSave FlxG_obj::save;

 ::flixel::math::FlxRandom FlxG_obj::random;

 ::flixel::input::mouse::FlxMouse FlxG_obj::mouse;

::Array< ::Dynamic> FlxG_obj::swipes;

 ::flixel::input::keyboard::FlxKeyboard FlxG_obj::keys;

 ::flixel::input::gamepad::FlxGamepadManager FlxG_obj::gamepads;

 ::flixel::_hx_system::frontEnds::InputFrontEnd FlxG_obj::inputs;

 ::flixel::_hx_system::frontEnds::ConsoleFrontEnd FlxG_obj::console;

 ::flixel::_hx_system::frontEnds::LogFrontEnd FlxG_obj::log;

 ::flixel::_hx_system::frontEnds::BitmapLogFrontEnd FlxG_obj::bitmapLog;

 ::flixel::_hx_system::frontEnds::WatchFrontEnd FlxG_obj::watch;

 ::flixel::_hx_system::frontEnds::DebuggerFrontEnd FlxG_obj::debugger;

 ::flixel::_hx_system::frontEnds::VCRFrontEnd FlxG_obj::vcr;

 ::flixel::_hx_system::frontEnds::BitmapFrontEnd FlxG_obj::bitmap;

 ::flixel::_hx_system::frontEnds::CameraFrontEnd FlxG_obj::cameras;

 ::flixel::_hx_system::frontEnds::PluginFrontEnd FlxG_obj::plugins;

Int FlxG_obj::initialWidth;

Int FlxG_obj::initialHeight;

Float FlxG_obj::initialZoom;

 ::flixel::_hx_system::frontEnds::SoundFrontEnd FlxG_obj::sound;

 ::flixel::_hx_system::frontEnds::SignalFrontEnd FlxG_obj::signals;

void FlxG_obj::resizeGame(Int Width,Int Height){
            	HX_STACK_FRAME("flixel.FlxG","resizeGame",0x80aafe0d,"flixel.FlxG.resizeGame","flixel/FlxG.hx",295,0x8e176836)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE( 295)		::flixel::FlxG_obj::scaleMode->onMeasure(Width,Height);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxG_obj,resizeGame,(void))

void FlxG_obj::resizeWindow(Int Width,Int Height){
            	HX_STACK_FRAME("flixel.FlxG","resizeWindow",0x41839acb,"flixel.FlxG.resizeWindow","flixel/FlxG.hx",305,0x8e176836)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE( 305)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->resize(Width,Height);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxG_obj,resizeWindow,(void))

void FlxG_obj::resetGame(){
            	HX_STACK_FRAME("flixel.FlxG","resetGame",0x7560e13a,"flixel.FlxG.resetGame","flixel/FlxG.hx",317,0x8e176836)
HXLINE( 317)		::flixel::FlxG_obj::game->_resetGame = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,resetGame,(void))

void FlxG_obj::switchState( ::flixel::FlxState nextState){
            	HX_STACK_FRAME("flixel.FlxG","switchState",0xbec45396,"flixel.FlxG.switchState","flixel/FlxG.hx",326,0x8e176836)
            	HX_STACK_ARG(nextState,"nextState")
HXLINE( 326)		Bool _hx_tmp = ::flixel::FlxG_obj::game->_state->switchTo(nextState);
HXDLIN( 326)		if (_hx_tmp) {
HXLINE( 327)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,switchState,(void))

void FlxG_obj::resetState(){
            	HX_STACK_FRAME("flixel.FlxG","resetState",0x34b927c9,"flixel.FlxG.resetState","flixel/FlxG.hx",336,0x8e176836)
HXLINE( 336)		hx::Class _hx_tmp = ::Type_obj::getClass(::flixel::FlxG_obj::game->_state);
HXDLIN( 336)		HX_VARI(  ::flixel::FlxState,nextState) = ( ( ::flixel::FlxState)(::Type_obj::createInstance(_hx_tmp,::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 336)		Bool _hx_tmp1 = ::flixel::FlxG_obj::game->_state->switchTo(nextState);
HXDLIN( 336)		if (_hx_tmp1) {
HXLINE( 336)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,resetState,(void))

Bool FlxG_obj::overlap( ::flixel::FlxBasic ObjectOrGroup1, ::flixel::FlxBasic ObjectOrGroup2, ::Dynamic NotifyCallback, ::Dynamic ProcessCallback){
            	HX_STACK_FRAME("flixel.FlxG","overlap",0x37194f20,"flixel.FlxG.overlap","flixel/FlxG.hx",354,0x8e176836)
            	HX_STACK_ARG(ObjectOrGroup1,"ObjectOrGroup1")
            	HX_STACK_ARG(ObjectOrGroup2,"ObjectOrGroup2")
            	HX_STACK_ARG(NotifyCallback,"NotifyCallback")
            	HX_STACK_ARG(ProcessCallback,"ProcessCallback")
HXLINE( 355)		Bool _hx_tmp = hx::IsNull( ObjectOrGroup1 );
HXDLIN( 355)		if (_hx_tmp) {
HXLINE( 357)			ObjectOrGroup1 = ::flixel::FlxG_obj::game->_state;
            		}
HXLINE( 359)		Bool _hx_tmp1 = hx::IsEq( ObjectOrGroup2,ObjectOrGroup1 );
HXDLIN( 359)		if (_hx_tmp1) {
HXLINE( 361)			ObjectOrGroup2 = null();
            		}
HXLINE( 363)		::flixel::_hx_system::FlxQuadTree_obj::divisions = ::flixel::FlxG_obj::worldDivisions;
HXLINE( 364)		HX_VARI(  ::flixel::_hx_system::FlxQuadTree,quadTree) = ::flixel::_hx_system::FlxQuadTree_obj::recycle(::flixel::FlxG_obj::worldBounds->x,::flixel::FlxG_obj::worldBounds->y,::flixel::FlxG_obj::worldBounds->width,::flixel::FlxG_obj::worldBounds->height,null());
HXLINE( 365)		quadTree->load(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback);
HXLINE( 366)		HX_VARI( Bool,result) = quadTree->execute();
HXLINE( 367)		quadTree->destroy();
HXLINE( 368)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxG_obj,overlap,return )

Bool FlxG_obj::pixelPerfectOverlap( ::flixel::FlxSprite Sprite1, ::flixel::FlxSprite Sprite2,hx::Null< Int >  __o_AlphaTolerance, ::flixel::FlxCamera Camera){
Int AlphaTolerance = __o_AlphaTolerance.Default(255);
            	HX_STACK_FRAME("flixel.FlxG","pixelPerfectOverlap",0x4d139839,"flixel.FlxG.pixelPerfectOverlap","flixel/FlxG.hx",383,0x8e176836)
            	HX_STACK_ARG(Sprite1,"Sprite1")
            	HX_STACK_ARG(Sprite2,"Sprite2")
            	HX_STACK_ARG(AlphaTolerance,"AlphaTolerance")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 383)		return ::flixel::util::FlxCollision_obj::pixelPerfectCheck(Sprite1,Sprite2,AlphaTolerance,Camera);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxG_obj,pixelPerfectOverlap,return )

Bool FlxG_obj::collide( ::flixel::FlxBasic ObjectOrGroup1, ::flixel::FlxBasic ObjectOrGroup2, ::Dynamic NotifyCallback){
            	HX_STACK_FRAME("flixel.FlxG","collide",0x7b6cbb17,"flixel.FlxG.collide","flixel/FlxG.hx",402,0x8e176836)
            	HX_STACK_ARG(ObjectOrGroup1,"ObjectOrGroup1")
            	HX_STACK_ARG(ObjectOrGroup2,"ObjectOrGroup2")
            	HX_STACK_ARG(NotifyCallback,"NotifyCallback")
HXLINE( 402)		return ::flixel::FlxG_obj::overlap(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,::flixel::FlxObject_obj::separate_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxG_obj,collide,return )

 ::flixel::effects::postprocess::PostProcess FlxG_obj::addPostProcess( ::flixel::effects::postprocess::PostProcess postProcess){
            	HX_STACK_FRAME("flixel.FlxG","addPostProcess",0x527e22d5,"flixel.FlxG.addPostProcess","flixel/FlxG.hx",441,0x8e176836)
            	HX_STACK_ARG(postProcess,"postProcess")
HXLINE( 444)		{
HXLINE( 445)			HX_VARI( ::Array< ::Dynamic>,postProcesses) = ::flixel::FlxG_obj::game->postProcesses;
HXLINE( 448)			HX_VARI( Int,length) = postProcesses->length;
HXLINE( 449)			if ((length > (int)0)) {
HXLINE( 451)				postProcesses->__get((length - (int)1)).StaticCast<  ::flixel::effects::postprocess::PostProcess >()->set_to(postProcess);
            			}
HXLINE( 454)			::flixel::FlxG_obj::game->postProcessLayer->addChild(postProcess);
HXLINE( 455)			postProcesses->push(postProcess);
            		}
HXLINE( 463)		return postProcess;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,addPostProcess,return )

void FlxG_obj::removePostProcess( ::flixel::effects::postprocess::PostProcess postProcess){
            	HX_STACK_FRAME("flixel.FlxG","removePostProcess",0x4ea610e4,"flixel.FlxG.removePostProcess","flixel/FlxG.hx",467,0x8e176836)
            	HX_STACK_ARG(postProcess,"postProcess")
HXLINE( 470)		Bool _hx_tmp = ::flixel::FlxG_obj::game->postProcesses->remove(postProcess);
HXDLIN( 470)		if (_hx_tmp) {
HXLINE( 472)			::flixel::FlxG_obj::chainPostProcesses();
HXLINE( 473)			postProcess->set_to(null());
HXLINE( 475)			::flixel::util::FlxDestroyUtil_obj::removeChild(::flixel::FlxG_obj::game->postProcessLayer,postProcess);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,removePostProcess,(void))

void FlxG_obj::chainPostProcesses(){
            	HX_STACK_FRAME("flixel.FlxG","chainPostProcesses",0xe504cb63,"flixel.FlxG.chainPostProcesses","flixel/FlxG.hx",482,0x8e176836)
HXLINE( 483)		HX_VARI( ::Array< ::Dynamic>,postProcesses) = ::flixel::FlxG_obj::game->postProcesses;
HXLINE( 485)		Bool _hx_tmp = (postProcesses->length > (int)0);
HXDLIN( 485)		if (_hx_tmp) {
HXLINE( 487)			{
HXLINE( 487)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 487)				HX_VARI( Int,_g) = (postProcesses->length - (int)1);
HXDLIN( 487)				while((_g1 < _g)){
HXLINE( 487)					HX_VARI( Int,i) = _g1++;
HXLINE( 489)					 ::flixel::effects::postprocess::PostProcess _hx_tmp1 = postProcesses->__get((i + (int)1)).StaticCast<  ::flixel::effects::postprocess::PostProcess >();
HXDLIN( 489)					postProcesses->__get(i).StaticCast<  ::flixel::effects::postprocess::PostProcess >()->set_to(_hx_tmp1);
            				}
            			}
HXLINE( 491)			( ( ::flixel::effects::postprocess::PostProcess)(::flixel::util::FlxArrayUtil_obj::last(postProcesses)) )->set_to(null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,chainPostProcesses,(void))

void FlxG_obj::openURL(::String URL,::String __o_Target){
::String Target = __o_Target.Default(HX_HCSTRING("_blank","\x95","\x26","\xd9","\xb0"));
            	HX_STACK_FRAME("flixel.FlxG","openURL",0xce3ec95e,"flixel.FlxG.openURL","flixel/FlxG.hx",504,0x8e176836)
            	HX_STACK_ARG(URL,"URL")
            	HX_STACK_ARG(Target,"Target")
HXLINE( 505)		HX_VARI( ::String,prefix) = HX_("",00,00,00,00);
HXLINE( 507)		Bool _hx_tmp = !( ::EReg_obj::__new(HX_("^https?://",48,ee,dd,38),HX_("",00,00,00,00))->match(URL));
HXDLIN( 507)		if (_hx_tmp) {
HXLINE( 508)			prefix = HX_("http://",52,75,cd,5a);
            		}
HXLINE( 509)		::openfl::_legacy::Lib_obj::getURL( ::openfl::_legacy::net::URLRequest_obj::__new((prefix + URL)),Target);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxG_obj,openURL,(void))

void FlxG_obj::init( ::flixel::FlxGame Game,Int Width,Int Height,Float Zoom){
            	HX_STACK_FRAME("flixel.FlxG","init",0x1141e5d7,"flixel.FlxG.init","flixel/FlxG.hx",517,0x8e176836)
            	HX_STACK_ARG(Game,"Game")
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(Zoom,"Zoom")
HXLINE( 518)		::flixel::FlxG_obj::game = Game;
HXLINE( 519)		Float _hx_tmp = ::Math_obj::abs(Width);
HXDLIN( 519)		::flixel::FlxG_obj::width = ::Std_obj::_hx_int(_hx_tmp);
HXLINE( 520)		Float _hx_tmp1 = ::Math_obj::abs(Height);
HXDLIN( 520)		::flixel::FlxG_obj::height = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE( 522)		::flixel::FlxG_obj::initRenderMethod();
HXLINE( 524)		::flixel::FlxG_obj::initialWidth = ::flixel::FlxG_obj::width;
HXLINE( 525)		::flixel::FlxG_obj::initialHeight = ::flixel::FlxG_obj::height;
HXLINE( 526)		::flixel::FlxG_obj::initialZoom = (::flixel::FlxCamera_obj::defaultZoom = Zoom);
HXLINE( 528)		{
HXLINE( 528)			Int Width1 = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXDLIN( 528)			Int Height1 = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageHeight();
HXDLIN( 528)			::flixel::FlxG_obj::scaleMode->onMeasure(Width1,Height1);
            		}
HXLINE( 532)		::flixel::FlxG_obj::keys = ::flixel::FlxG_obj::inputs->add_flixel_input_keyboard_FlxKeyboard( ::flixel::input::keyboard::FlxKeyboard_obj::__new());
HXLINE( 536)		 ::flixel::input::mouse::FlxMouse _hx_tmp2 = ::flixel::FlxG_obj::inputs->add_flixel_input_mouse_FlxMouse( ::flixel::input::mouse::FlxMouse_obj::__new(::flixel::FlxG_obj::game->_inputContainer));
HXDLIN( 536)		::flixel::FlxG_obj::set_mouse(_hx_tmp2);
HXLINE( 544)		::flixel::FlxG_obj::gamepads = ::flixel::FlxG_obj::inputs->add_flixel_input_gamepad_FlxGamepadManager( ::flixel::input::gamepad::FlxGamepadManager_obj::__new());
HXLINE( 554)		::flixel::FlxG_obj::save->bind(HX_("flixel",5c,42,70,3d));
HXLINE( 556)		::flixel::FlxG_obj::plugins =  ::flixel::_hx_system::frontEnds::PluginFrontEnd_obj::__new();
HXLINE( 557)		::flixel::FlxG_obj::vcr =  ::flixel::_hx_system::frontEnds::VCRFrontEnd_obj::__new();
HXLINE( 560)		::flixel::FlxG_obj::sound =  ::flixel::_hx_system::frontEnds::SoundFrontEnd_obj::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxG_obj,init,(void))

void FlxG_obj::initRenderMethod(){
            	HX_STACK_FRAME("flixel.FlxG","initRenderMethod",0x7472134e,"flixel.FlxG.initRenderMethod","flixel/FlxG.hx",565,0x8e176836)
HXLINE( 566)		::flixel::FlxG_obj::renderMethod = ::flixel::FlxRenderMethod_obj::BLITTING_dyn();
HXLINE( 586)		::flixel::FlxG_obj::renderMethod = ::flixel::FlxRenderMethod_obj::DRAW_TILES_dyn();
HXLINE( 590)		::flixel::FlxG_obj::renderBlit = hx::IsEq( ::flixel::FlxG_obj::renderMethod,::flixel::FlxRenderMethod_obj::BLITTING_dyn() );
HXLINE( 591)		::flixel::FlxG_obj::renderTile = hx::IsEq( ::flixel::FlxG_obj::renderMethod,::flixel::FlxRenderMethod_obj::DRAW_TILES_dyn() );
HXLINE( 593)		::flixel::FlxObject_obj::defaultPixelPerfectPosition = ::flixel::FlxG_obj::renderBlit;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,initRenderMethod,(void))

void FlxG_obj::reset(){
            	HX_STACK_FRAME("flixel.FlxG","reset",0x31170d28,"flixel.FlxG.reset","flixel/FlxG.hx",601,0x8e176836)
HXLINE( 602)		{
HXLINE( 602)			HX_VARI(  ::flixel::math::FlxRandom,_this) = ::flixel::FlxG_obj::random;
HXDLIN( 602)			{
HXLINE( 602)				Float _hx_tmp = ::Math_obj::random();
HXDLIN( 602)				HX_VARI( Int,Value) = ::Std_obj::_hx_int((_hx_tmp * (int)2147483647));
HXDLIN( 602)				HX_VAR( Float,lowerBound);
HXDLIN( 602)				if ((Value < (int)1)) {
HXLINE( 602)					lowerBound = (int)1;
            				}
            				else {
HXLINE( 602)					lowerBound = Value;
            				}
HXDLIN( 602)				 ::Dynamic _hx_tmp1;
HXDLIN( 602)				if ((lowerBound > (int)2147483646)) {
HXLINE( 602)					_hx_tmp1 = (int)2147483646;
            				}
            				else {
HXLINE( 602)					_hx_tmp1 = lowerBound;
            				}
HXDLIN( 602)				HX_VARI( Int,NewSeed) = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 602)				HX_VAR_NAME( Float,lowerBound1,"lowerBound");
HXDLIN( 602)				if ((NewSeed < (int)1)) {
HXLINE( 602)					lowerBound1 = (int)1;
            				}
            				else {
HXLINE( 602)					lowerBound1 = NewSeed;
            				}
HXDLIN( 602)				 ::Dynamic _hx_tmp2;
HXDLIN( 602)				if ((lowerBound1 > (int)2147483646)) {
HXLINE( 602)					_hx_tmp2 = (int)2147483646;
            				}
            				else {
HXLINE( 602)					_hx_tmp2 = lowerBound1;
            				}
HXDLIN( 602)				HX_VARI_NAME( Int,NewSeed1,"NewSeed") = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 602)				HX_VAR_NAME( Float,lowerBound2,"lowerBound");
HXDLIN( 602)				if ((NewSeed1 < (int)1)) {
HXLINE( 602)					lowerBound2 = (int)1;
            				}
            				else {
HXLINE( 602)					lowerBound2 = NewSeed1;
            				}
HXDLIN( 602)				 ::Dynamic _hx_tmp3;
HXDLIN( 602)				if ((lowerBound2 > (int)2147483646)) {
HXLINE( 602)					_hx_tmp3 = (int)2147483646;
            				}
            				else {
HXLINE( 602)					_hx_tmp3 = lowerBound2;
            				}
HXDLIN( 602)				Float _hx_tmp4 = (_this->internalSeed = ::Std_obj::_hx_int(_hx_tmp3));
HXDLIN( 602)				Int _hx_tmp5 = ::Std_obj::_hx_int(_hx_tmp4);
HXDLIN( 602)				_this->initialSeed = _hx_tmp5;
            			}
            		}
HXLINE( 604)		::flixel::FlxG_obj::bitmap->clearCache();
HXLINE( 605)		::flixel::FlxG_obj::inputs->reset();
HXLINE( 607)		::flixel::FlxG_obj::sound->destroy(true);
HXLINE( 609)		::flixel::FlxG_obj::autoPause = true;
HXLINE( 610)		::flixel::FlxG_obj::fixedTimestep = true;
HXLINE( 611)		::flixel::FlxG_obj::timeScale = ((Float)1.0);
HXLINE( 612)		::flixel::FlxG_obj::elapsed = (int)0;
HXLINE( 613)		::flixel::FlxG_obj::maxElapsed = ((Float)0.1);
HXLINE( 614)		{
HXLINE( 614)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 614)			Float Width = (::flixel::FlxG_obj::width + (int)20);
HXDLIN( 614)			Float Height = (::flixel::FlxG_obj::height + (int)20);
HXDLIN( 614)			_this1->x = (int)-10;
HXDLIN( 614)			_this1->y = (int)-10;
HXDLIN( 614)			_this1->width = Width;
HXDLIN( 614)			_this1->height = Height;
            		}
HXLINE( 615)		::flixel::FlxG_obj::worldDivisions = (int)6;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,reset,(void))

 ::flixel::_hx_system::scaleModes::BaseScaleMode FlxG_obj::set_scaleMode( ::flixel::_hx_system::scaleModes::BaseScaleMode ScaleMode){
            	HX_STACK_FRAME("flixel.FlxG","set_scaleMode",0xb374d549,"flixel.FlxG.set_scaleMode","flixel/FlxG.hx",619,0x8e176836)
            	HX_STACK_ARG(ScaleMode,"ScaleMode")
HXLINE( 620)		::flixel::FlxG_obj::scaleMode = ScaleMode;
HXLINE( 621)		::flixel::FlxG_obj::game->onResize(null());
HXLINE( 622)		return ScaleMode;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_scaleMode,return )

 ::flixel::input::mouse::FlxMouse FlxG_obj::set_mouse( ::flixel::input::mouse::FlxMouse NewMouse){
            	HX_STACK_FRAME("flixel.FlxG","set_mouse",0x1e754261,"flixel.FlxG.set_mouse","flixel/FlxG.hx",627,0x8e176836)
            	HX_STACK_ARG(NewMouse,"NewMouse")
HXLINE( 628)		Bool _hx_tmp = hx::IsNull( ::flixel::FlxG_obj::mouse );
HXDLIN( 628)		if (_hx_tmp) {
HXLINE( 630)			::flixel::FlxG_obj::mouse = ::flixel::FlxG_obj::inputs->add_flixel_input_mouse_FlxMouse(NewMouse);
HXLINE( 631)			return ::flixel::FlxG_obj::mouse;
            		}
HXLINE( 633)		HX_VARI(  ::flixel::input::mouse::FlxMouse,oldMouse) = ::flixel::FlxG_obj::mouse;
HXLINE( 634)		HX_VARI(  ::flixel::input::mouse::FlxMouse,result) = ::flixel::FlxG_obj::inputs->replace_flixel_input_mouse_FlxMouse(oldMouse,NewMouse);
HXLINE( 635)		Bool _hx_tmp1 = hx::IsNotNull( result );
HXDLIN( 635)		if (_hx_tmp1) {
HXLINE( 637)			::flixel::FlxG_obj::mouse = result;
HXLINE( 638)			oldMouse->destroy();
HXLINE( 639)			return NewMouse;
            		}
HXLINE( 641)		return oldMouse;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_mouse,return )

Int FlxG_obj::set_updateFramerate(Int Framerate){
            	HX_STACK_FRAME("flixel.FlxG","set_updateFramerate",0x52770580,"flixel.FlxG.set_updateFramerate","flixel/FlxG.hx",646,0x8e176836)
            	HX_STACK_ARG(Framerate,"Framerate")
HXLINE( 652)		::flixel::FlxG_obj::updateFramerate = Framerate;
HXLINE( 654)		::flixel::FlxG_obj::game->_stepMS = ::Math_obj::abs(((Float)(int)1000 / (Float)Framerate));
HXLINE( 655)		::flixel::FlxG_obj::game->_stepSeconds = ((Float)::flixel::FlxG_obj::game->_stepMS / (Float)(int)1000);
HXLINE( 657)		Bool _hx_tmp = (::flixel::FlxG_obj::game->_maxAccumulation < ::flixel::FlxG_obj::game->_stepMS);
HXDLIN( 657)		if (_hx_tmp) {
HXLINE( 659)			::flixel::FlxG_obj::game->_maxAccumulation = ::flixel::FlxG_obj::game->_stepMS;
            		}
HXLINE( 662)		return Framerate;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_updateFramerate,return )

Int FlxG_obj::set_drawFramerate(Int Framerate){
            	HX_STACK_FRAME("flixel.FlxG","set_drawFramerate",0x3e23c125,"flixel.FlxG.set_drawFramerate","flixel/FlxG.hx",666,0x8e176836)
            	HX_STACK_ARG(Framerate,"Framerate")
HXLINE( 672)		Float _hx_tmp = ::Math_obj::abs(Framerate);
HXDLIN( 672)		::flixel::FlxG_obj::drawFramerate = ::Std_obj::_hx_int(_hx_tmp);
HXLINE( 674)		 ::openfl::_legacy::display::Stage _hx_tmp1 = ::flixel::FlxG_obj::game->get_stage();
HXDLIN( 674)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp1 );
HXDLIN( 674)		if (_hx_tmp2) {
HXLINE( 676)			::flixel::FlxG_obj::game->get_stage()->set_frameRate(::flixel::FlxG_obj::drawFramerate);
            		}
HXLINE( 679)		Float _hx_tmp3 = ((Float)(int)2000 / (Float)::flixel::FlxG_obj::drawFramerate);
HXDLIN( 679)		::flixel::FlxG_obj::game->_maxAccumulation = (_hx_tmp3 - (int)1);
HXLINE( 681)		Bool _hx_tmp4 = (::flixel::FlxG_obj::game->_maxAccumulation < ::flixel::FlxG_obj::game->_stepMS);
HXDLIN( 681)		if (_hx_tmp4) {
HXLINE( 683)			::flixel::FlxG_obj::game->_maxAccumulation = ::flixel::FlxG_obj::game->_stepMS;
            		}
HXLINE( 686)		return Framerate;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_drawFramerate,return )

Bool FlxG_obj::get_fullscreen(){
            	HX_STACK_FRAME("flixel.FlxG","get_fullscreen",0xfece4c0b,"flixel.FlxG.get_fullscreen","flixel/FlxG.hx",691,0x8e176836)
HXLINE( 691)		::hx::EnumBase _hx_tmp = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_displayState();
HXDLIN( 691)		if (hx::IsNotEq( _hx_tmp,::openfl::_legacy::display::StageDisplayState_obj::FULL_SCREEN_dyn() )) {
HXLINE( 692)			::hx::EnumBase _hx_tmp1 = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_displayState();
HXLINE( 691)			return hx::IsEq( _hx_tmp1,::openfl::_legacy::display::StageDisplayState_obj::FULL_SCREEN_INTERACTIVE_dyn() );
            		}
            		else {
HXLINE( 691)			return true;
            		}
HXDLIN( 691)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,get_fullscreen,return )

Bool FlxG_obj::set_fullscreen(Bool Value){
            	HX_STACK_FRAME("flixel.FlxG","set_fullscreen",0x1eee347f,"flixel.FlxG.set_fullscreen","flixel/FlxG.hx",696,0x8e176836)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 697)		::hx::EnumBase _hx_tmp;
HXDLIN( 697)		if (Value) {
HXLINE( 697)			_hx_tmp = ::openfl::_legacy::display::StageDisplayState_obj::FULL_SCREEN_dyn();
            		}
            		else {
HXLINE( 697)			_hx_tmp = ::openfl::_legacy::display::StageDisplayState_obj::NORMAL_dyn();
            		}
HXDLIN( 697)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->set_displayState(_hx_tmp);
HXLINE( 698)		return Value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxG_obj,set_fullscreen,return )

 ::openfl::_legacy::display::Stage FlxG_obj::get_stage(){
            	HX_STACK_FRAME("flixel.FlxG","get_stage",0xb2caaaee,"flixel.FlxG.get_stage","flixel/FlxG.hx",703,0x8e176836)
HXLINE( 703)		return ::openfl::_legacy::Lib_obj::get_current()->get_stage();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,get_stage,return )

 ::flixel::FlxState FlxG_obj::get_state(){
            	HX_STACK_FRAME("flixel.FlxG","get_state",0xb2cab641,"flixel.FlxG.get_state","flixel/FlxG.hx",708,0x8e176836)
HXLINE( 708)		return ::flixel::FlxG_obj::game->_state;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxG_obj,get_state,return )


FlxG_obj::FlxG_obj()
{
}

bool FlxG_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { outValue = log; return true; }
		if (HX_FIELD_EQ(inName,"vcr") ) { outValue = vcr; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { outValue = game; return true; }
		if (HX_FIELD_EQ(inName,"save") ) { outValue = save; return true; }
		if (HX_FIELD_EQ(inName,"keys") ) { outValue = keys; return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stage") ) { if (inCallProp == hx::paccAlways) { outValue = get_stage(); return true; } }
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == hx::paccAlways) { outValue = get_state(); return true; } }
		if (HX_FIELD_EQ(inName,"width") ) { outValue = width; return true; }
		if (HX_FIELD_EQ(inName,"mouse") ) { outValue = mouse; return true; }
		if (HX_FIELD_EQ(inName,"watch") ) { outValue = watch; return true; }
		if (HX_FIELD_EQ(inName,"sound") ) { outValue = sound; return true; }
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { outValue = camera; return true; }
		if (HX_FIELD_EQ(inName,"height") ) { outValue = height; return true; }
		if (HX_FIELD_EQ(inName,"random") ) { outValue = random; return true; }
		if (HX_FIELD_EQ(inName,"swipes") ) { outValue = swipes; return true; }
		if (HX_FIELD_EQ(inName,"inputs") ) { outValue = inputs; return true; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { outValue = bitmap; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { outValue = VERSION; return true; }
		if (HX_FIELD_EQ(inName,"elapsed") ) { outValue = elapsed; return true; }
		if (HX_FIELD_EQ(inName,"console") ) { outValue = console; return true; }
		if (HX_FIELD_EQ(inName,"cameras") ) { outValue = cameras; return true; }
		if (HX_FIELD_EQ(inName,"plugins") ) { outValue = plugins; return true; }
		if (HX_FIELD_EQ(inName,"signals") ) { outValue = signals; return true; }
		if (HX_FIELD_EQ(inName,"overlap") ) { outValue = overlap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"collide") ) { outValue = collide_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"openURL") ) { outValue = openURL_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gamepads") ) { outValue = gamepads; return true; }
		if (HX_FIELD_EQ(inName,"debugger") ) { outValue = debugger; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoPause") ) { outValue = autoPause; return true; }
		if (HX_FIELD_EQ(inName,"timeScale") ) { outValue = timeScale; return true; }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { outValue = scaleMode; return true; }
		if (HX_FIELD_EQ(inName,"bitmapLog") ) { outValue = bitmapLog; return true; }
		if (HX_FIELD_EQ(inName,"resetGame") ) { outValue = resetGame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_mouse") ) { outValue = set_mouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_stage") ) { outValue = get_stage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_state") ) { outValue = get_state_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderBlit") ) { outValue = renderBlit; return true; }
		if (HX_FIELD_EQ(inName,"renderTile") ) { outValue = renderTile; return true; }
		if (HX_FIELD_EQ(inName,"maxElapsed") ) { outValue = maxElapsed; return true; }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { if (inCallProp == hx::paccAlways) { outValue = get_fullscreen(); return true; } }
		if (HX_FIELD_EQ(inName,"resizeGame") ) { outValue = resizeGame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetState") ) { outValue = resetState_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"worldBounds") ) { outValue = worldBounds; return true; }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { outValue = initialZoom; return true; }
		if (HX_FIELD_EQ(inName,"switchState") ) { outValue = switchState_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderMethod") ) { outValue = renderMethod; return true; }
		if (HX_FIELD_EQ(inName,"initialWidth") ) { outValue = initialWidth; return true; }
		if (HX_FIELD_EQ(inName,"resizeWindow") ) { outValue = resizeWindow_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedTimestep") ) { outValue = fixedTimestep; return true; }
		if (HX_FIELD_EQ(inName,"drawFramerate") ) { outValue = drawFramerate; return true; }
		if (HX_FIELD_EQ(inName,"initialHeight") ) { outValue = initialHeight; return true; }
		if (HX_FIELD_EQ(inName,"set_scaleMode") ) { outValue = set_scaleMode_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"worldDivisions") ) { outValue = worldDivisions; return true; }
		if (HX_FIELD_EQ(inName,"addPostProcess") ) { outValue = addPostProcess_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_fullscreen") ) { outValue = get_fullscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_fullscreen") ) { outValue = set_fullscreen_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateFramerate") ) { outValue = updateFramerate; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"initRenderMethod") ) { outValue = initRenderMethod_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"removePostProcess") ) { outValue = removePostProcess_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_drawFramerate") ) { outValue = set_drawFramerate_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"chainPostProcesses") ) { outValue = chainPostProcesses_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pixelPerfectOverlap") ) { outValue = pixelPerfectOverlap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_updateFramerate") ) { outValue = set_updateFramerate_dyn(); return true; }
	}
	return false;
}

bool FlxG_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { log=ioValue.Cast<  ::flixel::_hx_system::frontEnds::LogFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"vcr") ) { vcr=ioValue.Cast<  ::flixel::_hx_system::frontEnds::VCRFrontEnd >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { game=ioValue.Cast<  ::flixel::FlxGame >(); return true; }
		if (HX_FIELD_EQ(inName,"save") ) { save=ioValue.Cast<  ::flixel::util::FlxSave >(); return true; }
		if (HX_FIELD_EQ(inName,"keys") ) { keys=ioValue.Cast<  ::flixel::input::keyboard::FlxKeyboard >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"mouse") ) { if (inCallProp == hx::paccAlways)  ioValue = set_mouse(ioValue); else mouse=ioValue.Cast<  ::flixel::input::mouse::FlxMouse >(); return true; }
		if (HX_FIELD_EQ(inName,"watch") ) { watch=ioValue.Cast<  ::flixel::_hx_system::frontEnds::WatchFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"sound") ) { sound=ioValue.Cast<  ::flixel::_hx_system::frontEnds::SoundFrontEnd >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { camera=ioValue.Cast<  ::flixel::FlxCamera >(); return true; }
		if (HX_FIELD_EQ(inName,"height") ) { height=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"random") ) { random=ioValue.Cast<  ::flixel::math::FlxRandom >(); return true; }
		if (HX_FIELD_EQ(inName,"swipes") ) { swipes=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"inputs") ) { inputs=ioValue.Cast<  ::flixel::_hx_system::frontEnds::InputFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=ioValue.Cast<  ::flixel::_hx_system::frontEnds::BitmapFrontEnd >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { VERSION=ioValue.Cast<  ::flixel::_hx_system::FlxVersion >(); return true; }
		if (HX_FIELD_EQ(inName,"elapsed") ) { elapsed=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"console") ) { console=ioValue.Cast<  ::flixel::_hx_system::frontEnds::ConsoleFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"cameras") ) { cameras=ioValue.Cast<  ::flixel::_hx_system::frontEnds::CameraFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"plugins") ) { plugins=ioValue.Cast<  ::flixel::_hx_system::frontEnds::PluginFrontEnd >(); return true; }
		if (HX_FIELD_EQ(inName,"signals") ) { signals=ioValue.Cast<  ::flixel::_hx_system::frontEnds::SignalFrontEnd >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gamepads") ) { gamepads=ioValue.Cast<  ::flixel::input::gamepad::FlxGamepadManager >(); return true; }
		if (HX_FIELD_EQ(inName,"debugger") ) { debugger=ioValue.Cast<  ::flixel::_hx_system::frontEnds::DebuggerFrontEnd >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoPause") ) { autoPause=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"timeScale") ) { timeScale=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp == hx::paccAlways)  ioValue = set_scaleMode(ioValue); else scaleMode=ioValue.Cast<  ::flixel::_hx_system::scaleModes::BaseScaleMode >(); return true; }
		if (HX_FIELD_EQ(inName,"bitmapLog") ) { bitmapLog=ioValue.Cast<  ::flixel::_hx_system::frontEnds::BitmapLogFrontEnd >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderBlit") ) { renderBlit=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"renderTile") ) { renderTile=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"maxElapsed") ) { maxElapsed=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { if (inCallProp == hx::paccAlways)  ioValue = set_fullscreen(ioValue); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"worldBounds") ) { worldBounds=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { initialZoom=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderMethod") ) { renderMethod=ioValue.Cast< ::hx::EnumBase >(); return true; }
		if (HX_FIELD_EQ(inName,"initialWidth") ) { initialWidth=ioValue.Cast< Int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedTimestep") ) { fixedTimestep=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"drawFramerate") ) { if (inCallProp == hx::paccAlways)  ioValue = set_drawFramerate(ioValue); else drawFramerate=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"initialHeight") ) { initialHeight=ioValue.Cast< Int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"worldDivisions") ) { worldDivisions=ioValue.Cast< Int >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateFramerate") ) { if (inCallProp == hx::paccAlways)  ioValue = set_updateFramerate(ioValue); else updateFramerate=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxG_obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxG_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &FlxG_obj::autoPause,HX_HCSTRING("autoPause","\x07","\x15","\x63","\x9b")},
	{hx::fsBool,(void *) &FlxG_obj::fixedTimestep,HX_HCSTRING("fixedTimestep","\x6d","\x87","\xbc","\x49")},
	{hx::fsFloat,(void *) &FlxG_obj::timeScale,HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d")},
	{hx::fsInt,(void *) &FlxG_obj::worldDivisions,HX_HCSTRING("worldDivisions","\xf4","\x19","\x32","\xa0")},
	{hx::fsObject /*::flixel::FlxCamera*/ ,(void *) &FlxG_obj::camera,HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7")},
	{hx::fsObject /*::flixel::_hx_system::FlxVersion*/ ,(void *) &FlxG_obj::VERSION,HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc")},
	{hx::fsObject /*::flixel::FlxGame*/ ,(void *) &FlxG_obj::game,HX_HCSTRING("game","\xf2","\xf3","\x5e","\x44")},
	{hx::fsInt,(void *) &FlxG_obj::updateFramerate,HX_HCSTRING("updateFramerate","\x44","\xb6","\xd6","\x9d")},
	{hx::fsInt,(void *) &FlxG_obj::drawFramerate,HX_HCSTRING("drawFramerate","\xe9","\xf8","\x72","\xad")},
	{hx::fsObject /*::flixel::FlxRenderMethod*/ ,(void *) &FlxG_obj::renderMethod,HX_HCSTRING("renderMethod","\xd7","\xfa","\xb0","\x78")},
	{hx::fsBool,(void *) &FlxG_obj::renderBlit,HX_HCSTRING("renderBlit","\xab","\x32","\x23","\xde")},
	{hx::fsBool,(void *) &FlxG_obj::renderTile,HX_HCSTRING("renderTile","\xa4","\xc5","\x06","\xea")},
	{hx::fsFloat,(void *) &FlxG_obj::elapsed,HX_HCSTRING("elapsed","\x3c","\x98","\xc0","\xba")},
	{hx::fsFloat,(void *) &FlxG_obj::maxElapsed,HX_HCSTRING("maxElapsed","\xf8","\x11","\xe5","\x24")},
	{hx::fsInt,(void *) &FlxG_obj::width,HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(void *) &FlxG_obj::height,HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::flixel::_hx_system::scaleModes::BaseScaleMode*/ ,(void *) &FlxG_obj::scaleMode,HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxG_obj::worldBounds,HX_HCSTRING("worldBounds","\x67","\x1a","\x8b","\x31")},
	{hx::fsObject /*::flixel::util::FlxSave*/ ,(void *) &FlxG_obj::save,HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c")},
	{hx::fsObject /*::flixel::math::FlxRandom*/ ,(void *) &FlxG_obj::random,HX_HCSTRING("random","\x03","\x22","\x8f","\xb7")},
	{hx::fsObject /*::flixel::input::mouse::FlxMouse*/ ,(void *) &FlxG_obj::mouse,HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &FlxG_obj::swipes,HX_HCSTRING("swipes","\xb9","\x42","\x76","\xc5")},
	{hx::fsObject /*::flixel::input::keyboard::FlxKeyboard*/ ,(void *) &FlxG_obj::keys,HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadManager*/ ,(void *) &FlxG_obj::gamepads,HX_HCSTRING("gamepads","\xb2","\xac","\x9e","\xcb")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::InputFrontEnd*/ ,(void *) &FlxG_obj::inputs,HX_HCSTRING("inputs","\x29","\xc5","\xed","\x9b")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::ConsoleFrontEnd*/ ,(void *) &FlxG_obj::console,HX_HCSTRING("console","\x57","\xeb","\xd5","\x18")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::LogFrontEnd*/ ,(void *) &FlxG_obj::log,HX_HCSTRING("log","\x84","\x54","\x52","\x00")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::BitmapLogFrontEnd*/ ,(void *) &FlxG_obj::bitmapLog,HX_HCSTRING("bitmapLog","\xd5","\x5b","\xdb","\xc6")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::WatchFrontEnd*/ ,(void *) &FlxG_obj::watch,HX_HCSTRING("watch","\x4f","\x16","\x25","\xc5")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::DebuggerFrontEnd*/ ,(void *) &FlxG_obj::debugger,HX_HCSTRING("debugger","\x21","\x24","\xeb","\x90")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::VCRFrontEnd*/ ,(void *) &FlxG_obj::vcr,HX_HCSTRING("vcr","\xa5","\xe0","\x59","\x00")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::BitmapFrontEnd*/ ,(void *) &FlxG_obj::bitmap,HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::CameraFrontEnd*/ ,(void *) &FlxG_obj::cameras,HX_HCSTRING("cameras","\x2e","\x8a","\x31","\xe3")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::PluginFrontEnd*/ ,(void *) &FlxG_obj::plugins,HX_HCSTRING("plugins","\x60","\xd2","\x35","\x02")},
	{hx::fsInt,(void *) &FlxG_obj::initialWidth,HX_HCSTRING("initialWidth","\xe2","\xb6","\x72","\x8e")},
	{hx::fsInt,(void *) &FlxG_obj::initialHeight,HX_HCSTRING("initialHeight","\x8b","\xc7","\x3c","\xcc")},
	{hx::fsFloat,(void *) &FlxG_obj::initialZoom,HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::SoundFrontEnd*/ ,(void *) &FlxG_obj::sound,HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80")},
	{hx::fsObject /*::flixel::_hx_system::frontEnds::SignalFrontEnd*/ ,(void *) &FlxG_obj::signals,HX_HCSTRING("signals","\x0b","\x6d","\xe2","\x40")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void FlxG_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxG_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxG_obj::autoPause,"autoPause");
	HX_MARK_MEMBER_NAME(FlxG_obj::fixedTimestep,"fixedTimestep");
	HX_MARK_MEMBER_NAME(FlxG_obj::timeScale,"timeScale");
	HX_MARK_MEMBER_NAME(FlxG_obj::worldDivisions,"worldDivisions");
	HX_MARK_MEMBER_NAME(FlxG_obj::camera,"camera");
	HX_MARK_MEMBER_NAME(FlxG_obj::VERSION,"VERSION");
	HX_MARK_MEMBER_NAME(FlxG_obj::game,"game");
	HX_MARK_MEMBER_NAME(FlxG_obj::updateFramerate,"updateFramerate");
	HX_MARK_MEMBER_NAME(FlxG_obj::drawFramerate,"drawFramerate");
	HX_MARK_MEMBER_NAME(FlxG_obj::renderMethod,"renderMethod");
	HX_MARK_MEMBER_NAME(FlxG_obj::renderBlit,"renderBlit");
	HX_MARK_MEMBER_NAME(FlxG_obj::renderTile,"renderTile");
	HX_MARK_MEMBER_NAME(FlxG_obj::elapsed,"elapsed");
	HX_MARK_MEMBER_NAME(FlxG_obj::maxElapsed,"maxElapsed");
	HX_MARK_MEMBER_NAME(FlxG_obj::width,"width");
	HX_MARK_MEMBER_NAME(FlxG_obj::height,"height");
	HX_MARK_MEMBER_NAME(FlxG_obj::scaleMode,"scaleMode");
	HX_MARK_MEMBER_NAME(FlxG_obj::worldBounds,"worldBounds");
	HX_MARK_MEMBER_NAME(FlxG_obj::save,"save");
	HX_MARK_MEMBER_NAME(FlxG_obj::random,"random");
	HX_MARK_MEMBER_NAME(FlxG_obj::mouse,"mouse");
	HX_MARK_MEMBER_NAME(FlxG_obj::swipes,"swipes");
	HX_MARK_MEMBER_NAME(FlxG_obj::keys,"keys");
	HX_MARK_MEMBER_NAME(FlxG_obj::gamepads,"gamepads");
	HX_MARK_MEMBER_NAME(FlxG_obj::inputs,"inputs");
	HX_MARK_MEMBER_NAME(FlxG_obj::console,"console");
	HX_MARK_MEMBER_NAME(FlxG_obj::log,"log");
	HX_MARK_MEMBER_NAME(FlxG_obj::bitmapLog,"bitmapLog");
	HX_MARK_MEMBER_NAME(FlxG_obj::watch,"watch");
	HX_MARK_MEMBER_NAME(FlxG_obj::debugger,"debugger");
	HX_MARK_MEMBER_NAME(FlxG_obj::vcr,"vcr");
	HX_MARK_MEMBER_NAME(FlxG_obj::bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(FlxG_obj::cameras,"cameras");
	HX_MARK_MEMBER_NAME(FlxG_obj::plugins,"plugins");
	HX_MARK_MEMBER_NAME(FlxG_obj::initialWidth,"initialWidth");
	HX_MARK_MEMBER_NAME(FlxG_obj::initialHeight,"initialHeight");
	HX_MARK_MEMBER_NAME(FlxG_obj::initialZoom,"initialZoom");
	HX_MARK_MEMBER_NAME(FlxG_obj::sound,"sound");
	HX_MARK_MEMBER_NAME(FlxG_obj::signals,"signals");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxG_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxG_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxG_obj::autoPause,"autoPause");
	HX_VISIT_MEMBER_NAME(FlxG_obj::fixedTimestep,"fixedTimestep");
	HX_VISIT_MEMBER_NAME(FlxG_obj::timeScale,"timeScale");
	HX_VISIT_MEMBER_NAME(FlxG_obj::worldDivisions,"worldDivisions");
	HX_VISIT_MEMBER_NAME(FlxG_obj::camera,"camera");
	HX_VISIT_MEMBER_NAME(FlxG_obj::VERSION,"VERSION");
	HX_VISIT_MEMBER_NAME(FlxG_obj::game,"game");
	HX_VISIT_MEMBER_NAME(FlxG_obj::updateFramerate,"updateFramerate");
	HX_VISIT_MEMBER_NAME(FlxG_obj::drawFramerate,"drawFramerate");
	HX_VISIT_MEMBER_NAME(FlxG_obj::renderMethod,"renderMethod");
	HX_VISIT_MEMBER_NAME(FlxG_obj::renderBlit,"renderBlit");
	HX_VISIT_MEMBER_NAME(FlxG_obj::renderTile,"renderTile");
	HX_VISIT_MEMBER_NAME(FlxG_obj::elapsed,"elapsed");
	HX_VISIT_MEMBER_NAME(FlxG_obj::maxElapsed,"maxElapsed");
	HX_VISIT_MEMBER_NAME(FlxG_obj::width,"width");
	HX_VISIT_MEMBER_NAME(FlxG_obj::height,"height");
	HX_VISIT_MEMBER_NAME(FlxG_obj::scaleMode,"scaleMode");
	HX_VISIT_MEMBER_NAME(FlxG_obj::worldBounds,"worldBounds");
	HX_VISIT_MEMBER_NAME(FlxG_obj::save,"save");
	HX_VISIT_MEMBER_NAME(FlxG_obj::random,"random");
	HX_VISIT_MEMBER_NAME(FlxG_obj::mouse,"mouse");
	HX_VISIT_MEMBER_NAME(FlxG_obj::swipes,"swipes");
	HX_VISIT_MEMBER_NAME(FlxG_obj::keys,"keys");
	HX_VISIT_MEMBER_NAME(FlxG_obj::gamepads,"gamepads");
	HX_VISIT_MEMBER_NAME(FlxG_obj::inputs,"inputs");
	HX_VISIT_MEMBER_NAME(FlxG_obj::console,"console");
	HX_VISIT_MEMBER_NAME(FlxG_obj::log,"log");
	HX_VISIT_MEMBER_NAME(FlxG_obj::bitmapLog,"bitmapLog");
	HX_VISIT_MEMBER_NAME(FlxG_obj::watch,"watch");
	HX_VISIT_MEMBER_NAME(FlxG_obj::debugger,"debugger");
	HX_VISIT_MEMBER_NAME(FlxG_obj::vcr,"vcr");
	HX_VISIT_MEMBER_NAME(FlxG_obj::bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(FlxG_obj::cameras,"cameras");
	HX_VISIT_MEMBER_NAME(FlxG_obj::plugins,"plugins");
	HX_VISIT_MEMBER_NAME(FlxG_obj::initialWidth,"initialWidth");
	HX_VISIT_MEMBER_NAME(FlxG_obj::initialHeight,"initialHeight");
	HX_VISIT_MEMBER_NAME(FlxG_obj::initialZoom,"initialZoom");
	HX_VISIT_MEMBER_NAME(FlxG_obj::sound,"sound");
	HX_VISIT_MEMBER_NAME(FlxG_obj::signals,"signals");
};

#endif

hx::Class FlxG_obj::__mClass;

static ::String FlxG_obj_sStaticFields[] = {
	HX_HCSTRING("autoPause","\x07","\x15","\x63","\x9b"),
	HX_HCSTRING("fixedTimestep","\x6d","\x87","\xbc","\x49"),
	HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d"),
	HX_HCSTRING("worldDivisions","\xf4","\x19","\x32","\xa0"),
	HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7"),
	HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"),
	HX_HCSTRING("game","\xf2","\xf3","\x5e","\x44"),
	HX_HCSTRING("updateFramerate","\x44","\xb6","\xd6","\x9d"),
	HX_HCSTRING("drawFramerate","\xe9","\xf8","\x72","\xad"),
	HX_HCSTRING("renderMethod","\xd7","\xfa","\xb0","\x78"),
	HX_HCSTRING("renderBlit","\xab","\x32","\x23","\xde"),
	HX_HCSTRING("renderTile","\xa4","\xc5","\x06","\xea"),
	HX_HCSTRING("elapsed","\x3c","\x98","\xc0","\xba"),
	HX_HCSTRING("maxElapsed","\xf8","\x11","\xe5","\x24"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b"),
	HX_HCSTRING("worldBounds","\x67","\x1a","\x8b","\x31"),
	HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c"),
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"),
	HX_HCSTRING("swipes","\xb9","\x42","\x76","\xc5"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("gamepads","\xb2","\xac","\x9e","\xcb"),
	HX_HCSTRING("inputs","\x29","\xc5","\xed","\x9b"),
	HX_HCSTRING("console","\x57","\xeb","\xd5","\x18"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("bitmapLog","\xd5","\x5b","\xdb","\xc6"),
	HX_HCSTRING("watch","\x4f","\x16","\x25","\xc5"),
	HX_HCSTRING("debugger","\x21","\x24","\xeb","\x90"),
	HX_HCSTRING("vcr","\xa5","\xe0","\x59","\x00"),
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("cameras","\x2e","\x8a","\x31","\xe3"),
	HX_HCSTRING("plugins","\x60","\xd2","\x35","\x02"),
	HX_HCSTRING("initialWidth","\xe2","\xb6","\x72","\x8e"),
	HX_HCSTRING("initialHeight","\x8b","\xc7","\x3c","\xcc"),
	HX_HCSTRING("initialZoom","\xb7","\x71","\x1d","\x2d"),
	HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"),
	HX_HCSTRING("signals","\x0b","\x6d","\xe2","\x40"),
	HX_HCSTRING("resizeGame","\x06","\x84","\x99","\xb8"),
	HX_HCSTRING("resizeWindow","\x04","\x51","\x9a","\x36"),
	HX_HCSTRING("resetGame","\x61","\xfd","\x4a","\x8a"),
	HX_HCSTRING("switchState","\x7d","\x07","\x8b","\x77"),
	HX_HCSTRING("resetState","\xc2","\xad","\xa7","\x6c"),
	HX_HCSTRING("overlap","\x87","\x43","\x10","\xa9"),
	HX_HCSTRING("pixelPerfectOverlap","\x20","\x0b","\x1b","\x60"),
	HX_HCSTRING("collide","\x7e","\xaf","\x63","\xed"),
	HX_HCSTRING("addPostProcess","\x4e","\x99","\x59","\xc3"),
	HX_HCSTRING("removePostProcess","\x0b","\x2c","\xd3","\xe7"),
	HX_HCSTRING("chainPostProcesses","\x5c","\x72","\x4f","\x53"),
	HX_HCSTRING("openURL","\xc5","\xbd","\x35","\x40"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("initRenderMethod","\x07","\xda","\xf2","\x6b"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("set_scaleMode","\xf0","\x90","\x3d","\x32"),
	HX_HCSTRING("set_mouse","\x88","\x5e","\x5f","\x33"),
	HX_HCSTRING("set_updateFramerate","\x67","\x78","\x7e","\x65"),
	HX_HCSTRING("set_drawFramerate","\x4c","\xdc","\x50","\xd7"),
	HX_HCSTRING("get_fullscreen","\x84","\xc2","\xa9","\x6f"),
	HX_HCSTRING("set_fullscreen","\xf8","\xaa","\xc9","\x8f"),
	HX_HCSTRING("get_stage","\x15","\xc7","\xb4","\xc7"),
	HX_HCSTRING("get_state","\x68","\xd2","\xb4","\xc7"),
	::String(null())
};

void FlxG_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxG","\x07","\xab","\x3b","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxG_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxG_obj::__SetStatic;
	__mClass->mMarkFunc = FlxG_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxG_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FlxG_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxG_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxG_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxG_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",68,0x8e176836)
HXLINE(  68)		autoPause = true;
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",73,0x8e176836)
HXLINE(  73)		fixedTimestep = true;
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",77,0x8e176836)
HXLINE(  77)		timeScale = ((Float)1);
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",82,0x8e176836)
HXLINE(  82)		worldDivisions = (int)6;
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",93,0x8e176836)
HXLINE(  93)		VERSION =  ::flixel::_hx_system::FlxVersion_obj::__new((int)4,(int)1,(int)1);
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",129,0x8e176836)
HXLINE( 129)		elapsed = ((Float)0);
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",134,0x8e176836)
HXLINE( 134)		maxElapsed = ((Float)0.1);
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",149,0x8e176836)
HXLINE( 149)		scaleMode = ( ( ::flixel::_hx_system::scaleModes::BaseScaleMode)( ::flixel::_hx_system::scaleModes::RatioScaleMode_obj::__new(null())) );
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",159,0x8e176836)
HXLINE( 159)		Float X = (int)0;
HXDLIN( 159)		Float Y = (int)0;
HXDLIN( 159)		Float Width = (int)0;
HXDLIN( 159)		Float Height = (int)0;
HXDLIN( 159)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 159)		_this->x = X;
HXDLIN( 159)		_this->y = Y;
HXDLIN( 159)		_this->width = Width;
HXDLIN( 159)		_this->height = Height;
HXDLIN( 159)		_this->_inPool = false;
HXDLIN( 159)		worldBounds = _this;
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",165,0x8e176836)
HXLINE( 165)		save =  ::flixel::util::FlxSave_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",170,0x8e176836)
HXLINE( 170)		random =  ::flixel::math::FlxRandom_obj::__new(null());
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",191,0x8e176836)
HXLINE( 191)		swipes = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",233,0x8e176836)
HXLINE( 233)		inputs =  ::flixel::_hx_system::frontEnds::InputFrontEnd_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",237,0x8e176836)
HXLINE( 237)		console =  ::flixel::_hx_system::frontEnds::ConsoleFrontEnd_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",241,0x8e176836)
HXLINE( 241)		log =  ::flixel::_hx_system::frontEnds::LogFrontEnd_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",245,0x8e176836)
HXLINE( 245)		bitmapLog =  ::flixel::_hx_system::frontEnds::BitmapLogFrontEnd_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",249,0x8e176836)
HXLINE( 249)		watch =  ::flixel::_hx_system::frontEnds::WatchFrontEnd_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",254,0x8e176836)
HXLINE( 254)		debugger =  ::flixel::_hx_system::frontEnds::DebuggerFrontEnd_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",264,0x8e176836)
HXLINE( 264)		bitmap =  ::flixel::_hx_system::frontEnds::BitmapFrontEnd_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",268,0x8e176836)
HXLINE( 268)		cameras =  ::flixel::_hx_system::frontEnds::CameraFrontEnd_obj::__new();
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",274,0x8e176836)
HXLINE( 274)		initialWidth = (int)0;
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",275,0x8e176836)
HXLINE( 275)		initialHeight = (int)0;
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",276,0x8e176836)
HXLINE( 276)		initialZoom = ((Float)0);
            	}
{
            	HX_STACK_FRAME("flixel.FlxG","boot",0x0ca22ef9,"flixel.FlxG.boot","flixel/FlxG.hx",288,0x8e176836)
HXLINE( 288)		signals =  ::flixel::_hx_system::frontEnds::SignalFrontEnd_obj::__new();
            	}
}

} // end namespace flixel
