// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif

namespace flixel{
namespace math{

void FlxPoint_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.math.FlxPoint","new",0x5991ca64,"flixel.math.FlxPoint.new","flixel/math/FlxPoint.hx",12,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  52)		this->_inPool = false;
HXLINE(  51)		this->_weak = false;
HXLINE(  49)		this->y = ((Float)0);
HXLINE(  48)		this->x = ((Float)0);
HXLINE(  57)		this->set(X,Y);
            	}

Dynamic FlxPoint_obj::__CreateEmpty() { return new FlxPoint_obj; }

hx::ObjectPtr< FlxPoint_obj > FlxPoint_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y)
{
	hx::ObjectPtr< FlxPoint_obj > _hx_result = new FlxPoint_obj();
	_hx_result->__construct(__o_X,__o_Y);
	return _hx_result;
}

Dynamic FlxPoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxPoint_obj > _hx_result = new FlxPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

static ::flixel::util::IFlxPooled_obj _hx_flixel_math_FlxPoint__hx_flixel_util_IFlxPooled= {
	( void (hx::Object::*)())&::flixel::math::FlxPoint_obj::put,
	( void (hx::Object::*)())&::flixel::math::FlxPoint_obj::destroy,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_math_FlxPoint__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::math::FlxPoint_obj::destroy,
};

void *FlxPoint_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9aa322a2: return &_hx_flixel_math_FlxPoint__hx_flixel_util_IFlxPooled;
		case (int)0xd4fe2fcd: return &_hx_flixel_math_FlxPoint__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxPoint_obj::put(){
            	HX_STACK_FRAME("flixel.math.FlxPoint","put",0x59935cd3,"flixel.math.FlxPoint.put","flixel/math/FlxPoint.hx",65,0xb3e1cd2c)
            	HX_STACK_THIS(this)
HXLINE(  65)		Bool _hx_tmp = !(this->_inPool);
HXDLIN(  65)		if (_hx_tmp) {
HXLINE(  67)			this->_inPool = true;
HXLINE(  68)			this->_weak = false;
HXLINE(  69)			::flixel::math::FlxPoint_obj::_pool->putUnsafe(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,put,(void))

void FlxPoint_obj::putWeak(){
            	HX_STACK_FRAME("flixel.math.FlxPoint","putWeak",0xb3cc4aeb,"flixel.math.FlxPoint.putWeak","flixel/math/FlxPoint.hx",78,0xb3e1cd2c)
            	HX_STACK_THIS(this)
HXLINE(  78)		Bool _hx_tmp = this->_weak;
HXDLIN(  78)		if (_hx_tmp) {
HXLINE(  80)			this->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,putWeak,(void))

 ::flixel::math::FlxPoint FlxPoint_obj::set(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.math.FlxPoint","set",0x599595a6,"flixel.math.FlxPoint.set","flixel/math/FlxPoint.hx",92,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  93)		this->set_x(X);
HXLINE(  94)		this->set_y(Y);
HXLINE(  95)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,set,return )

 ::flixel::math::FlxPoint FlxPoint_obj::add(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.math.FlxPoint","add",0x5987ec25,"flixel.math.FlxPoint.add","flixel/math/FlxPoint.hx",106,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 107)		{
HXLINE( 107)			HX_VARI(  ::flixel::math::FlxPoint,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 107)			Float _hx_tmp = (_g->x + X);
HXDLIN( 107)			_g->set_x(_hx_tmp);
            		}
HXLINE( 108)		{
HXLINE( 108)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 108)			Float _hx_tmp1 = (_g1->y + Y);
HXDLIN( 108)			_g1->set_y(_hx_tmp1);
            		}
HXLINE( 109)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,add,return )

 ::flixel::math::FlxPoint FlxPoint_obj::addPoint( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.math.FlxPoint","addPoint",0x1b3211eb,"flixel.math.FlxPoint.addPoint","flixel/math/FlxPoint.hx",119,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 120)		{
HXLINE( 120)			HX_VARI(  ::flixel::math::FlxPoint,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 120)			Float _hx_tmp = (_g->x + point->x);
HXDLIN( 120)			_g->set_x(_hx_tmp);
            		}
HXLINE( 121)		{
HXLINE( 121)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 121)			Float _hx_tmp1 = (_g1->y + point->y);
HXDLIN( 121)			_g1->set_y(_hx_tmp1);
            		}
HXLINE( 122)		Bool _hx_tmp2 = point->_weak;
HXDLIN( 122)		if (_hx_tmp2) {
HXLINE( 122)			point->put();
            		}
HXLINE( 123)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,addPoint,return )

 ::flixel::math::FlxPoint FlxPoint_obj::subtract(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.math.FlxPoint","subtract",0xd356ac90,"flixel.math.FlxPoint.subtract","flixel/math/FlxPoint.hx",134,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 135)		{
HXLINE( 135)			HX_VARI(  ::flixel::math::FlxPoint,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 135)			Float _hx_tmp = (_g->x - X);
HXDLIN( 135)			_g->set_x(_hx_tmp);
            		}
HXLINE( 136)		{
HXLINE( 136)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 136)			Float _hx_tmp1 = (_g1->y - Y);
HXDLIN( 136)			_g1->set_y(_hx_tmp1);
            		}
HXLINE( 137)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,subtract,return )

 ::flixel::math::FlxPoint FlxPoint_obj::subtractPoint( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.math.FlxPoint","subtractPoint",0xa41aeda0,"flixel.math.FlxPoint.subtractPoint","flixel/math/FlxPoint.hx",147,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 148)		{
HXLINE( 148)			HX_VARI(  ::flixel::math::FlxPoint,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 148)			Float _hx_tmp = (_g->x - point->x);
HXDLIN( 148)			_g->set_x(_hx_tmp);
            		}
HXLINE( 149)		{
HXLINE( 149)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 149)			Float _hx_tmp1 = (_g1->y - point->y);
HXDLIN( 149)			_g1->set_y(_hx_tmp1);
            		}
HXLINE( 150)		Bool _hx_tmp2 = point->_weak;
HXDLIN( 150)		if (_hx_tmp2) {
HXLINE( 150)			point->put();
            		}
HXLINE( 151)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,subtractPoint,return )

 ::flixel::math::FlxPoint FlxPoint_obj::scale(Float k){
            	HX_STACK_FRAME("flixel.math.FlxPoint","scale",0x1902518e,"flixel.math.FlxPoint.scale","flixel/math/FlxPoint.hx",161,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
HXLINE( 162)		{
HXLINE( 162)			HX_VARI(  ::flixel::math::FlxPoint,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 162)			Float _hx_tmp = (_g->x * k);
HXDLIN( 162)			_g->set_x(_hx_tmp);
            		}
HXLINE( 163)		{
HXLINE( 163)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 163)			Float _hx_tmp1 = (_g1->y * k);
HXDLIN( 163)			_g1->set_y(_hx_tmp1);
            		}
HXLINE( 164)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,scale,return )

 ::flixel::math::FlxPoint FlxPoint_obj::copyFrom( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.math.FlxPoint","copyFrom",0xa3a6433b,"flixel.math.FlxPoint.copyFrom","flixel/math/FlxPoint.hx",174,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 175)		this->set_x(point->x);
HXLINE( 176)		this->set_y(point->y);
HXLINE( 177)		Bool _hx_tmp = point->_weak;
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 177)			point->put();
            		}
HXLINE( 178)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,copyFrom,return )

 ::flixel::math::FlxPoint FlxPoint_obj::copyTo( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.math.FlxPoint","copyTo",0x56123d0c,"flixel.math.FlxPoint.copyTo","flixel/math/FlxPoint.hx",188,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 189)		Bool _hx_tmp = hx::IsNull( point );
HXDLIN( 189)		if (_hx_tmp) {
HXLINE( 191)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 191)			point1->_inPool = false;
HXDLIN( 191)			point = point1;
            		}
HXLINE( 193)		point->set_x(this->x);
HXLINE( 194)		point->set_y(this->y);
HXLINE( 195)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,copyTo,return )

 ::flixel::math::FlxPoint FlxPoint_obj::copyFromFlash( ::openfl::_legacy::geom::Point FlashPoint){
            	HX_STACK_FRAME("flixel.math.FlxPoint","copyFromFlash",0x788ecc75,"flixel.math.FlxPoint.copyFromFlash","flixel/math/FlxPoint.hx",205,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(FlashPoint,"FlashPoint")
HXLINE( 206)		this->set_x(FlashPoint->x);
HXLINE( 207)		this->set_y(FlashPoint->y);
HXLINE( 208)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,copyFromFlash,return )

 ::openfl::_legacy::geom::Point FlxPoint_obj::copyToFlash( ::openfl::_legacy::geom::Point FlashPoint){
            	HX_STACK_FRAME("flixel.math.FlxPoint","copyToFlash",0x8fb29d04,"flixel.math.FlxPoint.copyToFlash","flixel/math/FlxPoint.hx",218,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(FlashPoint,"FlashPoint")
HXLINE( 219)		Bool _hx_tmp = hx::IsNull( FlashPoint );
HXDLIN( 219)		if (_hx_tmp) {
HXLINE( 221)			FlashPoint =  ::openfl::_legacy::geom::Point_obj::__new(null(),null());
            		}
HXLINE( 224)		FlashPoint->x = this->x;
HXLINE( 225)		FlashPoint->y = this->y;
HXLINE( 226)		return FlashPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,copyToFlash,return )

 ::openfl::_legacy::geom::Point FlxPoint_obj::addToFlash( ::openfl::_legacy::geom::Point FlashPoint){
            	HX_STACK_FRAME("flixel.math.FlxPoint","addToFlash",0x5739bc90,"flixel.math.FlxPoint.addToFlash","flixel/math/FlxPoint.hx",236,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(FlashPoint,"FlashPoint")
HXLINE( 237)		hx::AddEq(FlashPoint->x,this->x);
HXLINE( 238)		hx::AddEq(FlashPoint->y,this->y);
HXLINE( 240)		return FlashPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,addToFlash,return )

 ::openfl::_legacy::geom::Point FlxPoint_obj::subtractFromFlash( ::openfl::_legacy::geom::Point FlashPoint){
            	HX_STACK_FRAME("flixel.math.FlxPoint","subtractFromFlash",0x9d3f4136,"flixel.math.FlxPoint.subtractFromFlash","flixel/math/FlxPoint.hx",250,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(FlashPoint,"FlashPoint")
HXLINE( 251)		hx::SubEq(FlashPoint->x,this->x);
HXLINE( 252)		hx::SubEq(FlashPoint->y,this->y);
HXLINE( 254)		return FlashPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,subtractFromFlash,return )

Bool FlxPoint_obj::inCoords(Float RectX,Float RectY,Float RectWidth,Float RectHeight){
            	HX_STACK_FRAME("flixel.math.FlxPoint","inCoords",0x2c48255f,"flixel.math.FlxPoint.inCoords","flixel/math/FlxPoint.hx",268,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(RectX,"RectX")
            	HX_STACK_ARG(RectY,"RectY")
            	HX_STACK_ARG(RectWidth,"RectWidth")
            	HX_STACK_ARG(RectHeight,"RectHeight")
HXLINE( 268)		return ::flixel::math::FlxMath_obj::pointInCoordinates(this->x,this->y,RectX,RectY,RectWidth,RectHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxPoint_obj,inCoords,return )

Bool FlxPoint_obj::inRect( ::flixel::math::FlxRect Rect){
            	HX_STACK_FRAME("flixel.math.FlxPoint","inRect",0x14ec4c25,"flixel.math.FlxPoint.inRect","flixel/math/FlxPoint.hx",279,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Rect,"Rect")
HXLINE( 279)		return ::flixel::math::FlxMath_obj::pointInFlxRect(this->x,this->y,Rect);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,inRect,return )

Float FlxPoint_obj::distanceTo( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.math.FlxPoint","distanceTo",0xac8be28c,"flixel.math.FlxPoint.distanceTo","flixel/math/FlxPoint.hx",289,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 290)		HX_VARI( Float,dx) = (this->x - point->x);
HXLINE( 291)		HX_VARI( Float,dy) = (this->y - point->y);
HXLINE( 292)		Bool _hx_tmp = point->_weak;
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 292)			point->put();
            		}
HXLINE( 293)		return ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,distanceTo,return )

 ::flixel::math::FlxPoint FlxPoint_obj::floor(){
            	HX_STACK_FRAME("flixel.math.FlxPoint","floor",0xa2ca54d0,"flixel.math.FlxPoint.floor","flixel/math/FlxPoint.hx",300,0xb3e1cd2c)
            	HX_STACK_THIS(this)
HXLINE( 301)		Int _hx_tmp = ::Math_obj::floor(this->x);
HXDLIN( 301)		this->set_x(_hx_tmp);
HXLINE( 302)		Int _hx_tmp1 = ::Math_obj::floor(this->y);
HXDLIN( 302)		this->set_y(_hx_tmp1);
HXLINE( 303)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,floor,return )

 ::flixel::math::FlxPoint FlxPoint_obj::ceil(){
            	HX_STACK_FRAME("flixel.math.FlxPoint","ceil",0xfeb9e881,"flixel.math.FlxPoint.ceil","flixel/math/FlxPoint.hx",310,0xb3e1cd2c)
            	HX_STACK_THIS(this)
HXLINE( 311)		Int _hx_tmp = ::Math_obj::ceil(this->x);
HXDLIN( 311)		this->set_x(_hx_tmp);
HXLINE( 312)		Int _hx_tmp1 = ::Math_obj::ceil(this->y);
HXDLIN( 312)		this->set_y(_hx_tmp1);
HXLINE( 313)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,ceil,return )

 ::flixel::math::FlxPoint FlxPoint_obj::round(){
            	HX_STACK_FRAME("flixel.math.FlxPoint","round",0x8d997b52,"flixel.math.FlxPoint.round","flixel/math/FlxPoint.hx",320,0xb3e1cd2c)
            	HX_STACK_THIS(this)
HXLINE( 321)		Int _hx_tmp = ::Math_obj::round(this->x);
HXDLIN( 321)		this->set_x(_hx_tmp);
HXLINE( 322)		Int _hx_tmp1 = ::Math_obj::round(this->y);
HXDLIN( 322)		this->set_y(_hx_tmp1);
HXLINE( 323)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,round,return )

 ::flixel::math::FlxPoint FlxPoint_obj::rotate( ::flixel::math::FlxPoint Pivot,Float Angle){
            	HX_STACK_FRAME("flixel.math.FlxPoint","rotate",0x57ff66d7,"flixel.math.FlxPoint.rotate","flixel/math/FlxPoint.hx",334,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Pivot,"Pivot")
            	HX_STACK_ARG(Angle,"Angle")
HXLINE( 335)		HX_VARI( Float,radians) = (Angle * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 336)		HX_VARI( Float,n) = radians;
HXDLIN( 336)		n = (radians * ((Float)0.3183098862));
HXDLIN( 336)		if ((n > (int)1)) {
HXLINE( 336)			Int _hx_tmp = ::Math_obj::ceil(n);
HXDLIN( 336)			hx::SubEq(n,((int)((int)_hx_tmp >> (int)(int)1) << (int)(int)1));
            		}
            		else {
HXLINE( 336)			if ((n < (int)-1)) {
HXLINE( 336)				Int _hx_tmp1 = ::Math_obj::ceil(-(n));
HXDLIN( 336)				hx::AddEq(n,((int)((int)_hx_tmp1 >> (int)(int)1) << (int)(int)1));
            			}
            		}
HXDLIN( 336)		HX_VAR( Float,sin);
HXDLIN( 336)		if ((n > (int)0)) {
HXLINE( 336)			sin = (n * (((Float)3.1) + (n * (((Float)0.5) + (n * (((Float)-7.2) + (n * ((Float)3.6))))))));
            		}
            		else {
HXLINE( 336)			sin = (n * (((Float)3.1) - (n * (((Float)0.5) + (n * (((Float)7.2) + (n * ((Float)3.6))))))));
            		}
HXLINE( 337)		HX_VARI_NAME( Float,n1,"n") = (radians + ((Float)1.570796327));
HXDLIN( 337)		hx::MultEq(n1,((Float)0.3183098862));
HXDLIN( 337)		if ((n1 > (int)1)) {
HXLINE( 337)			Int _hx_tmp2 = ::Math_obj::ceil(n1);
HXDLIN( 337)			hx::SubEq(n1,((int)((int)_hx_tmp2 >> (int)(int)1) << (int)(int)1));
            		}
            		else {
HXLINE( 337)			if ((n1 < (int)-1)) {
HXLINE( 337)				Int _hx_tmp3 = ::Math_obj::ceil(-(n1));
HXDLIN( 337)				hx::AddEq(n1,((int)((int)_hx_tmp3 >> (int)(int)1) << (int)(int)1));
            			}
            		}
HXDLIN( 337)		HX_VAR( Float,cos);
HXDLIN( 337)		if ((n1 > (int)0)) {
HXLINE( 337)			cos = (n1 * (((Float)3.1) + (n1 * (((Float)0.5) + (n1 * (((Float)-7.2) + (n1 * ((Float)3.6))))))));
            		}
            		else {
HXLINE( 337)			cos = (n1 * (((Float)3.1) - (n1 * (((Float)0.5) + (n1 * (((Float)7.2) + (n1 * ((Float)3.6))))))));
            		}
HXLINE( 339)		HX_VARI( Float,dx) = (this->x - Pivot->x);
HXLINE( 340)		HX_VARI( Float,dy) = (this->y - Pivot->y);
HXLINE( 341)		Float _hx_tmp4 = (((cos * dx) - (sin * dy)) + Pivot->x);
HXDLIN( 341)		this->set_x(_hx_tmp4);
HXLINE( 342)		Float _hx_tmp5 = (((sin * dx) + (cos * dy)) + Pivot->y);
HXDLIN( 342)		this->set_y(_hx_tmp5);
HXLINE( 344)		Bool _hx_tmp6 = Pivot->_weak;
HXDLIN( 344)		if (_hx_tmp6) {
HXLINE( 344)			Pivot->put();
            		}
HXLINE( 345)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,rotate,return )

Float FlxPoint_obj::angleBetween( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.math.FlxPoint","angleBetween",0x3b318bb1,"flixel.math.FlxPoint.angleBetween","flixel/math/FlxPoint.hx",355,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 356)		HX_VARI( Float,x) = (point->x - this->x);
HXLINE( 357)		HX_VARI( Float,y) = (point->y - this->y);
HXLINE( 358)		HX_VARI( Float,angle) = (int)0;
HXLINE( 360)		Bool _hx_tmp;
HXDLIN( 360)		if ((x == (int)0)) {
HXLINE( 360)			_hx_tmp = (y != (int)0);
            		}
            		else {
HXLINE( 360)			_hx_tmp = true;
            		}
HXDLIN( 360)		if (_hx_tmp) {
HXLINE( 362)			HX_VARI( Float,c1) = (::Math_obj::PI * ((Float)0.25));
HXLINE( 363)			HX_VARI( Float,c2) = ((int)3 * c1);
HXLINE( 364)			HX_VAR( Float,ay);
HXDLIN( 364)			if ((y < (int)0)) {
HXLINE( 364)				ay = -(y);
            			}
            			else {
HXLINE( 364)				ay = y;
            			}
HXLINE( 366)			if ((x >= (int)0)) {
HXLINE( 368)				angle = (c1 - (c1 * ((Float)(x - ay) / (Float)(x + ay))));
            			}
            			else {
HXLINE( 372)				angle = (c2 - (c1 * ((Float)(x + ay) / (Float)(ay - x))));
            			}
HXLINE( 374)			Float _hx_tmp1;
HXDLIN( 374)			if ((y < (int)0)) {
HXLINE( 374)				_hx_tmp1 = -(angle);
            			}
            			else {
HXLINE( 374)				_hx_tmp1 = angle;
            			}
HXDLIN( 374)			angle = (_hx_tmp1 * ((Float)(int)180 / (Float)::Math_obj::PI));
HXLINE( 376)			Bool _hx_tmp2 = (angle > (int)90);
HXDLIN( 376)			if (_hx_tmp2) {
HXLINE( 378)				hx::SubEq(angle,(int)270);
            			}
            			else {
HXLINE( 382)				hx::AddEq(angle,(int)90);
            			}
            		}
HXLINE( 386)		Bool _hx_tmp3 = point->_weak;
HXDLIN( 386)		if (_hx_tmp3) {
HXLINE( 386)			point->put();
            		}
HXLINE( 387)		return angle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,angleBetween,return )

Bool FlxPoint_obj::equals( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.math.FlxPoint","equals",0x4cd20ebb,"flixel.math.FlxPoint.equals","flixel/math/FlxPoint.hx",397,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 398)		HX_VAR( Bool,result);
HXDLIN( 398)		Float aValueA = this->x;
HXDLIN( 398)		Float aValueB = point->x;
HXDLIN( 398)		Float _hx_tmp = ::Math_obj::abs((aValueA - aValueB));
HXDLIN( 398)		if ((_hx_tmp <= ((Float)0.0000001))) {
HXLINE( 398)			Float aValueA1 = this->y;
HXDLIN( 398)			Float aValueB1 = point->y;
HXDLIN( 398)			Float _hx_tmp1 = ::Math_obj::abs((aValueA1 - aValueB1));
HXDLIN( 398)			result = (_hx_tmp1 <= ((Float)0.0000001));
            		}
            		else {
HXLINE( 398)			result = false;
            		}
HXLINE( 399)		Bool _hx_tmp2 = point->_weak;
HXDLIN( 399)		if (_hx_tmp2) {
HXLINE( 399)			point->put();
            		}
HXLINE( 400)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,equals,return )

void FlxPoint_obj::destroy(){
            	HX_STACK_FRAME("flixel.math.FlxPoint","destroy",0xdae378fe,"flixel.math.FlxPoint.destroy","flixel/math/FlxPoint.hx",406,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,destroy,(void))

 ::flixel::math::FlxPoint FlxPoint_obj::transform( ::openfl::_legacy::geom::Matrix matrix){
            	HX_STACK_FRAME("flixel.math.FlxPoint","transform",0x46de8270,"flixel.math.FlxPoint.transform","flixel/math/FlxPoint.hx",414,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 415)		HX_VARI( Float,x1) = (((this->x * matrix->a) + (this->y * matrix->c)) + matrix->tx);
HXLINE( 416)		HX_VARI( Float,y1) = (((this->x * matrix->b) + (this->y * matrix->d)) + matrix->ty);
HXLINE( 418)		return this->set(x1,y1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,transform,return )

::String FlxPoint_obj::toString(){
            	HX_STACK_FRAME("flixel.math.FlxPoint","toString",0x13b40828,"flixel.math.FlxPoint.toString","flixel/math/FlxPoint.hx",426,0xb3e1cd2c)
            	HX_STACK_THIS(this)
HXLINE( 427)		 ::Dynamic value = this->x;
HXDLIN( 427)		HX_VARI(  ::flixel::util::LabelValuePair,_this) = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 427)		_this->label = HX_("x",78,00,00,00);
HXDLIN( 427)		_this->value = value;
HXLINE( 428)		 ::Dynamic value1 = this->y;
HXDLIN( 428)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this1,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 428)		_this1->label = HX_("y",79,00,00,00);
HXDLIN( 428)		_this1->value = value1;
HXLINE( 426)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_this)->init(1,_this1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,toString,return )

Float FlxPoint_obj::set_x(Float Value){
            	HX_STACK_FRAME("flixel.math.FlxPoint","set_x",0x1a631e5f,"flixel.math.FlxPoint.set_x","flixel/math/FlxPoint.hx",436,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 436)		return (this->x = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,set_x,return )

Float FlxPoint_obj::set_y(Float Value){
            	HX_STACK_FRAME("flixel.math.FlxPoint","set_y",0x1a631e60,"flixel.math.FlxPoint.set_y","flixel/math/FlxPoint.hx",444,0xb3e1cd2c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 444)		return (this->y = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPoint_obj,set_y,return )

 ::flixel::util::FlxPool_flixel_math_FlxPoint FlxPoint_obj::_pool;

 ::flixel::math::FlxPoint FlxPoint_obj::get(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.math.FlxPoint","get",0x598c7a9a,"flixel.math.FlxPoint.get","flixel/math/FlxPoint.hx",27,0xb3e1cd2c)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  28)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXLINE(  29)		point->_inPool = false;
HXLINE(  30)		return point;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,get,return )

 ::flixel::math::FlxPoint FlxPoint_obj::weak(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.math.FlxPoint","weak",0x0bf225f4,"flixel.math.FlxPoint.weak","flixel/math/FlxPoint.hx",42,0xb3e1cd2c)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  43)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(  43)		point->_inPool = false;
HXLINE(  44)		point->_weak = true;
HXLINE(  45)		return point;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPoint_obj,weak,return )

::Dynamic FlxPoint_obj::get_pool(){
            	HX_STACK_FRAME("flixel.math.FlxPoint","get_pool",0xa55c73e1,"flixel.math.FlxPoint.get_pool","flixel/math/FlxPoint.hx",449,0xb3e1cd2c)
HXLINE( 449)		return ::flixel::math::FlxPoint_obj::_pool;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxPoint_obj,get_pool,return )


FlxPoint_obj::FlxPoint_obj()
{
}

hx::Val FlxPoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"put") ) { return hx::Val( put_dyn()); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ceil") ) { return hx::Val( ceil_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_weak") ) { return hx::Val( _weak); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn()); }
		if (HX_FIELD_EQ(inName,"floor") ) { return hx::Val( floor_dyn()); }
		if (HX_FIELD_EQ(inName,"round") ) { return hx::Val( round_dyn()); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"copyTo") ) { return hx::Val( copyTo_dyn()); }
		if (HX_FIELD_EQ(inName,"inRect") ) { return hx::Val( inRect_dyn()); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn()); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_inPool") ) { return hx::Val( _inPool); }
		if (HX_FIELD_EQ(inName,"putWeak") ) { return hx::Val( putWeak_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addPoint") ) { return hx::Val( addPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn()); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"inCoords") ) { return hx::Val( inCoords_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addToFlash") ) { return hx::Val( addToFlash_dyn()); }
		if (HX_FIELD_EQ(inName,"distanceTo") ) { return hx::Val( distanceTo_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyToFlash") ) { return hx::Val( copyToFlash_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleBetween") ) { return hx::Val( angleBetween_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"subtractPoint") ) { return hx::Val( subtractPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"copyFromFlash") ) { return hx::Val( copyFromFlash_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"subtractFromFlash") ) { return hx::Val( subtractFromFlash_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxPoint_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pool") ) { if (inCallProp == hx::paccAlways) { outValue = get_pool(); return true; } }
		if (HX_FIELD_EQ(inName,"weak") ) { outValue = weak_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { outValue = _pool; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_pool") ) { outValue = get_pool_dyn(); return true; }
	}
	return false;
}

hx::Val FlxPoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_weak") ) { _weak=inValue.Cast< Bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_inPool") ) { _inPool=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxPoint_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { _pool=ioValue.Cast<  ::flixel::util::FlxPool_flixel_math_FlxPoint >(); return true; }
	}
	return false;
}

void FlxPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("_weak","\x57","\x78","\x06","\x02"));
	outFields->push(HX_HCSTRING("_inPool","\x00","\x71","\x39","\xf5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxPoint_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxPoint_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxPoint_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(FlxPoint_obj,_weak),HX_HCSTRING("_weak","\x57","\x78","\x06","\x02")},
	{hx::fsBool,(int)offsetof(FlxPoint_obj,_inPool),HX_HCSTRING("_inPool","\x00","\x71","\x39","\xf5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxPoint_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::flixel::util::FlxPool_flixel_math_FlxPoint*/ ,(void *) &FlxPoint_obj::_pool,HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxPoint_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("_weak","\x57","\x78","\x06","\x02"),
	HX_HCSTRING("_inPool","\x00","\x71","\x39","\xf5"),
	HX_HCSTRING("put","\xcf","\x62","\x55","\x00"),
	HX_HCSTRING("putWeak","\xe7","\xfe","\x6e","\xfd"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addPoint","\x6f","\xda","\xec","\x3f"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("subtractPoint","\x9c","\xc6","\x66","\x44"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyFromFlash","\x71","\xa5","\xda","\x18"),
	HX_HCSTRING("copyToFlash","\x00","\xff","\x24","\x25"),
	HX_HCSTRING("addToFlash","\x14","\xae","\x9a","\x36"),
	HX_HCSTRING("subtractFromFlash","\x32","\x48","\x51","\x65"),
	HX_HCSTRING("inCoords","\xe3","\xed","\x02","\x51"),
	HX_HCSTRING("inRect","\xa9","\x2b","\x0d","\x88"),
	HX_HCSTRING("distanceTo","\x10","\xd4","\xec","\x8b"),
	HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02"),
	HX_HCSTRING("ceil","\x05","\x1f","\xbd","\x41"),
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("angleBetween","\x35","\xe6","\xd4","\x69"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void FlxPoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxPoint_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxPoint_obj::_pool,"_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxPoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxPoint_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxPoint_obj::_pool,"_pool");
};

#endif

hx::Class FlxPoint_obj::__mClass;

static ::String FlxPoint_obj_sStaticFields[] = {
	HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("weak","\x78","\x5c","\xf5","\x4e"),
	HX_HCSTRING("get_pool","\x65","\x3c","\x17","\xca"),
	::String(null())
};

void FlxPoint_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.math.FlxPoint","\x72","\x08","\x84","\xd0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxPoint_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxPoint_obj::__SetStatic;
	__mClass->mMarkFunc = FlxPoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxPoint_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxPoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxPoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxPoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxPoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxPoint_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.math.FlxPoint","boot",0xfe184dae,"flixel.math.FlxPoint.boot","flixel/math/FlxPoint.hx",16,0xb3e1cd2c)
HXLINE(  16)		_pool =  ::flixel::util::FlxPool_flixel_math_FlxPoint_obj::__new(hx::ClassOf< ::flixel::math::FlxPoint >());
            	}
}

} // end namespace flixel
} // end namespace math
