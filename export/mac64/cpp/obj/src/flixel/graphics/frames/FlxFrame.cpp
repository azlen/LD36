// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

namespace flixel{
namespace graphics{
namespace frames{

void FlxFrame_obj::__construct( ::flixel::graphics::FlxGraphic parent,hx::Null< Int >  __o_angle,hx::Null< Bool >  __o_flipX,hx::Null< Bool >  __o_flipY){
Int angle = __o_angle.Default(0);
Bool flipX = __o_flipX.Default(false);
Bool flipY = __o_flipY.Default(false);
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","new",0x06ad24e4,"flixel.graphics.frames.FlxFrame.new","flixel/graphics/frames/FlxFrame.hx",18,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
            	HX_STACK_ARG(angle,"angle")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
HXLINE(  23)		this->matrix =  ::flixel::math::FlxMatrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE(  22)		this->rect =  ::openfl::_legacy::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE(  21)		this->point2 =  ::openfl::_legacy::geom::Point_obj::__new(null(),null());
HXLINE(  20)		this->point1 =  ::openfl::_legacy::geom::Point_obj::__new(null(),null());
HXLINE(  85)		this->parent = parent;
HXLINE(  86)		this->angle = angle;
HXLINE(  87)		this->flipX = flipX;
HXLINE(  88)		this->flipY = flipY;
HXLINE(  90)		this->type = (int)0;
HXLINE(  92)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  92)		point->_inPool = false;
HXDLIN(  92)		this->sourceSize = point;
HXLINE(  93)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  93)		point1->_inPool = false;
HXDLIN(  93)		this->offset = point1;
HXLINE(  95)		HX_VARI_NAME( ::Array< Float >,this1,"this") = ::Array_obj< Float >::__new();
HXDLIN(  95)		_hx_array_set_size_exact(this1,(int)6);
HXDLIN(  95)		this->blitMatrix = this1;
HXLINE(  96)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN(  96)		if (_hx_tmp) {
HXLINE(  98)			HX_VARI_NAME( ::Array< Float >,this2,"this") = ::Array_obj< Float >::__new();
HXDLIN(  98)			_hx_array_set_size_exact(this2,(int)6);
HXDLIN(  98)			this->tileMatrix = this2;
            		}
            	}

Dynamic FlxFrame_obj::__CreateEmpty() { return new FlxFrame_obj; }

hx::ObjectPtr< FlxFrame_obj > FlxFrame_obj::__new( ::flixel::graphics::FlxGraphic parent,hx::Null< Int >  __o_angle,hx::Null< Bool >  __o_flipX,hx::Null< Bool >  __o_flipY)
{
	hx::ObjectPtr< FlxFrame_obj > _hx_result = new FlxFrame_obj();
	_hx_result->__construct(parent,__o_angle,__o_flipX,__o_flipY);
	return _hx_result;
}

Dynamic FlxFrame_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxFrame_obj > _hx_result = new FlxFrame_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_graphics_frames_FlxFrame__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::graphics::frames::FlxFrame_obj::destroy,
};

void *FlxFrame_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_graphics_frames_FlxFrame__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxFrame_obj::cacheFrameMatrix(){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","cacheFrameMatrix",0xffbbac28,"flixel.graphics.frames.FlxFrame.cacheFrameMatrix","flixel/graphics/frames/FlxFrame.hx",105,0x6c7f608b)
            	HX_STACK_THIS(this)
HXLINE( 106)		{
HXLINE( 106)			HX_VARI(  ::flixel::math::FlxMatrix,mat) = this->matrix;
HXDLIN( 106)			mat->identity();
HXDLIN( 106)			mat->translate(-(this->frame->x),-(this->frame->y));
HXDLIN( 106)			Bool _hx_tmp = (this->angle == (int)90);
HXDLIN( 106)			if (_hx_tmp) {
HXLINE( 106)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXDLIN( 106)				mat->translate(this->frame->height,(int)0);
            			}
            			else {
HXLINE( 106)				Bool _hx_tmp1 = (this->angle == (int)-90);
HXDLIN( 106)				if (_hx_tmp1) {
HXLINE( 106)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXDLIN( 106)					mat->translate((int)0,this->frame->width);
            				}
            			}
HXDLIN( 106)			mat->translate(this->offset->x,this->offset->y);
            		}
HXLINE( 107)		{
HXLINE( 107)			Float val = this->matrix->a;
HXDLIN( 107)			this->blitMatrix->__unsafe_set((int)0,val);
            		}
HXLINE( 108)		{
HXLINE( 108)			Float val1 = this->matrix->b;
HXDLIN( 108)			this->blitMatrix->__unsafe_set((int)1,val1);
            		}
HXLINE( 109)		{
HXLINE( 109)			Float val2 = this->matrix->c;
HXDLIN( 109)			this->blitMatrix->__unsafe_set((int)2,val2);
            		}
HXLINE( 110)		{
HXLINE( 110)			Float val3 = this->matrix->d;
HXDLIN( 110)			this->blitMatrix->__unsafe_set((int)3,val3);
            		}
HXLINE( 111)		{
HXLINE( 111)			Float val4 = this->matrix->tx;
HXDLIN( 111)			this->blitMatrix->__unsafe_set((int)4,val4);
            		}
HXLINE( 112)		{
HXLINE( 112)			Float val5 = this->matrix->ty;
HXDLIN( 112)			this->blitMatrix->__unsafe_set((int)5,val5);
            		}
HXLINE( 114)		Bool _hx_tmp2 = ::flixel::FlxG_obj::renderTile;
HXDLIN( 114)		if (_hx_tmp2) {
HXLINE( 116)			{
HXLINE( 116)				HX_VARI_NAME(  ::flixel::math::FlxMatrix,mat1,"mat") = this->matrix;
HXDLIN( 116)				mat1->identity();
HXDLIN( 116)				Bool _hx_tmp3 = (this->angle == (int)90);
HXDLIN( 116)				if (_hx_tmp3) {
HXLINE( 116)					mat1->setTo(-(mat1->b),mat1->a,-(mat1->d),mat1->c,-(mat1->ty),mat1->tx);
HXDLIN( 116)					mat1->translate(this->frame->height,(int)0);
            				}
            				else {
HXLINE( 116)					Bool _hx_tmp4 = (this->angle == (int)-90);
HXDLIN( 116)					if (_hx_tmp4) {
HXLINE( 116)						mat1->setTo(mat1->b,-(mat1->a),mat1->d,-(mat1->c),mat1->ty,-(mat1->tx));
HXDLIN( 116)						mat1->translate((int)0,this->frame->width);
            					}
            				}
HXDLIN( 116)				mat1->translate(this->offset->x,this->offset->y);
            			}
HXLINE( 117)			{
HXLINE( 117)				Float val6 = this->matrix->a;
HXDLIN( 117)				this->tileMatrix->__unsafe_set((int)0,val6);
            			}
HXLINE( 118)			{
HXLINE( 118)				Float val7 = this->matrix->b;
HXDLIN( 118)				this->tileMatrix->__unsafe_set((int)1,val7);
            			}
HXLINE( 119)			{
HXLINE( 119)				Float val8 = this->matrix->c;
HXDLIN( 119)				this->tileMatrix->__unsafe_set((int)2,val8);
            			}
HXLINE( 120)			{
HXLINE( 120)				Float val9 = this->matrix->d;
HXDLIN( 120)				this->tileMatrix->__unsafe_set((int)3,val9);
            			}
HXLINE( 121)			{
HXLINE( 121)				Float val10 = this->matrix->tx;
HXDLIN( 121)				this->tileMatrix->__unsafe_set((int)4,val10);
            			}
HXLINE( 122)			{
HXLINE( 122)				Float val11 = this->matrix->ty;
HXDLIN( 122)				this->tileMatrix->__unsafe_set((int)5,val11);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFrame_obj,cacheFrameMatrix,(void))

 ::flixel::math::FlxMatrix FlxFrame_obj::prepareBlitMatrix( ::flixel::math::FlxMatrix mat,hx::Null< Bool >  __o_blit){
Bool blit = __o_blit.Default(true);
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","prepareBlitMatrix",0xbf3c9041,"flixel.graphics.frames.FlxFrame.prepareBlitMatrix","flixel/graphics/frames/FlxFrame.hx",135,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
            	HX_STACK_ARG(blit,"blit")
HXLINE( 136)		mat->identity();
HXLINE( 138)		if (blit) {
HXLINE( 139)			mat->translate(-(this->frame->x),-(this->frame->y));
            		}
HXLINE( 141)		Bool _hx_tmp = (this->angle == (int)90);
HXDLIN( 141)		if (_hx_tmp) {
HXLINE( 143)			mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXLINE( 144)			mat->translate(this->frame->height,(int)0);
            		}
            		else {
HXLINE( 146)			Bool _hx_tmp1 = (this->angle == (int)-90);
HXDLIN( 146)			if (_hx_tmp1) {
HXLINE( 148)				mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXLINE( 149)				mat->translate((int)0,this->frame->width);
            			}
            		}
HXLINE( 152)		mat->translate(this->offset->x,this->offset->y);
HXLINE( 153)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,prepareBlitMatrix,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::rotateAndFlip( ::flixel::math::FlxMatrix mat,hx::Null< Int >  __o_rotation,hx::Null< Bool >  __o_flipX,hx::Null< Bool >  __o_flipY){
Int rotation = __o_rotation.Default(0);
Bool flipX = __o_flipX.Default(false);
Bool flipY = __o_flipY.Default(false);
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","rotateAndFlip",0x835ac58d,"flixel.graphics.frames.FlxFrame.rotateAndFlip","flixel/graphics/frames/FlxFrame.hx",167,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
HXLINE( 168)		HX_VARI( Int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXLINE( 169)		HX_VARI( Int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXLINE( 172)		if ((rotation != (int)0)) {
HXLINE( 174)			HX_VARI( Int,t) = w;
HXLINE( 175)			w = h;
HXLINE( 176)			h = t;
HXLINE( 178)			if ((rotation == (int)90)) {
HXLINE( 180)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXLINE( 181)				mat->translate(this->sourceSize->y,(int)0);
            			}
            			else {
HXLINE( 183)				Bool _hx_tmp;
HXDLIN( 183)				if ((rotation != (int)-90)) {
HXLINE( 183)					_hx_tmp = (rotation == (int)-90);
            				}
            				else {
HXLINE( 183)					_hx_tmp = true;
            				}
HXDLIN( 183)				if (_hx_tmp) {
HXLINE( 185)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXLINE( 186)					mat->translate((int)0,this->sourceSize->x);
            				}
            			}
            		}
HXLINE( 191)		if (flipX) {
HXLINE( 193)			mat->scale((int)-1,(int)1);
HXLINE( 194)			mat->translate(w,(int)0);
            		}
HXLINE( 197)		if (flipY) {
HXLINE( 199)			mat->scale((int)1,(int)-1);
HXLINE( 200)			mat->translate((int)0,h);
            		}
HXLINE( 203)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,rotateAndFlip,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::prepareTransformedBlitMatrix( ::flixel::math::FlxMatrix mat,hx::Null< Int >  __o_rotation,hx::Null< Bool >  __o_flipX,hx::Null< Bool >  __o_flipY){
Int rotation = __o_rotation.Default(0);
Bool flipX = __o_flipX.Default(false);
Bool flipY = __o_flipY.Default(false);
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","prepareTransformedBlitMatrix",0xc5ea2af6,"flixel.graphics.frames.FlxFrame.prepareTransformedBlitMatrix","flixel/graphics/frames/FlxFrame.hx",216,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
HXLINE( 217)		mat->a = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)0)) );
HXDLIN( 217)		mat->b = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)1)) );
HXDLIN( 217)		mat->c = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)2)) );
HXDLIN( 217)		mat->d = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)3)) );
HXDLIN( 217)		mat->tx = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)4)) );
HXDLIN( 217)		mat->ty = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)5)) );
HXDLIN( 217)		mat = mat;
HXLINE( 218)		HX_VARI( Int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 218)		HX_VARI( Int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 218)		if ((rotation != (int)0)) {
HXLINE( 218)			HX_VARI( Int,t) = w;
HXDLIN( 218)			w = h;
HXDLIN( 218)			h = t;
HXDLIN( 218)			if ((rotation == (int)90)) {
HXLINE( 218)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXDLIN( 218)				mat->translate(this->sourceSize->y,(int)0);
            			}
            			else {
HXLINE( 218)				Bool _hx_tmp;
HXDLIN( 218)				if ((rotation != (int)-90)) {
HXLINE( 218)					_hx_tmp = (rotation == (int)-90);
            				}
            				else {
HXLINE( 218)					_hx_tmp = true;
            				}
HXDLIN( 218)				if (_hx_tmp) {
HXLINE( 218)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXDLIN( 218)					mat->translate((int)0,this->sourceSize->x);
            				}
            			}
            		}
HXDLIN( 218)		if (flipX) {
HXLINE( 218)			mat->scale((int)-1,(int)1);
HXDLIN( 218)			mat->translate(w,(int)0);
            		}
HXDLIN( 218)		if (flipY) {
HXLINE( 218)			mat->scale((int)1,(int)-1);
HXDLIN( 218)			mat->translate((int)0,h);
            		}
HXDLIN( 218)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,prepareTransformedBlitMatrix,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::prepareMatrix( ::flixel::math::FlxMatrix mat,hx::Null< Int >  __o_rotation,hx::Null< Bool >  __o_flipX,hx::Null< Bool >  __o_flipY){
Int rotation = __o_rotation.Default(0);
Bool flipX = __o_flipX.Default(false);
Bool flipY = __o_flipY.Default(false);
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","prepareMatrix",0xbf883cac,"flixel.graphics.frames.FlxFrame.prepareMatrix","flixel/graphics/frames/FlxFrame.hx",231,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
HXLINE( 232)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 232)		if (_hx_tmp) {
HXLINE( 234)			mat->identity();
HXLINE( 235)			return mat;
            		}
HXLINE( 238)		mat->a = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)0)) );
HXLINE( 239)		mat->b = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)1)) );
HXLINE( 240)		mat->c = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)2)) );
HXLINE( 241)		mat->d = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)3)) );
HXLINE( 242)		mat->tx = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)4)) );
HXLINE( 243)		mat->ty = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)5)) );
HXLINE( 245)		HX_VARI( Bool,doFlipX) = (flipX != this->flipX);
HXLINE( 246)		HX_VARI( Bool,doFlipY) = (flipY != this->flipY);
HXLINE( 248)		Bool _hx_tmp1;
HXDLIN( 248)		Bool _hx_tmp2;
HXDLIN( 248)		if ((rotation == (int)0)) {
HXLINE( 248)			_hx_tmp2 = !(doFlipX);
            		}
            		else {
HXLINE( 248)			_hx_tmp2 = false;
            		}
HXDLIN( 248)		if (_hx_tmp2) {
HXLINE( 248)			_hx_tmp1 = !(doFlipY);
            		}
            		else {
HXLINE( 248)			_hx_tmp1 = false;
            		}
HXDLIN( 248)		if (_hx_tmp1) {
HXLINE( 250)			return mat;
            		}
HXLINE( 253)		HX_VARI( Int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 253)		HX_VARI( Int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 253)		if ((rotation != (int)0)) {
HXLINE( 253)			HX_VARI( Int,t) = w;
HXDLIN( 253)			w = h;
HXDLIN( 253)			h = t;
HXDLIN( 253)			if ((rotation == (int)90)) {
HXLINE( 253)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXDLIN( 253)				mat->translate(this->sourceSize->y,(int)0);
            			}
            			else {
HXLINE( 253)				Bool _hx_tmp3;
HXDLIN( 253)				if ((rotation != (int)-90)) {
HXLINE( 253)					_hx_tmp3 = (rotation == (int)-90);
            				}
            				else {
HXLINE( 253)					_hx_tmp3 = true;
            				}
HXDLIN( 253)				if (_hx_tmp3) {
HXLINE( 253)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXDLIN( 253)					mat->translate((int)0,this->sourceSize->x);
            				}
            			}
            		}
HXDLIN( 253)		if (doFlipX) {
HXLINE( 253)			mat->scale((int)-1,(int)1);
HXDLIN( 253)			mat->translate(w,(int)0);
            		}
HXDLIN( 253)		if (doFlipY) {
HXLINE( 253)			mat->scale((int)1,(int)-1);
HXDLIN( 253)			mat->translate((int)0,h);
            		}
HXDLIN( 253)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,prepareMatrix,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::fillBlitMatrix( ::flixel::math::FlxMatrix mat){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","fillBlitMatrix",0xa3605eb5,"flixel.graphics.frames.FlxFrame.fillBlitMatrix","flixel/graphics/frames/FlxFrame.hx",257,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
HXLINE( 258)		mat->a = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)0)) );
HXLINE( 259)		mat->b = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)1)) );
HXLINE( 260)		mat->c = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)2)) );
HXLINE( 261)		mat->d = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)3)) );
HXLINE( 262)		mat->tx = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)4)) );
HXLINE( 263)		mat->ty = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)5)) );
HXLINE( 264)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,fillBlitMatrix,return )

 ::openfl::_legacy::display::BitmapData FlxFrame_obj::paint( ::openfl::_legacy::display::BitmapData bmd, ::openfl::_legacy::geom::Point point,hx::Null< Bool >  __o_mergeAlpha,hx::Null< Bool >  __o_disposeIfNotEqual){
Bool mergeAlpha = __o_mergeAlpha.Default(false);
Bool disposeIfNotEqual = __o_disposeIfNotEqual.Default(false);
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","paint",0x0c093522,"flixel.graphics.frames.FlxFrame.paint","flixel/graphics/frames/FlxFrame.hx",277,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bmd,"bmd")
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
            	HX_STACK_ARG(disposeIfNotEqual,"disposeIfNotEqual")
HXLINE( 278)		Bool _hx_tmp = hx::IsNull( point );
HXDLIN( 278)		if (_hx_tmp) {
HXLINE( 280)			point = this->point1;
HXLINE( 281)			point->setTo((int)0,(int)0);
            		}
HXLINE( 284)		HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,bmd1,"bmd") = bmd;
HXDLIN( 284)		HX_VARI( Int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 284)		HX_VARI( Int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 284)		Bool _hx_tmp1;
HXDLIN( 284)		Bool _hx_tmp2 = hx::IsNotNull( bmd1 );
HXDLIN( 284)		if (_hx_tmp2) {
HXLINE( 284)			_hx_tmp1 = disposeIfNotEqual;
            		}
            		else {
HXLINE( 284)			_hx_tmp1 = false;
            		}
HXDLIN( 284)		if (_hx_tmp1) {
HXLINE( 284)			bmd1 = ::flixel::util::FlxDestroyUtil_obj::disposeIfNotEqual(bmd1,w,h);
            		}
HXDLIN( 284)		Bool _hx_tmp3;
HXDLIN( 284)		Bool _hx_tmp4 = hx::IsNotNull( bmd1 );
HXDLIN( 284)		if (_hx_tmp4) {
HXLINE( 284)			_hx_tmp3 = !(mergeAlpha);
            		}
            		else {
HXLINE( 284)			_hx_tmp3 = false;
            		}
HXDLIN( 284)		if (_hx_tmp3) {
HXLINE( 284)			this->rect->setTo(point->x,point->y,w,h);
HXDLIN( 284)			bmd1->fillRect(this->rect,(int)0);
            		}
            		else {
HXLINE( 284)			Bool _hx_tmp5 = hx::IsNull( bmd1 );
HXDLIN( 284)			if (_hx_tmp5) {
HXLINE( 284)				bmd1 =  ::openfl::_legacy::display::BitmapData_obj::__new(w,h,true,(int)0,null());
            			}
            		}
HXDLIN( 284)		bmd = bmd1;
HXLINE( 286)		if ((this->type == (int)2)) {
HXLINE( 288)			return bmd;
            		}
HXLINE( 291)		Bool _hx_tmp6 = (this->angle == (int)0);
HXDLIN( 291)		if (_hx_tmp6) {
HXLINE( 293)			{
HXLINE( 293)				HX_VARI(  ::flixel::math::FlxPoint,_this) = this->offset;
HXDLIN( 293)				HX_VARI(  ::openfl::_legacy::geom::Point,FlashPoint) = this->point2;
HXDLIN( 293)				Bool _hx_tmp7 = hx::IsNull( FlashPoint );
HXDLIN( 293)				if (_hx_tmp7) {
HXLINE( 293)					FlashPoint =  ::openfl::_legacy::geom::Point_obj::__new(null(),null());
            				}
HXDLIN( 293)				FlashPoint->x = _this->x;
HXDLIN( 293)				FlashPoint->y = _this->y;
            			}
HXLINE( 294)			hx::AddEq(this->point2->x,point->x);
HXLINE( 295)			hx::AddEq(this->point2->y,point->y);
HXLINE( 296)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->frame;
HXDLIN( 296)			HX_VARI(  ::openfl::_legacy::geom::Rectangle,FlashRect) = this->rect;
HXDLIN( 296)			Bool _hx_tmp8 = hx::IsNull( FlashRect );
HXDLIN( 296)			if (_hx_tmp8) {
HXLINE( 296)				FlashRect =  ::openfl::_legacy::geom::Rectangle_obj::__new(null(),null(),null(),null());
            			}
HXDLIN( 296)			FlashRect->x = _this1->x;
HXDLIN( 296)			FlashRect->y = _this1->y;
HXDLIN( 296)			FlashRect->width = _this1->width;
HXDLIN( 296)			FlashRect->height = _this1->height;
HXDLIN( 296)			bmd->copyPixels(this->parent->bitmap,FlashRect,this->point2,null(),null(),mergeAlpha);
            		}
            		else {
HXLINE( 300)			{
HXLINE( 300)				HX_VARI(  ::flixel::math::FlxMatrix,mat) = this->matrix;
HXDLIN( 300)				mat->a = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)0)) );
HXDLIN( 300)				mat->b = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)1)) );
HXDLIN( 300)				mat->c = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)2)) );
HXDLIN( 300)				mat->d = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)3)) );
HXDLIN( 300)				mat->tx = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)4)) );
HXDLIN( 300)				mat->ty = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)5)) );
            			}
HXLINE( 301)			this->matrix->translate(point->x,point->y);
HXLINE( 302)			HX_VARI_NAME(  ::flixel::math::FlxMatrix,mat1,"mat") = this->matrix;
HXDLIN( 302)			Float X = this->frame->x;
HXDLIN( 302)			Float Y = this->frame->y;
HXDLIN( 302)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 302)			point1->_inPool = false;
HXDLIN( 302)			point1->_weak = true;
HXDLIN( 302)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = this->frame;
HXDLIN( 302)			Float X1 = (_this2->x + _this2->width);
HXDLIN( 302)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this3,"_this") = this->frame;
HXDLIN( 302)			Float Y1 = (_this3->y + _this3->height);
HXDLIN( 302)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 302)			point2->_inPool = false;
HXDLIN( 302)			point2->_weak = true;
HXDLIN( 302)			{
HXLINE( 302)				HX_VARI( Float,x1) = (((point1->x * mat1->a) + (point1->y * mat1->c)) + mat1->tx);
HXDLIN( 302)				HX_VARI( Float,y1) = (((point1->x * mat1->b) + (point1->y * mat1->d)) + mat1->ty);
HXDLIN( 302)				point1->set(x1,y1);
            			}
HXDLIN( 302)			{
HXLINE( 302)				HX_VARI_NAME( Float,x11,"x1") = (((point2->x * mat1->a) + (point2->y * mat1->c)) + mat1->tx);
HXDLIN( 302)				HX_VARI_NAME( Float,y11,"y1") = (((point2->x * mat1->b) + (point2->y * mat1->d)) + mat1->ty);
HXDLIN( 302)				point2->set(x11,y11);
            			}
HXDLIN( 302)			Float X2 = (int)0;
HXDLIN( 302)			Float Y2 = (int)0;
HXDLIN( 302)			Float Width = (int)0;
HXDLIN( 302)			Float Height = (int)0;
HXDLIN( 302)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this4,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 302)			_this4->x = X2;
HXDLIN( 302)			_this4->y = Y2;
HXDLIN( 302)			_this4->width = Width;
HXDLIN( 302)			_this4->height = Height;
HXDLIN( 302)			_this4->_inPool = false;
HXDLIN( 302)			HX_VARI( Float,minX) = ::Math_obj::min(point1->x,point2->x);
HXDLIN( 302)			HX_VARI( Float,minY) = ::Math_obj::min(point1->y,point2->y);
HXDLIN( 302)			HX_VARI( Float,maxX) = ::Math_obj::max(point1->x,point2->x);
HXDLIN( 302)			HX_VARI( Float,maxY) = ::Math_obj::max(point1->y,point2->y);
HXDLIN( 302)			Bool _hx_tmp9 = point1->_weak;
HXDLIN( 302)			if (_hx_tmp9) {
HXLINE( 302)				point1->put();
            			}
HXDLIN( 302)			Bool _hx_tmp10 = point2->_weak;
HXDLIN( 302)			if (_hx_tmp10) {
HXLINE( 302)				point2->put();
            			}
HXDLIN( 302)			_this4->x = minX;
HXDLIN( 302)			_this4->y = minY;
HXDLIN( 302)			_this4->width = (maxX - minX);
HXDLIN( 302)			_this4->height = (maxY - minY);
HXDLIN( 302)			{
HXLINE( 302)				HX_VARI_NAME(  ::openfl::_legacy::geom::Rectangle,FlashRect1,"FlashRect") = this->rect;
HXDLIN( 302)				Bool _hx_tmp11 = hx::IsNull( FlashRect1 );
HXDLIN( 302)				if (_hx_tmp11) {
HXLINE( 302)					FlashRect1 =  ::openfl::_legacy::geom::Rectangle_obj::__new(null(),null(),null(),null());
            				}
HXDLIN( 302)				FlashRect1->x = _this4->x;
HXDLIN( 302)				FlashRect1->y = _this4->y;
HXDLIN( 302)				FlashRect1->width = _this4->width;
HXDLIN( 302)				FlashRect1->height = _this4->height;
            			}
HXDLIN( 302)			Bool _hx_tmp12 = !(_this4->_inPool);
HXDLIN( 302)			if (_hx_tmp12) {
HXLINE( 302)				_this4->_inPool = true;
HXDLIN( 302)				_this4->_weak = false;
HXDLIN( 302)				::flixel::math::FlxRect_obj::_pool->putUnsafe(_this4);
            			}
HXLINE( 303)			bmd->draw(this->parent->bitmap,this->matrix,null(),null(),this->rect,null());
            		}
HXLINE( 306)		return bmd;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,paint,return )

 ::openfl::_legacy::display::BitmapData FlxFrame_obj::paintRotatedAndFlipped( ::openfl::_legacy::display::BitmapData bmd, ::openfl::_legacy::geom::Point point,hx::Null< Int >  __o_rotation,hx::Null< Bool >  __o_flipX,hx::Null< Bool >  __o_flipY,hx::Null< Bool >  __o_mergeAlpha,hx::Null< Bool >  __o_disposeIfNotEqual){
Int rotation = __o_rotation.Default(0);
Bool flipX = __o_flipX.Default(false);
Bool flipY = __o_flipY.Default(false);
Bool mergeAlpha = __o_mergeAlpha.Default(false);
Bool disposeIfNotEqual = __o_disposeIfNotEqual.Default(false);
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","paintRotatedAndFlipped",0x8f0fb1b2,"flixel.graphics.frames.FlxFrame.paintRotatedAndFlipped","flixel/graphics/frames/FlxFrame.hx",322,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bmd,"bmd")
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
            	HX_STACK_ARG(disposeIfNotEqual,"disposeIfNotEqual")
HXLINE( 323)		Bool _hx_tmp;
HXDLIN( 323)		if ((this->type == (int)2)) {
HXLINE( 323)			_hx_tmp = (rotation == (int)0);
            		}
            		else {
HXLINE( 323)			_hx_tmp = false;
            		}
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 325)			return this->paint(bmd,point,mergeAlpha,disposeIfNotEqual);
            		}
HXLINE( 328)		Bool _hx_tmp1 = hx::IsNull( point );
HXDLIN( 328)		if (_hx_tmp1) {
HXLINE( 330)			point = this->point2;
HXLINE( 331)			point->setTo((int)0,(int)0);
            		}
HXLINE( 334)		HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,bmd1,"bmd") = bmd;
HXDLIN( 334)		HX_VARI( Int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 334)		HX_VARI( Int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 334)		if ((rotation != (int)0)) {
HXLINE( 334)			HX_VARI( Int,t) = w;
HXDLIN( 334)			w = h;
HXDLIN( 334)			h = t;
            		}
HXDLIN( 334)		Bool _hx_tmp2;
HXDLIN( 334)		Bool _hx_tmp3 = hx::IsNotNull( bmd1 );
HXDLIN( 334)		if (_hx_tmp3) {
HXLINE( 334)			_hx_tmp2 = disposeIfNotEqual;
            		}
            		else {
HXLINE( 334)			_hx_tmp2 = false;
            		}
HXDLIN( 334)		if (_hx_tmp2) {
HXLINE( 334)			bmd1 = ::flixel::util::FlxDestroyUtil_obj::disposeIfNotEqual(bmd1,w,h);
            		}
HXDLIN( 334)		Bool _hx_tmp4;
HXDLIN( 334)		Bool _hx_tmp5 = hx::IsNotNull( bmd1 );
HXDLIN( 334)		if (_hx_tmp5) {
HXLINE( 334)			_hx_tmp4 = !(mergeAlpha);
            		}
            		else {
HXLINE( 334)			_hx_tmp4 = false;
            		}
HXDLIN( 334)		if (_hx_tmp4) {
HXLINE( 334)			this->rect->setTo(point->x,point->y,w,h);
HXDLIN( 334)			bmd1->fillRect(this->rect,(int)0);
            		}
            		else {
HXLINE( 334)			Bool _hx_tmp6 = hx::IsNull( bmd1 );
HXDLIN( 334)			if (_hx_tmp6) {
HXLINE( 334)				bmd1 =  ::openfl::_legacy::display::BitmapData_obj::__new(w,h,true,(int)0,null());
            			}
            		}
HXDLIN( 334)		bmd = bmd1;
HXLINE( 336)		if ((this->type == (int)2)) {
HXLINE( 338)			return bmd;
            		}
HXLINE( 341)		HX_VARI( Bool,doFlipX) = (flipX != this->flipX);
HXLINE( 342)		HX_VARI( Bool,doFlipY) = (flipY != this->flipY);
HXLINE( 344)		this->prepareTransformedBlitMatrix(this->matrix,rotation,doFlipX,doFlipY);
HXLINE( 345)		this->matrix->translate(point->x,point->y);
HXLINE( 346)		HX_VARI(  ::flixel::math::FlxMatrix,mat) = this->matrix;
HXDLIN( 346)		Float X = this->frame->x;
HXDLIN( 346)		Float Y = this->frame->y;
HXDLIN( 346)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 346)		point1->_inPool = false;
HXDLIN( 346)		point1->_weak = true;
HXDLIN( 346)		HX_VARI(  ::flixel::math::FlxRect,_this) = this->frame;
HXDLIN( 346)		Float X1 = (_this->x + _this->width);
HXDLIN( 346)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->frame;
HXDLIN( 346)		Float Y1 = (_this1->y + _this1->height);
HXDLIN( 346)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 346)		point2->_inPool = false;
HXDLIN( 346)		point2->_weak = true;
HXDLIN( 346)		{
HXLINE( 346)			HX_VARI( Float,x1) = (((point1->x * mat->a) + (point1->y * mat->c)) + mat->tx);
HXDLIN( 346)			HX_VARI( Float,y1) = (((point1->x * mat->b) + (point1->y * mat->d)) + mat->ty);
HXDLIN( 346)			point1->set(x1,y1);
            		}
HXDLIN( 346)		{
HXLINE( 346)			HX_VARI_NAME( Float,x11,"x1") = (((point2->x * mat->a) + (point2->y * mat->c)) + mat->tx);
HXDLIN( 346)			HX_VARI_NAME( Float,y11,"y1") = (((point2->x * mat->b) + (point2->y * mat->d)) + mat->ty);
HXDLIN( 346)			point2->set(x11,y11);
            		}
HXDLIN( 346)		Float X2 = (int)0;
HXDLIN( 346)		Float Y2 = (int)0;
HXDLIN( 346)		Float Width = (int)0;
HXDLIN( 346)		Float Height = (int)0;
HXDLIN( 346)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 346)		_this2->x = X2;
HXDLIN( 346)		_this2->y = Y2;
HXDLIN( 346)		_this2->width = Width;
HXDLIN( 346)		_this2->height = Height;
HXDLIN( 346)		_this2->_inPool = false;
HXDLIN( 346)		HX_VARI( Float,minX) = ::Math_obj::min(point1->x,point2->x);
HXDLIN( 346)		HX_VARI( Float,minY) = ::Math_obj::min(point1->y,point2->y);
HXDLIN( 346)		HX_VARI( Float,maxX) = ::Math_obj::max(point1->x,point2->x);
HXDLIN( 346)		HX_VARI( Float,maxY) = ::Math_obj::max(point1->y,point2->y);
HXDLIN( 346)		Bool _hx_tmp7 = point1->_weak;
HXDLIN( 346)		if (_hx_tmp7) {
HXLINE( 346)			point1->put();
            		}
HXDLIN( 346)		Bool _hx_tmp8 = point2->_weak;
HXDLIN( 346)		if (_hx_tmp8) {
HXLINE( 346)			point2->put();
            		}
HXDLIN( 346)		_this2->x = minX;
HXDLIN( 346)		_this2->y = minY;
HXDLIN( 346)		_this2->width = (maxX - minX);
HXDLIN( 346)		_this2->height = (maxY - minY);
HXDLIN( 346)		{
HXLINE( 346)			HX_VARI(  ::openfl::_legacy::geom::Rectangle,FlashRect) = this->rect;
HXDLIN( 346)			Bool _hx_tmp9 = hx::IsNull( FlashRect );
HXDLIN( 346)			if (_hx_tmp9) {
HXLINE( 346)				FlashRect =  ::openfl::_legacy::geom::Rectangle_obj::__new(null(),null(),null(),null());
            			}
HXDLIN( 346)			FlashRect->x = _this2->x;
HXDLIN( 346)			FlashRect->y = _this2->y;
HXDLIN( 346)			FlashRect->width = _this2->width;
HXDLIN( 346)			FlashRect->height = _this2->height;
            		}
HXDLIN( 346)		Bool _hx_tmp10 = !(_this2->_inPool);
HXDLIN( 346)		if (_hx_tmp10) {
HXLINE( 346)			_this2->_inPool = true;
HXDLIN( 346)			_this2->_weak = false;
HXDLIN( 346)			::flixel::math::FlxRect_obj::_pool->putUnsafe(_this2);
            		}
HXLINE( 347)		bmd->draw(this->parent->bitmap,this->matrix,null(),null(),this->rect,null());
HXLINE( 348)		return bmd;
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxFrame_obj,paintRotatedAndFlipped,return )

 ::openfl::_legacy::display::BitmapData FlxFrame_obj::checkInputBitmap( ::openfl::_legacy::display::BitmapData bmd, ::openfl::_legacy::geom::Point point,hx::Null< Int >  __o_rotation,hx::Null< Bool >  __o_mergeAlpha,hx::Null< Bool >  __o_disposeIfNotEqual){
Int rotation = __o_rotation.Default(0);
Bool mergeAlpha = __o_mergeAlpha.Default(false);
Bool disposeIfNotEqual = __o_disposeIfNotEqual.Default(false);
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","checkInputBitmap",0x11e1b8ad,"flixel.graphics.frames.FlxFrame.checkInputBitmap","flixel/graphics/frames/FlxFrame.hx",362,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bmd,"bmd")
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
            	HX_STACK_ARG(disposeIfNotEqual,"disposeIfNotEqual")
HXLINE( 363)		HX_VARI( Int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXLINE( 364)		HX_VARI( Int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXLINE( 366)		if ((rotation != (int)0)) {
HXLINE( 368)			HX_VARI( Int,t) = w;
HXLINE( 369)			w = h;
HXLINE( 370)			h = t;
            		}
HXLINE( 373)		Bool _hx_tmp;
HXDLIN( 373)		Bool _hx_tmp1 = hx::IsNotNull( bmd );
HXDLIN( 373)		if (_hx_tmp1) {
HXLINE( 373)			_hx_tmp = disposeIfNotEqual;
            		}
            		else {
HXLINE( 373)			_hx_tmp = false;
            		}
HXDLIN( 373)		if (_hx_tmp) {
HXLINE( 375)			bmd = ::flixel::util::FlxDestroyUtil_obj::disposeIfNotEqual(bmd,w,h);
            		}
HXLINE( 378)		Bool _hx_tmp2;
HXDLIN( 378)		Bool _hx_tmp3 = hx::IsNotNull( bmd );
HXDLIN( 378)		if (_hx_tmp3) {
HXLINE( 378)			_hx_tmp2 = !(mergeAlpha);
            		}
            		else {
HXLINE( 378)			_hx_tmp2 = false;
            		}
HXDLIN( 378)		if (_hx_tmp2) {
HXLINE( 380)			this->rect->setTo(point->x,point->y,w,h);
HXLINE( 381)			bmd->fillRect(this->rect,(int)0);
            		}
            		else {
HXLINE( 383)			Bool _hx_tmp4 = hx::IsNull( bmd );
HXDLIN( 383)			if (_hx_tmp4) {
HXLINE( 385)				bmd =  ::openfl::_legacy::display::BitmapData_obj::__new(w,h,true,(int)0,null());
            			}
            		}
HXLINE( 388)		return bmd;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxFrame_obj,checkInputBitmap,return )

 ::openfl::_legacy::geom::Rectangle FlxFrame_obj::getDrawFrameRect( ::flixel::math::FlxMatrix mat){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","getDrawFrameRect",0x7930f1d3,"flixel.graphics.frames.FlxFrame.getDrawFrameRect","flixel/graphics/frames/FlxFrame.hx",399,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
HXLINE( 400)		Float X = this->frame->x;
HXDLIN( 400)		Float Y = this->frame->y;
HXDLIN( 400)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 400)		point->_inPool = false;
HXDLIN( 400)		point->_weak = true;
HXLINE( 401)		HX_VARI(  ::flixel::math::FlxRect,_this) = this->frame;
HXDLIN( 401)		Float X1 = (_this->x + _this->width);
HXDLIN( 401)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->frame;
HXDLIN( 401)		Float Y1 = (_this1->y + _this1->height);
HXDLIN( 401)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 401)		point1->_inPool = false;
HXDLIN( 401)		point1->_weak = true;
HXLINE( 403)		{
HXLINE( 403)			HX_VARI( Float,x1) = (((point->x * mat->a) + (point->y * mat->c)) + mat->tx);
HXDLIN( 403)			HX_VARI( Float,y1) = (((point->x * mat->b) + (point->y * mat->d)) + mat->ty);
HXDLIN( 403)			point->set(x1,y1);
            		}
HXLINE( 404)		{
HXLINE( 404)			HX_VARI_NAME( Float,x11,"x1") = (((point1->x * mat->a) + (point1->y * mat->c)) + mat->tx);
HXDLIN( 404)			HX_VARI_NAME( Float,y11,"y1") = (((point1->x * mat->b) + (point1->y * mat->d)) + mat->ty);
HXDLIN( 404)			point1->set(x11,y11);
            		}
HXLINE( 406)		Float X2 = (int)0;
HXDLIN( 406)		Float Y2 = (int)0;
HXDLIN( 406)		Float Width = (int)0;
HXDLIN( 406)		Float Height = (int)0;
HXDLIN( 406)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 406)		_this2->x = X2;
HXDLIN( 406)		_this2->y = Y2;
HXDLIN( 406)		_this2->width = Width;
HXDLIN( 406)		_this2->height = Height;
HXDLIN( 406)		_this2->_inPool = false;
HXDLIN( 406)		HX_VARI( Float,minX) = ::Math_obj::min(point->x,point1->x);
HXDLIN( 406)		HX_VARI( Float,minY) = ::Math_obj::min(point->y,point1->y);
HXDLIN( 406)		HX_VARI( Float,maxX) = ::Math_obj::max(point->x,point1->x);
HXDLIN( 406)		HX_VARI( Float,maxY) = ::Math_obj::max(point->y,point1->y);
HXDLIN( 406)		Bool _hx_tmp = point->_weak;
HXDLIN( 406)		if (_hx_tmp) {
HXLINE( 406)			point->put();
            		}
HXDLIN( 406)		Bool _hx_tmp1 = point1->_weak;
HXDLIN( 406)		if (_hx_tmp1) {
HXLINE( 406)			point1->put();
            		}
HXDLIN( 406)		_this2->x = minX;
HXDLIN( 406)		_this2->y = minY;
HXDLIN( 406)		_this2->width = (maxX - minX);
HXDLIN( 406)		_this2->height = (maxY - minY);
HXLINE( 407)		{
HXLINE( 407)			HX_VARI(  ::openfl::_legacy::geom::Rectangle,FlashRect) = this->rect;
HXDLIN( 407)			Bool _hx_tmp2 = hx::IsNull( FlashRect );
HXDLIN( 407)			if (_hx_tmp2) {
HXLINE( 407)				FlashRect =  ::openfl::_legacy::geom::Rectangle_obj::__new(null(),null(),null(),null());
            			}
HXDLIN( 407)			FlashRect->x = _this2->x;
HXDLIN( 407)			FlashRect->y = _this2->y;
HXDLIN( 407)			FlashRect->width = _this2->width;
HXDLIN( 407)			FlashRect->height = _this2->height;
            		}
HXLINE( 408)		Bool _hx_tmp3 = !(_this2->_inPool);
HXDLIN( 408)		if (_hx_tmp3) {
HXLINE( 408)			_this2->_inPool = true;
HXDLIN( 408)			_this2->_weak = false;
HXDLIN( 408)			::flixel::math::FlxRect_obj::_pool->putUnsafe(_this2);
            		}
HXLINE( 409)		return this->rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,getDrawFrameRect,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::subFrameTo( ::flixel::math::FlxRect rect, ::flixel::graphics::frames::FlxFrame frameToFill){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","subFrameTo",0x37199964,"flixel.graphics.frames.FlxFrame.subFrameTo","flixel/graphics/frames/FlxFrame.hx",420,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(frameToFill,"frameToFill")
HXLINE( 421)		Bool _hx_tmp = hx::IsNull( frameToFill );
HXDLIN( 421)		if (_hx_tmp) {
HXLINE( 423)			frameToFill =  ::flixel::graphics::frames::FlxFrame_obj::__new(this->parent,this->angle,null(),null());
            		}
            		else {
HXLINE( 427)			frameToFill->parent = this->parent;
HXLINE( 428)			frameToFill->angle = this->angle;
HXLINE( 429)			 ::flixel::math::FlxRect _hx_tmp1 = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(frameToFill->frame)) );
HXDLIN( 429)			frameToFill->set_frame(_hx_tmp1);
            		}
HXLINE( 432)		frameToFill->sourceSize->set(rect->width,rect->height);
HXLINE( 435)		Bool _hx_tmp2 = (this->type == (int)2);
HXDLIN( 435)		if (_hx_tmp2) {
HXLINE( 437)			frameToFill->type = (int)2;
HXLINE( 438)			frameToFill->offset->set((int)0,(int)0);
HXLINE( 439)			return frameToFill;
            		}
HXLINE( 442)		Float X = (int)0;
HXDLIN( 442)		Float Y = (int)0;
HXDLIN( 442)		Float Width = (int)0;
HXDLIN( 442)		Float Height = (int)0;
HXDLIN( 442)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 442)		_this->x = X;
HXDLIN( 442)		_this->y = Y;
HXDLIN( 442)		_this->width = Width;
HXDLIN( 442)		_this->height = Height;
HXDLIN( 442)		_this->_inPool = false;
HXDLIN( 442)		Float Width1 = this->frame->width;
HXDLIN( 442)		Float Height1 = this->frame->height;
HXDLIN( 442)		_this->width = Width1;
HXDLIN( 442)		_this->height = Height1;
HXLINE( 443)		Bool _hx_tmp3 = (this->angle != (int)0);
HXDLIN( 443)		if (_hx_tmp3) {
HXLINE( 445)			_this->width = this->frame->height;
HXLINE( 446)			_this->height = this->frame->width;
            		}
HXLINE( 449)		HX_VARI( Float,ox) = ::Math_obj::max(this->offset->x,(int)0);
HXLINE( 450)		HX_VARI( Float,oy) = ::Math_obj::max(this->offset->y,(int)0);
HXLINE( 452)		{
HXLINE( 452)			hx::AddEq(rect->x,-(ox));
HXDLIN( 452)			hx::AddEq(rect->y,-(oy));
            		}
HXLINE( 453)		HX_VARI(  ::flixel::math::FlxRect,frameRect) = _this->intersection(rect);
HXLINE( 454)		::flixel::util::FlxDestroyUtil_obj::put(_this);
HXLINE( 455)		{
HXLINE( 455)			hx::AddEq(rect->x,ox);
HXDLIN( 455)			hx::AddEq(rect->y,oy);
            		}
HXLINE( 457)		Bool _hx_tmp4;
HXDLIN( 457)		if ((frameRect->width != (int)0)) {
HXLINE( 457)			_hx_tmp4 = (frameRect->height == (int)0);
            		}
            		else {
HXLINE( 457)			_hx_tmp4 = true;
            		}
HXDLIN( 457)		if (_hx_tmp4) {
HXLINE( 459)			frameToFill->type = (int)2;
HXLINE( 460)			{
HXLINE( 460)				frameRect->x = (int)0;
HXDLIN( 460)				frameRect->y = (int)0;
HXDLIN( 460)				frameRect->width = (int)0;
HXDLIN( 460)				frameRect->height = (int)0;
            			}
HXLINE( 461)			frameToFill->set_frame(frameRect);
HXLINE( 462)			frameToFill->offset->set((int)0,(int)0);
            		}
            		else {
HXLINE( 466)			frameToFill->type = (int)0;
HXLINE( 467)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = frameToFill->offset->set(frameRect->x,frameRect->y);
HXDLIN( 467)			Float X1 = rect->x;
HXDLIN( 467)			Float Y1 = rect->y;
HXDLIN( 467)			{
HXLINE( 467)				Float _hx_tmp5 = (_this1->x - X1);
HXDLIN( 467)				_this1->set_x(_hx_tmp5);
            			}
HXDLIN( 467)			{
HXLINE( 467)				Float _hx_tmp6 = (_this1->y - Y1);
HXDLIN( 467)				_this1->set_y(_hx_tmp6);
            			}
HXDLIN( 467)			_this1->addPoint(this->offset);
HXLINE( 469)			Float X2 = frameRect->x;
HXDLIN( 469)			Float Y2 = frameRect->y;
HXDLIN( 469)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X2,Y2);
HXDLIN( 469)			point->_inPool = false;
HXDLIN( 469)			point->_weak = true;
HXLINE( 470)			Float X3 = (frameRect->x + frameRect->width);
HXDLIN( 470)			Float Y3 = (frameRect->y + frameRect->height);
HXDLIN( 470)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X3,Y3);
HXDLIN( 470)			point1->_inPool = false;
HXDLIN( 470)			point1->_weak = true;
HXLINE( 472)			this->matrix->identity();
HXLINE( 474)			Bool _hx_tmp7 = (this->angle == (int)-90);
HXDLIN( 474)			if (_hx_tmp7) {
HXLINE( 476)				{
HXLINE( 476)					HX_VARI_NAME(  ::flixel::math::FlxMatrix,_this2,"_this") = this->matrix;
HXDLIN( 476)					_this2->setTo(-(_this2->b),_this2->a,-(_this2->d),_this2->c,-(_this2->ty),_this2->tx);
            				}
HXLINE( 477)				this->matrix->translate(this->frame->width,(int)0);
            			}
            			else {
HXLINE( 479)				Bool _hx_tmp8 = (this->angle == (int)90);
HXDLIN( 479)				if (_hx_tmp8) {
HXLINE( 481)					{
HXLINE( 481)						HX_VARI_NAME(  ::flixel::math::FlxMatrix,_this3,"_this") = this->matrix;
HXDLIN( 481)						_this3->setTo(_this3->b,-(_this3->a),_this3->d,-(_this3->c),_this3->ty,-(_this3->tx));
            					}
HXLINE( 482)					this->matrix->translate((int)0,this->frame->height);
            				}
            			}
HXLINE( 485)			Bool _hx_tmp9 = (this->angle != (int)0);
HXDLIN( 485)			if (_hx_tmp9) {
HXLINE( 487)				{
HXLINE( 487)					HX_VARI(  ::openfl::_legacy::geom::Matrix,matrix) = this->matrix;
HXDLIN( 487)					HX_VARI( Float,x1) = (((point->x * matrix->a) + (point->y * matrix->c)) + matrix->tx);
HXDLIN( 487)					HX_VARI( Float,y1) = (((point->x * matrix->b) + (point->y * matrix->d)) + matrix->ty);
HXDLIN( 487)					point->set(x1,y1);
            				}
HXLINE( 488)				{
HXLINE( 488)					HX_VARI_NAME(  ::openfl::_legacy::geom::Matrix,matrix1,"matrix") = this->matrix;
HXDLIN( 488)					HX_VARI_NAME( Float,x11,"x1") = (((point1->x * matrix1->a) + (point1->y * matrix1->c)) + matrix1->tx);
HXDLIN( 488)					HX_VARI_NAME( Float,y11,"y1") = (((point1->x * matrix1->b) + (point1->y * matrix1->d)) + matrix1->ty);
HXDLIN( 488)					point1->set(x11,y11);
            				}
            			}
HXLINE( 491)			{
HXLINE( 491)				HX_VARI( Float,minX) = ::Math_obj::min(point->x,point1->x);
HXDLIN( 491)				HX_VARI( Float,minY) = ::Math_obj::min(point->y,point1->y);
HXDLIN( 491)				HX_VARI( Float,maxX) = ::Math_obj::max(point->x,point1->x);
HXDLIN( 491)				HX_VARI( Float,maxY) = ::Math_obj::max(point->y,point1->y);
HXDLIN( 491)				Bool _hx_tmp10 = point->_weak;
HXDLIN( 491)				if (_hx_tmp10) {
HXLINE( 491)					point->put();
            				}
HXDLIN( 491)				Bool _hx_tmp11 = point1->_weak;
HXDLIN( 491)				if (_hx_tmp11) {
HXLINE( 491)					point1->put();
            				}
HXDLIN( 491)				{
HXLINE( 491)					frameRect->x = minX;
HXDLIN( 491)					frameRect->y = minY;
HXDLIN( 491)					frameRect->width = (maxX - minX);
HXDLIN( 491)					frameRect->height = (maxY - minY);
            				}
            			}
HXLINE( 492)			{
HXLINE( 492)				Float dx = this->frame->x;
HXDLIN( 492)				Float dy = this->frame->y;
HXDLIN( 492)				hx::AddEq(frameRect->x,dx);
HXDLIN( 492)				hx::AddEq(frameRect->y,dy);
            			}
HXLINE( 493)			frameToFill->set_frame(frameRect);
HXLINE( 494)			frameToFill->cacheFrameMatrix();
            		}
HXLINE( 497)		return frameToFill;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,subFrameTo,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::setBorderTo( ::flixel::math::FlxPoint border, ::flixel::graphics::frames::FlxFrame frameToFill){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","setBorderTo",0x0ba0ebcd,"flixel.graphics.frames.FlxFrame.setBorderTo","flixel/graphics/frames/FlxFrame.hx",508,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(border,"border")
            	HX_STACK_ARG(frameToFill,"frameToFill")
HXLINE( 509)		Float X = border->x;
HXDLIN( 509)		Float Y = border->y;
HXDLIN( 509)		Float Width = (this->sourceSize->x - ((int)2 * border->x));
HXDLIN( 509)		Float Height = (this->sourceSize->y - ((int)2 * border->y));
HXDLIN( 509)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 509)		_this->x = X;
HXDLIN( 509)		_this->y = Y;
HXDLIN( 509)		_this->width = Width;
HXDLIN( 509)		_this->height = Height;
HXDLIN( 509)		_this->_inPool = false;
HXLINE( 510)		frameToFill = this->subFrameTo(_this,frameToFill);
HXLINE( 511)		frameToFill->name = this->name;
HXLINE( 512)		::flixel::util::FlxDestroyUtil_obj::put(_this);
HXLINE( 513)		return frameToFill;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,setBorderTo,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::clipTo( ::flixel::math::FlxRect clip, ::flixel::graphics::frames::FlxFrame clippedFrame){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","clipTo",0x9ecb6267,"flixel.graphics.frames.FlxFrame.clipTo","flixel/graphics/frames/FlxFrame.hx",523,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(clip,"clip")
            	HX_STACK_ARG(clippedFrame,"clippedFrame")
HXLINE( 524)		Bool _hx_tmp = hx::IsNull( clippedFrame );
HXDLIN( 524)		if (_hx_tmp) {
HXLINE( 526)			clippedFrame =  ::flixel::graphics::frames::FlxFrame_obj::__new(this->parent,this->angle,null(),null());
            		}
            		else {
HXLINE( 530)			clippedFrame->parent = this->parent;
HXLINE( 531)			clippedFrame->angle = this->angle;
HXLINE( 532)			 ::flixel::math::FlxRect _hx_tmp1 = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(clippedFrame->frame)) );
HXDLIN( 532)			clippedFrame->set_frame(_hx_tmp1);
            		}
HXLINE( 535)		{
HXLINE( 535)			HX_VARI(  ::flixel::math::FlxPoint,_this) = clippedFrame->sourceSize;
HXDLIN( 535)			HX_VARI(  ::flixel::math::FlxPoint,point) = this->sourceSize;
HXDLIN( 535)			_this->set_x(point->x);
HXDLIN( 535)			_this->set_y(point->y);
HXDLIN( 535)			Bool _hx_tmp2 = point->_weak;
HXDLIN( 535)			if (_hx_tmp2) {
HXLINE( 535)				point->put();
            			}
            		}
HXLINE( 536)		clippedFrame->name = this->name;
HXLINE( 539)		Bool _hx_tmp3 = (this->type == (int)2);
HXDLIN( 539)		if (_hx_tmp3) {
HXLINE( 541)			clippedFrame->type = (int)2;
HXLINE( 542)			clippedFrame->offset->set((int)0,(int)0);
HXLINE( 543)			return clippedFrame;
            		}
HXLINE( 546)		Float Width = (int)0;
HXDLIN( 546)		Float Height = (int)0;
HXDLIN( 546)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 546)		_this1->x = (int)0;
HXDLIN( 546)		_this1->y = (int)0;
HXDLIN( 546)		_this1->width = Width;
HXDLIN( 546)		_this1->height = Height;
HXDLIN( 546)		_this1->_inPool = false;
HXDLIN( 546)		Float Width1 = this->frame->width;
HXDLIN( 546)		Float Height1 = this->frame->height;
HXDLIN( 546)		_this1->width = Width1;
HXDLIN( 546)		_this1->height = Height1;
HXLINE( 547)		Bool _hx_tmp4 = (this->angle != (int)0);
HXDLIN( 547)		if (_hx_tmp4) {
HXLINE( 549)			_this1->width = this->frame->height;
HXLINE( 550)			_this1->height = this->frame->width;
            		}
HXLINE( 553)		{
HXLINE( 553)			Float dx = -(this->offset->x);
HXDLIN( 553)			Float dy = -(this->offset->y);
HXDLIN( 553)			hx::AddEq(clip->x,dx);
HXDLIN( 553)			hx::AddEq(clip->y,dy);
            		}
HXLINE( 554)		HX_VARI(  ::flixel::math::FlxRect,frameRect) = _this1->intersection(clip);
HXLINE( 555)		::flixel::util::FlxDestroyUtil_obj::put(_this1);
HXLINE( 557)		Bool _hx_tmp5;
HXDLIN( 557)		if ((frameRect->width != (int)0)) {
HXLINE( 557)			_hx_tmp5 = (frameRect->height == (int)0);
            		}
            		else {
HXLINE( 557)			_hx_tmp5 = true;
            		}
HXDLIN( 557)		if (_hx_tmp5) {
HXLINE( 559)			clippedFrame->type = (int)2;
HXLINE( 560)			{
HXLINE( 560)				frameRect->x = (int)0;
HXDLIN( 560)				frameRect->y = (int)0;
HXDLIN( 560)				frameRect->width = (int)0;
HXDLIN( 560)				frameRect->height = (int)0;
            			}
HXLINE( 561)			clippedFrame->set_frame(frameRect);
HXLINE( 562)			clippedFrame->offset->set((int)0,(int)0);
            		}
            		else {
HXLINE( 566)			clippedFrame->type = (int)0;
HXLINE( 567)			clippedFrame->offset->set(frameRect->x,frameRect->y)->addPoint(this->offset);
HXLINE( 569)			Float X = frameRect->x;
HXDLIN( 569)			Float Y = frameRect->y;
HXDLIN( 569)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 569)			point1->_inPool = false;
HXDLIN( 569)			point1->_weak = true;
HXLINE( 570)			Float X1 = (frameRect->x + frameRect->width);
HXDLIN( 570)			Float Y1 = (frameRect->y + frameRect->height);
HXDLIN( 570)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 570)			point2->_inPool = false;
HXDLIN( 570)			point2->_weak = true;
HXLINE( 572)			this->matrix->identity();
HXLINE( 574)			Bool _hx_tmp6 = (this->angle == (int)-90);
HXDLIN( 574)			if (_hx_tmp6) {
HXLINE( 576)				{
HXLINE( 576)					HX_VARI_NAME(  ::flixel::math::FlxMatrix,_this2,"_this") = this->matrix;
HXDLIN( 576)					_this2->setTo(-(_this2->b),_this2->a,-(_this2->d),_this2->c,-(_this2->ty),_this2->tx);
            				}
HXLINE( 577)				this->matrix->translate(this->frame->width,(int)0);
            			}
            			else {
HXLINE( 579)				Bool _hx_tmp7 = (this->angle == (int)90);
HXDLIN( 579)				if (_hx_tmp7) {
HXLINE( 581)					{
HXLINE( 581)						HX_VARI_NAME(  ::flixel::math::FlxMatrix,_this3,"_this") = this->matrix;
HXDLIN( 581)						_this3->setTo(_this3->b,-(_this3->a),_this3->d,-(_this3->c),_this3->ty,-(_this3->tx));
            					}
HXLINE( 582)					this->matrix->translate((int)0,this->frame->height);
            				}
            			}
HXLINE( 585)			Bool _hx_tmp8 = (this->angle != (int)0);
HXDLIN( 585)			if (_hx_tmp8) {
HXLINE( 587)				{
HXLINE( 587)					HX_VARI(  ::openfl::_legacy::geom::Matrix,matrix) = this->matrix;
HXDLIN( 587)					HX_VARI( Float,x1) = (((point1->x * matrix->a) + (point1->y * matrix->c)) + matrix->tx);
HXDLIN( 587)					HX_VARI( Float,y1) = (((point1->x * matrix->b) + (point1->y * matrix->d)) + matrix->ty);
HXDLIN( 587)					point1->set(x1,y1);
            				}
HXLINE( 588)				{
HXLINE( 588)					HX_VARI_NAME(  ::openfl::_legacy::geom::Matrix,matrix1,"matrix") = this->matrix;
HXDLIN( 588)					HX_VARI_NAME( Float,x11,"x1") = (((point2->x * matrix1->a) + (point2->y * matrix1->c)) + matrix1->tx);
HXDLIN( 588)					HX_VARI_NAME( Float,y11,"y1") = (((point2->x * matrix1->b) + (point2->y * matrix1->d)) + matrix1->ty);
HXDLIN( 588)					point2->set(x11,y11);
            				}
            			}
HXLINE( 591)			{
HXLINE( 591)				HX_VARI( Float,minX) = ::Math_obj::min(point1->x,point2->x);
HXDLIN( 591)				HX_VARI( Float,minY) = ::Math_obj::min(point1->y,point2->y);
HXDLIN( 591)				HX_VARI( Float,maxX) = ::Math_obj::max(point1->x,point2->x);
HXDLIN( 591)				HX_VARI( Float,maxY) = ::Math_obj::max(point1->y,point2->y);
HXDLIN( 591)				Bool _hx_tmp9 = point1->_weak;
HXDLIN( 591)				if (_hx_tmp9) {
HXLINE( 591)					point1->put();
            				}
HXDLIN( 591)				Bool _hx_tmp10 = point2->_weak;
HXDLIN( 591)				if (_hx_tmp10) {
HXLINE( 591)					point2->put();
            				}
HXDLIN( 591)				{
HXLINE( 591)					frameRect->x = minX;
HXDLIN( 591)					frameRect->y = minY;
HXDLIN( 591)					frameRect->width = (maxX - minX);
HXDLIN( 591)					frameRect->height = (maxY - minY);
            				}
            			}
HXLINE( 592)			{
HXLINE( 592)				Float dx1 = this->frame->x;
HXDLIN( 592)				Float dy1 = this->frame->y;
HXDLIN( 592)				hx::AddEq(frameRect->x,dx1);
HXDLIN( 592)				hx::AddEq(frameRect->y,dy1);
            			}
HXLINE( 593)			clippedFrame->set_frame(frameRect);
HXLINE( 594)			clippedFrame->cacheFrameMatrix();
            		}
HXLINE( 597)		{
HXLINE( 597)			Float dx2 = this->offset->x;
HXDLIN( 597)			Float dy2 = this->offset->y;
HXDLIN( 597)			hx::AddEq(clip->x,dx2);
HXDLIN( 597)			hx::AddEq(clip->y,dy2);
            		}
HXLINE( 598)		return clippedFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,clipTo,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::copyTo( ::flixel::graphics::frames::FlxFrame clone){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","copyTo",0x5da6728c,"flixel.graphics.frames.FlxFrame.copyTo","flixel/graphics/frames/FlxFrame.hx",608,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(clone,"clone")
HXLINE( 609)		Bool _hx_tmp = hx::IsNull( clone );
HXDLIN( 609)		if (_hx_tmp) {
HXLINE( 611)			clone =  ::flixel::graphics::frames::FlxFrame_obj::__new(this->parent,this->angle,null(),null());
            		}
            		else {
HXLINE( 615)			clone->parent = this->parent;
HXLINE( 616)			clone->angle = this->angle;
HXLINE( 617)			 ::flixel::math::FlxRect _hx_tmp1 = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(clone->frame)) );
HXDLIN( 617)			clone->set_frame(_hx_tmp1);
            		}
HXLINE( 620)		{
HXLINE( 620)			HX_VARI(  ::flixel::math::FlxPoint,_this) = clone->offset;
HXDLIN( 620)			HX_VARI(  ::flixel::math::FlxPoint,point) = this->offset;
HXDLIN( 620)			_this->set_x(point->x);
HXDLIN( 620)			_this->set_y(point->y);
HXDLIN( 620)			Bool _hx_tmp2 = point->_weak;
HXDLIN( 620)			if (_hx_tmp2) {
HXLINE( 620)				point->put();
            			}
            		}
HXLINE( 621)		clone->flipX = this->flipX;
HXLINE( 622)		clone->flipY = this->flipY;
HXLINE( 623)		{
HXLINE( 623)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = clone->sourceSize;
HXDLIN( 623)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = this->sourceSize;
HXDLIN( 623)			_this1->set_x(point1->x);
HXDLIN( 623)			_this1->set_y(point1->y);
HXDLIN( 623)			Bool _hx_tmp3 = point1->_weak;
HXDLIN( 623)			if (_hx_tmp3) {
HXLINE( 623)				point1->put();
            			}
            		}
HXLINE( 624)		Float X = (int)0;
HXDLIN( 624)		Float Y = (int)0;
HXDLIN( 624)		Float Width = (int)0;
HXDLIN( 624)		Float Height = (int)0;
HXDLIN( 624)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 624)		_this2->x = X;
HXDLIN( 624)		_this2->y = Y;
HXDLIN( 624)		_this2->width = Width;
HXDLIN( 624)		_this2->height = Height;
HXDLIN( 624)		_this2->_inPool = false;
HXDLIN( 624)		HX_VARI(  ::flixel::math::FlxRect,Rect) = this->frame;
HXDLIN( 624)		_this2->x = Rect->x;
HXDLIN( 624)		_this2->y = Rect->y;
HXDLIN( 624)		_this2->width = Rect->width;
HXDLIN( 624)		_this2->height = Rect->height;
HXDLIN( 624)		Bool _hx_tmp4 = Rect->_weak;
HXDLIN( 624)		if (_hx_tmp4) {
HXLINE( 624)			Bool _hx_tmp5 = !(Rect->_inPool);
HXDLIN( 624)			if (_hx_tmp5) {
HXLINE( 624)				Rect->_inPool = true;
HXDLIN( 624)				Rect->_weak = false;
HXDLIN( 624)				::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            			}
            		}
HXDLIN( 624)		clone->set_frame(_this2);
HXLINE( 625)		clone->type = this->type;
HXLINE( 626)		clone->name = this->name;
HXLINE( 627)		clone->cacheFrameMatrix();
HXLINE( 628)		return clone;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,copyTo,return )

void FlxFrame_obj::destroy(){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","destroy",0x74fe137e,"flixel.graphics.frames.FlxFrame.destroy","flixel/graphics/frames/FlxFrame.hx",632,0x6c7f608b)
            	HX_STACK_THIS(this)
HXLINE( 633)		this->name = null();
HXLINE( 634)		this->parent = null();
HXLINE( 635)		this->sourceSize = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->sourceSize)) );
HXLINE( 636)		this->offset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->offset)) );
HXLINE( 637)		 ::flixel::math::FlxRect _hx_tmp = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->frame)) );
HXDLIN( 637)		this->set_frame(_hx_tmp);
HXLINE( 638)		this->uv = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->uv)) );
HXLINE( 639)		this->blitMatrix = null();
HXLINE( 640)		Bool _hx_tmp1 = ::flixel::FlxG_obj::renderTile;
HXDLIN( 640)		if (_hx_tmp1) {
HXLINE( 642)			this->tileMatrix = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFrame_obj,destroy,(void))

::String FlxFrame_obj::toString(){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","toString",0x50e09da8,"flixel.graphics.frames.FlxFrame.toString","flixel/graphics/frames/FlxFrame.hx",648,0x6c7f608b)
            	HX_STACK_THIS(this)
HXLINE( 649)		HX_VARI(  ::flixel::util::LabelValuePair,_this) = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 649)		_this->label = HX_("name",4b,72,ff,48);
HXDLIN( 649)		_this->value = this->name;
HXLINE( 648)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(1)->init(0,_this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFrame_obj,toString,return )

 ::flixel::math::FlxRect FlxFrame_obj::set_frame( ::flixel::math::FlxRect value){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","set_frame",0x789f5014,"flixel.graphics.frames.FlxFrame.set_frame","flixel/graphics/frames/FlxFrame.hx",653,0x6c7f608b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 654)		Bool _hx_tmp = hx::IsNotNull( value );
HXDLIN( 654)		if (_hx_tmp) {
HXLINE( 656)			Bool _hx_tmp1 = hx::IsNull( this->uv );
HXDLIN( 656)			if (_hx_tmp1) {
HXLINE( 657)				Float X = (int)0;
HXDLIN( 657)				Float Y = (int)0;
HXDLIN( 657)				Float Width = (int)0;
HXDLIN( 657)				Float Height = (int)0;
HXDLIN( 657)				HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 657)				_this->x = X;
HXDLIN( 657)				_this->y = Y;
HXDLIN( 657)				_this->width = Width;
HXDLIN( 657)				_this->height = Height;
HXDLIN( 657)				_this->_inPool = false;
HXDLIN( 657)				this->uv = _this;
            			}
HXLINE( 659)			{
HXLINE( 659)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->uv;
HXDLIN( 659)				Float X1 = ((Float)value->x / (Float)this->parent->width);
HXDLIN( 659)				Float Y1 = ((Float)value->y / (Float)this->parent->height);
HXDLIN( 659)				Float Width1 = ((Float)(value->x + value->width) / (Float)this->parent->width);
HXDLIN( 659)				Float Height1 = ((Float)(value->y + value->height) / (Float)this->parent->height);
HXDLIN( 659)				_this1->x = X1;
HXDLIN( 659)				_this1->y = Y1;
HXDLIN( 659)				_this1->width = Width1;
HXDLIN( 659)				_this1->height = Height1;
            			}
            		}
HXLINE( 662)		return (this->frame = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,set_frame,return )

Int FlxFrame_obj::sortByName( ::flixel::graphics::frames::FlxFrame frame1, ::flixel::graphics::frames::FlxFrame frame2,Int prefixLength,Int postfixLength){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxFrame","sortByName",0xdd6fa5bc,"flixel.graphics.frames.FlxFrame.sortByName","flixel/graphics/frames/FlxFrame.hx",30,0x6c7f608b)
            	HX_STACK_ARG(frame1,"frame1")
            	HX_STACK_ARG(frame2,"frame2")
            	HX_STACK_ARG(prefixLength,"prefixLength")
            	HX_STACK_ARG(postfixLength,"postfixLength")
HXLINE(  31)		HX_VARI( ::String,name1) = frame1->name;
HXLINE(  32)		HX_VARI( ::String,name2) = frame2->name;
HXLINE(  34)		Int _hx_tmp = (name1.length - postfixLength);
HXDLIN(  34)		::String _hx_tmp1 = name1.substring(prefixLength,_hx_tmp);
HXDLIN(  34)		HX_VARI( Int,num1) = ::Std_obj::parseInt(_hx_tmp1);
HXLINE(  35)		Int _hx_tmp2 = (name2.length - postfixLength);
HXDLIN(  35)		::String _hx_tmp3 = name2.substring(prefixLength,_hx_tmp2);
HXDLIN(  35)		HX_VARI( Int,num2) = ::Std_obj::parseInt(_hx_tmp3);
HXLINE(  37)		return (num1 - num2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,sortByName,return )


FlxFrame_obj::FlxFrame_obj()
{
}

void FlxFrame_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxFrame);
	HX_MARK_MEMBER_NAME(point1,"point1");
	HX_MARK_MEMBER_NAME(point2,"point2");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(uv,"uv");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(flipX,"flipX");
	HX_MARK_MEMBER_NAME(flipY,"flipY");
	HX_MARK_MEMBER_NAME(sourceSize,"sourceSize");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(tileMatrix,"tileMatrix");
	HX_MARK_MEMBER_NAME(blitMatrix,"blitMatrix");
	HX_MARK_END_CLASS();
}

void FlxFrame_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(point1,"point1");
	HX_VISIT_MEMBER_NAME(point2,"point2");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(uv,"uv");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(flipX,"flipX");
	HX_VISIT_MEMBER_NAME(flipY,"flipY");
	HX_VISIT_MEMBER_NAME(sourceSize,"sourceSize");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(tileMatrix,"tileMatrix");
	HX_VISIT_MEMBER_NAME(blitMatrix,"blitMatrix");
}

hx::Val FlxFrame_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { return hx::Val( uv); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"flipX") ) { return hx::Val( flipX); }
		if (HX_FIELD_EQ(inName,"flipY") ) { return hx::Val( flipY); }
		if (HX_FIELD_EQ(inName,"paint") ) { return hx::Val( paint_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"point1") ) { return hx::Val( point1); }
		if (HX_FIELD_EQ(inName,"point2") ) { return hx::Val( point2); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset); }
		if (HX_FIELD_EQ(inName,"clipTo") ) { return hx::Val( clipTo_dyn()); }
		if (HX_FIELD_EQ(inName,"copyTo") ) { return hx::Val( copyTo_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_frame") ) { return hx::Val( set_frame_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceSize") ) { return hx::Val( sourceSize); }
		if (HX_FIELD_EQ(inName,"tileMatrix") ) { return hx::Val( tileMatrix); }
		if (HX_FIELD_EQ(inName,"blitMatrix") ) { return hx::Val( blitMatrix); }
		if (HX_FIELD_EQ(inName,"subFrameTo") ) { return hx::Val( subFrameTo_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setBorderTo") ) { return hx::Val( setBorderTo_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rotateAndFlip") ) { return hx::Val( rotateAndFlip_dyn()); }
		if (HX_FIELD_EQ(inName,"prepareMatrix") ) { return hx::Val( prepareMatrix_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fillBlitMatrix") ) { return hx::Val( fillBlitMatrix_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cacheFrameMatrix") ) { return hx::Val( cacheFrameMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"checkInputBitmap") ) { return hx::Val( checkInputBitmap_dyn()); }
		if (HX_FIELD_EQ(inName,"getDrawFrameRect") ) { return hx::Val( getDrawFrameRect_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"prepareBlitMatrix") ) { return hx::Val( prepareBlitMatrix_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"paintRotatedAndFlipped") ) { return hx::Val( paintRotatedAndFlipped_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"prepareTransformedBlitMatrix") ) { return hx::Val( prepareTransformedBlitMatrix_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxFrame_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"sortByName") ) { outValue = sortByName_dyn(); return true; }
	}
	return false;
}

hx::Val FlxFrame_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { uv=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frame(inValue) );frame=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipX") ) { flipX=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipY") ) { flipY=inValue.Cast< Bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"point1") ) { point1=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"point2") ) { point2=inValue.Cast<  ::openfl::_legacy::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceSize") ) { sourceSize=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileMatrix") ) { tileMatrix=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blitMatrix") ) { blitMatrix=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxFrame_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("point1","\xe1","\x11","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("uv","\x61","\x66","\x00","\x00"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("sourceSize","\x3c","\x87","\xb7","\x74"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("tileMatrix","\x0f","\x0c","\x5f","\x20"));
	outFields->push(HX_HCSTRING("blitMatrix","\x56","\x78","\x21","\xd8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxFrame_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxFrame_obj,point1),HX_HCSTRING("point1","\xe1","\x11","\x2e","\xf7")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(int)offsetof(FlxFrame_obj,point2),HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxFrame_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxFrame_obj,matrix),HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{hx::fsString,(int)offsetof(FlxFrame_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxFrame_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxFrame_obj,uv),HX_HCSTRING("uv","\x61","\x66","\x00","\x00")},
	{hx::fsObject /*::flixel::graphics::FlxGraphic*/ ,(int)offsetof(FlxFrame_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(FlxFrame_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsBool,(int)offsetof(FlxFrame_obj,flipX),HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02")},
	{hx::fsBool,(int)offsetof(FlxFrame_obj,flipY),HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxFrame_obj,sourceSize),HX_HCSTRING("sourceSize","\x3c","\x87","\xb7","\x74")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxFrame_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsInt,(int)offsetof(FlxFrame_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxFrame_obj,tileMatrix),HX_HCSTRING("tileMatrix","\x0f","\x0c","\x5f","\x20")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxFrame_obj,blitMatrix),HX_HCSTRING("blitMatrix","\x56","\x78","\x21","\xd8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxFrame_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxFrame_obj_sMemberFields[] = {
	HX_HCSTRING("point1","\xe1","\x11","\x2e","\xf7"),
	HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("uv","\x61","\x66","\x00","\x00"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"),
	HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"),
	HX_HCSTRING("sourceSize","\x3c","\x87","\xb7","\x74"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("tileMatrix","\x0f","\x0c","\x5f","\x20"),
	HX_HCSTRING("blitMatrix","\x56","\x78","\x21","\xd8"),
	HX_HCSTRING("cacheFrameMatrix","\x2c","\x83","\xfa","\x88"),
	HX_HCSTRING("prepareBlitMatrix","\xbd","\xdc","\xf9","\x4c"),
	HX_HCSTRING("rotateAndFlip","\x09","\x24","\xe1","\x45"),
	HX_HCSTRING("prepareTransformedBlitMatrix","\xfa","\x77","\x91","\xf4"),
	HX_HCSTRING("prepareMatrix","\x28","\x9b","\x0e","\x82"),
	HX_HCSTRING("fillBlitMatrix","\xb9","\xac","\x6c","\x16"),
	HX_HCSTRING("paint","\x9e","\xb7","\x4e","\xbd"),
	HX_HCSTRING("paintRotatedAndFlipped","\xb6","\xa3","\xdf","\xc7"),
	HX_HCSTRING("checkInputBitmap","\xb1","\x8f","\x20","\x9b"),
	HX_HCSTRING("getDrawFrameRect","\xd7","\xc8","\x6f","\x02"),
	HX_HCSTRING("subFrameTo","\x68","\x95","\xdd","\xc4"),
	HX_HCSTRING("setBorderTo","\x49","\x73","\x59","\x89"),
	HX_HCSTRING("clipTo","\x6b","\x0c","\x58","\x0a"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("set_frame","\x90","\xc0","\x7d","\x2d"),
	::String(null()) };

static void FlxFrame_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxFrame_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxFrame_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxFrame_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxFrame_obj::__mClass;

static ::String FlxFrame_obj_sStaticFields[] = {
	HX_HCSTRING("sortByName","\xc0","\xa1","\x33","\x6b"),
	::String(null())
};

void FlxFrame_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.frames.FlxFrame","\xf2","\x22","\x40","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxFrame_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxFrame_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxFrame_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxFrame_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxFrame_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxFrame_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxFrame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxFrame_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
