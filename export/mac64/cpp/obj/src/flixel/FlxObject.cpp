// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_math_FlxVelocity
#include <flixel/math/FlxVelocity.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPath
#include <flixel/util/FlxPath.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif

namespace flixel{

void FlxObject_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Float Width = __o_Width.Default(0);
Float Height = __o_Height.Default(0);
            	HX_STACK_FRAME("flixel.FlxObject","new",0x2aa4ec91,"flixel.FlxObject.new","flixel/FlxObject.hx",20,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE( 552)		Float X1 = (int)0;
HXDLIN( 552)		Float Y1 = (int)0;
HXDLIN( 552)		Float Width1 = (int)0;
HXDLIN( 552)		Float Height1 = (int)0;
HXDLIN( 552)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 552)		_this->x = X1;
HXDLIN( 552)		_this->y = Y1;
HXDLIN( 552)		_this->width = Width1;
HXDLIN( 552)		_this->height = Height1;
HXDLIN( 552)		_this->_inPool = false;
HXDLIN( 552)		this->_rect = _this;
HXLINE( 551)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 551)		point->_inPool = false;
HXDLIN( 551)		this->_point = point;
HXLINE( 532)		this->collisonXDrag = true;
HXLINE( 527)		this->allowCollisions = (int)4369;
HXLINE( 522)		this->wasTouching = (int)0;
HXLINE( 517)		this->touching = (int)0;
HXLINE( 512)		this->health = ((Float)1);
HXLINE( 508)		this->maxAngular = ((Float)10000);
HXLINE( 504)		this->angularDrag = ((Float)0);
HXLINE( 500)		this->angularAcceleration = ((Float)0);
HXLINE( 496)		this->angularVelocity = ((Float)0);
HXLINE( 492)		this->elasticity = ((Float)0);
HXLINE( 488)		this->mass = ((Float)1);
HXLINE( 449)		this->immovable = false;
HXLINE( 445)		this->moves = true;
HXLINE( 440)		this->angle = ((Float)0);
HXLINE( 435)		this->pixelPerfectPosition = true;
HXLINE( 414)		this->y = ((Float)0);
HXLINE( 410)		this->x = ((Float)0);
HXLINE( 562)		super::__construct();
HXLINE( 564)		this->set_x(X);
HXLINE( 565)		this->set_y(Y);
HXLINE( 566)		this->set_width(Width);
HXLINE( 567)		this->set_height(Height);
HXLINE( 569)		this->initVars();
            	}

Dynamic FlxObject_obj::__CreateEmpty() { return new FlxObject_obj; }

hx::ObjectPtr< FlxObject_obj > FlxObject_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height)
{
	hx::ObjectPtr< FlxObject_obj > _hx_result = new FlxObject_obj();
	_hx_result->__construct(__o_X,__o_Y,__o_Width,__o_Height);
	return _hx_result;
}

Dynamic FlxObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxObject_obj > _hx_result = new FlxObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

void FlxObject_obj::initVars(){
            	HX_STACK_FRAME("flixel.FlxObject","initVars",0xb8a66d0b,"flixel.FlxObject.initVars","flixel/FlxObject.hx",576,0xf0fe0d80)
            	HX_STACK_THIS(this)
HXLINE( 577)		this->flixelType = (int)1;
HXLINE( 578)		Float X = this->x;
HXDLIN( 578)		Float Y = this->y;
HXDLIN( 578)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 578)		point->_inPool = false;
HXDLIN( 578)		this->last = point;
HXLINE( 579)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)1,(int)1);
HXDLIN( 579)		point1->_inPool = false;
HXDLIN( 579)		this->scrollFactor = point1;
HXLINE( 580)		this->pixelPerfectPosition = ::flixel::FlxObject_obj::defaultPixelPerfectPosition;
HXLINE( 582)		{
HXLINE( 582)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 582)			point2->_inPool = false;
HXDLIN( 582)			this->velocity = point2;
HXDLIN( 582)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 582)			point3->_inPool = false;
HXDLIN( 582)			this->acceleration = point3;
HXDLIN( 582)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point4,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 582)			point4->_inPool = false;
HXDLIN( 582)			this->drag = point4;
HXDLIN( 582)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point5,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)10000,(int)10000);
HXDLIN( 582)			point5->_inPool = false;
HXDLIN( 582)			this->maxVelocity = point5;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,initVars,(void))

void FlxObject_obj::initMotionVars(){
            	HX_STACK_FRAME("flixel.FlxObject","initMotionVars",0xb01943a1,"flixel.FlxObject.initMotionVars","flixel/FlxObject.hx",589,0xf0fe0d80)
            	HX_STACK_THIS(this)
HXLINE( 590)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 590)		point->_inPool = false;
HXDLIN( 590)		this->velocity = point;
HXLINE( 591)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 591)		point1->_inPool = false;
HXDLIN( 591)		this->acceleration = point1;
HXLINE( 592)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 592)		point2->_inPool = false;
HXDLIN( 592)		this->drag = point2;
HXLINE( 593)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)10000,(int)10000);
HXDLIN( 593)		point3->_inPool = false;
HXDLIN( 593)		this->maxVelocity = point3;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,initMotionVars,(void))

void FlxObject_obj::destroy(){
            	HX_STACK_FRAME("flixel.FlxObject","destroy",0xba37b5ab,"flixel.FlxObject.destroy","flixel/FlxObject.hx",601,0xf0fe0d80)
            	HX_STACK_THIS(this)
HXLINE( 602)		this->super::destroy();
HXLINE( 604)		this->velocity = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->velocity)) );
HXLINE( 605)		this->acceleration = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->acceleration)) );
HXLINE( 606)		this->drag = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->drag)) );
HXLINE( 607)		this->maxVelocity = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->maxVelocity)) );
HXLINE( 608)		this->scrollFactor = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scrollFactor)) );
HXLINE( 609)		this->last = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->last)) );
HXLINE( 610)		this->_point = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_point)) );
HXLINE( 611)		this->_rect = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->_rect)) );
            	}


void FlxObject_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.FlxObject","update",0x87b15e78,"flixel.FlxObject.update","flixel/FlxObject.hx",619,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 625)		this->last->set_x(this->x);
HXLINE( 626)		this->last->set_y(this->y);
HXLINE( 628)		Bool _hx_tmp;
HXDLIN( 628)		Bool _hx_tmp1 = hx::IsNotNull( this->path );
HXDLIN( 628)		if (_hx_tmp1) {
HXLINE( 628)			_hx_tmp = this->path->active;
            		}
            		else {
HXLINE( 628)			_hx_tmp = false;
            		}
HXDLIN( 628)		if (_hx_tmp) {
HXLINE( 629)			this->path->update(elapsed);
            		}
HXLINE( 631)		Bool _hx_tmp2 = this->moves;
HXDLIN( 631)		if (_hx_tmp2) {
HXLINE( 632)			this->updateMotion(elapsed);
            		}
HXLINE( 634)		this->wasTouching = this->touching;
HXLINE( 635)		this->touching = (int)0;
            	}


void FlxObject_obj::updateMotion(Float elapsed){
            	HX_STACK_FRAME("flixel.FlxObject","updateMotion",0x420d82ce,"flixel.FlxObject.updateMotion","flixel/FlxObject.hx",643,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 644)		HX_VARI( Float,velocityDelta) = (((Float)0.5) * (::flixel::math::FlxVelocity_obj::computeVelocity(this->angularVelocity,this->angularAcceleration,this->angularDrag,this->maxAngular,elapsed) - this->angularVelocity));
HXLINE( 645)		hx::AddEq(this->angularVelocity,velocityDelta);
HXLINE( 646)		{
HXLINE( 646)			HX_VARI(  ::flixel::FlxObject,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 646)			Float _hx_tmp = (_g->angle + (this->angularVelocity * elapsed));
HXDLIN( 646)			_g->set_angle(_hx_tmp);
            		}
HXLINE( 647)		hx::AddEq(this->angularVelocity,velocityDelta);
HXLINE( 649)		velocityDelta = (((Float)0.5) * (::flixel::math::FlxVelocity_obj::computeVelocity(this->velocity->x,this->acceleration->x,this->drag->x,this->maxVelocity->x,elapsed) - this->velocity->x));
HXLINE( 650)		{
HXLINE( 650)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = this->velocity;
HXDLIN( 650)			Float _hx_tmp1 = (_g1->x + velocityDelta);
HXDLIN( 650)			_g1->set_x(_hx_tmp1);
            		}
HXLINE( 651)		HX_VARI( Float,delta) = (this->velocity->x * elapsed);
HXLINE( 652)		{
HXLINE( 652)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g2,"_g") = this->velocity;
HXDLIN( 652)			Float _hx_tmp2 = (_g2->x + velocityDelta);
HXDLIN( 652)			_g2->set_x(_hx_tmp2);
            		}
HXLINE( 653)		{
HXLINE( 653)			HX_VARI_NAME(  ::flixel::FlxObject,_g3,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 653)			Float _hx_tmp3 = (_g3->x + delta);
HXDLIN( 653)			_g3->set_x(_hx_tmp3);
            		}
HXLINE( 655)		velocityDelta = (((Float)0.5) * (::flixel::math::FlxVelocity_obj::computeVelocity(this->velocity->y,this->acceleration->y,this->drag->y,this->maxVelocity->y,elapsed) - this->velocity->y));
HXLINE( 656)		{
HXLINE( 656)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g4,"_g") = this->velocity;
HXDLIN( 656)			Float _hx_tmp4 = (_g4->y + velocityDelta);
HXDLIN( 656)			_g4->set_y(_hx_tmp4);
            		}
HXLINE( 657)		delta = (this->velocity->y * elapsed);
HXLINE( 658)		{
HXLINE( 658)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g5,"_g") = this->velocity;
HXDLIN( 658)			Float _hx_tmp5 = (_g5->y + velocityDelta);
HXDLIN( 658)			_g5->set_y(_hx_tmp5);
            		}
HXLINE( 659)		{
HXLINE( 659)			HX_VARI_NAME(  ::flixel::FlxObject,_g6,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 659)			Float _hx_tmp6 = (_g6->y + delta);
HXDLIN( 659)			_g6->set_y(_hx_tmp6);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,updateMotion,(void))

void FlxObject_obj::draw(){
            	HX_STACK_FRAME("flixel.FlxObject","draw",0x1f17bab3,"flixel.FlxObject.draw","flixel/FlxObject.hx",666,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	}


Bool FlxObject_obj::overlaps( ::flixel::FlxBasic ObjectOrGroup,hx::Null< Bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACK_FRAME("flixel.FlxObject","overlaps",0xaad0e53b,"flixel.FlxObject.overlaps","flixel/FlxObject.hx",685,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 686)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE( 687)		Bool _hx_tmp = hx::IsNotNull( group );
HXDLIN( 687)		if (_hx_tmp) {
HXLINE( 689)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->overlapsCallback_dyn(),group,(int)0,(int)0,InScreenSpace,Camera);
            		}
HXLINE( 692)		Bool _hx_tmp1 = (ObjectOrGroup->flixelType == (int)3);
HXDLIN( 692)		if (_hx_tmp1) {
HXLINE( 697)			return ( ( ::flixel::tile::FlxBaseTilemap)(ObjectOrGroup) )->overlaps(hx::ObjectPtr<OBJ_>(this),InScreenSpace,Camera);
            		}
HXLINE( 700)		HX_VARI(  ::flixel::FlxObject,object) = ( ( ::flixel::FlxObject)(ObjectOrGroup) );
HXLINE( 701)		if (!(InScreenSpace)) {
HXLINE( 703)			Bool _hx_tmp2;
HXDLIN( 703)			Bool _hx_tmp3;
HXDLIN( 703)			Float _hx_tmp4 = object->x;
HXDLIN( 703)			Float _hx_tmp5 = object->get_width();
HXDLIN( 703)			Bool _hx_tmp6 = ((_hx_tmp4 + _hx_tmp5) > this->x);
HXDLIN( 703)			if (_hx_tmp6) {
HXLINE( 703)				Float _hx_tmp7 = object->x;
HXDLIN( 703)				Float _hx_tmp8 = this->x;
HXDLIN( 703)				Float _hx_tmp9 = this->get_width();
HXDLIN( 703)				_hx_tmp3 = (_hx_tmp7 < (_hx_tmp8 + _hx_tmp9));
            			}
            			else {
HXLINE( 703)				_hx_tmp3 = false;
            			}
HXDLIN( 703)			if (_hx_tmp3) {
HXLINE( 704)				Float _hx_tmp10 = object->y;
HXDLIN( 704)				Float _hx_tmp11 = object->get_height();
HXLINE( 703)				_hx_tmp2 = ((_hx_tmp10 + _hx_tmp11) > this->y);
            			}
            			else {
HXLINE( 703)				_hx_tmp2 = false;
            			}
HXDLIN( 703)			if (_hx_tmp2) {
HXLINE( 704)				Float _hx_tmp12 = object->y;
HXDLIN( 704)				Float _hx_tmp13 = this->y;
HXDLIN( 704)				Float _hx_tmp14 = this->get_height();
HXLINE( 703)				return (_hx_tmp12 < (_hx_tmp13 + _hx_tmp14));
            			}
            			else {
HXLINE( 703)				return false;
            			}
            		}
HXLINE( 707)		Bool _hx_tmp15 = hx::IsNull( Camera );
HXDLIN( 707)		if (_hx_tmp15) {
HXLINE( 709)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 711)		HX_VARI(  ::flixel::math::FlxPoint,objectScreenPos) = object->getScreenPosition(null(),Camera);
HXLINE( 712)		this->getScreenPosition(this->_point,Camera);
HXLINE( 713)		Bool _hx_tmp16;
HXDLIN( 713)		Bool _hx_tmp17;
HXDLIN( 713)		Float _hx_tmp18 = objectScreenPos->x;
HXDLIN( 713)		Float _hx_tmp19 = object->get_width();
HXDLIN( 713)		Bool _hx_tmp20 = ((_hx_tmp18 + _hx_tmp19) > this->_point->x);
HXDLIN( 713)		if (_hx_tmp20) {
HXLINE( 713)			Float _hx_tmp21 = objectScreenPos->x;
HXDLIN( 713)			Float _hx_tmp22 = this->_point->x;
HXDLIN( 713)			Float _hx_tmp23 = this->get_width();
HXDLIN( 713)			_hx_tmp17 = (_hx_tmp21 < (_hx_tmp22 + _hx_tmp23));
            		}
            		else {
HXLINE( 713)			_hx_tmp17 = false;
            		}
HXDLIN( 713)		if (_hx_tmp17) {
HXLINE( 714)			Float _hx_tmp24 = objectScreenPos->y;
HXDLIN( 714)			Float _hx_tmp25 = object->get_height();
HXLINE( 713)			_hx_tmp16 = ((_hx_tmp24 + _hx_tmp25) > this->_point->y);
            		}
            		else {
HXLINE( 713)			_hx_tmp16 = false;
            		}
HXDLIN( 713)		if (_hx_tmp16) {
HXLINE( 714)			Float _hx_tmp26 = objectScreenPos->y;
HXDLIN( 714)			Float _hx_tmp27 = this->_point->y;
HXDLIN( 714)			Float _hx_tmp28 = this->get_height();
HXLINE( 713)			return (_hx_tmp26 < (_hx_tmp27 + _hx_tmp28));
            		}
            		else {
HXLINE( 713)			return false;
            		}
HXDLIN( 713)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,overlaps,return )

Bool FlxObject_obj::overlapsCallback( ::flixel::FlxBasic ObjectOrGroup,Float X,Float Y,Bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.FlxObject","overlapsCallback",0xe4196e20,"flixel.FlxObject.overlapsCallback","flixel/FlxObject.hx",719,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 719)		return this->overlaps(ObjectOrGroup,InScreenSpace,Camera);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,overlapsCallback,return )

Bool FlxObject_obj::overlapsAt(Float X,Float Y, ::flixel::FlxBasic ObjectOrGroup,hx::Null< Bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACK_FRAME("flixel.FlxObject","overlapsAt",0xacc1230e,"flixel.FlxObject.overlapsAt","flixel/FlxObject.hx",735,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 736)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE( 737)		Bool _hx_tmp = hx::IsNotNull( group );
HXDLIN( 737)		if (_hx_tmp) {
HXLINE( 739)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->overlapsAtCallback_dyn(),group,X,Y,InScreenSpace,Camera);
            		}
HXLINE( 742)		Bool _hx_tmp1 = (ObjectOrGroup->flixelType == (int)3);
HXDLIN( 742)		if (_hx_tmp1) {
HXLINE( 748)			HX_VARI(  ::flixel::tile::FlxBaseTilemap,tilemap) = ( ( ::flixel::tile::FlxBaseTilemap)(ObjectOrGroup) );
HXLINE( 749)			Float _hx_tmp2 = (tilemap->x - (X - this->x));
HXDLIN( 749)			Float _hx_tmp3 = (tilemap->y - (Y - this->y));
HXDLIN( 749)			return tilemap->overlapsAt(_hx_tmp2,_hx_tmp3,hx::ObjectPtr<OBJ_>(this),InScreenSpace,Camera);
            		}
HXLINE( 752)		HX_VARI(  ::flixel::FlxObject,object) = ( ( ::flixel::FlxObject)(ObjectOrGroup) );
HXLINE( 753)		if (!(InScreenSpace)) {
HXLINE( 755)			Bool _hx_tmp4;
HXDLIN( 755)			Bool _hx_tmp5;
HXDLIN( 755)			Float _hx_tmp6 = object->x;
HXDLIN( 755)			Float _hx_tmp7 = object->get_width();
HXDLIN( 755)			if (((_hx_tmp6 + _hx_tmp7) > X)) {
HXLINE( 755)				Float _hx_tmp8 = object->x;
HXDLIN( 755)				Float _hx_tmp9 = this->get_width();
HXDLIN( 755)				_hx_tmp5 = (_hx_tmp8 < (X + _hx_tmp9));
            			}
            			else {
HXLINE( 755)				_hx_tmp5 = false;
            			}
HXDLIN( 755)			if (_hx_tmp5) {
HXLINE( 756)				Float _hx_tmp10 = object->y;
HXDLIN( 756)				Float _hx_tmp11 = object->get_height();
HXLINE( 755)				_hx_tmp4 = ((_hx_tmp10 + _hx_tmp11) > Y);
            			}
            			else {
HXLINE( 755)				_hx_tmp4 = false;
            			}
HXDLIN( 755)			if (_hx_tmp4) {
HXLINE( 756)				Float _hx_tmp12 = object->y;
HXDLIN( 756)				Float _hx_tmp13 = this->get_height();
HXLINE( 755)				return (_hx_tmp12 < (Y + _hx_tmp13));
            			}
            			else {
HXLINE( 755)				return false;
            			}
            		}
HXLINE( 759)		Bool _hx_tmp14 = hx::IsNull( Camera );
HXDLIN( 759)		if (_hx_tmp14) {
HXLINE( 761)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 763)		HX_VARI(  ::flixel::math::FlxPoint,objectScreenPos) = object->getScreenPosition(null(),Camera);
HXLINE( 764)		this->getScreenPosition(this->_point,Camera);
HXLINE( 765)		Bool _hx_tmp15;
HXDLIN( 765)		Bool _hx_tmp16;
HXDLIN( 765)		Float _hx_tmp17 = objectScreenPos->x;
HXDLIN( 765)		Float _hx_tmp18 = object->get_width();
HXDLIN( 765)		Bool _hx_tmp19 = ((_hx_tmp17 + _hx_tmp18) > this->_point->x);
HXDLIN( 765)		if (_hx_tmp19) {
HXLINE( 765)			Float _hx_tmp20 = objectScreenPos->x;
HXDLIN( 765)			Float _hx_tmp21 = this->_point->x;
HXDLIN( 765)			Float _hx_tmp22 = this->get_width();
HXDLIN( 765)			_hx_tmp16 = (_hx_tmp20 < (_hx_tmp21 + _hx_tmp22));
            		}
            		else {
HXLINE( 765)			_hx_tmp16 = false;
            		}
HXDLIN( 765)		if (_hx_tmp16) {
HXLINE( 766)			Float _hx_tmp23 = objectScreenPos->y;
HXDLIN( 766)			Float _hx_tmp24 = object->get_height();
HXLINE( 765)			_hx_tmp15 = ((_hx_tmp23 + _hx_tmp24) > this->_point->y);
            		}
            		else {
HXLINE( 765)			_hx_tmp15 = false;
            		}
HXDLIN( 765)		if (_hx_tmp15) {
HXLINE( 766)			Float _hx_tmp25 = objectScreenPos->y;
HXDLIN( 766)			Float _hx_tmp26 = this->_point->y;
HXDLIN( 766)			Float _hx_tmp27 = this->get_height();
HXLINE( 765)			return (_hx_tmp25 < (_hx_tmp26 + _hx_tmp27));
            		}
            		else {
HXLINE( 765)			return false;
            		}
HXDLIN( 765)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,overlapsAt,return )

Bool FlxObject_obj::overlapsAtCallback( ::flixel::FlxBasic ObjectOrGroup,Float X,Float Y,Bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.FlxObject","overlapsAtCallback",0xb90836f3,"flixel.FlxObject.overlapsAtCallback","flixel/FlxObject.hx",771,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 771)		return this->overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,overlapsAtCallback,return )

Bool FlxObject_obj::overlapsPoint( ::flixel::math::FlxPoint point,hx::Null< Bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACK_FRAME("flixel.FlxObject","overlapsPoint",0xcd9c6915,"flixel.FlxObject.overlapsPoint","flixel/FlxObject.hx",783,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 784)		if (!(InScreenSpace)) {
HXLINE( 786)			Bool _hx_tmp;
HXDLIN( 786)			Bool _hx_tmp1;
HXDLIN( 786)			Bool _hx_tmp2 = (point->x >= this->x);
HXDLIN( 786)			if (_hx_tmp2) {
HXLINE( 786)				Float _hx_tmp3 = point->x;
HXDLIN( 786)				Float _hx_tmp4 = this->x;
HXDLIN( 786)				Float _hx_tmp5 = this->get_width();
HXDLIN( 786)				_hx_tmp1 = (_hx_tmp3 < (_hx_tmp4 + _hx_tmp5));
            			}
            			else {
HXLINE( 786)				_hx_tmp1 = false;
            			}
HXDLIN( 786)			if (_hx_tmp1) {
HXLINE( 786)				_hx_tmp = (point->y >= this->y);
            			}
            			else {
HXLINE( 786)				_hx_tmp = false;
            			}
HXDLIN( 786)			if (_hx_tmp) {
HXLINE( 786)				Float _hx_tmp6 = point->y;
HXDLIN( 786)				Float _hx_tmp7 = this->y;
HXDLIN( 786)				Float _hx_tmp8 = this->get_height();
HXDLIN( 786)				return (_hx_tmp6 < (_hx_tmp7 + _hx_tmp8));
            			}
            			else {
HXLINE( 786)				return false;
            			}
            		}
HXLINE( 789)		Bool _hx_tmp9 = hx::IsNull( Camera );
HXDLIN( 789)		if (_hx_tmp9) {
HXLINE( 791)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 793)		HX_VARI( Float,xPos) = (point->x - Camera->scroll->x);
HXLINE( 794)		HX_VARI( Float,yPos) = (point->y - Camera->scroll->y);
HXLINE( 795)		this->getScreenPosition(this->_point,Camera);
HXLINE( 796)		Bool _hx_tmp10 = point->_weak;
HXDLIN( 796)		if (_hx_tmp10) {
HXLINE( 796)			point->put();
            		}
HXLINE( 797)		Bool _hx_tmp11;
HXDLIN( 797)		Bool _hx_tmp12;
HXDLIN( 797)		Bool _hx_tmp13 = (xPos >= this->_point->x);
HXDLIN( 797)		if (_hx_tmp13) {
HXLINE( 797)			Float _hx_tmp14 = this->_point->x;
HXDLIN( 797)			Float _hx_tmp15 = this->get_width();
HXDLIN( 797)			_hx_tmp12 = (xPos < (_hx_tmp14 + _hx_tmp15));
            		}
            		else {
HXLINE( 797)			_hx_tmp12 = false;
            		}
HXDLIN( 797)		if (_hx_tmp12) {
HXLINE( 797)			_hx_tmp11 = (yPos >= this->_point->y);
            		}
            		else {
HXLINE( 797)			_hx_tmp11 = false;
            		}
HXDLIN( 797)		if (_hx_tmp11) {
HXLINE( 797)			Float _hx_tmp16 = this->_point->y;
HXDLIN( 797)			Float _hx_tmp17 = this->get_height();
HXDLIN( 797)			return (yPos < (_hx_tmp16 + _hx_tmp17));
            		}
            		else {
HXLINE( 797)			return false;
            		}
HXDLIN( 797)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,overlapsPoint,return )

Bool FlxObject_obj::inWorldBounds(){
            	HX_STACK_FRAME("flixel.FlxObject","inWorldBounds",0x89d0e9f3,"flixel.FlxObject.inWorldBounds","flixel/FlxObject.hx",807,0xf0fe0d80)
            	HX_STACK_THIS(this)
HXLINE( 807)		Bool _hx_tmp;
HXDLIN( 807)		Bool _hx_tmp1;
HXDLIN( 807)		Float _hx_tmp2 = this->x;
HXDLIN( 807)		Float _hx_tmp3 = this->get_width();
HXDLIN( 807)		if (((_hx_tmp2 + _hx_tmp3) > ::flixel::FlxG_obj::worldBounds->x)) {
HXLINE( 807)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 807)			_hx_tmp1 = (this->x < (_this->x + _this->width));
            		}
            		else {
HXLINE( 807)			_hx_tmp1 = false;
            		}
HXDLIN( 807)		if (_hx_tmp1) {
HXLINE( 807)			Float _hx_tmp4 = this->y;
HXDLIN( 807)			Float _hx_tmp5 = this->get_height();
HXDLIN( 807)			_hx_tmp = ((_hx_tmp4 + _hx_tmp5) > ::flixel::FlxG_obj::worldBounds->y);
            		}
            		else {
HXLINE( 807)			_hx_tmp = false;
            		}
HXDLIN( 807)		if (_hx_tmp) {
HXLINE( 807)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 807)			return (this->y < (_this1->y + _this1->height));
            		}
            		else {
HXLINE( 807)			return false;
            		}
HXDLIN( 807)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,inWorldBounds,return )

 ::flixel::math::FlxPoint FlxObject_obj::getScreenPosition( ::flixel::math::FlxPoint point, ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.FlxObject","getScreenPosition",0x643c435c,"flixel.FlxObject.getScreenPosition","flixel/FlxObject.hx",818,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 819)		Bool _hx_tmp = hx::IsNull( point );
HXDLIN( 819)		if (_hx_tmp) {
HXLINE( 821)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 821)			point1->_inPool = false;
HXDLIN( 821)			point = point1;
            		}
HXLINE( 823)		Bool _hx_tmp1 = hx::IsNull( Camera );
HXDLIN( 823)		if (_hx_tmp1) {
HXLINE( 825)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 828)		point->set(this->x,this->y);
HXLINE( 829)		Bool _hx_tmp2 = this->pixelPerfectPosition;
HXDLIN( 829)		if (_hx_tmp2) {
HXLINE( 831)			Int _hx_tmp3 = ::Math_obj::floor(point->x);
HXDLIN( 831)			point->set_x(_hx_tmp3);
HXDLIN( 831)			Int _hx_tmp4 = ::Math_obj::floor(point->y);
HXDLIN( 831)			point->set_y(_hx_tmp4);
            		}
HXLINE( 834)		Float X = (Camera->scroll->x * this->scrollFactor->x);
HXDLIN( 834)		Float Y = (Camera->scroll->y * this->scrollFactor->y);
HXDLIN( 834)		{
HXLINE( 834)			HX_VARI(  ::flixel::math::FlxPoint,_g) = point;
HXDLIN( 834)			Float _hx_tmp5 = (_g->x - X);
HXDLIN( 834)			_g->set_x(_hx_tmp5);
            		}
HXDLIN( 834)		{
HXLINE( 834)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = point;
HXDLIN( 834)			Float _hx_tmp6 = (_g1->y - Y);
HXDLIN( 834)			_g1->set_y(_hx_tmp6);
            		}
HXDLIN( 834)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,getScreenPosition,return )

 ::flixel::math::FlxPoint FlxObject_obj::getPosition( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.FlxObject","getPosition",0x1bf09890,"flixel.FlxObject.getPosition","flixel/FlxObject.hx",838,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 839)		Bool _hx_tmp = hx::IsNull( point );
HXDLIN( 839)		if (_hx_tmp) {
HXLINE( 840)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 840)			point1->_inPool = false;
HXDLIN( 840)			point = point1;
            		}
HXLINE( 841)		return point->set(this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getPosition,return )

 ::flixel::math::FlxPoint FlxObject_obj::getMidpoint( ::flixel::math::FlxPoint point){
            	HX_STACK_FRAME("flixel.FlxObject","getMidpoint",0x7bfe0daf,"flixel.FlxObject.getMidpoint","flixel/FlxObject.hx",851,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 852)		Bool _hx_tmp = hx::IsNull( point );
HXDLIN( 852)		if (_hx_tmp) {
HXLINE( 854)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 854)			point1->_inPool = false;
HXDLIN( 854)			point = point1;
            		}
HXLINE( 856)		Float _hx_tmp1 = this->x;
HXDLIN( 856)		Float _hx_tmp2 = this->get_width();
HXDLIN( 856)		Float _hx_tmp3 = (_hx_tmp1 + (_hx_tmp2 * ((Float)0.5)));
HXDLIN( 856)		Float _hx_tmp4 = this->y;
HXDLIN( 856)		Float _hx_tmp5 = this->get_height();
HXDLIN( 856)		return point->set(_hx_tmp3,(_hx_tmp4 + (_hx_tmp5 * ((Float)0.5))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getMidpoint,return )

 ::flixel::math::FlxRect FlxObject_obj::getHitbox( ::flixel::math::FlxRect rect){
            	HX_STACK_FRAME("flixel.FlxObject","getHitbox",0x5f284dbf,"flixel.FlxObject.getHitbox","flixel/FlxObject.hx",860,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 861)		Bool _hx_tmp = hx::IsNull( rect );
HXDLIN( 861)		if (_hx_tmp) {
HXLINE( 862)			Float X = (int)0;
HXDLIN( 862)			Float Y = (int)0;
HXDLIN( 862)			Float Width = (int)0;
HXDLIN( 862)			Float Height = (int)0;
HXDLIN( 862)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 862)			_this->x = X;
HXDLIN( 862)			_this->y = Y;
HXDLIN( 862)			_this->width = Width;
HXDLIN( 862)			_this->height = Height;
HXDLIN( 862)			_this->_inPool = false;
HXDLIN( 862)			rect = _this;
            		}
HXLINE( 863)		Float X1 = this->x;
HXDLIN( 863)		Float Y1 = this->y;
HXDLIN( 863)		Float Width1 = this->get_width();
HXDLIN( 863)		Float Height1 = this->get_height();
HXDLIN( 863)		rect->x = X1;
HXDLIN( 863)		rect->y = Y1;
HXDLIN( 863)		rect->width = Width1;
HXDLIN( 863)		rect->height = Height1;
HXDLIN( 863)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getHitbox,return )

void FlxObject_obj::reset(Float X,Float Y){
            	HX_STACK_FRAME("flixel.FlxObject","reset",0x1cbd9440,"flixel.FlxObject.reset","flixel/FlxObject.hx",874,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 875)		this->touching = (int)0;
HXLINE( 876)		this->wasTouching = (int)0;
HXLINE( 877)		this->setPosition(X,Y);
HXLINE( 878)		this->last->set(this->x,this->y);
HXLINE( 879)		this->velocity->set(null(),null());
HXLINE( 880)		this->revive();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,reset,(void))

Bool FlxObject_obj::isOnScreen( ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.FlxObject","isOnScreen",0x4aab7fe4,"flixel.FlxObject.isOnScreen","flixel/FlxObject.hx",890,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 891)		Bool _hx_tmp = hx::IsNull( Camera );
HXDLIN( 891)		if (_hx_tmp) {
HXLINE( 893)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 895)		this->getScreenPosition(this->_point,Camera);
HXLINE( 896)		Bool _hx_tmp1;
HXDLIN( 896)		Bool _hx_tmp2;
HXDLIN( 896)		Float _hx_tmp3 = this->_point->x;
HXDLIN( 896)		Float _hx_tmp4 = this->get_width();
HXDLIN( 896)		if (((_hx_tmp3 + _hx_tmp4) > (int)0)) {
HXLINE( 896)			_hx_tmp2 = (this->_point->x < Camera->width);
            		}
            		else {
HXLINE( 896)			_hx_tmp2 = false;
            		}
HXDLIN( 896)		if (_hx_tmp2) {
HXLINE( 896)			Float _hx_tmp5 = this->_point->y;
HXDLIN( 896)			Float _hx_tmp6 = this->get_height();
HXDLIN( 896)			_hx_tmp1 = ((_hx_tmp5 + _hx_tmp6) > (int)0);
            		}
            		else {
HXLINE( 896)			_hx_tmp1 = false;
            		}
HXDLIN( 896)		if (_hx_tmp1) {
HXLINE( 896)			return (this->_point->y < Camera->height);
            		}
            		else {
HXLINE( 896)			return false;
            		}
HXDLIN( 896)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,isOnScreen,return )

Bool FlxObject_obj::isPixelPerfectRender( ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.FlxObject","isPixelPerfectRender",0xc4c93916,"flixel.FlxObject.isPixelPerfectRender","flixel/FlxObject.hx",903,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 904)		Bool _hx_tmp = hx::IsNull( Camera );
HXDLIN( 904)		if (_hx_tmp) {
HXLINE( 906)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 909)		Bool _hx_tmp1 = hx::IsNull( this->pixelPerfectRender );
HXDLIN( 909)		if (_hx_tmp1) {
HXLINE( 909)			return Camera->pixelPerfectRender;
            		}
            		else {
HXLINE( 909)			return this->pixelPerfectRender;
            		}
HXDLIN( 909)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,isPixelPerfectRender,return )

Bool FlxObject_obj::isTouching(Int Direction){
            	HX_STACK_FRAME("flixel.FlxObject","isTouching",0x23c6647c,"flixel.FlxObject.isTouching","flixel/FlxObject.hx",921,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Direction,"Direction")
HXLINE( 921)		return (((int)this->touching & (int)Direction) > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,isTouching,return )

Bool FlxObject_obj::justTouched(Int Direction){
            	HX_STACK_FRAME("flixel.FlxObject","justTouched",0xbcba8e43,"flixel.FlxObject.justTouched","flixel/FlxObject.hx",933,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Direction,"Direction")
HXLINE( 933)		if ((((int)this->touching & (int)Direction) > (int)0)) {
HXLINE( 933)			return (((int)this->wasTouching & (int)Direction) <= (int)0);
            		}
            		else {
HXLINE( 933)			return false;
            		}
HXDLIN( 933)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,justTouched,return )

void FlxObject_obj::hurt(Float Damage){
            	HX_STACK_FRAME("flixel.FlxObject","hurt",0x21beeabe,"flixel.FlxObject.hurt","flixel/FlxObject.hx",943,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Damage,"Damage")
HXLINE( 944)		this->health = (this->health - Damage);
HXLINE( 945)		Bool _hx_tmp = (this->health <= (int)0);
HXDLIN( 945)		if (_hx_tmp) {
HXLINE( 947)			this->kill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,hurt,(void))

 ::flixel::FlxObject FlxObject_obj::screenCenter(::hx::EnumBase axes){
            	HX_STACK_FRAME("flixel.FlxObject","screenCenter",0x59e58410,"flixel.FlxObject.screenCenter","flixel/FlxObject.hx",958,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(axes,"axes")
HXLINE( 959)		Bool _hx_tmp = hx::IsNull( axes );
HXDLIN( 959)		if (_hx_tmp) {
HXLINE( 960)			axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            		}
HXLINE( 962)		if (hx::IsNotEq( axes,::flixel::util::FlxAxes_obj::Y_dyn() )) {
HXLINE( 963)			Float _hx_tmp1 = ((Float)::flixel::FlxG_obj::width / (Float)(int)2);
HXDLIN( 963)			Float _hx_tmp2 = this->get_width();
HXDLIN( 963)			this->set_x((_hx_tmp1 - ((Float)_hx_tmp2 / (Float)(int)2)));
            		}
HXLINE( 964)		if (hx::IsNotEq( axes,::flixel::util::FlxAxes_obj::X_dyn() )) {
HXLINE( 965)			Float _hx_tmp3 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN( 965)			Float _hx_tmp4 = this->get_height();
HXDLIN( 965)			this->set_y((_hx_tmp3 - ((Float)_hx_tmp4 / (Float)(int)2)));
            		}
HXLINE( 967)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,screenCenter,return )

void FlxObject_obj::setPosition(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.FlxObject","setPosition",0x265d9f9c,"flixel.FlxObject.setPosition","flixel/FlxObject.hx",978,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 979)		this->set_x(X);
HXLINE( 980)		this->set_y(Y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,setPosition,(void))

void FlxObject_obj::setSize(Float Width,Float Height){
            	HX_STACK_FRAME("flixel.FlxObject","setSize",0xa7896a34,"flixel.FlxObject.setSize","flixel/FlxObject.hx",990,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE( 991)		this->set_width(Width);
HXLINE( 992)		this->set_height(Height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,setSize,(void))

 ::flixel::math::FlxRect FlxObject_obj::getBoundingBox( ::flixel::FlxCamera camera){
            	HX_STACK_FRAME("flixel.FlxObject","getBoundingBox",0x58364780,"flixel.FlxObject.getBoundingBox","flixel/FlxObject.hx",1071,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(camera,"camera")
HXLINE(1072)		this->getScreenPosition(this->_point,camera);
HXLINE(1073)		{
HXLINE(1073)			HX_VARI(  ::flixel::math::FlxRect,_this) = this->_rect;
HXDLIN(1073)			Float X = this->_point->x;
HXDLIN(1073)			Float Y = this->_point->y;
HXDLIN(1073)			Float Width = this->get_width();
HXDLIN(1073)			Float Height = this->get_height();
HXDLIN(1073)			_this->x = X;
HXDLIN(1073)			_this->y = Y;
HXDLIN(1073)			_this->width = Width;
HXDLIN(1073)			_this->height = Height;
            		}
HXLINE(1075)		Bool _hx_tmp = this->isPixelPerfectRender(camera);
HXDLIN(1075)		if (_hx_tmp) {
HXLINE(1077)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->_rect;
HXDLIN(1077)			_this1->x = ::Math_obj::floor(_this1->x);
HXDLIN(1077)			_this1->y = ::Math_obj::floor(_this1->y);
HXDLIN(1077)			_this1->width = ::Math_obj::floor(_this1->width);
HXDLIN(1077)			_this1->height = ::Math_obj::floor(_this1->height);
            		}
HXLINE(1080)		return this->_rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getBoundingBox,return )

::String FlxObject_obj::toString(){
            	HX_STACK_FRAME("flixel.FlxObject","toString",0x9e14e2db,"flixel.FlxObject.toString","flixel/FlxObject.hx",1088,0xf0fe0d80)
            	HX_STACK_THIS(this)
HXLINE(1089)		 ::Dynamic value = this->x;
HXDLIN(1089)		HX_VARI(  ::flixel::util::LabelValuePair,_this) = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN(1089)		_this->label = HX_("x",78,00,00,00);
HXDLIN(1089)		_this->value = value;
HXLINE(1090)		 ::Dynamic value1 = this->y;
HXDLIN(1090)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this1,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN(1090)		_this1->label = HX_("y",79,00,00,00);
HXDLIN(1090)		_this1->value = value1;
HXLINE(1091)		 ::Dynamic value2 = this->get_width();
HXDLIN(1091)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this2,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN(1091)		_this2->label = HX_("w",77,00,00,00);
HXDLIN(1091)		_this2->value = value2;
HXLINE(1092)		 ::Dynamic value3 = this->get_height();
HXDLIN(1092)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this3,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN(1092)		_this3->label = HX_("h",68,00,00,00);
HXDLIN(1092)		_this3->value = value3;
HXLINE(1093)		 ::Dynamic value4 = this->visible;
HXDLIN(1093)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this4,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN(1093)		_this4->label = HX_("visible",72,78,24,a3);
HXDLIN(1093)		_this4->value = value4;
HXLINE(1094)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this5,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN(1094)		_this5->label = HX_("velocity",1d,02,fe,1e);
HXDLIN(1094)		_this5->value = this->velocity;
HXLINE(1088)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(6)->init(0,_this)->init(1,_this1)->init(2,_this2)->init(3,_this3)->init(4,_this4)->init(5,_this5));
            	}


Float FlxObject_obj::set_x(Float NewX){
            	HX_STACK_FRAME("flixel.FlxObject","set_x",0xb024e5cc,"flixel.FlxObject.set_x","flixel/FlxObject.hx",1099,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(NewX,"NewX")
HXLINE(1099)		return (this->x = NewX);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_x,return )

Float FlxObject_obj::set_y(Float NewY){
            	HX_STACK_FRAME("flixel.FlxObject","set_y",0xb024e5cd,"flixel.FlxObject.set_y","flixel/FlxObject.hx",1104,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(NewY,"NewY")
HXLINE(1104)		return (this->y = NewY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_y,return )

Float FlxObject_obj::set_width(Float Width){
            	HX_STACK_FRAME("flixel.FlxObject","set_width",0x7d06d55a,"flixel.FlxObject.set_width","flixel/FlxObject.hx",1117,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
HXLINE(1117)		return (this->width = Width);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_width,return )

Float FlxObject_obj::set_height(Float Height){
            	HX_STACK_FRAME("flixel.FlxObject","set_height",0x9f435213,"flixel.FlxObject.set_height","flixel/FlxObject.hx",1130,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Height,"Height")
HXLINE(1130)		return (this->height = Height);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_height,return )

Float FlxObject_obj::get_width(){
            	HX_STACK_FRAME("flixel.FlxObject","get_width",0x99b5e94e,"flixel.FlxObject.get_width","flixel/FlxObject.hx",1135,0xf0fe0d80)
            	HX_STACK_THIS(this)
HXLINE(1135)		return this->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_width,return )

Float FlxObject_obj::get_height(){
            	HX_STACK_FRAME("flixel.FlxObject","get_height",0x9bc5b39f,"flixel.FlxObject.get_height","flixel/FlxObject.hx",1140,0xf0fe0d80)
            	HX_STACK_THIS(this)
HXLINE(1140)		return this->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_height,return )

Bool FlxObject_obj::get_solid(){
            	HX_STACK_FRAME("flixel.FlxObject","get_solid",0x5018e773,"flixel.FlxObject.get_solid","flixel/FlxObject.hx",1145,0xf0fe0d80)
            	HX_STACK_THIS(this)
HXLINE(1145)		return (((int)this->allowCollisions & (int)(int)4369) > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_solid,return )

Bool FlxObject_obj::set_solid(Bool Solid){
            	HX_STACK_FRAME("flixel.FlxObject","set_solid",0x3369d37f,"flixel.FlxObject.set_solid","flixel/FlxObject.hx",1149,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Solid,"Solid")
HXLINE(1150)		Int _hx_tmp;
HXDLIN(1150)		if (Solid) {
HXLINE(1150)			_hx_tmp = (int)4369;
            		}
            		else {
HXLINE(1150)			_hx_tmp = (int)0;
            		}
HXDLIN(1150)		this->set_allowCollisions(_hx_tmp);
HXLINE(1151)		return Solid;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_solid,return )

Float FlxObject_obj::set_angle(Float Value){
            	HX_STACK_FRAME("flixel.FlxObject","set_angle",0xd5866327,"flixel.FlxObject.set_angle","flixel/FlxObject.hx",1156,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1156)		return (this->angle = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_angle,return )

Bool FlxObject_obj::set_moves(Bool Value){
            	HX_STACK_FRAME("flixel.FlxObject","set_moves",0xbf09eb96,"flixel.FlxObject.set_moves","flixel/FlxObject.hx",1161,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1161)		return (this->moves = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_moves,return )

Bool FlxObject_obj::set_immovable(Bool Value){
            	HX_STACK_FRAME("flixel.FlxObject","set_immovable",0xc5b8805e,"flixel.FlxObject.set_immovable","flixel/FlxObject.hx",1166,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1166)		return (this->immovable = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_immovable,return )

Bool FlxObject_obj::set_pixelPerfectRender(Bool Value){
            	HX_STACK_FRAME("flixel.FlxObject","set_pixelPerfectRender",0x84233609,"flixel.FlxObject.set_pixelPerfectRender","flixel/FlxObject.hx",1171,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1171)		return (this->pixelPerfectRender = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_pixelPerfectRender,return )

Int FlxObject_obj::set_allowCollisions(Int Value){
            	HX_STACK_FRAME("flixel.FlxObject","set_allowCollisions",0x7975d9fe,"flixel.FlxObject.set_allowCollisions","flixel/FlxObject.hx",1176,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1176)		return (this->allowCollisions = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_allowCollisions,return )

 ::flixel::util::FlxPath FlxObject_obj::set_path( ::flixel::util::FlxPath path){
            	HX_STACK_FRAME("flixel.FlxObject","set_path",0xde100cd1,"flixel.FlxObject.set_path","flixel/FlxObject.hx",1180,0xf0fe0d80)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
HXLINE(1181)		if (hx::IsEq( this->path,path )) {
HXLINE(1182)			return path;
            		}
HXLINE(1184)		Bool _hx_tmp = hx::IsNotNull( this->path );
HXDLIN(1184)		if (_hx_tmp) {
HXLINE(1185)			this->path->object = null();
            		}
HXLINE(1187)		Bool _hx_tmp1 = hx::IsNotNull( path );
HXDLIN(1187)		if (_hx_tmp1) {
HXLINE(1188)			path->object = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1189)		return (this->path = path);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_path,return )

Bool FlxObject_obj::defaultPixelPerfectPosition;

Float FlxObject_obj::SEPARATE_BIAS;

Int FlxObject_obj::LEFT;

Int FlxObject_obj::RIGHT;

Int FlxObject_obj::UP;

Int FlxObject_obj::DOWN;

Int FlxObject_obj::NONE;

Int FlxObject_obj::CEILING;

Int FlxObject_obj::FLOOR;

Int FlxObject_obj::WALL;

Int FlxObject_obj::ANY;

 ::flixel::math::FlxRect FlxObject_obj::_firstSeparateFlxRect;

 ::flixel::math::FlxRect FlxObject_obj::_secondSeparateFlxRect;

Bool FlxObject_obj::separate( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACK_FRAME("flixel.FlxObject","separate",0x6cc23192,"flixel.FlxObject.separate","flixel/FlxObject.hx",80,0xf0fe0d80)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE(  81)		HX_VARI( Bool,separatedX) = ::flixel::FlxObject_obj::separateX(Object1,Object2);
HXLINE(  82)		HX_VARI( Bool,separatedY) = ::flixel::FlxObject_obj::separateY(Object1,Object2);
HXLINE(  83)		if (!(separatedX)) {
HXLINE(  83)			return separatedY;
            		}
            		else {
HXLINE(  83)			return true;
            		}
HXDLIN(  83)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separate,return )

Bool FlxObject_obj::updateTouchingFlags( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACK_FRAME("flixel.FlxObject","updateTouchingFlags",0x15a0502c,"flixel.FlxObject.updateTouchingFlags","flixel/FlxObject.hx",95,0xf0fe0d80)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE(  96)		HX_VARI( Bool,touchingX) = ::flixel::FlxObject_obj::updateTouchingFlagsX(Object1,Object2);
HXLINE(  97)		HX_VARI( Bool,touchingY) = ::flixel::FlxObject_obj::updateTouchingFlagsY(Object1,Object2);
HXLINE(  98)		if (!(touchingX)) {
HXLINE(  98)			return touchingY;
            		}
            		else {
HXLINE(  98)			return true;
            		}
HXDLIN(  98)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlags,return )

Float FlxObject_obj::computeOverlapX( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2,hx::Null< Bool >  __o_checkMaxOverlap){
Bool checkMaxOverlap = __o_checkMaxOverlap.Default(true);
            	HX_STACK_FRAME("flixel.FlxObject","computeOverlapX",0x240ec739,"flixel.FlxObject.computeOverlapX","flixel/FlxObject.hx",107,0xf0fe0d80)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
            	HX_STACK_ARG(checkMaxOverlap,"checkMaxOverlap")
HXLINE( 108)		HX_VARI( Float,overlap) = (int)0;
HXLINE( 110)		HX_VARI( Float,obj1delta) = (Object1->x - Object1->last->x);
HXLINE( 111)		HX_VARI( Float,obj2delta) = (Object2->x - Object2->last->x);
HXLINE( 113)		if ((obj1delta != obj2delta)) {
HXLINE( 116)			HX_VAR( Float,obj1deltaAbs);
HXDLIN( 116)			if ((obj1delta > (int)0)) {
HXLINE( 116)				obj1deltaAbs = obj1delta;
            			}
            			else {
HXLINE( 116)				obj1deltaAbs = -(obj1delta);
            			}
HXLINE( 117)			HX_VAR( Float,obj2deltaAbs);
HXDLIN( 117)			if ((obj2delta > (int)0)) {
HXLINE( 117)				obj2deltaAbs = obj2delta;
            			}
            			else {
HXLINE( 117)				obj2deltaAbs = -(obj2delta);
            			}
HXLINE( 119)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::FlxObject_obj::_firstSeparateFlxRect;
HXDLIN( 119)			Float _hx_tmp;
HXDLIN( 119)			if ((obj1delta > (int)0)) {
HXLINE( 119)				_hx_tmp = obj1delta;
            			}
            			else {
HXLINE( 119)				_hx_tmp = (int)0;
            			}
HXDLIN( 119)			Float X = (Object1->x - _hx_tmp);
HXDLIN( 119)			Float Y = Object1->last->y;
HXDLIN( 119)			Float _hx_tmp1 = Object1->get_width();
HXDLIN( 119)			Float Width = (_hx_tmp1 + obj1deltaAbs);
HXDLIN( 119)			Float Height = Object1->get_height();
HXDLIN( 119)			_this->x = X;
HXDLIN( 119)			_this->y = Y;
HXDLIN( 119)			_this->width = Width;
HXDLIN( 119)			_this->height = Height;
HXLINE( 120)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::FlxObject_obj::_secondSeparateFlxRect;
HXDLIN( 120)			Float _hx_tmp2;
HXDLIN( 120)			if ((obj2delta > (int)0)) {
HXLINE( 120)				_hx_tmp2 = obj2delta;
            			}
            			else {
HXLINE( 120)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 120)			Float X1 = (Object2->x - _hx_tmp2);
HXDLIN( 120)			Float Y1 = Object2->last->y;
HXDLIN( 120)			Float _hx_tmp3 = Object2->get_width();
HXDLIN( 120)			Float Width1 = (_hx_tmp3 + obj2deltaAbs);
HXDLIN( 120)			Float Height1 = Object2->get_height();
HXDLIN( 120)			_this1->x = X1;
HXDLIN( 120)			_this1->y = Y1;
HXDLIN( 120)			_this1->width = Width1;
HXDLIN( 120)			_this1->height = Height1;
HXLINE( 122)			Bool _hx_tmp4;
HXDLIN( 122)			Bool _hx_tmp5;
HXDLIN( 122)			Bool _hx_tmp6;
HXDLIN( 122)			if (((_this->x + _this->width) > _this1->x)) {
HXLINE( 122)				_hx_tmp6 = (_this->x < (_this1->x + _this1->width));
            			}
            			else {
HXLINE( 122)				_hx_tmp6 = false;
            			}
HXDLIN( 122)			if (_hx_tmp6) {
HXLINE( 122)				_hx_tmp5 = ((_this->y + _this->height) > _this1->y);
            			}
            			else {
HXLINE( 122)				_hx_tmp5 = false;
            			}
HXDLIN( 122)			if (_hx_tmp5) {
HXLINE( 122)				_hx_tmp4 = (_this->y < (_this1->y + _this1->height));
            			}
            			else {
HXLINE( 122)				_hx_tmp4 = false;
            			}
HXDLIN( 122)			if (_hx_tmp4) {
HXLINE( 124)				HX_VAR( Float,maxOverlap);
HXDLIN( 124)				if (checkMaxOverlap) {
HXLINE( 124)					maxOverlap = ((obj1deltaAbs + obj2deltaAbs) + ::flixel::FlxObject_obj::SEPARATE_BIAS);
            				}
            				else {
HXLINE( 124)					maxOverlap = (int)0;
            				}
HXLINE( 127)				if ((obj1delta > obj2delta)) {
HXLINE( 129)					Float _hx_tmp7 = Object1->x;
HXDLIN( 129)					Float _hx_tmp8 = Object1->get_width();
HXDLIN( 129)					overlap = ((_hx_tmp7 + _hx_tmp8) - Object2->x);
HXLINE( 130)					Bool _hx_tmp9;
HXDLIN( 130)					Bool _hx_tmp10;
HXDLIN( 130)					Bool _hx_tmp11;
HXDLIN( 130)					if (checkMaxOverlap) {
HXLINE( 130)						_hx_tmp11 = (overlap > maxOverlap);
            					}
            					else {
HXLINE( 130)						_hx_tmp11 = false;
            					}
HXDLIN( 130)					if (!(_hx_tmp11)) {
HXLINE( 130)						_hx_tmp10 = (((int)Object1->allowCollisions & (int)(int)16) == (int)0);
            					}
            					else {
HXLINE( 130)						_hx_tmp10 = true;
            					}
HXDLIN( 130)					if (!(_hx_tmp10)) {
HXLINE( 130)						_hx_tmp9 = (((int)Object2->allowCollisions & (int)(int)1) == (int)0);
            					}
            					else {
HXLINE( 130)						_hx_tmp9 = true;
            					}
HXDLIN( 130)					if (_hx_tmp9) {
HXLINE( 132)						overlap = (int)0;
            					}
            					else {
HXLINE( 136)						hx::OrEq(Object1->touching,(int)16);
HXLINE( 137)						hx::OrEq(Object2->touching,(int)1);
            					}
            				}
            				else {
HXLINE( 140)					if ((obj1delta < obj2delta)) {
HXLINE( 142)						Float _hx_tmp12 = Object1->x;
HXDLIN( 142)						Float _hx_tmp13 = Object2->get_width();
HXDLIN( 142)						overlap = ((_hx_tmp12 - _hx_tmp13) - Object2->x);
HXLINE( 143)						Bool _hx_tmp14;
HXDLIN( 143)						Bool _hx_tmp15;
HXDLIN( 143)						Bool _hx_tmp16;
HXDLIN( 143)						if (checkMaxOverlap) {
HXLINE( 143)							_hx_tmp16 = (-(overlap) > maxOverlap);
            						}
            						else {
HXLINE( 143)							_hx_tmp16 = false;
            						}
HXDLIN( 143)						if (!(_hx_tmp16)) {
HXLINE( 143)							_hx_tmp15 = (((int)Object1->allowCollisions & (int)(int)1) == (int)0);
            						}
            						else {
HXLINE( 143)							_hx_tmp15 = true;
            						}
HXDLIN( 143)						if (!(_hx_tmp15)) {
HXLINE( 143)							_hx_tmp14 = (((int)Object2->allowCollisions & (int)(int)16) == (int)0);
            						}
            						else {
HXLINE( 143)							_hx_tmp14 = true;
            						}
HXDLIN( 143)						if (_hx_tmp14) {
HXLINE( 145)							overlap = (int)0;
            						}
            						else {
HXLINE( 149)							hx::OrEq(Object1->touching,(int)1);
HXLINE( 150)							hx::OrEq(Object2->touching,(int)16);
            						}
            					}
            				}
            			}
            		}
HXLINE( 155)		return overlap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,computeOverlapX,return )

Bool FlxObject_obj::separateX( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACK_FRAME("flixel.FlxObject","separateX",0xbd292e86,"flixel.FlxObject.separateX","flixel/FlxObject.hx",166,0xf0fe0d80)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE( 168)		HX_VARI( Bool,obj1immovable) = Object1->immovable;
HXLINE( 169)		HX_VARI( Bool,obj2immovable) = Object2->immovable;
HXLINE( 170)		Bool _hx_tmp;
HXDLIN( 170)		if (obj1immovable) {
HXLINE( 170)			_hx_tmp = obj2immovable;
            		}
            		else {
HXLINE( 170)			_hx_tmp = false;
            		}
HXDLIN( 170)		if (_hx_tmp) {
HXLINE( 172)			return false;
            		}
HXLINE( 176)		Bool _hx_tmp1 = (Object1->flixelType == (int)3);
HXDLIN( 176)		if (_hx_tmp1) {
HXLINE( 179)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object1) )->overlapsWithCallback(Object2,::flixel::FlxObject_obj::separateX_dyn(),null(),null());
            		}
HXLINE( 181)		Bool _hx_tmp2 = (Object2->flixelType == (int)3);
HXDLIN( 181)		if (_hx_tmp2) {
HXLINE( 184)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object2) )->overlapsWithCallback(Object1,::flixel::FlxObject_obj::separateX_dyn(),true,null());
            		}
HXLINE( 187)		HX_VARI( Float,overlap) = ::flixel::FlxObject_obj::computeOverlapX(Object1,Object2,null());
HXLINE( 189)		if ((overlap != (int)0)) {
HXLINE( 191)			HX_VARI( Float,obj1v) = Object1->velocity->x;
HXLINE( 192)			HX_VARI( Float,obj2v) = Object2->velocity->x;
HXLINE( 194)			Bool _hx_tmp3;
HXDLIN( 194)			if (!(obj1immovable)) {
HXLINE( 194)				_hx_tmp3 = !(obj2immovable);
            			}
            			else {
HXLINE( 194)				_hx_tmp3 = false;
            			}
HXDLIN( 194)			if (_hx_tmp3) {
HXLINE( 196)				hx::MultEq(overlap,((Float)0.5));
HXLINE( 197)				Float _hx_tmp4 = (Object1->x - overlap);
HXDLIN( 197)				Object1->set_x(_hx_tmp4);
HXLINE( 198)				{
HXLINE( 198)					Float _hx_tmp5 = (Object2->x + overlap);
HXDLIN( 198)					Object2->set_x(_hx_tmp5);
            				}
HXLINE( 200)				Float _hx_tmp6 = ((Float)((obj2v * obj2v) * Object2->mass) / (Float)Object1->mass);
HXDLIN( 200)				Float _hx_tmp7 = ::Math_obj::sqrt(_hx_tmp6);
HXDLIN( 200)				Int _hx_tmp8;
HXDLIN( 200)				if ((obj2v > (int)0)) {
HXLINE( 200)					_hx_tmp8 = (int)1;
            				}
            				else {
HXLINE( 200)					_hx_tmp8 = (int)-1;
            				}
HXDLIN( 200)				HX_VARI( Float,obj1velocity) = (_hx_tmp7 * _hx_tmp8);
HXLINE( 201)				Float _hx_tmp9 = ((Float)((obj1v * obj1v) * Object1->mass) / (Float)Object2->mass);
HXDLIN( 201)				Float _hx_tmp10 = ::Math_obj::sqrt(_hx_tmp9);
HXDLIN( 201)				Int _hx_tmp11;
HXDLIN( 201)				if ((obj1v > (int)0)) {
HXLINE( 201)					_hx_tmp11 = (int)1;
            				}
            				else {
HXLINE( 201)					_hx_tmp11 = (int)-1;
            				}
HXDLIN( 201)				HX_VARI( Float,obj2velocity) = (_hx_tmp10 * _hx_tmp11);
HXLINE( 202)				HX_VARI( Float,average) = ((obj1velocity + obj2velocity) * ((Float)0.5));
HXLINE( 203)				hx::SubEq(obj1velocity,average);
HXLINE( 204)				hx::SubEq(obj2velocity,average);
HXLINE( 205)				Float _hx_tmp12 = (average + (obj1velocity * Object1->elasticity));
HXDLIN( 205)				Object1->velocity->set_x(_hx_tmp12);
HXLINE( 206)				Float _hx_tmp13 = (average + (obj2velocity * Object2->elasticity));
HXDLIN( 206)				Object2->velocity->set_x(_hx_tmp13);
            			}
            			else {
HXLINE( 208)				if (!(obj1immovable)) {
HXLINE( 210)					Float _hx_tmp14 = (Object1->x - overlap);
HXDLIN( 210)					Object1->set_x(_hx_tmp14);
HXLINE( 211)					Float _hx_tmp15 = (obj2v - (obj1v * Object1->elasticity));
HXDLIN( 211)					Object1->velocity->set_x(_hx_tmp15);
            				}
            				else {
HXLINE( 213)					if (!(obj2immovable)) {
HXLINE( 215)						{
HXLINE( 215)							Float _hx_tmp16 = (Object2->x + overlap);
HXDLIN( 215)							Object2->set_x(_hx_tmp16);
            						}
HXLINE( 216)						Float _hx_tmp17 = (obj1v - (obj2v * Object2->elasticity));
HXDLIN( 216)						Object2->velocity->set_x(_hx_tmp17);
            					}
            				}
            			}
HXLINE( 218)			return true;
            		}
HXLINE( 221)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separateX,return )

Bool FlxObject_obj::updateTouchingFlagsX( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACK_FRAME("flixel.FlxObject","updateTouchingFlagsX",0xd6a5d6ac,"flixel.FlxObject.updateTouchingFlagsX","flixel/FlxObject.hx",232,0xf0fe0d80)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE( 234)		Bool _hx_tmp = (Object1->flixelType == (int)3);
HXDLIN( 234)		if (_hx_tmp) {
HXLINE( 237)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object1) )->overlapsWithCallback(Object2,::flixel::FlxObject_obj::updateTouchingFlagsX_dyn(),null(),null());
            		}
HXLINE( 239)		Bool _hx_tmp1 = (Object2->flixelType == (int)3);
HXDLIN( 239)		if (_hx_tmp1) {
HXLINE( 242)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object2) )->overlapsWithCallback(Object1,::flixel::FlxObject_obj::updateTouchingFlagsX_dyn(),true,null());
            		}
HXLINE( 245)		Float _hx_tmp2 = ::flixel::FlxObject_obj::computeOverlapX(Object1,Object2,false);
HXDLIN( 245)		return (_hx_tmp2 != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlagsX,return )

Float FlxObject_obj::computeOverlapY( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2,hx::Null< Bool >  __o_checkMaxOverlap){
Bool checkMaxOverlap = __o_checkMaxOverlap.Default(true);
            	HX_STACK_FRAME("flixel.FlxObject","computeOverlapY",0x240ec73a,"flixel.FlxObject.computeOverlapY","flixel/FlxObject.hx",254,0xf0fe0d80)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
            	HX_STACK_ARG(checkMaxOverlap,"checkMaxOverlap")
HXLINE( 255)		HX_VARI( Float,overlap) = (int)0;
HXLINE( 257)		HX_VARI( Float,obj1delta) = (Object1->y - Object1->last->y);
HXLINE( 258)		HX_VARI( Float,obj2delta) = (Object2->y - Object2->last->y);
HXLINE( 260)		if ((obj1delta != obj2delta)) {
HXLINE( 263)			HX_VAR( Float,obj1deltaAbs);
HXDLIN( 263)			if ((obj1delta > (int)0)) {
HXLINE( 263)				obj1deltaAbs = obj1delta;
            			}
            			else {
HXLINE( 263)				obj1deltaAbs = -(obj1delta);
            			}
HXLINE( 264)			HX_VAR( Float,obj2deltaAbs);
HXDLIN( 264)			if ((obj2delta > (int)0)) {
HXLINE( 264)				obj2deltaAbs = obj2delta;
            			}
            			else {
HXLINE( 264)				obj2deltaAbs = -(obj2delta);
            			}
HXLINE( 266)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::FlxObject_obj::_firstSeparateFlxRect;
HXDLIN( 266)			Float X = Object1->x;
HXDLIN( 266)			Float _hx_tmp;
HXDLIN( 266)			if ((obj1delta > (int)0)) {
HXLINE( 266)				_hx_tmp = obj1delta;
            			}
            			else {
HXLINE( 266)				_hx_tmp = (int)0;
            			}
HXDLIN( 266)			Float Y = (Object1->y - _hx_tmp);
HXDLIN( 266)			Float Width = Object1->get_width();
HXDLIN( 266)			Float _hx_tmp1 = Object1->get_height();
HXDLIN( 266)			Float Height = (_hx_tmp1 + obj1deltaAbs);
HXDLIN( 266)			_this->x = X;
HXDLIN( 266)			_this->y = Y;
HXDLIN( 266)			_this->width = Width;
HXDLIN( 266)			_this->height = Height;
HXLINE( 267)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::FlxObject_obj::_secondSeparateFlxRect;
HXDLIN( 267)			Float X1 = Object2->x;
HXDLIN( 267)			Float _hx_tmp2;
HXDLIN( 267)			if ((obj2delta > (int)0)) {
HXLINE( 267)				_hx_tmp2 = obj2delta;
            			}
            			else {
HXLINE( 267)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 267)			Float Y1 = (Object2->y - _hx_tmp2);
HXDLIN( 267)			Float Width1 = Object2->get_width();
HXDLIN( 267)			Float _hx_tmp3 = Object2->get_height();
HXDLIN( 267)			Float Height1 = (_hx_tmp3 + obj2deltaAbs);
HXDLIN( 267)			_this1->x = X1;
HXDLIN( 267)			_this1->y = Y1;
HXDLIN( 267)			_this1->width = Width1;
HXDLIN( 267)			_this1->height = Height1;
HXLINE( 269)			Bool _hx_tmp4;
HXDLIN( 269)			Bool _hx_tmp5;
HXDLIN( 269)			Bool _hx_tmp6;
HXDLIN( 269)			if (((_this->x + _this->width) > _this1->x)) {
HXLINE( 269)				_hx_tmp6 = (_this->x < (_this1->x + _this1->width));
            			}
            			else {
HXLINE( 269)				_hx_tmp6 = false;
            			}
HXDLIN( 269)			if (_hx_tmp6) {
HXLINE( 269)				_hx_tmp5 = ((_this->y + _this->height) > _this1->y);
            			}
            			else {
HXLINE( 269)				_hx_tmp5 = false;
            			}
HXDLIN( 269)			if (_hx_tmp5) {
HXLINE( 269)				_hx_tmp4 = (_this->y < (_this1->y + _this1->height));
            			}
            			else {
HXLINE( 269)				_hx_tmp4 = false;
            			}
HXDLIN( 269)			if (_hx_tmp4) {
HXLINE( 271)				HX_VAR( Float,maxOverlap);
HXDLIN( 271)				if (checkMaxOverlap) {
HXLINE( 271)					maxOverlap = ((obj1deltaAbs + obj2deltaAbs) + ::flixel::FlxObject_obj::SEPARATE_BIAS);
            				}
            				else {
HXLINE( 271)					maxOverlap = (int)0;
            				}
HXLINE( 274)				if ((obj1delta > obj2delta)) {
HXLINE( 276)					Float _hx_tmp7 = Object1->y;
HXDLIN( 276)					Float _hx_tmp8 = Object1->get_height();
HXDLIN( 276)					overlap = ((_hx_tmp7 + _hx_tmp8) - Object2->y);
HXLINE( 277)					Bool _hx_tmp9;
HXDLIN( 277)					Bool _hx_tmp10;
HXDLIN( 277)					Bool _hx_tmp11;
HXDLIN( 277)					if (checkMaxOverlap) {
HXLINE( 277)						_hx_tmp11 = (overlap > maxOverlap);
            					}
            					else {
HXLINE( 277)						_hx_tmp11 = false;
            					}
HXDLIN( 277)					if (!(_hx_tmp11)) {
HXLINE( 277)						_hx_tmp10 = (((int)Object1->allowCollisions & (int)(int)4096) == (int)0);
            					}
            					else {
HXLINE( 277)						_hx_tmp10 = true;
            					}
HXDLIN( 277)					if (!(_hx_tmp10)) {
HXLINE( 277)						_hx_tmp9 = (((int)Object2->allowCollisions & (int)(int)256) == (int)0);
            					}
            					else {
HXLINE( 277)						_hx_tmp9 = true;
            					}
HXDLIN( 277)					if (_hx_tmp9) {
HXLINE( 279)						overlap = (int)0;
            					}
            					else {
HXLINE( 283)						hx::OrEq(Object1->touching,(int)4096);
HXLINE( 284)						hx::OrEq(Object2->touching,(int)256);
            					}
            				}
            				else {
HXLINE( 287)					if ((obj1delta < obj2delta)) {
HXLINE( 289)						Float _hx_tmp12 = Object1->y;
HXDLIN( 289)						Float _hx_tmp13 = Object2->get_height();
HXDLIN( 289)						overlap = ((_hx_tmp12 - _hx_tmp13) - Object2->y);
HXLINE( 290)						Bool _hx_tmp14;
HXDLIN( 290)						Bool _hx_tmp15;
HXDLIN( 290)						Bool _hx_tmp16;
HXDLIN( 290)						if (checkMaxOverlap) {
HXLINE( 290)							_hx_tmp16 = (-(overlap) > maxOverlap);
            						}
            						else {
HXLINE( 290)							_hx_tmp16 = false;
            						}
HXDLIN( 290)						if (!(_hx_tmp16)) {
HXLINE( 290)							_hx_tmp15 = (((int)Object1->allowCollisions & (int)(int)256) == (int)0);
            						}
            						else {
HXLINE( 290)							_hx_tmp15 = true;
            						}
HXDLIN( 290)						if (!(_hx_tmp15)) {
HXLINE( 290)							_hx_tmp14 = (((int)Object2->allowCollisions & (int)(int)4096) == (int)0);
            						}
            						else {
HXLINE( 290)							_hx_tmp14 = true;
            						}
HXDLIN( 290)						if (_hx_tmp14) {
HXLINE( 292)							overlap = (int)0;
            						}
            						else {
HXLINE( 296)							hx::OrEq(Object1->touching,(int)256);
HXLINE( 297)							hx::OrEq(Object2->touching,(int)4096);
            						}
            					}
            				}
            			}
            		}
HXLINE( 302)		return overlap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,computeOverlapY,return )

Bool FlxObject_obj::separateY( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACK_FRAME("flixel.FlxObject","separateY",0xbd292e87,"flixel.FlxObject.separateY","flixel/FlxObject.hx",313,0xf0fe0d80)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE( 315)		HX_VARI( Bool,obj1immovable) = Object1->immovable;
HXLINE( 316)		HX_VARI( Bool,obj2immovable) = Object2->immovable;
HXLINE( 317)		Bool _hx_tmp;
HXDLIN( 317)		if (obj1immovable) {
HXLINE( 317)			_hx_tmp = obj2immovable;
            		}
            		else {
HXLINE( 317)			_hx_tmp = false;
            		}
HXDLIN( 317)		if (_hx_tmp) {
HXLINE( 319)			return false;
            		}
HXLINE( 323)		Bool _hx_tmp1 = (Object1->flixelType == (int)3);
HXDLIN( 323)		if (_hx_tmp1) {
HXLINE( 326)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object1) )->overlapsWithCallback(Object2,::flixel::FlxObject_obj::separateY_dyn(),null(),null());
            		}
HXLINE( 328)		Bool _hx_tmp2 = (Object2->flixelType == (int)3);
HXDLIN( 328)		if (_hx_tmp2) {
HXLINE( 331)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object2) )->overlapsWithCallback(Object1,::flixel::FlxObject_obj::separateY_dyn(),true,null());
            		}
HXLINE( 334)		HX_VARI( Float,overlap) = ::flixel::FlxObject_obj::computeOverlapY(Object1,Object2,null());
HXLINE( 336)		if ((overlap != (int)0)) {
HXLINE( 338)			HX_VARI( Float,obj1delta) = (Object1->y - Object1->last->y);
HXLINE( 339)			HX_VARI( Float,obj2delta) = (Object2->y - Object2->last->y);
HXLINE( 340)			HX_VARI( Float,obj1v) = Object1->velocity->y;
HXLINE( 341)			HX_VARI( Float,obj2v) = Object2->velocity->y;
HXLINE( 343)			Bool _hx_tmp3;
HXDLIN( 343)			if (!(obj1immovable)) {
HXLINE( 343)				_hx_tmp3 = !(obj2immovable);
            			}
            			else {
HXLINE( 343)				_hx_tmp3 = false;
            			}
HXDLIN( 343)			if (_hx_tmp3) {
HXLINE( 345)				hx::MultEq(overlap,((Float)0.5));
HXLINE( 346)				Float _hx_tmp4 = (Object1->y - overlap);
HXDLIN( 346)				Object1->set_y(_hx_tmp4);
HXLINE( 347)				{
HXLINE( 347)					Float _hx_tmp5 = (Object2->y + overlap);
HXDLIN( 347)					Object2->set_y(_hx_tmp5);
            				}
HXLINE( 349)				Float _hx_tmp6 = ((Float)((obj2v * obj2v) * Object2->mass) / (Float)Object1->mass);
HXDLIN( 349)				Float _hx_tmp7 = ::Math_obj::sqrt(_hx_tmp6);
HXDLIN( 349)				Int _hx_tmp8;
HXDLIN( 349)				if ((obj2v > (int)0)) {
HXLINE( 349)					_hx_tmp8 = (int)1;
            				}
            				else {
HXLINE( 349)					_hx_tmp8 = (int)-1;
            				}
HXDLIN( 349)				HX_VARI( Float,obj1velocity) = (_hx_tmp7 * _hx_tmp8);
HXLINE( 350)				Float _hx_tmp9 = ((Float)((obj1v * obj1v) * Object1->mass) / (Float)Object2->mass);
HXDLIN( 350)				Float _hx_tmp10 = ::Math_obj::sqrt(_hx_tmp9);
HXDLIN( 350)				Int _hx_tmp11;
HXDLIN( 350)				if ((obj1v > (int)0)) {
HXLINE( 350)					_hx_tmp11 = (int)1;
            				}
            				else {
HXLINE( 350)					_hx_tmp11 = (int)-1;
            				}
HXDLIN( 350)				HX_VARI( Float,obj2velocity) = (_hx_tmp10 * _hx_tmp11);
HXLINE( 351)				HX_VARI( Float,average) = ((obj1velocity + obj2velocity) * ((Float)0.5));
HXLINE( 352)				hx::SubEq(obj1velocity,average);
HXLINE( 353)				hx::SubEq(obj2velocity,average);
HXLINE( 354)				Float _hx_tmp12 = (average + (obj1velocity * Object1->elasticity));
HXDLIN( 354)				Object1->velocity->set_y(_hx_tmp12);
HXLINE( 355)				Float _hx_tmp13 = (average + (obj2velocity * Object2->elasticity));
HXDLIN( 355)				Object2->velocity->set_y(_hx_tmp13);
            			}
            			else {
HXLINE( 357)				if (!(obj1immovable)) {
HXLINE( 359)					Float _hx_tmp14 = (Object1->y - overlap);
HXDLIN( 359)					Object1->set_y(_hx_tmp14);
HXLINE( 360)					Float _hx_tmp15 = (obj2v - (obj1v * Object1->elasticity));
HXDLIN( 360)					Object1->velocity->set_y(_hx_tmp15);
HXLINE( 362)					Bool _hx_tmp16;
HXDLIN( 362)					Bool _hx_tmp17;
HXDLIN( 362)					Bool _hx_tmp18;
HXDLIN( 362)					if (Object1->collisonXDrag) {
HXLINE( 362)						_hx_tmp18 = Object2->active;
            					}
            					else {
HXLINE( 362)						_hx_tmp18 = false;
            					}
HXDLIN( 362)					if (_hx_tmp18) {
HXLINE( 362)						_hx_tmp17 = Object2->moves;
            					}
            					else {
HXLINE( 362)						_hx_tmp17 = false;
            					}
HXDLIN( 362)					if (_hx_tmp17) {
HXLINE( 362)						_hx_tmp16 = (obj1delta > obj2delta);
            					}
            					else {
HXLINE( 362)						_hx_tmp16 = false;
            					}
HXDLIN( 362)					if (_hx_tmp16) {
HXLINE( 364)						Float _hx_tmp19 = (Object1->x + (Object2->x - Object2->last->x));
HXDLIN( 364)						Object1->set_x(_hx_tmp19);
            					}
            				}
            				else {
HXLINE( 367)					if (!(obj2immovable)) {
HXLINE( 369)						{
HXLINE( 369)							Float _hx_tmp20 = (Object2->y + overlap);
HXDLIN( 369)							Object2->set_y(_hx_tmp20);
            						}
HXLINE( 370)						Float _hx_tmp21 = (obj1v - (obj2v * Object2->elasticity));
HXDLIN( 370)						Object2->velocity->set_y(_hx_tmp21);
HXLINE( 372)						Bool _hx_tmp22;
HXDLIN( 372)						Bool _hx_tmp23;
HXDLIN( 372)						Bool _hx_tmp24;
HXDLIN( 372)						if (Object2->collisonXDrag) {
HXLINE( 372)							_hx_tmp24 = Object1->active;
            						}
            						else {
HXLINE( 372)							_hx_tmp24 = false;
            						}
HXDLIN( 372)						if (_hx_tmp24) {
HXLINE( 372)							_hx_tmp23 = Object1->moves;
            						}
            						else {
HXLINE( 372)							_hx_tmp23 = false;
            						}
HXDLIN( 372)						if (_hx_tmp23) {
HXLINE( 372)							_hx_tmp22 = (obj1delta < obj2delta);
            						}
            						else {
HXLINE( 372)							_hx_tmp22 = false;
            						}
HXDLIN( 372)						if (_hx_tmp22) {
HXLINE( 374)							Float _hx_tmp25 = (Object2->x + (Object1->x - Object1->last->x));
HXDLIN( 374)							Object2->set_x(_hx_tmp25);
            						}
            					}
            				}
            			}
HXLINE( 377)			return true;
            		}
HXLINE( 380)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separateY,return )

Bool FlxObject_obj::updateTouchingFlagsY( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACK_FRAME("flixel.FlxObject","updateTouchingFlagsY",0xd6a5d6ad,"flixel.FlxObject.updateTouchingFlagsY","flixel/FlxObject.hx",391,0xf0fe0d80)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE( 393)		Bool _hx_tmp = (Object1->flixelType == (int)3);
HXDLIN( 393)		if (_hx_tmp) {
HXLINE( 396)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object1) )->overlapsWithCallback(Object2,::flixel::FlxObject_obj::updateTouchingFlagsY_dyn(),null(),null());
            		}
HXLINE( 398)		Bool _hx_tmp1 = (Object2->flixelType == (int)3);
HXDLIN( 398)		if (_hx_tmp1) {
HXLINE( 401)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object2) )->overlapsWithCallback(Object1,::flixel::FlxObject_obj::updateTouchingFlagsY_dyn(),true,null());
            		}
HXLINE( 404)		Float _hx_tmp2 = ::flixel::FlxObject_obj::computeOverlapY(Object1,Object2,false);
HXDLIN( 404)		return (_hx_tmp2 != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlagsY,return )


FlxObject_obj::FlxObject_obj()
{
}

void FlxObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxObject);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_MARK_MEMBER_NAME(pixelPerfectPosition,"pixelPerfectPosition");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(moves,"moves");
	HX_MARK_MEMBER_NAME(immovable,"immovable");
	HX_MARK_MEMBER_NAME(scrollFactor,"scrollFactor");
	HX_MARK_MEMBER_NAME(velocity,"velocity");
	HX_MARK_MEMBER_NAME(acceleration,"acceleration");
	HX_MARK_MEMBER_NAME(drag,"drag");
	HX_MARK_MEMBER_NAME(maxVelocity,"maxVelocity");
	HX_MARK_MEMBER_NAME(last,"last");
	HX_MARK_MEMBER_NAME(mass,"mass");
	HX_MARK_MEMBER_NAME(elasticity,"elasticity");
	HX_MARK_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_MARK_MEMBER_NAME(angularAcceleration,"angularAcceleration");
	HX_MARK_MEMBER_NAME(angularDrag,"angularDrag");
	HX_MARK_MEMBER_NAME(maxAngular,"maxAngular");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(touching,"touching");
	HX_MARK_MEMBER_NAME(wasTouching,"wasTouching");
	HX_MARK_MEMBER_NAME(allowCollisions,"allowCollisions");
	HX_MARK_MEMBER_NAME(collisonXDrag,"collisonXDrag");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(_rect,"_rect");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_VISIT_MEMBER_NAME(pixelPerfectPosition,"pixelPerfectPosition");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(moves,"moves");
	HX_VISIT_MEMBER_NAME(immovable,"immovable");
	HX_VISIT_MEMBER_NAME(scrollFactor,"scrollFactor");
	HX_VISIT_MEMBER_NAME(velocity,"velocity");
	HX_VISIT_MEMBER_NAME(acceleration,"acceleration");
	HX_VISIT_MEMBER_NAME(drag,"drag");
	HX_VISIT_MEMBER_NAME(maxVelocity,"maxVelocity");
	HX_VISIT_MEMBER_NAME(last,"last");
	HX_VISIT_MEMBER_NAME(mass,"mass");
	HX_VISIT_MEMBER_NAME(elasticity,"elasticity");
	HX_VISIT_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_VISIT_MEMBER_NAME(angularAcceleration,"angularAcceleration");
	HX_VISIT_MEMBER_NAME(angularDrag,"angularDrag");
	HX_VISIT_MEMBER_NAME(maxAngular,"maxAngular");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(touching,"touching");
	HX_VISIT_MEMBER_NAME(wasTouching,"wasTouching");
	HX_VISIT_MEMBER_NAME(allowCollisions,"allowCollisions");
	HX_VISIT_MEMBER_NAME(collisonXDrag,"collisonXDrag");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(_rect,"_rect");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { return hx::Val( drag); }
		if (HX_FIELD_EQ(inName,"last") ) { return hx::Val( last); }
		if (HX_FIELD_EQ(inName,"mass") ) { return hx::Val( mass); }
		if (HX_FIELD_EQ(inName,"path") ) { return hx::Val( path); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		if (HX_FIELD_EQ(inName,"hurt") ) { return hx::Val( hurt_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( inCallProp == hx::paccAlways ? get_width() : width); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"moves") ) { return hx::Val( moves); }
		if (HX_FIELD_EQ(inName,"solid") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_solid()); }
		if (HX_FIELD_EQ(inName,"_rect") ) { return hx::Val( _rect); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( inCallProp == hx::paccAlways ? get_height() : height); }
		if (HX_FIELD_EQ(inName,"health") ) { return hx::Val( health); }
		if (HX_FIELD_EQ(inName,"_point") ) { return hx::Val( _point); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"setSize") ) { return hx::Val( setSize_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"velocity") ) { return hx::Val( velocity); }
		if (HX_FIELD_EQ(inName,"touching") ) { return hx::Val( touching); }
		if (HX_FIELD_EQ(inName,"initVars") ) { return hx::Val( initVars_dyn()); }
		if (HX_FIELD_EQ(inName,"overlaps") ) { return hx::Val( overlaps_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		if (HX_FIELD_EQ(inName,"set_path") ) { return hx::Val( set_path_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immovable") ) { return hx::Val( immovable); }
		if (HX_FIELD_EQ(inName,"getHitbox") ) { return hx::Val( getHitbox_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"get_solid") ) { return hx::Val( get_solid_dyn()); }
		if (HX_FIELD_EQ(inName,"set_solid") ) { return hx::Val( set_solid_dyn()); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn()); }
		if (HX_FIELD_EQ(inName,"set_moves") ) { return hx::Val( set_moves_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"elasticity") ) { return hx::Val( elasticity); }
		if (HX_FIELD_EQ(inName,"maxAngular") ) { return hx::Val( maxAngular); }
		if (HX_FIELD_EQ(inName,"overlapsAt") ) { return hx::Val( overlapsAt_dyn()); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return hx::Val( isOnScreen_dyn()); }
		if (HX_FIELD_EQ(inName,"isTouching") ) { return hx::Val( isTouching_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxVelocity") ) { return hx::Val( maxVelocity); }
		if (HX_FIELD_EQ(inName,"angularDrag") ) { return hx::Val( angularDrag); }
		if (HX_FIELD_EQ(inName,"wasTouching") ) { return hx::Val( wasTouching); }
		if (HX_FIELD_EQ(inName,"getPosition") ) { return hx::Val( getPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"getMidpoint") ) { return hx::Val( getMidpoint_dyn()); }
		if (HX_FIELD_EQ(inName,"justTouched") ) { return hx::Val( justTouched_dyn()); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollFactor") ) { return hx::Val( scrollFactor); }
		if (HX_FIELD_EQ(inName,"acceleration") ) { return hx::Val( acceleration); }
		if (HX_FIELD_EQ(inName,"updateMotion") ) { return hx::Val( updateMotion_dyn()); }
		if (HX_FIELD_EQ(inName,"screenCenter") ) { return hx::Val( screenCenter_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisonXDrag") ) { return hx::Val( collisonXDrag); }
		if (HX_FIELD_EQ(inName,"overlapsPoint") ) { return hx::Val( overlapsPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"inWorldBounds") ) { return hx::Val( inWorldBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"set_immovable") ) { return hx::Val( set_immovable_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"initMotionVars") ) { return hx::Val( initMotionVars_dyn()); }
		if (HX_FIELD_EQ(inName,"getBoundingBox") ) { return hx::Val( getBoundingBox_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { return hx::Val( angularVelocity); }
		if (HX_FIELD_EQ(inName,"allowCollisions") ) { return hx::Val( allowCollisions); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"overlapsCallback") ) { return hx::Val( overlapsCallback_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getScreenPosition") ) { return hx::Val( getScreenPosition_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { return hx::Val( pixelPerfectRender); }
		if (HX_FIELD_EQ(inName,"overlapsAtCallback") ) { return hx::Val( overlapsAtCallback_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"angularAcceleration") ) { return hx::Val( angularAcceleration); }
		if (HX_FIELD_EQ(inName,"set_allowCollisions") ) { return hx::Val( set_allowCollisions_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pixelPerfectPosition") ) { return hx::Val( pixelPerfectPosition); }
		if (HX_FIELD_EQ(inName,"isPixelPerfectRender") ) { return hx::Val( isPixelPerfectRender_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_pixelPerfectRender") ) { return hx::Val( set_pixelPerfectRender_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"separate") ) { outValue = separate_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"separateX") ) { outValue = separateX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"separateY") ) { outValue = separateY_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"SEPARATE_BIAS") ) { outValue = SEPARATE_BIAS; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"computeOverlapX") ) { outValue = computeOverlapX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"computeOverlapY") ) { outValue = computeOverlapY_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateTouchingFlags") ) { outValue = updateTouchingFlags_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateTouchingFlagsX") ) { outValue = updateTouchingFlagsX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateTouchingFlagsY") ) { outValue = updateTouchingFlagsY_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_firstSeparateFlxRect") ) { outValue = _firstSeparateFlxRect; return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_secondSeparateFlxRect") ) { outValue = _secondSeparateFlxRect; return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"defaultPixelPerfectPosition") ) { outValue = defaultPixelPerfectPosition; return true; }
	}
	return false;
}

hx::Val FlxObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { drag=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"last") ) { last=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mass") ) { mass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"path") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_path(inValue) );path=inValue.Cast<  ::flixel::util::FlxPath >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue) );width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angle(inValue) );angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moves") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_moves(inValue) );moves=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"solid") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_solid(inValue) ); }
		if (HX_FIELD_EQ(inName,"_rect") ) { _rect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue) );height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"velocity") ) { velocity=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touching") ) { touching=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immovable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_immovable(inValue) );immovable=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"elasticity") ) { elasticity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxAngular") ) { maxAngular=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxVelocity") ) { maxVelocity=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angularDrag") ) { angularDrag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wasTouching") ) { wasTouching=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollFactor") ) { scrollFactor=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acceleration") ) { acceleration=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisonXDrag") ) { collisonXDrag=inValue.Cast< Bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { angularVelocity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowCollisions") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_allowCollisions(inValue) );allowCollisions=inValue.Cast< Int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pixelPerfectRender(inValue) );pixelPerfectRender=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"angularAcceleration") ) { angularAcceleration=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pixelPerfectPosition") ) { pixelPerfectPosition=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"SEPARATE_BIAS") ) { SEPARATE_BIAS=ioValue.Cast< Float >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_firstSeparateFlxRect") ) { _firstSeparateFlxRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_secondSeparateFlxRect") ) { _secondSeparateFlxRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"defaultPixelPerfectPosition") ) { defaultPixelPerfectPosition=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

void FlxObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f"));
	outFields->push(HX_HCSTRING("pixelPerfectPosition","\xf0","\x7e","\x5e","\x3d"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("moves","\x42","\xcc","\x65","\x0c"));
	outFields->push(HX_HCSTRING("immovable","\x0a","\x27","\x70","\x27"));
	outFields->push(HX_HCSTRING("solid","\x2b","\xb4","\xc5","\x80"));
	outFields->push(HX_HCSTRING("scrollFactor","\xbc","\xec","\xcf","\x3b"));
	outFields->push(HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"));
	outFields->push(HX_HCSTRING("acceleration","\x40","\x00","\x61","\x9a"));
	outFields->push(HX_HCSTRING("drag","\xf4","\x2b","\x70","\x42"));
	outFields->push(HX_HCSTRING("maxVelocity","\xe1","\x0c","\xc4","\x94"));
	outFields->push(HX_HCSTRING("last","\x56","\x0a","\xad","\x47"));
	outFields->push(HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("elasticity","\x79","\x23","\xb4","\x4d"));
	outFields->push(HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"));
	outFields->push(HX_HCSTRING("angularAcceleration","\x42","\xc6","\x00","\x9a"));
	outFields->push(HX_HCSTRING("angularDrag","\xf6","\x1f","\x19","\x9c"));
	outFields->push(HX_HCSTRING("maxAngular","\x9e","\x28","\xf6","\xc2"));
	outFields->push(HX_HCSTRING("health","\x9c","\x28","\x06","\xfd"));
	outFields->push(HX_HCSTRING("touching","\x83","\x16","\x25","\x00"));
	outFields->push(HX_HCSTRING("wasTouching","\xcc","\x44","\xe4","\x5f"));
	outFields->push(HX_HCSTRING("allowCollisions","\xaa","\xc9","\xd9","\x59"));
	outFields->push(HX_HCSTRING("collisonXDrag","\x97","\xca","\xfa","\x0a"));
	outFields->push(HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"));
	outFields->push(HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"));
	outFields->push(HX_HCSTRING("_rect","\x03","\x69","\xb8","\xfe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxObject_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxObject_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxObject_obj,pixelPerfectRender),HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f")},
	{hx::fsBool,(int)offsetof(FlxObject_obj,pixelPerfectPosition),HX_HCSTRING("pixelPerfectPosition","\xf0","\x7e","\x5e","\x3d")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsBool,(int)offsetof(FlxObject_obj,moves),HX_HCSTRING("moves","\x42","\xcc","\x65","\x0c")},
	{hx::fsBool,(int)offsetof(FlxObject_obj,immovable),HX_HCSTRING("immovable","\x0a","\x27","\x70","\x27")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,scrollFactor),HX_HCSTRING("scrollFactor","\xbc","\xec","\xcf","\x3b")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,velocity),HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,acceleration),HX_HCSTRING("acceleration","\x40","\x00","\x61","\x9a")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,drag),HX_HCSTRING("drag","\xf4","\x2b","\x70","\x42")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,maxVelocity),HX_HCSTRING("maxVelocity","\xe1","\x0c","\xc4","\x94")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,last),HX_HCSTRING("last","\x56","\x0a","\xad","\x47")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,mass),HX_HCSTRING("mass","\xf4","\x40","\x56","\x48")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,elasticity),HX_HCSTRING("elasticity","\x79","\x23","\xb4","\x4d")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,angularVelocity),HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,angularAcceleration),HX_HCSTRING("angularAcceleration","\x42","\xc6","\x00","\x9a")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,angularDrag),HX_HCSTRING("angularDrag","\xf6","\x1f","\x19","\x9c")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,maxAngular),HX_HCSTRING("maxAngular","\x9e","\x28","\xf6","\xc2")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,health),HX_HCSTRING("health","\x9c","\x28","\x06","\xfd")},
	{hx::fsInt,(int)offsetof(FlxObject_obj,touching),HX_HCSTRING("touching","\x83","\x16","\x25","\x00")},
	{hx::fsInt,(int)offsetof(FlxObject_obj,wasTouching),HX_HCSTRING("wasTouching","\xcc","\x44","\xe4","\x5f")},
	{hx::fsInt,(int)offsetof(FlxObject_obj,allowCollisions),HX_HCSTRING("allowCollisions","\xaa","\xc9","\xd9","\x59")},
	{hx::fsBool,(int)offsetof(FlxObject_obj,collisonXDrag),HX_HCSTRING("collisonXDrag","\x97","\xca","\xfa","\x0a")},
	{hx::fsObject /*::flixel::util::FlxPath*/ ,(int)offsetof(FlxObject_obj,path),HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,_point),HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxObject_obj,_rect),HX_HCSTRING("_rect","\x03","\x69","\xb8","\xfe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxObject_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &FlxObject_obj::defaultPixelPerfectPosition,HX_HCSTRING("defaultPixelPerfectPosition","\x51","\x0a","\xc2","\xb0")},
	{hx::fsFloat,(void *) &FlxObject_obj::SEPARATE_BIAS,HX_HCSTRING("SEPARATE_BIAS","\x15","\x78","\x21","\xa0")},
	{hx::fsInt,(void *) &FlxObject_obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsInt,(void *) &FlxObject_obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsInt,(void *) &FlxObject_obj::UP,HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00")},
	{hx::fsInt,(void *) &FlxObject_obj::DOWN,HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d")},
	{hx::fsInt,(void *) &FlxObject_obj::NONE,HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33")},
	{hx::fsInt,(void *) &FlxObject_obj::CEILING,HX_HCSTRING("CEILING","\xdd","\x32","\x72","\xb3")},
	{hx::fsInt,(void *) &FlxObject_obj::FLOOR,HX_HCSTRING("FLOOR","\xac","\x09","\x85","\x80")},
	{hx::fsInt,(void *) &FlxObject_obj::WALL,HX_HCSTRING("WALL","\x0a","\x25","\xb3","\x39")},
	{hx::fsInt,(void *) &FlxObject_obj::ANY,HX_HCSTRING("ANY","\xcc","\x96","\x31","\x00")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxObject_obj::_firstSeparateFlxRect,HX_HCSTRING("_firstSeparateFlxRect","\x22","\xb9","\x2f","\x5e")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxObject_obj::_secondSeparateFlxRect,HX_HCSTRING("_secondSeparateFlxRect","\xc0","\xbd","\xfc","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxObject_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f"),
	HX_HCSTRING("pixelPerfectPosition","\xf0","\x7e","\x5e","\x3d"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("moves","\x42","\xcc","\x65","\x0c"),
	HX_HCSTRING("immovable","\x0a","\x27","\x70","\x27"),
	HX_HCSTRING("scrollFactor","\xbc","\xec","\xcf","\x3b"),
	HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"),
	HX_HCSTRING("acceleration","\x40","\x00","\x61","\x9a"),
	HX_HCSTRING("drag","\xf4","\x2b","\x70","\x42"),
	HX_HCSTRING("maxVelocity","\xe1","\x0c","\xc4","\x94"),
	HX_HCSTRING("last","\x56","\x0a","\xad","\x47"),
	HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"),
	HX_HCSTRING("elasticity","\x79","\x23","\xb4","\x4d"),
	HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"),
	HX_HCSTRING("angularAcceleration","\x42","\xc6","\x00","\x9a"),
	HX_HCSTRING("angularDrag","\xf6","\x1f","\x19","\x9c"),
	HX_HCSTRING("maxAngular","\x9e","\x28","\xf6","\xc2"),
	HX_HCSTRING("health","\x9c","\x28","\x06","\xfd"),
	HX_HCSTRING("touching","\x83","\x16","\x25","\x00"),
	HX_HCSTRING("wasTouching","\xcc","\x44","\xe4","\x5f"),
	HX_HCSTRING("allowCollisions","\xaa","\xc9","\xd9","\x59"),
	HX_HCSTRING("collisonXDrag","\x97","\xca","\xfa","\x0a"),
	HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"),
	HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"),
	HX_HCSTRING("_rect","\x03","\x69","\xb8","\xfe"),
	HX_HCSTRING("initVars","\xdc","\x5a","\x00","\x53"),
	HX_HCSTRING("initMotionVars","\x32","\xe4","\x28","\x65"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateMotion","\x1f","\x2d","\x21","\xcb"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("overlapsCallback","\xf1","\x14","\xbf","\xb4"),
	HX_HCSTRING("overlapsAt","\x1f","\xe7","\xce","\x03"),
	HX_HCSTRING("overlapsAtCallback","\x04","\xf4","\x81","\x3b"),
	HX_HCSTRING("overlapsPoint","\xa4","\xc5","\xbd","\x35"),
	HX_HCSTRING("inWorldBounds","\x82","\x46","\xf2","\xf1"),
	HX_HCSTRING("getScreenPosition","\x6b","\x93","\x88","\x24"),
	HX_HCSTRING("getPosition","\x5f","\x63","\xee","\xf0"),
	HX_HCSTRING("getMidpoint","\x7e","\xd8","\xfb","\x50"),
	HX_HCSTRING("getHitbox","\xce","\x76","\x7e","\xd3"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("isOnScreen","\xf5","\x43","\xb9","\xa1"),
	HX_HCSTRING("isPixelPerfectRender","\x67","\x1c","\xf9","\x26"),
	HX_HCSTRING("isTouching","\x8d","\x28","\xd4","\x7a"),
	HX_HCSTRING("justTouched","\x12","\x59","\xb8","\x91"),
	HX_HCSTRING("hurt","\x0f","\x5c","\x17","\x45"),
	HX_HCSTRING("screenCenter","\x61","\x2e","\xf9","\xe2"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	HX_HCSTRING("setSize","\x83","\xe1","\xd7","\x11"),
	HX_HCSTRING("getBoundingBox","\x11","\xe8","\x45","\x0d"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_solid","\x82","\x10","\x6f","\xc4"),
	HX_HCSTRING("set_solid","\x8e","\xfc","\xbf","\xa7"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	HX_HCSTRING("set_moves","\xa5","\x14","\x60","\x33"),
	HX_HCSTRING("set_immovable","\xed","\xdc","\xd9","\x2d"),
	HX_HCSTRING("set_pixelPerfectRender","\x9a","\x4f","\x8f","\xbc"),
	HX_HCSTRING("set_allowCollisions","\xcd","\x8b","\x81","\x21"),
	HX_HCSTRING("set_path","\xa2","\xfa","\x69","\x78"),
	::String(null()) };

static void FlxObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxObject_obj::defaultPixelPerfectPosition,"defaultPixelPerfectPosition");
	HX_MARK_MEMBER_NAME(FlxObject_obj::SEPARATE_BIAS,"SEPARATE_BIAS");
	HX_MARK_MEMBER_NAME(FlxObject_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(FlxObject_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(FlxObject_obj::UP,"UP");
	HX_MARK_MEMBER_NAME(FlxObject_obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(FlxObject_obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(FlxObject_obj::CEILING,"CEILING");
	HX_MARK_MEMBER_NAME(FlxObject_obj::FLOOR,"FLOOR");
	HX_MARK_MEMBER_NAME(FlxObject_obj::WALL,"WALL");
	HX_MARK_MEMBER_NAME(FlxObject_obj::ANY,"ANY");
	HX_MARK_MEMBER_NAME(FlxObject_obj::_firstSeparateFlxRect,"_firstSeparateFlxRect");
	HX_MARK_MEMBER_NAME(FlxObject_obj::_secondSeparateFlxRect,"_secondSeparateFlxRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::defaultPixelPerfectPosition,"defaultPixelPerfectPosition");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::SEPARATE_BIAS,"SEPARATE_BIAS");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::UP,"UP");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::CEILING,"CEILING");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::FLOOR,"FLOOR");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::WALL,"WALL");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::ANY,"ANY");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::_firstSeparateFlxRect,"_firstSeparateFlxRect");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::_secondSeparateFlxRect,"_secondSeparateFlxRect");
};

#endif

hx::Class FlxObject_obj::__mClass;

static ::String FlxObject_obj_sStaticFields[] = {
	HX_HCSTRING("defaultPixelPerfectPosition","\x51","\x0a","\xc2","\xb0"),
	HX_HCSTRING("SEPARATE_BIAS","\x15","\x78","\x21","\xa0"),
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00"),
	HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d"),
	HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"),
	HX_HCSTRING("CEILING","\xdd","\x32","\x72","\xb3"),
	HX_HCSTRING("FLOOR","\xac","\x09","\x85","\x80"),
	HX_HCSTRING("WALL","\x0a","\x25","\xb3","\x39"),
	HX_HCSTRING("ANY","\xcc","\x96","\x31","\x00"),
	HX_HCSTRING("_firstSeparateFlxRect","\x22","\xb9","\x2f","\x5e"),
	HX_HCSTRING("_secondSeparateFlxRect","\xc0","\xbd","\xfc","\xda"),
	HX_HCSTRING("separate","\x63","\x1f","\x1c","\x07"),
	HX_HCSTRING("updateTouchingFlags","\xfb","\x01","\xac","\xbd"),
	HX_HCSTRING("computeOverlapX","\x88","\xa5","\xab","\xdc"),
	HX_HCSTRING("separateX","\x95","\x57","\x7f","\x31"),
	HX_HCSTRING("updateTouchingFlagsX","\xfd","\xb9","\xd5","\x38"),
	HX_HCSTRING("computeOverlapY","\x89","\xa5","\xab","\xdc"),
	HX_HCSTRING("separateY","\x96","\x57","\x7f","\x31"),
	HX_HCSTRING("updateTouchingFlagsY","\xfe","\xb9","\xd5","\x38"),
	::String(null())
};

void FlxObject_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxObject","\x1f","\x50","\x95","\x35");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxObject_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxObject_obj::__SetStatic;
	__mClass->mMarkFunc = FlxObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxObject_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",25,0xf0fe0d80)
HXLINE(  25)		defaultPixelPerfectPosition = false;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",31,0xf0fe0d80)
HXLINE(  31)		SEPARATE_BIAS = ((Float)4);
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",35,0xf0fe0d80)
HXLINE(  35)		LEFT = (int)1;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",39,0xf0fe0d80)
HXLINE(  39)		RIGHT = (int)16;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",43,0xf0fe0d80)
HXLINE(  43)		UP = (int)256;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",47,0xf0fe0d80)
HXLINE(  47)		DOWN = (int)4096;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",51,0xf0fe0d80)
HXLINE(  51)		NONE = (int)0;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",55,0xf0fe0d80)
HXLINE(  55)		CEILING = (int)256;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",59,0xf0fe0d80)
HXLINE(  59)		FLOOR = (int)4096;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",63,0xf0fe0d80)
HXLINE(  63)		WALL = (int)17;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",67,0xf0fe0d80)
HXLINE(  67)		ANY = (int)4369;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",69,0xf0fe0d80)
HXLINE(  69)		Float X = (int)0;
HXDLIN(  69)		Float Y = (int)0;
HXDLIN(  69)		Float Width = (int)0;
HXDLIN(  69)		Float Height = (int)0;
HXDLIN(  69)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(  69)		_this->x = X;
HXDLIN(  69)		_this->y = Y;
HXDLIN(  69)		_this->width = Width;
HXDLIN(  69)		_this->height = Height;
HXDLIN(  69)		_this->_inPool = false;
HXDLIN(  69)		_firstSeparateFlxRect = _this;
            	}
{
            	HX_STACK_FRAME("flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",70,0xf0fe0d80)
HXLINE(  70)		Float X = (int)0;
HXDLIN(  70)		Float Y = (int)0;
HXDLIN(  70)		Float Width = (int)0;
HXDLIN(  70)		Float Height = (int)0;
HXDLIN(  70)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(  70)		_this->x = X;
HXDLIN(  70)		_this->y = Y;
HXDLIN(  70)		_this->width = Width;
HXDLIN(  70)		_this->height = Height;
HXDLIN(  70)		_this->_inPool = false;
HXDLIN(  70)		_secondSeparateFlxRect = _this;
            	}
}

} // end namespace flixel
