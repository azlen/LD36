// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxAnalogToDigitalMode
#include <flixel/input/gamepad/FlxAnalogToDigitalMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAttachment
#include <flixel/input/gamepad/FlxGamepadAttachment.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadDeadZoneMode
#include <flixel/input/gamepad/FlxGamepadDeadZoneMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadModel
#include <flixel/input/gamepad/FlxGamepadModel.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadAnalogList
#include <flixel/input/gamepad/lists/FlxGamepadAnalogList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadMotionValueList
#include <flixel/input/gamepad/lists/FlxGamepadMotionValueList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadPointerValueList
#include <flixel/input/gamepad/lists/FlxGamepadPointerValueList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_LogitechMapping
#include <flixel/input/gamepad/mappings/LogitechMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_MFiMapping
#include <flixel/input/gamepad/mappings/MFiMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_MayflashWiiRemoteMapping
#include <flixel/input/gamepad/mappings/MayflashWiiRemoteMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_OUYAMapping
#include <flixel/input/gamepad/mappings/OUYAMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_PS4Mapping
#include <flixel/input/gamepad/mappings/PS4Mapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_PSVitaMapping
#include <flixel/input/gamepad/mappings/PSVitaMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_WiiRemoteMapping
#include <flixel/input/gamepad/mappings/WiiRemoteMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_XInputMapping
#include <flixel/input/gamepad/mappings/XInputMapping.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxVector
#include <flixel/math/FlxVector.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxVector
#include <flixel/util/FlxPool_flixel_math_FlxVector.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif

namespace flixel{
namespace input{
namespace gamepad{

void FlxGamepad_obj::__construct(Int ID, ::flixel::input::gamepad::FlxGamepadManager Manager,::hx::EnumBase Model,::hx::EnumBase Attachment){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","new",0x48c92544,"flixel.input.gamepad.FlxGamepad.new","flixel/input/gamepad/FlxGamepad.hx",29,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ID,"ID")
            	HX_STACK_ARG(Manager,"Manager")
            	HX_STACK_ARG(Model,"Model")
            	HX_STACK_ARG(Attachment,"Attachment")
HXLINE( 123)		this->buttons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 117)		this->_deadZone = ((Float)0.15);
HXLINE( 114)		this->axisActive = false;
HXLINE( 113)		HX_VARI( ::Array< Float >,_g) = ::Array_obj< Float >::__new(0);
HXDLIN( 113)		{
HXLINE( 113)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 113)			while((_g1 < (int)6)){
HXLINE( 113)				++_g1;
HXDLIN( 113)				_g->push((int)0);
            			}
            		}
HXDLIN( 113)		this->axis = _g;
HXLINE( 110)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 110)		point->_inPool = false;
HXDLIN( 110)		this->ball = point;
HXLINE( 109)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 109)		point1->_inPool = false;
HXDLIN( 109)		this->hat = point1;
HXLINE(  80)		this->deadZoneMode = ::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::INDEPENDENT_AXES_dyn();
HXLINE(  58)		this->connected = true;
HXLINE( 127)		this->id = ID;
HXLINE( 129)		this->manager = Manager;
HXLINE( 131)		this->pressed =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__new((int)1,hx::ObjectPtr<OBJ_>(this));
HXLINE( 132)		this->justPressed =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__new((int)2,hx::ObjectPtr<OBJ_>(this));
HXLINE( 133)		this->justReleased =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__new((int)-1,hx::ObjectPtr<OBJ_>(this));
HXLINE( 134)		this->analog =  ::flixel::input::gamepad::lists::FlxGamepadAnalogList_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE( 135)		this->motion =  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE( 136)		this->pointer =  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE( 138)		Bool _hx_tmp = hx::IsNull( Model );
HXDLIN( 138)		if (_hx_tmp) {
HXLINE( 139)			Model = ::flixel::input::gamepad::FlxGamepadModel_obj::XINPUT_dyn();
            		}
HXLINE( 141)		Bool _hx_tmp1 = hx::IsNull( Attachment );
HXDLIN( 141)		if (_hx_tmp1) {
HXLINE( 142)			Attachment = ::flixel::input::gamepad::FlxGamepadAttachment_obj::NONE_dyn();
            		}
HXLINE( 144)		this->set_model(Model);
HXLINE( 145)		this->detectedModel = Model;
            	}

Dynamic FlxGamepad_obj::__CreateEmpty() { return new FlxGamepad_obj; }

hx::ObjectPtr< FlxGamepad_obj > FlxGamepad_obj::__new(Int ID, ::flixel::input::gamepad::FlxGamepadManager Manager,::hx::EnumBase Model,::hx::EnumBase Attachment)
{
	hx::ObjectPtr< FlxGamepad_obj > _hx_result = new FlxGamepad_obj();
	_hx_result->__construct(ID,Manager,Model,Attachment);
	return _hx_result;
}

Dynamic FlxGamepad_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxGamepad_obj > _hx_result = new FlxGamepad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_gamepad_FlxGamepad__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepad_obj::destroy,
};

void *FlxGamepad_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_input_gamepad_FlxGamepad__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::flixel::input::gamepad::FlxGamepadButton FlxGamepad_obj::getButton(Int RawID){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getButton",0xf881030c,"flixel.input.gamepad.FlxGamepad.getButton","flixel/input/gamepad/FlxGamepad.hx",149,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(RawID,"RawID")
HXLINE( 150)		if ((RawID == (int)-1)) {
HXLINE( 151)			return null();
            		}
HXLINE( 152)		HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,gamepadButton) = this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXLINE( 154)		Bool _hx_tmp = hx::IsNull( gamepadButton );
HXDLIN( 154)		if (_hx_tmp) {
HXLINE( 156)			gamepadButton =  ::flixel::input::gamepad::FlxGamepadButton_obj::__new(RawID);
HXLINE( 157)			this->buttons[RawID] = gamepadButton;
            		}
HXLINE( 160)		return gamepadButton;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getButton,return )

Float FlxGamepad_obj::applyAxisFlip(Float axisValue,Int axisID){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","applyAxisFlip",0xd984f960,"flixel.input.gamepad.FlxGamepad.applyAxisFlip","flixel/input/gamepad/FlxGamepad.hx",164,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(axisValue,"axisValue")
            	HX_STACK_ARG(axisID,"axisID")
HXLINE( 165)		Bool _hx_tmp = this->mapping->isAxisFlipped(axisID);
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 166)			hx::MultEq(axisValue,(int)-1);
            		}
HXLINE( 167)		return axisValue;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,applyAxisFlip,return )

void FlxGamepad_obj::update(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","update",0x525157a5,"flixel.input.gamepad.FlxGamepad.update","flixel/input/gamepad/FlxGamepad.hx",174,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 209)		{
HXLINE( 209)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 209)			HX_VARI( Int,_g) = this->axis->length;
HXDLIN( 209)			while((_g1 < _g)){
HXLINE( 209)				HX_VARI( Int,i) = _g1++;
HXLINE( 212)				Int _hx_tmp = this->mapping->axisIndexToRawID(i);
HXDLIN( 212)				HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,button) = this->getButton(_hx_tmp);
HXLINE( 213)				Bool _hx_tmp1 = hx::IsNotNull( button );
HXDLIN( 213)				if (_hx_tmp1) {
HXLINE( 216)					Float _hx_tmp2 = this->axis->__get(i);
HXDLIN( 216)					HX_VARI( Float,axisValue) = ::Math_obj::abs(_hx_tmp2);
HXDLIN( 216)					Bool _hx_tmp3 = this->mapping->isAxisFlipped(i);
HXDLIN( 216)					if (_hx_tmp3) {
HXLINE( 216)						hx::MultEq(axisValue,(int)-1);
            					}
HXDLIN( 216)					HX_VARI( Float,value) = axisValue;
HXLINE( 217)					Float _hx_tmp4 = this->get_deadZone();
HXDLIN( 217)					if ((value > _hx_tmp4)) {
HXLINE( 219)						button->press();
            					}
            					else {
HXLINE( 221)						Float _hx_tmp5 = this->get_deadZone();
HXDLIN( 221)						if ((value < _hx_tmp5)) {
HXLINE( 223)							button->release();
            						}
            					}
            				}
HXLINE( 227)				this->axisActive = false;
            			}
            		}
HXLINE( 231)		{
HXLINE( 231)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 231)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->buttons;
HXDLIN( 231)			while((_g2 < _g11->length)){
HXLINE( 231)				HX_VARI_NAME(  ::flixel::input::gamepad::FlxGamepadButton,button1,"button") = _g11->__get(_g2).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 231)				++_g2;
HXLINE( 233)				Bool _hx_tmp6 = hx::IsNotNull( button1 );
HXDLIN( 233)				if (_hx_tmp6) {
HXLINE( 235)					button1->update();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,update,(void))

void FlxGamepad_obj::reset(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","reset",0x36e79fb3,"flixel.input.gamepad.FlxGamepad.reset","flixel/input/gamepad/FlxGamepad.hx",241,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 242)		{
HXLINE( 242)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 242)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->buttons;
HXDLIN( 242)			while((_g < _g1->length)){
HXLINE( 242)				HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,button) = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 242)				++_g;
HXLINE( 244)				Bool _hx_tmp = hx::IsNotNull( button );
HXDLIN( 244)				if (_hx_tmp) {
HXLINE( 246)					button->reset();
            				}
            			}
            		}
HXLINE( 250)		HX_VARI( Int,numAxis) = this->axis->length;
HXLINE( 252)		{
HXLINE( 252)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 252)			while((_g11 < numAxis)){
HXLINE( 252)				HX_VARI( Int,i) = _g11++;
HXLINE( 254)				this->axis[i] = (int)0;
            			}
            		}
HXLINE( 258)		this->hat->set(null(),null());
HXLINE( 259)		this->ball->set(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,reset,(void))

void FlxGamepad_obj::destroy(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","destroy",0x3b91c3de,"flixel.input.gamepad.FlxGamepad.destroy","flixel/input/gamepad/FlxGamepad.hx",264,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 265)		this->connected = false;
HXLINE( 267)		this->buttons = null();
HXLINE( 268)		this->axis = null();
HXLINE( 269)		this->manager = null();
HXLINE( 272)		this->hat = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->hat)) );
HXLINE( 273)		this->ball = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->ball)) );
HXLINE( 275)		this->hat = null();
HXLINE( 276)		this->ball = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,destroy,(void))

Bool FlxGamepad_obj::checkStatus(Int ID,Int Status){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","checkStatus",0x42f892fe,"flixel.input.gamepad.FlxGamepad.checkStatus","flixel/input/gamepad/FlxGamepad.hx",289,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ID,"ID")
            	HX_STACK_ARG(Status,"Status")
HXLINE( 289)		Int _hx_tmp = this->mapping->getRawID(ID);
HXDLIN( 289)		return this->checkStatusRaw(_hx_tmp,Status);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,checkStatus,return )

Bool FlxGamepad_obj::checkStatusRaw(Int RawID,Int Status){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","checkStatusRaw",0x11516d8a,"flixel.input.gamepad.FlxGamepad.checkStatusRaw","flixel/input/gamepad/FlxGamepad.hx",300,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(RawID,"RawID")
            	HX_STACK_ARG(Status,"Status")
HXLINE( 301)		Bool _hx_tmp = hx::IsNotNull( this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() );
HXDLIN( 301)		if (_hx_tmp) {
HXLINE( 303)			return (this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == Status);
            		}
HXLINE( 305)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,checkStatusRaw,return )

Bool FlxGamepad_obj::anyPressed(::Array< Int > IDArray){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","anyPressed",0xee8d44b2,"flixel.input.gamepad.FlxGamepad.anyPressed","flixel/input/gamepad/FlxGamepad.hx",315,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(IDArray,"IDArray")
HXLINE( 316)		{
HXLINE( 316)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 316)			while((_g < IDArray->length)){
HXLINE( 316)				HX_VARI( Int,id) = IDArray->__get(_g);
HXDLIN( 316)				++_g;
HXLINE( 318)				HX_VARI( Int,raw) = this->mapping->getRawID(id);
HXLINE( 319)				Bool _hx_tmp = hx::IsNotNull( this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() );
HXDLIN( 319)				if (_hx_tmp) {
HXLINE( 321)					HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,_this) = this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 321)					Bool _hx_tmp1;
HXDLIN( 321)					if ((_this->current != (int)1)) {
HXLINE( 321)						_hx_tmp1 = (_this->current == (int)2);
            					}
            					else {
HXLINE( 321)						_hx_tmp1 = true;
            					}
HXDLIN( 321)					if (_hx_tmp1) {
HXLINE( 323)						return true;
            					}
            				}
            			}
            		}
HXLINE( 327)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyPressed,return )

Bool FlxGamepad_obj::anyPressedRaw(::Array< Int > RawIDArray){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","anyPressedRaw",0x4ffbc456,"flixel.input.gamepad.FlxGamepad.anyPressedRaw","flixel/input/gamepad/FlxGamepad.hx",337,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(RawIDArray,"RawIDArray")
HXLINE( 338)		{
HXLINE( 338)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 338)			while((_g < RawIDArray->length)){
HXLINE( 338)				HX_VARI( Int,b) = RawIDArray->__get(_g);
HXDLIN( 338)				++_g;
HXLINE( 340)				Bool _hx_tmp = hx::IsNotNull( this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() );
HXDLIN( 340)				if (_hx_tmp) {
HXLINE( 342)					HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,_this) = this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 342)					Bool _hx_tmp1;
HXDLIN( 342)					if ((_this->current != (int)1)) {
HXLINE( 342)						_hx_tmp1 = (_this->current == (int)2);
            					}
            					else {
HXLINE( 342)						_hx_tmp1 = true;
            					}
HXDLIN( 342)					if (_hx_tmp1) {
HXLINE( 343)						return true;
            					}
            				}
            			}
            		}
HXLINE( 347)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyPressedRaw,return )

Bool FlxGamepad_obj::anyJustPressed(::Array< Int > IDArray){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","anyJustPressed",0xd6d7c7e6,"flixel.input.gamepad.FlxGamepad.anyJustPressed","flixel/input/gamepad/FlxGamepad.hx",357,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(IDArray,"IDArray")
HXLINE( 358)		{
HXLINE( 358)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 358)			while((_g < IDArray->length)){
HXLINE( 358)				HX_VARI( Int,b) = IDArray->__get(_g);
HXDLIN( 358)				++_g;
HXLINE( 360)				HX_VARI( Int,raw) = this->mapping->getRawID(b);
HXLINE( 361)				Bool _hx_tmp = hx::IsNotNull( this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() );
HXDLIN( 361)				if (_hx_tmp) {
HXLINE( 363)					if ((this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == (int)2)) {
HXLINE( 364)						return true;
            					}
            				}
            			}
            		}
HXLINE( 368)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustPressed,return )

Bool FlxGamepad_obj::anyJustPressedRaw(::Array< Int > RawIDArray){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","anyJustPressedRaw",0xeb4439a2,"flixel.input.gamepad.FlxGamepad.anyJustPressedRaw","flixel/input/gamepad/FlxGamepad.hx",378,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(RawIDArray,"RawIDArray")
HXLINE( 379)		{
HXLINE( 379)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 379)			while((_g < RawIDArray->length)){
HXLINE( 379)				HX_VARI( Int,b) = RawIDArray->__get(_g);
HXDLIN( 379)				++_g;
HXLINE( 381)				Bool _hx_tmp = hx::IsNotNull( this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() );
HXDLIN( 381)				if (_hx_tmp) {
HXLINE( 383)					if ((this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == (int)2)) {
HXLINE( 384)						return true;
            					}
            				}
            			}
            		}
HXLINE( 388)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustPressedRaw,return )

Bool FlxGamepad_obj::anyJustReleased(::Array< Int > IDArray){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","anyJustReleased",0x2ccd2ef9,"flixel.input.gamepad.FlxGamepad.anyJustReleased","flixel/input/gamepad/FlxGamepad.hx",398,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(IDArray,"IDArray")
HXLINE( 399)		{
HXLINE( 399)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 399)			while((_g < IDArray->length)){
HXLINE( 399)				HX_VARI( Int,b) = IDArray->__get(_g);
HXDLIN( 399)				++_g;
HXLINE( 401)				HX_VARI( Int,raw) = this->mapping->getRawID(b);
HXLINE( 402)				Bool _hx_tmp = hx::IsNotNull( this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() );
HXDLIN( 402)				if (_hx_tmp) {
HXLINE( 404)					if ((this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == (int)-1)) {
HXLINE( 405)						return true;
            					}
            				}
            			}
            		}
HXLINE( 409)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustReleased,return )

Bool FlxGamepad_obj::anyJustReleasedRaw(::Array< Int > RawIDArray){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","anyJustReleasedRaw",0x1df8406f,"flixel.input.gamepad.FlxGamepad.anyJustReleasedRaw","flixel/input/gamepad/FlxGamepad.hx",419,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(RawIDArray,"RawIDArray")
HXLINE( 420)		{
HXLINE( 420)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 420)			while((_g < RawIDArray->length)){
HXLINE( 420)				HX_VARI( Int,b) = RawIDArray->__get(_g);
HXDLIN( 420)				++_g;
HXLINE( 422)				Bool _hx_tmp = hx::IsNotNull( this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() );
HXDLIN( 422)				if (_hx_tmp) {
HXLINE( 424)					if ((this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == (int)-1)) {
HXLINE( 425)						return true;
            					}
            				}
            			}
            		}
HXLINE( 429)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustReleasedRaw,return )

Int FlxGamepad_obj::firstPressedID(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","firstPressedID",0xeb182e49,"flixel.input.gamepad.FlxGamepad.firstPressedID","flixel/input/gamepad/FlxGamepad.hx",438,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 438)		Int _hx_tmp = this->firstPressedRawID();
HXDLIN( 438)		return this->mapping->getID(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstPressedID,return )

Int FlxGamepad_obj::firstPressedRawID(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","firstPressedRawID",0xee1a19f5,"flixel.input.gamepad.FlxGamepad.firstPressedRawID","flixel/input/gamepad/FlxGamepad.hx",446,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 447)		{
HXLINE( 447)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 447)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->buttons;
HXDLIN( 447)			while((_g < _g1->length)){
HXLINE( 447)				HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,button) = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 447)				++_g;
HXLINE( 449)				Bool _hx_tmp;
HXDLIN( 449)				Bool _hx_tmp1 = hx::IsNotNull( button );
HXDLIN( 449)				if (_hx_tmp1) {
HXLINE( 449)					if ((button->current != (int)0)) {
HXLINE( 449)						_hx_tmp = (button->current == (int)-1);
            					}
            					else {
HXLINE( 449)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 449)					_hx_tmp = false;
            				}
HXDLIN( 449)				if (_hx_tmp) {
HXLINE( 451)					return ( (Int)(button->ID) );
            				}
            			}
            		}
HXLINE( 454)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstPressedRawID,return )

Int FlxGamepad_obj::firstJustPressedID(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","firstJustPressedID",0x153c347d,"flixel.input.gamepad.FlxGamepad.firstJustPressedID","flixel/input/gamepad/FlxGamepad.hx",463,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 463)		Int _hx_tmp = this->firstJustPressedRawID();
HXDLIN( 463)		return this->mapping->getID(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustPressedID,return )

Int FlxGamepad_obj::firstJustPressedRawID(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","firstJustPressedRawID",0xcc1cec41,"flixel.input.gamepad.FlxGamepad.firstJustPressedRawID","flixel/input/gamepad/FlxGamepad.hx",471,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 472)		{
HXLINE( 472)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 472)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->buttons;
HXDLIN( 472)			while((_g < _g1->length)){
HXLINE( 472)				HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,button) = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 472)				++_g;
HXLINE( 474)				Bool _hx_tmp;
HXDLIN( 474)				Bool _hx_tmp1 = hx::IsNotNull( button );
HXDLIN( 474)				if (_hx_tmp1) {
HXLINE( 474)					_hx_tmp = (button->current == (int)2);
            				}
            				else {
HXLINE( 474)					_hx_tmp = false;
            				}
HXDLIN( 474)				if (_hx_tmp) {
HXLINE( 476)					return ( (Int)(button->ID) );
            				}
            			}
            		}
HXLINE( 479)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustPressedRawID,return )

Int FlxGamepad_obj::firstJustReleasedID(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","firstJustReleasedID",0x71e64c58,"flixel.input.gamepad.FlxGamepad.firstJustReleasedID","flixel/input/gamepad/FlxGamepad.hx",488,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 488)		Int _hx_tmp = this->firstJustReleasedRawID();
HXDLIN( 488)		return this->mapping->getID(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustReleasedID,return )

Int FlxGamepad_obj::firstJustReleasedRawID(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","firstJustReleasedRawID",0xfa5cef46,"flixel.input.gamepad.FlxGamepad.firstJustReleasedRawID","flixel/input/gamepad/FlxGamepad.hx",496,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 497)		{
HXLINE( 497)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 497)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->buttons;
HXDLIN( 497)			while((_g < _g1->length)){
HXLINE( 497)				HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,button) = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 497)				++_g;
HXLINE( 499)				Bool _hx_tmp;
HXDLIN( 499)				Bool _hx_tmp1 = hx::IsNotNull( button );
HXDLIN( 499)				if (_hx_tmp1) {
HXLINE( 499)					_hx_tmp = (button->current == (int)-1);
            				}
            				else {
HXLINE( 499)					_hx_tmp = false;
            				}
HXDLIN( 499)				if (_hx_tmp) {
HXLINE( 501)					return ( (Int)(button->ID) );
            				}
            			}
            		}
HXLINE( 504)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustReleasedRawID,return )

Float FlxGamepad_obj::getAxis(Int AxisButtonID){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getAxis",0x2a07633b,"flixel.input.gamepad.FlxGamepad.getAxis","flixel/input/gamepad/FlxGamepad.hx",513,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(AxisButtonID,"AxisButtonID")
HXLINE( 517)		HX_VARI( Int,fakeAxisRawID) = this->mapping->checkForFakeAxis(AxisButtonID);
HXLINE( 518)		if ((fakeAxisRawID == (int)-1)) {
HXLINE( 521)			HX_VARI( Int,rawID) = this->mapping->getRawID(AxisButtonID);
HXLINE( 522)			HX_VARI( Float,axisValue) = this->getAxisValue(rawID);
HXDLIN( 522)			HX_VAR_NAME( Float,axisValue1,"axisValue");
HXDLIN( 522)			Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 522)			Float _hx_tmp1 = this->get_deadZone();
HXDLIN( 522)			if ((_hx_tmp > _hx_tmp1)) {
HXLINE( 522)				axisValue1 = axisValue;
            			}
            			else {
HXLINE( 522)				axisValue1 = (int)0;
            			}
HXDLIN( 522)			Bool _hx_tmp2 = this->mapping->isAxisFlipped(AxisButtonID);
HXDLIN( 522)			if (_hx_tmp2) {
HXLINE( 522)				hx::MultEq(axisValue1,(int)-1);
            			}
HXDLIN( 522)			return axisValue1;
            		}
            		else {
HXLINE( 527)			HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,btn) = this->getButton(fakeAxisRawID);
HXLINE( 528)			Bool _hx_tmp3 = hx::IsNull( btn );
HXDLIN( 528)			if (_hx_tmp3) {
HXLINE( 529)				return (int)0;
            			}
HXLINE( 530)			Bool _hx_tmp4;
HXDLIN( 530)			if ((btn->current != (int)1)) {
HXLINE( 530)				_hx_tmp4 = (btn->current == (int)2);
            			}
            			else {
HXLINE( 530)				_hx_tmp4 = true;
            			}
HXDLIN( 530)			if (_hx_tmp4) {
HXLINE( 531)				return (int)1;
            			}
            		}
HXLINE( 533)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxis,return )

Float FlxGamepad_obj::getAxisRaw(Int RawAxisID){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getAxisRaw",0x2bb6a16d,"flixel.input.gamepad.FlxGamepad.getAxisRaw","flixel/input/gamepad/FlxGamepad.hx",543,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(RawAxisID,"RawAxisID")
HXLINE( 544)		HX_VARI( Float,axisValue) = this->getAxisValue(RawAxisID);
HXLINE( 545)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 545)		Float _hx_tmp1 = this->get_deadZone();
HXDLIN( 545)		if ((_hx_tmp > _hx_tmp1)) {
HXLINE( 547)			return axisValue;
            		}
HXLINE( 549)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxisRaw,return )

Bool FlxGamepad_obj::isAxisForAnalogStick(Int AxisIndex){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","isAxisForAnalogStick",0x770b861e,"flixel.input.gamepad.FlxGamepad.isAxisForAnalogStick","flixel/input/gamepad/FlxGamepad.hx",553,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(AxisIndex,"AxisIndex")
HXLINE( 554)		HX_VARI(  ::flixel::input::gamepad::FlxGamepadAnalogStick,leftStick) = this->mapping->leftStick;
HXLINE( 555)		HX_VARI(  ::flixel::input::gamepad::FlxGamepadAnalogStick,rightStick) = this->mapping->rightStick;
HXLINE( 557)		Bool _hx_tmp = hx::IsNotNull( leftStick );
HXDLIN( 557)		if (_hx_tmp) {
HXLINE( 559)			Bool _hx_tmp1;
HXDLIN( 559)			if ((AxisIndex != leftStick->x)) {
HXLINE( 559)				_hx_tmp1 = (AxisIndex == leftStick->y);
            			}
            			else {
HXLINE( 559)				_hx_tmp1 = true;
            			}
HXDLIN( 559)			if (_hx_tmp1) {
HXLINE( 560)				return true;
            			}
            		}
HXLINE( 562)		Bool _hx_tmp2 = hx::IsNotNull( rightStick );
HXDLIN( 562)		if (_hx_tmp2) {
HXLINE( 564)			Bool _hx_tmp3;
HXDLIN( 564)			if ((AxisIndex != rightStick->x)) {
HXLINE( 564)				_hx_tmp3 = (AxisIndex == rightStick->y);
            			}
            			else {
HXLINE( 564)				_hx_tmp3 = true;
            			}
HXDLIN( 564)			if (_hx_tmp3) {
HXLINE( 565)				return true;
            			}
            		}
HXLINE( 567)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,isAxisForAnalogStick,return )

 ::flixel::input::gamepad::FlxGamepadAnalogStick FlxGamepad_obj::getAnalogStickByAxis(Int AxisIndex){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getAnalogStickByAxis",0xdbfed05e,"flixel.input.gamepad.FlxGamepad.getAnalogStickByAxis","flixel/input/gamepad/FlxGamepad.hx",571,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(AxisIndex,"AxisIndex")
HXLINE( 572)		HX_VARI(  ::flixel::input::gamepad::FlxGamepadAnalogStick,leftStick) = this->mapping->leftStick;
HXLINE( 573)		HX_VARI(  ::flixel::input::gamepad::FlxGamepadAnalogStick,rightStick) = this->mapping->rightStick;
HXLINE( 575)		Bool _hx_tmp;
HXDLIN( 575)		Bool _hx_tmp1;
HXDLIN( 575)		Bool _hx_tmp2 = hx::IsNotNull( leftStick );
HXDLIN( 575)		if (_hx_tmp2) {
HXLINE( 575)			_hx_tmp1 = (AxisIndex == leftStick->x);
            		}
            		else {
HXLINE( 575)			_hx_tmp1 = false;
            		}
HXDLIN( 575)		if (!(_hx_tmp1)) {
HXLINE( 575)			_hx_tmp = (AxisIndex == leftStick->y);
            		}
            		else {
HXLINE( 575)			_hx_tmp = true;
            		}
HXDLIN( 575)		if (_hx_tmp) {
HXLINE( 576)			return leftStick;
            		}
HXLINE( 577)		Bool _hx_tmp3;
HXDLIN( 577)		Bool _hx_tmp4;
HXDLIN( 577)		Bool _hx_tmp5 = hx::IsNotNull( rightStick );
HXDLIN( 577)		if (_hx_tmp5) {
HXLINE( 577)			_hx_tmp4 = (AxisIndex == rightStick->x);
            		}
            		else {
HXLINE( 577)			_hx_tmp4 = false;
            		}
HXDLIN( 577)		if (!(_hx_tmp4)) {
HXLINE( 577)			_hx_tmp3 = (AxisIndex == rightStick->y);
            		}
            		else {
HXLINE( 577)			_hx_tmp3 = true;
            		}
HXDLIN( 577)		if (_hx_tmp3) {
HXLINE( 578)			return rightStick;
            		}
HXLINE( 579)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogStickByAxis,return )

Float FlxGamepad_obj::getXAxis(Int AxesButtonID){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getXAxis",0xb657655f,"flixel.input.gamepad.FlxGamepad.getXAxis","flixel/input/gamepad/FlxGamepad.hx",588,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(AxesButtonID,"AxesButtonID")
HXLINE( 588)		 ::flixel::input::gamepad::FlxGamepadAnalogStick _hx_tmp = this->mapping->getAnalogStick(AxesButtonID);
HXDLIN( 588)		return this->getAnalogXAxisValue(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getXAxis,return )

Float FlxGamepad_obj::getXAxisRaw( ::flixel::input::gamepad::FlxGamepadAnalogStick Stick){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getXAxisRaw",0x9b9f8dc9,"flixel.input.gamepad.FlxGamepad.getXAxisRaw","flixel/input/gamepad/FlxGamepad.hx",596,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Stick,"Stick")
HXLINE( 596)		return this->getAnalogXAxisValue(Stick);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getXAxisRaw,return )

Float FlxGamepad_obj::getYAxis(Int AxesButtonID){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getYAxis",0x49bdf9e0,"flixel.input.gamepad.FlxGamepad.getYAxis","flixel/input/gamepad/FlxGamepad.hx",605,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(AxesButtonID,"AxesButtonID")
HXLINE( 605)		 ::flixel::input::gamepad::FlxGamepadAnalogStick _hx_tmp = this->mapping->getAnalogStick(AxesButtonID);
HXDLIN( 605)		return this->getYAxisRaw(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getYAxis,return )

Float FlxGamepad_obj::getYAxisRaw( ::flixel::input::gamepad::FlxGamepadAnalogStick Stick){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getYAxisRaw",0xd4d1ffe8,"flixel.input.gamepad.FlxGamepad.getYAxisRaw","flixel/input/gamepad/FlxGamepad.hx",614,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Stick,"Stick")
HXLINE( 614)		return this->getAnalogYAxisValue(Stick);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getYAxisRaw,return )

Bool FlxGamepad_obj::anyButton(hx::Null< Int >  __o_state){
Int state = __o_state.Default(1);
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","anyButton",0xd989e1e2,"flixel.input.gamepad.FlxGamepad.anyButton","flixel/input/gamepad/FlxGamepad.hx",621,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(state,"state")
HXLINE( 622)		{
HXLINE( 622)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 622)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->buttons;
HXDLIN( 622)			while((_g < _g1->length)){
HXLINE( 622)				HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,button) = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 622)				++_g;
HXLINE( 624)				Bool _hx_tmp;
HXDLIN( 624)				Bool _hx_tmp1 = hx::IsNotNull( button );
HXDLIN( 624)				if (_hx_tmp1) {
HXLINE( 624)					_hx_tmp = button->hasState(state);
            				}
            				else {
HXLINE( 624)					_hx_tmp = false;
            				}
HXDLIN( 624)				if (_hx_tmp) {
HXLINE( 626)					return true;
            				}
            			}
            		}
HXLINE( 629)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyButton,return )

Bool FlxGamepad_obj::anyInput(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","anyInput",0x4fe8921a,"flixel.input.gamepad.FlxGamepad.anyInput","flixel/input/gamepad/FlxGamepad.hx",636,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 637)		Bool _hx_tmp = this->anyButton(null());
HXDLIN( 637)		if (_hx_tmp) {
HXLINE( 638)			return true;
            		}
HXLINE( 640)		HX_VARI( Int,numAxis) = this->axis->length;
HXLINE( 642)		{
HXLINE( 642)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 642)			while((_g1 < numAxis)){
HXLINE( 642)				++_g1;
HXLINE( 644)				if ((this->axis->__get((int)0) != (int)0)) {
HXLINE( 646)					return true;
            				}
            			}
            		}
HXLINE( 651)		Bool _hx_tmp1;
HXDLIN( 651)		if ((this->ball->x == (int)0)) {
HXLINE( 651)			_hx_tmp1 = (this->ball->y != (int)0);
            		}
            		else {
HXLINE( 651)			_hx_tmp1 = true;
            		}
HXDLIN( 651)		if (_hx_tmp1) {
HXLINE( 653)			return true;
            		}
HXLINE( 656)		Bool _hx_tmp2;
HXDLIN( 656)		if ((this->hat->x == (int)0)) {
HXLINE( 656)			_hx_tmp2 = (this->hat->y != (int)0);
            		}
            		else {
HXLINE( 656)			_hx_tmp2 = true;
            		}
HXDLIN( 656)		if (_hx_tmp2) {
HXLINE( 658)			return true;
            		}
HXLINE( 662)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,anyInput,return )

Float FlxGamepad_obj::getAxisValue(Int AxisID){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getAxisValue",0xcd45f636,"flixel.input.gamepad.FlxGamepad.getAxisValue","flixel/input/gamepad/FlxGamepad.hx",666,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(AxisID,"AxisID")
HXLINE( 667)		HX_VARI( Float,axisValue) = (int)0;
HXLINE( 679)		Bool _hx_tmp;
HXDLIN( 679)		if ((AxisID >= (int)0)) {
HXLINE( 679)			_hx_tmp = (AxisID >= this->axis->length);
            		}
            		else {
HXLINE( 679)			_hx_tmp = true;
            		}
HXDLIN( 679)		if (_hx_tmp) {
HXLINE( 681)			return (int)0;
            		}
HXLINE( 684)		axisValue = this->axis->__get(AxisID);
HXLINE( 687)		Bool _hx_tmp1 = this->isAxisForAnalogStick(AxisID);
HXDLIN( 687)		if (_hx_tmp1) {
HXLINE( 689)			HX_VARI_NAME( Float,axisValue1,"axisValue") = axisValue;
HXDLIN( 689)			Bool _hx_tmp2 = this->mapping->isAxisFlipped(AxisID);
HXDLIN( 689)			if (_hx_tmp2) {
HXLINE( 689)				hx::MultEq(axisValue1,(int)-1);
            			}
HXDLIN( 689)			axisValue = axisValue1;
            		}
HXLINE( 692)		return axisValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxisValue,return )

Float FlxGamepad_obj::getAnalogXAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getAnalogXAxisValue",0xef30b762,"flixel.input.gamepad.FlxGamepad.getAnalogXAxisValue","flixel/input/gamepad/FlxGamepad.hx",696,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stick,"stick")
HXLINE( 697)		Bool _hx_tmp = hx::IsNull( stick );
HXDLIN( 697)		if (_hx_tmp) {
HXLINE( 698)			return (int)0;
            		}
HXLINE( 699)		if (hx::IsEq( this->deadZoneMode,::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::CIRCULAR_dyn() )) {
HXLINE( 699)			return this->getAnalogAxisValueCircular(stick,stick->x);
            		}
            		else {
HXLINE( 699)			return this->getAnalogAxisValueIndependant(stick->x);
            		}
HXDLIN( 699)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogXAxisValue,return )

Float FlxGamepad_obj::getAnalogYAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getAnalogYAxisValue",0xaf7b2f41,"flixel.input.gamepad.FlxGamepad.getAnalogYAxisValue","flixel/input/gamepad/FlxGamepad.hx",706,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stick,"stick")
HXLINE( 707)		Bool _hx_tmp = hx::IsNull( stick );
HXDLIN( 707)		if (_hx_tmp) {
HXLINE( 708)			return (int)0;
            		}
HXLINE( 709)		if (hx::IsEq( this->deadZoneMode,::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::CIRCULAR_dyn() )) {
HXLINE( 709)			return this->getAnalogAxisValueCircular(stick,stick->y);
            		}
            		else {
HXLINE( 709)			return this->getAnalogAxisValueIndependant(stick->y);
            		}
HXDLIN( 709)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogYAxisValue,return )

Float FlxGamepad_obj::getAnalogAxisValueCircular( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,Int axisID){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getAnalogAxisValueCircular",0x954ad2e5,"flixel.input.gamepad.FlxGamepad.getAnalogAxisValueCircular","flixel/input/gamepad/FlxGamepad.hx",716,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stick,"stick")
            	HX_STACK_ARG(axisID,"axisID")
HXLINE( 717)		Bool _hx_tmp = hx::IsNull( stick );
HXDLIN( 717)		if (_hx_tmp) {
HXLINE( 718)			return (int)0;
            		}
HXLINE( 719)		HX_VARI( Float,xAxis) = this->getAxisValue(stick->x);
HXLINE( 720)		HX_VARI( Float,yAxis) = this->getAxisValue(stick->y);
HXLINE( 722)		HX_VARI(  ::flixel::math::FlxVector,vector) = Dynamic( ::flixel::math::FlxVector_obj::_pool->get()->set(xAxis,yAxis)).StaticCast<  ::flixel::math::FlxVector >();
HXDLIN( 722)		vector->_inPool = false;
HXLINE( 723)		Float _hx_tmp1 = ((vector->x * vector->x) + (vector->y * vector->y));
HXDLIN( 723)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp1);
HXLINE( 724)		vector->put();
HXLINE( 726)		Float _hx_tmp2 = this->get_deadZone();
HXDLIN( 726)		if ((length > _hx_tmp2)) {
HXLINE( 728)			return this->getAxisValue(axisID);
            		}
HXLINE( 730)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,getAnalogAxisValueCircular,return )

Float FlxGamepad_obj::getAnalogAxisValueIndependant(Int axisID){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","getAnalogAxisValueIndependant",0x41d1fbb0,"flixel.input.gamepad.FlxGamepad.getAnalogAxisValueIndependant","flixel/input/gamepad/FlxGamepad.hx",734,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(axisID,"axisID")
HXLINE( 735)		HX_VARI( Float,axisValue) = this->getAxisValue(axisID);
HXLINE( 736)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 736)		Float _hx_tmp1 = this->get_deadZone();
HXDLIN( 736)		if ((_hx_tmp > _hx_tmp1)) {
HXLINE( 737)			return axisValue;
            		}
HXLINE( 738)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogAxisValueIndependant,return )

void FlxGamepad_obj::handleAxisMove(Int axis,Float newValue,Float oldValue){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","handleAxisMove",0x0dec85b6,"flixel.input.gamepad.FlxGamepad.handleAxisMove","flixel/input/gamepad/FlxGamepad.hx",742,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(newValue,"newValue")
            	HX_STACK_ARG(oldValue,"oldValue")
HXLINE( 743)		HX_VARI( Float,axisValue) = newValue;
HXDLIN( 743)		Bool _hx_tmp = this->mapping->isAxisFlipped(axis);
HXDLIN( 743)		if (_hx_tmp) {
HXLINE( 743)			hx::MultEq(axisValue,(int)-1);
            		}
HXDLIN( 743)		newValue = axisValue;
HXLINE( 744)		HX_VARI_NAME( Float,axisValue1,"axisValue") = oldValue;
HXDLIN( 744)		Bool _hx_tmp1 = this->mapping->isAxisFlipped(axis);
HXDLIN( 744)		if (_hx_tmp1) {
HXLINE( 744)			hx::MultEq(axisValue1,(int)-1);
            		}
HXDLIN( 744)		oldValue = axisValue1;
HXLINE( 747)		HX_VARI(  ::flixel::input::gamepad::FlxGamepadAnalogStick,leftStick) = this->mapping->leftStick;
HXDLIN( 747)		HX_VARI(  ::flixel::input::gamepad::FlxGamepadAnalogStick,rightStick) = this->mapping->rightStick;
HXDLIN( 747)		HX_VAR(  ::flixel::input::gamepad::FlxGamepadAnalogStick,stick);
HXDLIN( 747)		Bool _hx_tmp2;
HXDLIN( 747)		Bool _hx_tmp3;
HXDLIN( 747)		Bool _hx_tmp4 = hx::IsNotNull( leftStick );
HXDLIN( 747)		if (_hx_tmp4) {
HXLINE( 747)			_hx_tmp3 = (axis == leftStick->x);
            		}
            		else {
HXLINE( 747)			_hx_tmp3 = false;
            		}
HXDLIN( 747)		if (!(_hx_tmp3)) {
HXLINE( 747)			_hx_tmp2 = (axis == leftStick->y);
            		}
            		else {
HXLINE( 747)			_hx_tmp2 = true;
            		}
HXDLIN( 747)		if (_hx_tmp2) {
HXLINE( 747)			stick = leftStick;
            		}
            		else {
HXLINE( 747)			Bool _hx_tmp5;
HXDLIN( 747)			Bool _hx_tmp6;
HXDLIN( 747)			Bool _hx_tmp7 = hx::IsNotNull( rightStick );
HXDLIN( 747)			if (_hx_tmp7) {
HXLINE( 747)				_hx_tmp6 = (axis == rightStick->x);
            			}
            			else {
HXLINE( 747)				_hx_tmp6 = false;
            			}
HXDLIN( 747)			if (!(_hx_tmp6)) {
HXLINE( 747)				_hx_tmp5 = (axis == rightStick->y);
            			}
            			else {
HXLINE( 747)				_hx_tmp5 = true;
            			}
HXDLIN( 747)			if (_hx_tmp5) {
HXLINE( 747)				stick = rightStick;
            			}
            			else {
HXLINE( 747)				stick = null();
            			}
            		}
HXLINE( 748)		Bool _hx_tmp8;
HXDLIN( 748)		if (hx::IsNotEq( stick->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::ONLY_DIGITAL_dyn() )) {
HXLINE( 748)			_hx_tmp8 = hx::IsEq( stick->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::BOTH_dyn() );
            		}
            		else {
HXLINE( 748)			_hx_tmp8 = true;
            		}
HXDLIN( 748)		if (_hx_tmp8) {
HXLINE( 750)			this->handleAxisMoveSub(stick,axis,newValue,oldValue,((Float)1.0));
HXLINE( 751)			this->handleAxisMoveSub(stick,axis,newValue,oldValue,((Float)-1.0));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxGamepad_obj,handleAxisMove,(void))

void FlxGamepad_obj::handleAxisMoveSub( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,Int axis,Float value,Float oldValue,hx::Null< Float >  __o_sign){
Float sign = __o_sign.Default(((Float)1.0));
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","handleAxisMoveSub",0xcf80d16a,"flixel.input.gamepad.FlxGamepad.handleAxisMoveSub","flixel/input/gamepad/FlxGamepad.hx",761,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stick,"stick")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(oldValue,"oldValue")
            	HX_STACK_ARG(sign,"sign")
HXLINE( 762)		HX_VARI( Int,digitalButton) = (int)-1;
HXLINE( 764)		if ((axis == stick->x)) {
HXLINE( 766)			if ((sign < (int)0)) {
HXLINE( 766)				digitalButton = stick->rawLeft;
            			}
            			else {
HXLINE( 766)				digitalButton = stick->rawRight;
            			}
            		}
            		else {
HXLINE( 768)			if ((axis == stick->y)) {
HXLINE( 770)				if ((sign < (int)0)) {
HXLINE( 770)					digitalButton = stick->rawUp;
            				}
            				else {
HXLINE( 770)					digitalButton = stick->rawDown;
            				}
            			}
            		}
HXLINE( 773)		HX_VARI( Float,threshold) = stick->digitalThreshold;
HXLINE( 774)		HX_VARI( Float,valueSign) = (value * sign);
HXLINE( 775)		HX_VARI( Float,oldValueSign) = (oldValue * sign);
HXLINE( 777)		Bool _hx_tmp;
HXDLIN( 777)		if ((valueSign > threshold)) {
HXLINE( 777)			_hx_tmp = (oldValueSign <= threshold);
            		}
            		else {
HXLINE( 777)			_hx_tmp = false;
            		}
HXDLIN( 777)		if (_hx_tmp) {
HXLINE( 779)			HX_VARI(  ::flixel::input::gamepad::FlxGamepadButton,btn) = this->getButton(digitalButton);
HXLINE( 780)			Bool _hx_tmp1 = hx::IsNotNull( btn );
HXDLIN( 780)			if (_hx_tmp1) {
HXLINE( 780)				btn->press();
            			}
            		}
            		else {
HXLINE( 782)			Bool _hx_tmp2;
HXDLIN( 782)			if ((valueSign <= threshold)) {
HXLINE( 782)				_hx_tmp2 = (oldValueSign > threshold);
            			}
            			else {
HXLINE( 782)				_hx_tmp2 = false;
            			}
HXDLIN( 782)			if (_hx_tmp2) {
HXLINE( 784)				HX_VARI_NAME(  ::flixel::input::gamepad::FlxGamepadButton,btn1,"btn") = this->getButton(digitalButton);
HXLINE( 785)				Bool _hx_tmp3 = hx::IsNotNull( btn1 );
HXDLIN( 785)				if (_hx_tmp3) {
HXLINE( 785)					btn1->release();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxGamepad_obj,handleAxisMoveSub,(void))

 ::flixel::input::gamepad::mappings::FlxGamepadMapping FlxGamepad_obj::createMappingForModel(::hx::EnumBase model){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","createMappingForModel",0x1a17db56,"flixel.input.gamepad.FlxGamepad.createMappingForModel","flixel/input/gamepad/FlxGamepad.hx",790,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(model,"model")
HXLINE( 790)		Int _hx_tmp = ( ( ::hx::EnumBase)(model) )->_hx_getIndex();
HXDLIN( 790)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 790)				return  ::flixel::input::gamepad::mappings::LogitechMapping_obj::__new(this->attachment);
            			}
            			break;
            			case (int)1: {
HXLINE( 790)				return  ::flixel::input::gamepad::mappings::OUYAMapping_obj::__new(this->attachment);
            			}
            			break;
            			case (int)2: {
HXLINE( 790)				return  ::flixel::input::gamepad::mappings::PS4Mapping_obj::__new(this->attachment);
            			}
            			break;
            			case (int)3: {
HXLINE( 790)				return  ::flixel::input::gamepad::mappings::PSVitaMapping_obj::__new(this->attachment);
            			}
            			break;
            			case (int)4: {
HXLINE( 790)				return  ::flixel::input::gamepad::mappings::XInputMapping_obj::__new(this->attachment);
            			}
            			break;
            			case (int)5: {
HXLINE( 790)				return  ::flixel::input::gamepad::mappings::MayflashWiiRemoteMapping_obj::__new(this->attachment);
            			}
            			break;
            			case (int)6: {
HXLINE( 790)				return  ::flixel::input::gamepad::mappings::WiiRemoteMapping_obj::__new(this->attachment);
            			}
            			break;
            			case (int)7: {
HXLINE( 790)				return  ::flixel::input::gamepad::mappings::MFiMapping_obj::__new(this->attachment);
            			}
            			break;
            			default:{
HXLINE( 790)				return  ::flixel::input::gamepad::mappings::XInputMapping_obj::__new(this->attachment);
            			}
            		}
HXDLIN( 790)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,createMappingForModel,return )

::hx::EnumBase FlxGamepad_obj::set_model(::hx::EnumBase Model){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","set_model",0xd59c83f0,"flixel.input.gamepad.FlxGamepad.set_model","flixel/input/gamepad/FlxGamepad.hx",815,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Model,"Model")
HXLINE( 816)		this->model = Model;
HXLINE( 817)		this->mapping = this->createMappingForModel(this->model);
HXLINE( 819)		return this->model;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_model,return )

::hx::EnumBase FlxGamepad_obj::set_attachment(::hx::EnumBase Attachment){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","set_attachment",0xa3a9463c,"flixel.input.gamepad.FlxGamepad.set_attachment","flixel/input/gamepad/FlxGamepad.hx",823,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Attachment,"Attachment")
HXLINE( 824)		this->attachment = Attachment;
HXLINE( 825)		this->mapping->set_attachment(Attachment);
HXLINE( 826)		return this->attachment;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_attachment,return )

Float FlxGamepad_obj::get_deadZone(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","get_deadZone",0x3fdae195,"flixel.input.gamepad.FlxGamepad.get_deadZone","flixel/input/gamepad/FlxGamepad.hx",831,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 831)		Bool _hx_tmp = hx::IsNull( this->manager->globalDeadZone );
HXDLIN( 831)		if (_hx_tmp) {
HXLINE( 831)			return this->_deadZone;
            		}
            		else {
HXLINE( 831)			return this->manager->globalDeadZone;
            		}
HXDLIN( 831)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,get_deadZone,return )

Float FlxGamepad_obj::set_deadZone(Float deadZone){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","set_deadZone",0x54d40509,"flixel.input.gamepad.FlxGamepad.set_deadZone","flixel/input/gamepad/FlxGamepad.hx",836,0xdb78a809)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deadZone,"deadZone")
HXLINE( 836)		return (this->_deadZone = deadZone);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_deadZone,return )

::String FlxGamepad_obj::toString(){
            	HX_STACK_FRAME("flixel.input.gamepad.FlxGamepad","toString",0x4b874148,"flixel.input.gamepad.FlxGamepad.toString","flixel/input/gamepad/FlxGamepad.hx",841,0xdb78a809)
            	HX_STACK_THIS(this)
HXLINE( 842)		 ::Dynamic value = this->id;
HXDLIN( 842)		HX_VARI(  ::flixel::util::LabelValuePair,_this) = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 842)		_this->label = HX_("id",db,5b,00,00);
HXDLIN( 842)		_this->value = value;
HXLINE( 843)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this1,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 843)		_this1->label = HX_("model",a9,23,58,0c);
HXDLIN( 843)		_this1->value = this->model;
HXLINE( 844)		 ::Dynamic value1 = this->get_deadZone();
HXDLIN( 844)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this2,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 844)		_this2->label = HX_("deadZone",f0,3e,2e,58);
HXDLIN( 844)		_this2->value = value1;
HXLINE( 841)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(3)->init(0,_this)->init(1,_this1)->init(2,_this2));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,toString,return )


FlxGamepad_obj::FlxGamepad_obj()
{
}

void FlxGamepad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxGamepad);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(detectedModel,"detectedModel");
	HX_MARK_MEMBER_NAME(mapping,"mapping");
	HX_MARK_MEMBER_NAME(connected,"connected");
	HX_MARK_MEMBER_NAME(attachment,"attachment");
	HX_MARK_MEMBER_NAME(deadZoneMode,"deadZoneMode");
	HX_MARK_MEMBER_NAME(pressed,"pressed");
	HX_MARK_MEMBER_NAME(justPressed,"justPressed");
	HX_MARK_MEMBER_NAME(justReleased,"justReleased");
	HX_MARK_MEMBER_NAME(analog,"analog");
	HX_MARK_MEMBER_NAME(motion,"motion");
	HX_MARK_MEMBER_NAME(pointer,"pointer");
	HX_MARK_MEMBER_NAME(hat,"hat");
	HX_MARK_MEMBER_NAME(ball,"ball");
	HX_MARK_MEMBER_NAME(axis,"axis");
	HX_MARK_MEMBER_NAME(axisActive,"axisActive");
	HX_MARK_MEMBER_NAME(manager,"manager");
	HX_MARK_MEMBER_NAME(_deadZone,"_deadZone");
	HX_MARK_MEMBER_NAME(buttons,"buttons");
	HX_MARK_END_CLASS();
}

void FlxGamepad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(detectedModel,"detectedModel");
	HX_VISIT_MEMBER_NAME(mapping,"mapping");
	HX_VISIT_MEMBER_NAME(connected,"connected");
	HX_VISIT_MEMBER_NAME(attachment,"attachment");
	HX_VISIT_MEMBER_NAME(deadZoneMode,"deadZoneMode");
	HX_VISIT_MEMBER_NAME(pressed,"pressed");
	HX_VISIT_MEMBER_NAME(justPressed,"justPressed");
	HX_VISIT_MEMBER_NAME(justReleased,"justReleased");
	HX_VISIT_MEMBER_NAME(analog,"analog");
	HX_VISIT_MEMBER_NAME(motion,"motion");
	HX_VISIT_MEMBER_NAME(pointer,"pointer");
	HX_VISIT_MEMBER_NAME(hat,"hat");
	HX_VISIT_MEMBER_NAME(ball,"ball");
	HX_VISIT_MEMBER_NAME(axis,"axis");
	HX_VISIT_MEMBER_NAME(axisActive,"axisActive");
	HX_VISIT_MEMBER_NAME(manager,"manager");
	HX_VISIT_MEMBER_NAME(_deadZone,"_deadZone");
	HX_VISIT_MEMBER_NAME(buttons,"buttons");
}

hx::Val FlxGamepad_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"hat") ) { return hx::Val( hat); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ball") ) { return hx::Val( ball); }
		if (HX_FIELD_EQ(inName,"axis") ) { return hx::Val( axis); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return hx::Val( model); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"analog") ) { return hx::Val( analog); }
		if (HX_FIELD_EQ(inName,"motion") ) { return hx::Val( motion); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mapping") ) { return hx::Val( mapping); }
		if (HX_FIELD_EQ(inName,"pressed") ) { return hx::Val( pressed); }
		if (HX_FIELD_EQ(inName,"pointer") ) { return hx::Val( pointer); }
		if (HX_FIELD_EQ(inName,"manager") ) { return hx::Val( manager); }
		if (HX_FIELD_EQ(inName,"buttons") ) { return hx::Val( buttons); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"getAxis") ) { return hx::Val( getAxis_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadZone") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_deadZone()); }
		if (HX_FIELD_EQ(inName,"getXAxis") ) { return hx::Val( getXAxis_dyn()); }
		if (HX_FIELD_EQ(inName,"getYAxis") ) { return hx::Val( getYAxis_dyn()); }
		if (HX_FIELD_EQ(inName,"anyInput") ) { return hx::Val( anyInput_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { return hx::Val( connected); }
		if (HX_FIELD_EQ(inName,"_deadZone") ) { return hx::Val( _deadZone); }
		if (HX_FIELD_EQ(inName,"getButton") ) { return hx::Val( getButton_dyn()); }
		if (HX_FIELD_EQ(inName,"anyButton") ) { return hx::Val( anyButton_dyn()); }
		if (HX_FIELD_EQ(inName,"set_model") ) { return hx::Val( set_model_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attachment") ) { return hx::Val( attachment); }
		if (HX_FIELD_EQ(inName,"axisActive") ) { return hx::Val( axisActive); }
		if (HX_FIELD_EQ(inName,"anyPressed") ) { return hx::Val( anyPressed_dyn()); }
		if (HX_FIELD_EQ(inName,"getAxisRaw") ) { return hx::Val( getAxisRaw_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { return hx::Val( justPressed); }
		if (HX_FIELD_EQ(inName,"checkStatus") ) { return hx::Val( checkStatus_dyn()); }
		if (HX_FIELD_EQ(inName,"getXAxisRaw") ) { return hx::Val( getXAxisRaw_dyn()); }
		if (HX_FIELD_EQ(inName,"getYAxisRaw") ) { return hx::Val( getYAxisRaw_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deadZoneMode") ) { return hx::Val( deadZoneMode); }
		if (HX_FIELD_EQ(inName,"justReleased") ) { return hx::Val( justReleased); }
		if (HX_FIELD_EQ(inName,"getAxisValue") ) { return hx::Val( getAxisValue_dyn()); }
		if (HX_FIELD_EQ(inName,"get_deadZone") ) { return hx::Val( get_deadZone_dyn()); }
		if (HX_FIELD_EQ(inName,"set_deadZone") ) { return hx::Val( set_deadZone_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detectedModel") ) { return hx::Val( detectedModel); }
		if (HX_FIELD_EQ(inName,"applyAxisFlip") ) { return hx::Val( applyAxisFlip_dyn()); }
		if (HX_FIELD_EQ(inName,"anyPressedRaw") ) { return hx::Val( anyPressedRaw_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"checkStatusRaw") ) { return hx::Val( checkStatusRaw_dyn()); }
		if (HX_FIELD_EQ(inName,"anyJustPressed") ) { return hx::Val( anyJustPressed_dyn()); }
		if (HX_FIELD_EQ(inName,"firstPressedID") ) { return hx::Val( firstPressedID_dyn()); }
		if (HX_FIELD_EQ(inName,"handleAxisMove") ) { return hx::Val( handleAxisMove_dyn()); }
		if (HX_FIELD_EQ(inName,"set_attachment") ) { return hx::Val( set_attachment_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"anyJustReleased") ) { return hx::Val( anyJustReleased_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"anyJustPressedRaw") ) { return hx::Val( anyJustPressedRaw_dyn()); }
		if (HX_FIELD_EQ(inName,"firstPressedRawID") ) { return hx::Val( firstPressedRawID_dyn()); }
		if (HX_FIELD_EQ(inName,"handleAxisMoveSub") ) { return hx::Val( handleAxisMoveSub_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"anyJustReleasedRaw") ) { return hx::Val( anyJustReleasedRaw_dyn()); }
		if (HX_FIELD_EQ(inName,"firstJustPressedID") ) { return hx::Val( firstJustPressedID_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"firstJustReleasedID") ) { return hx::Val( firstJustReleasedID_dyn()); }
		if (HX_FIELD_EQ(inName,"getAnalogXAxisValue") ) { return hx::Val( getAnalogXAxisValue_dyn()); }
		if (HX_FIELD_EQ(inName,"getAnalogYAxisValue") ) { return hx::Val( getAnalogYAxisValue_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"isAxisForAnalogStick") ) { return hx::Val( isAxisForAnalogStick_dyn()); }
		if (HX_FIELD_EQ(inName,"getAnalogStickByAxis") ) { return hx::Val( getAnalogStickByAxis_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"firstJustPressedRawID") ) { return hx::Val( firstJustPressedRawID_dyn()); }
		if (HX_FIELD_EQ(inName,"createMappingForModel") ) { return hx::Val( createMappingForModel_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"firstJustReleasedRawID") ) { return hx::Val( firstJustReleasedRawID_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"getAnalogAxisValueCircular") ) { return hx::Val( getAnalogAxisValueCircular_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"getAnalogAxisValueIndependant") ) { return hx::Val( getAnalogAxisValueIndependant_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxGamepad_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< Int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"hat") ) { hat=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ball") ) { ball=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"axis") ) { axis=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_model(inValue) );model=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"analog") ) { analog=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadAnalogList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"motion") ) { motion=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mapping") ) { mapping=inValue.Cast<  ::flixel::input::gamepad::mappings::FlxGamepadMapping >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pressed") ) { pressed=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointer") ) { pointer=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"manager") ) { manager=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadZone") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_deadZone(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { connected=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_deadZone") ) { _deadZone=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attachment") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_attachment(inValue) );attachment=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"axisActive") ) { axisActive=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { justPressed=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deadZoneMode") ) { deadZoneMode=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"justReleased") ) { justReleased=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detectedModel") ) { detectedModel=inValue.Cast< ::hx::EnumBase >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxGamepad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"));
	outFields->push(HX_HCSTRING("detectedModel","\xc7","\xfe","\x45","\xf3"));
	outFields->push(HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44"));
	outFields->push(HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"));
	outFields->push(HX_HCSTRING("attachment","\xe3","\x07","\x73","\xdd"));
	outFields->push(HX_HCSTRING("deadZone","\xf0","\x3e","\x2e","\x58"));
	outFields->push(HX_HCSTRING("deadZoneMode","\x73","\x76","\x8a","\x42"));
	outFields->push(HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"));
	outFields->push(HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2"));
	outFields->push(HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66"));
	outFields->push(HX_HCSTRING("analog","\x30","\xd6","\x21","\x5f"));
	outFields->push(HX_HCSTRING("motion","\x36","\x86","\x5d","\xcb"));
	outFields->push(HX_HCSTRING("pointer","\xbd","\xc0","\x21","\x51"));
	outFields->push(HX_HCSTRING("hat","\x5b","\x3f","\x4f","\x00"));
	outFields->push(HX_HCSTRING("ball","\xff","\xe1","\x10","\x41"));
	outFields->push(HX_HCSTRING("axis","\xa1","\x1c","\x79","\x40"));
	outFields->push(HX_HCSTRING("axisActive","\x47","\x81","\x10","\x2c"));
	outFields->push(HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13"));
	outFields->push(HX_HCSTRING("_deadZone","\x4f","\x36","\xc4","\x9f"));
	outFields->push(HX_HCSTRING("buttons","\x41","\x52","\x75","\xca"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxGamepad_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxGamepad_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadModel*/ ,(int)offsetof(FlxGamepad_obj,model),HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadModel*/ ,(int)offsetof(FlxGamepad_obj,detectedModel),HX_HCSTRING("detectedModel","\xc7","\xfe","\x45","\xf3")},
	{hx::fsObject /*::flixel::input::gamepad::mappings::FlxGamepadMapping*/ ,(int)offsetof(FlxGamepad_obj,mapping),HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44")},
	{hx::fsBool,(int)offsetof(FlxGamepad_obj,connected),HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadAttachment*/ ,(int)offsetof(FlxGamepad_obj,attachment),HX_HCSTRING("attachment","\xe3","\x07","\x73","\xdd")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadDeadZoneMode*/ ,(int)offsetof(FlxGamepad_obj,deadZoneMode),HX_HCSTRING("deadZoneMode","\x73","\x76","\x8a","\x42")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadButtonList*/ ,(int)offsetof(FlxGamepad_obj,pressed),HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadButtonList*/ ,(int)offsetof(FlxGamepad_obj,justPressed),HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadButtonList*/ ,(int)offsetof(FlxGamepad_obj,justReleased),HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadAnalogList*/ ,(int)offsetof(FlxGamepad_obj,analog),HX_HCSTRING("analog","\x30","\xd6","\x21","\x5f")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadMotionValueList*/ ,(int)offsetof(FlxGamepad_obj,motion),HX_HCSTRING("motion","\x36","\x86","\x5d","\xcb")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadPointerValueList*/ ,(int)offsetof(FlxGamepad_obj,pointer),HX_HCSTRING("pointer","\xbd","\xc0","\x21","\x51")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxGamepad_obj,hat),HX_HCSTRING("hat","\x5b","\x3f","\x4f","\x00")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxGamepad_obj,ball),HX_HCSTRING("ball","\xff","\xe1","\x10","\x41")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxGamepad_obj,axis),HX_HCSTRING("axis","\xa1","\x1c","\x79","\x40")},
	{hx::fsBool,(int)offsetof(FlxGamepad_obj,axisActive),HX_HCSTRING("axisActive","\x47","\x81","\x10","\x2c")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadManager*/ ,(int)offsetof(FlxGamepad_obj,manager),HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13")},
	{hx::fsFloat,(int)offsetof(FlxGamepad_obj,_deadZone),HX_HCSTRING("_deadZone","\x4f","\x36","\xc4","\x9f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGamepad_obj,buttons),HX_HCSTRING("buttons","\x41","\x52","\x75","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxGamepad_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxGamepad_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("detectedModel","\xc7","\xfe","\x45","\xf3"),
	HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44"),
	HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"),
	HX_HCSTRING("attachment","\xe3","\x07","\x73","\xdd"),
	HX_HCSTRING("deadZoneMode","\x73","\x76","\x8a","\x42"),
	HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"),
	HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2"),
	HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66"),
	HX_HCSTRING("analog","\x30","\xd6","\x21","\x5f"),
	HX_HCSTRING("motion","\x36","\x86","\x5d","\xcb"),
	HX_HCSTRING("pointer","\xbd","\xc0","\x21","\x51"),
	HX_HCSTRING("hat","\x5b","\x3f","\x4f","\x00"),
	HX_HCSTRING("ball","\xff","\xe1","\x10","\x41"),
	HX_HCSTRING("axis","\xa1","\x1c","\x79","\x40"),
	HX_HCSTRING("axisActive","\x47","\x81","\x10","\x2c"),
	HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13"),
	HX_HCSTRING("_deadZone","\x4f","\x36","\xc4","\x9f"),
	HX_HCSTRING("buttons","\x41","\x52","\x75","\xca"),
	HX_HCSTRING("getButton","\x28","\xeb","\x36","\x56"),
	HX_HCSTRING("applyAxisFlip","\x7c","\x1f","\x87","\xcb"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("checkStatus","\x1a","\xba","\x0d","\xe8"),
	HX_HCSTRING("checkStatusRaw","\xee","\x9f","\x30","\xe1"),
	HX_HCSTRING("anyPressed","\x16","\x75","\x02","\x90"),
	HX_HCSTRING("anyPressedRaw","\x72","\xea","\xfd","\x41"),
	HX_HCSTRING("anyJustPressed","\x4a","\xfa","\xb6","\xa6"),
	HX_HCSTRING("anyJustPressedRaw","\xbe","\x9d","\x89","\x5f"),
	HX_HCSTRING("anyJustReleased","\x15","\x14","\x3a","\x40"),
	HX_HCSTRING("anyJustReleasedRaw","\xd3","\x74","\x6a","\x66"),
	HX_HCSTRING("firstPressedID","\xad","\x60","\xf7","\xba"),
	HX_HCSTRING("firstPressedRawID","\x11","\x7e","\x5f","\x62"),
	HX_HCSTRING("firstJustPressedID","\xe1","\x68","\xae","\x5d"),
	HX_HCSTRING("firstJustPressedRawID","\x5d","\x8e","\x1c","\x78"),
	HX_HCSTRING("firstJustReleasedID","\x74","\xef","\x61","\x8d"),
	HX_HCSTRING("firstJustReleasedRawID","\xaa","\x25","\x0b","\xce"),
	HX_HCSTRING("getAxis","\x57","\xcc","\xfb","\x12"),
	HX_HCSTRING("getAxisRaw","\xd1","\xd1","\x2b","\xcd"),
	HX_HCSTRING("isAxisForAnalogStick","\x82","\x9b","\xbe","\x67"),
	HX_HCSTRING("getAnalogStickByAxis","\xc2","\xe5","\xb1","\xcc"),
	HX_HCSTRING("getXAxis","\xc3","\xf4","\x3e","\xa3"),
	HX_HCSTRING("getXAxisRaw","\xe5","\xb4","\xb4","\x40"),
	HX_HCSTRING("getYAxis","\x44","\x89","\xa5","\x36"),
	HX_HCSTRING("getYAxisRaw","\x04","\x27","\xe7","\x79"),
	HX_HCSTRING("anyButton","\xfe","\xc9","\x3f","\x37"),
	HX_HCSTRING("anyInput","\x7e","\x21","\xd0","\x3c"),
	HX_HCSTRING("getAxisValue","\x9a","\x07","\xb3","\x9a"),
	HX_HCSTRING("getAnalogXAxisValue","\x7e","\x5a","\xac","\x0a"),
	HX_HCSTRING("getAnalogYAxisValue","\x5d","\xd2","\xf6","\xca"),
	HX_HCSTRING("getAnalogAxisValueCircular","\x49","\x0b","\x5e","\x0f"),
	HX_HCSTRING("getAnalogAxisValueIndependant","\xcc","\x19","\xab","\x5b"),
	HX_HCSTRING("handleAxisMove","\x1a","\xb8","\xcb","\xdd"),
	HX_HCSTRING("handleAxisMoveSub","\x86","\x35","\xc6","\x43"),
	HX_HCSTRING("createMappingForModel","\x72","\x7d","\x17","\xc6"),
	HX_HCSTRING("set_model","\x0c","\x6c","\x52","\x33"),
	HX_HCSTRING("set_attachment","\xa0","\x78","\x88","\x73"),
	HX_HCSTRING("get_deadZone","\xf9","\xf2","\x47","\x0d"),
	HX_HCSTRING("set_deadZone","\x6d","\x16","\x41","\x22"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void FlxGamepad_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGamepad_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGamepad_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGamepad_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxGamepad_obj::__mClass;

void FlxGamepad_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.input.gamepad.FlxGamepad","\x52","\x73","\x7c","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxGamepad_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxGamepad_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxGamepad_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGamepad_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGamepad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGamepad_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
