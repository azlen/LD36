// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxNode
#include <flixel/graphics/atlas/FlxNode.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_MouseEvent
#include <openfl/_legacy/events/MouseEvent.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)-1,
};
static const ::String _hx_array_data_1[] = {
	HX_("normal",27,72,69,30),HX_("highlight",34,56,00,ed),HX_("pressed",a2,d2,e6,39),
};
static const Float _hx_array_data_2[] = {
	0.8,1.0,0.5,
};
namespace flixel{
namespace ui{

void FlxTypedButton_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic OnClick){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","new",0xc7e33f04,"flixel.ui.FlxTypedButton.new","flixel/ui/FlxButton.hx",113,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(OnClick,"OnClick")
HXLINE( 192)		this->lastStatus = (int)-1;
HXLINE( 149)		this->maxInputMovement = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 142)		this->mouseButtons = ::Array_obj< Int >::fromData( _hx_array_data_0,1);
HXLINE( 137)		this->allowSwiping = true;
HXLINE( 132)		this->statusAnimations = ::Array_obj< ::String >::fromData( _hx_array_data_1,3);
HXLINE( 127)		this->labelAlphas = ::Array_obj< Float >::fromData( _hx_array_data_2,3);
HXLINE( 122)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 122)		point->_inPool = false;
HXDLIN( 122)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 122)		point1->_inPool = false;
HXDLIN( 122)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)1);
HXDLIN( 122)		point2->_inPool = false;
HXDLIN( 122)		this->labelOffsets = ::Array_obj< ::Dynamic>::__new(3)->init(0,point)->init(1,point1)->init(2,point2);
HXLINE( 203)		super::__construct(X,Y,null());
HXLINE( 205)		this->loadDefaultGraphic();
HXLINE( 207)		this->onUp =  ::flixel::ui::_FlxButton::FlxButtonEvent_obj::__new(OnClick,null());
HXLINE( 208)		this->onDown =  ::flixel::ui::_FlxButton::FlxButtonEvent_obj::__new(null(),null());
HXLINE( 209)		this->onOver =  ::flixel::ui::_FlxButton::FlxButtonEvent_obj::__new(null(),null());
HXLINE( 210)		this->onOut =  ::flixel::ui::_FlxButton::FlxButtonEvent_obj::__new(null(),null());
HXLINE( 212)		this->set_status((int)0);
HXLINE( 215)		this->scrollFactor->set(null(),null());
HXLINE( 218)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->addEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP,this->onUpEventListener_dyn(),null(),null(),null());
HXLINE( 226)		this->input =  ::flixel::input::FlxInput_obj::__new((int)0);
            	}

Dynamic FlxTypedButton_obj::__CreateEmpty() { return new FlxTypedButton_obj; }

hx::ObjectPtr< FlxTypedButton_obj > FlxTypedButton_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic OnClick)
{
	hx::ObjectPtr< FlxTypedButton_obj > _hx_result = new FlxTypedButton_obj();
	_hx_result->__construct(__o_X,__o_Y,OnClick);
	return _hx_result;
}

Dynamic FlxTypedButton_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypedButton_obj > _hx_result = new FlxTypedButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

static ::flixel::input::IFlxInput_obj _hx_flixel_ui_FlxTypedButton__hx_flixel_input_IFlxInput= {
	( Bool (hx::Object::*)())&::flixel::ui::FlxTypedButton_obj::get_justReleased,
	( Bool (hx::Object::*)())&::flixel::ui::FlxTypedButton_obj::get_released,
	( Bool (hx::Object::*)())&::flixel::ui::FlxTypedButton_obj::get_pressed,
	( Bool (hx::Object::*)())&::flixel::ui::FlxTypedButton_obj::get_justPressed,
};

void *FlxTypedButton_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x52baf533: return &_hx_flixel_ui_FlxTypedButton__hx_flixel_input_IFlxInput;
	}
	return super::_hx_getInterface(inHash);
}

void FlxTypedButton_obj::graphicLoaded(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","graphicLoaded",0xa7022871,"flixel.ui.FlxTypedButton.graphicLoaded","flixel/ui/FlxButton.hx",230,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 231)		this->super::graphicLoaded();
HXLINE( 233)		this->setupAnimation(HX_("normal",27,72,69,30),(int)0);
HXLINE( 234)		this->setupAnimation(HX_("highlight",34,56,00,ed),(int)1);
HXLINE( 235)		this->setupAnimation(HX_("pressed",a2,d2,e6,39),(int)2);
            	}


void FlxTypedButton_obj::loadDefaultGraphic(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","loadDefaultGraphic",0xe0dec289,"flixel.ui.FlxTypedButton.loadDefaultGraphic","flixel/ui/FlxButton.hx",240,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 240)		this->loadGraphic(HX_("flixel/images/ui/button.png",44,ee,2f,34),true,(int)80,(int)20,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,loadDefaultGraphic,(void))

void FlxTypedButton_obj::setupAnimation(::String animationName,Int frameIndex){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","setupAnimation",0xeb5c74a3,"flixel.ui.FlxTypedButton.setupAnimation","flixel/ui/FlxButton.hx",244,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(animationName,"animationName")
            	HX_STACK_ARG(frameIndex,"frameIndex")
HXLINE( 246)		Int _hx_tmp = (this->animation->_sprite->numFrames - (int)1);
HXDLIN( 246)		Float _hx_tmp1 = ::Math_obj::min(frameIndex,_hx_tmp);
HXDLIN( 246)		frameIndex = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE( 247)		this->animation->add(animationName,::Array_obj< Int >::__new(1)->init(0,frameIndex),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedButton_obj,setupAnimation,(void))

void FlxTypedButton_obj::destroy(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","destroy",0xe11bbd9e,"flixel.ui.FlxTypedButton.destroy","flixel/ui/FlxButton.hx",254,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 255)		 ::Dynamic _hx_tmp = ::flixel::util::FlxDestroyUtil_obj::destroy(this->label);
HXDLIN( 255)		this->set_label(_hx_tmp);
HXLINE( 256)		this->_spriteLabel = null();
HXLINE( 258)		this->onUp = ( ( ::flixel::ui::_FlxButton::FlxButtonEvent)(::flixel::util::FlxDestroyUtil_obj::destroy(this->onUp)) );
HXLINE( 259)		this->onDown = ( ( ::flixel::ui::_FlxButton::FlxButtonEvent)(::flixel::util::FlxDestroyUtil_obj::destroy(this->onDown)) );
HXLINE( 260)		this->onOver = ( ( ::flixel::ui::_FlxButton::FlxButtonEvent)(::flixel::util::FlxDestroyUtil_obj::destroy(this->onOver)) );
HXLINE( 261)		this->onOut = ( ( ::flixel::ui::_FlxButton::FlxButtonEvent)(::flixel::util::FlxDestroyUtil_obj::destroy(this->onOut)) );
HXLINE( 263)		this->labelOffsets = ::flixel::util::FlxDestroyUtil_obj::putArray(this->labelOffsets);
HXLINE( 265)		this->labelAlphas = null();
HXLINE( 266)		this->currentInput = null();
HXLINE( 267)		this->input = null();
HXLINE( 270)		::openfl::_legacy::Lib_obj::get_current()->get_stage()->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP,this->onUpEventListener_dyn(),null());
HXLINE( 273)		this->super::destroy();
            	}


void FlxTypedButton_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","update",0xc4b5d5e5,"flixel.ui.FlxTypedButton.update","flixel/ui/FlxButton.hx",280,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 281)		this->super::update(elapsed);
HXLINE( 283)		this->input->update();
HXLINE( 285)		Bool _hx_tmp = this->visible;
HXDLIN( 285)		if (_hx_tmp) {
HXLINE( 289)			this->updateButton();
HXLINE( 293)			Bool _hx_tmp1 = (this->lastStatus != this->status);
HXDLIN( 293)			if (_hx_tmp1) {
HXLINE( 295)				this->updateStatusAnimation();
HXLINE( 296)				this->lastStatus = this->status;
            			}
            		}
            	}


void FlxTypedButton_obj::updateStatusAnimation(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","updateStatusAnimation",0x00250d0d,"flixel.ui.FlxTypedButton.updateStatusAnimation","flixel/ui/FlxButton.hx",303,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 303)		::String _hx_tmp = this->statusAnimations->__get(this->status);
HXDLIN( 303)		this->animation->play(_hx_tmp,null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,updateStatusAnimation,(void))

void FlxTypedButton_obj::draw(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","draw",0x18618ce0,"flixel.ui.FlxTypedButton.draw","flixel/ui/FlxButton.hx",310,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 311)		this->super::draw();
HXLINE( 313)		Bool _hx_tmp;
HXDLIN( 313)		Bool _hx_tmp1 = hx::IsNotNull( this->_spriteLabel );
HXDLIN( 313)		if (_hx_tmp1) {
HXLINE( 313)			_hx_tmp = this->_spriteLabel->visible;
            		}
            		else {
HXLINE( 313)			_hx_tmp = false;
            		}
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 315)			::Array< ::Dynamic> _hx_tmp2 = this->get_cameras();
HXDLIN( 315)			this->_spriteLabel->set_cameras(_hx_tmp2);
HXLINE( 316)			this->_spriteLabel->draw();
            		}
            	}


Bool FlxTypedButton_obj::stampOnAtlas( ::flixel::graphics::atlas::FlxAtlas atlas){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","stampOnAtlas",0xa90d96c5,"flixel.ui.FlxTypedButton.stampOnAtlas","flixel/ui/FlxButton.hx",344,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(atlas,"atlas")
HXLINE( 345)		HX_VARI(  ::flixel::graphics::atlas::FlxNode,buttonNode) = atlas->addNode(this->graphic->bitmap,this->graphic->key);
HXLINE( 346)		HX_VARI( Bool,result) = hx::IsNotNull( buttonNode );
HXLINE( 348)		Bool _hx_tmp = hx::IsNotNull( buttonNode );
HXDLIN( 348)		if (_hx_tmp) {
HXLINE( 350)			HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,buttonFrames) = ( ( ::flixel::graphics::frames::FlxTileFrames)(this->frames) );
HXLINE( 351)			Float X = buttonFrames->tileSize->x;
HXDLIN( 351)			Float Y = buttonFrames->tileSize->y;
HXDLIN( 351)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 351)			point->_inPool = false;
HXLINE( 352)			HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,tileFrames) = buttonNode->getTileFrames(point,null(),null());
HXLINE( 353)			this->set_frames(tileFrames);
            		}
HXLINE( 356)		Bool _hx_tmp1;
HXDLIN( 356)		if (result) {
HXLINE( 356)			_hx_tmp1 = hx::IsNotNull( this->label );
            		}
            		else {
HXLINE( 356)			_hx_tmp1 = false;
            		}
HXDLIN( 356)		if (_hx_tmp1) {
HXLINE( 358)			HX_VARI(  ::flixel::graphics::atlas::FlxNode,labelNode) = atlas->addNode(( ( ::flixel::FlxSprite)(this->label) )->graphic->bitmap,( ( ::flixel::FlxSprite)(this->label) )->graphic->key);
HXLINE( 359)			Bool _hx_tmp2 = result;
HXDLIN( 359)			if (_hx_tmp2) {
HXLINE( 359)				result = hx::IsNotNull( labelNode );
            			}
            			else {
HXLINE( 359)				result = false;
            			}
HXLINE( 361)			Bool _hx_tmp3 = hx::IsNotNull( labelNode );
HXDLIN( 361)			if (_hx_tmp3) {
HXLINE( 363)				 ::flixel::graphics::frames::FlxImageFrame _hx_tmp4 = labelNode->getImageFrame();
HXDLIN( 363)				( ( ::flixel::FlxSprite)(this->label) )->set_frames(_hx_tmp4);
            			}
            		}
HXLINE( 367)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,stampOnAtlas,return )

void FlxTypedButton_obj::updateButton(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","updateButton",0x576ba5b7,"flixel.ui.FlxTypedButton.updateButton","flixel/ui/FlxButton.hx",375,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 377)		HX_VARI( Bool,overlapFound) = this->checkMouseOverlap();
HXLINE( 378)		if (!(overlapFound)) {
HXLINE( 379)			overlapFound = this->checkTouchOverlap();
            		}
HXLINE( 388)		Bool _hx_tmp;
HXDLIN( 388)		Bool _hx_tmp1 = (this->status != (int)0);
HXDLIN( 388)		if (_hx_tmp1) {
HXLINE( 389)			if (!(!(overlapFound))) {
HXLINE( 389)				Bool _hx_tmp2 = hx::IsNotNull( this->currentInput );
HXDLIN( 389)				if (_hx_tmp2) {
HXLINE( 388)					_hx_tmp = ::flixel::input::IFlxInput_obj::get_justReleased(this->currentInput);
            				}
            				else {
HXLINE( 388)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 388)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 388)			_hx_tmp = false;
            		}
HXDLIN( 388)		if (_hx_tmp) {
HXLINE( 391)			this->onOutHandler();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,updateButton,(void))

Bool FlxTypedButton_obj::checkMouseOverlap(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","checkMouseOverlap",0xee0aca6e,"flixel.ui.FlxTypedButton.checkMouseOverlap","flixel/ui/FlxButton.hx",396,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 398)		{
HXLINE( 398)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 398)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->get_cameras();
HXDLIN( 398)			while((_g < _g1->length)){
HXLINE( 398)				HX_VARI(  ::flixel::FlxCamera,camera) = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 398)				++_g;
HXLINE( 400)				{
HXLINE( 400)					HX_VARI( Int,_g2) = (int)0;
HXDLIN( 400)					HX_VARI( ::Array< Int >,_g3) = this->mouseButtons;
HXDLIN( 400)					while((_g2 < _g3->length)){
HXLINE( 400)						HX_VARI( Int,buttonID) = _g3->__get(_g2);
HXDLIN( 400)						++_g2;
HXLINE( 402)						HX_VARI(  ::flixel::input::mouse::FlxMouseButton,button) = ::flixel::input::mouse::FlxMouseButton_obj::getByID(buttonID);
HXLINE( 403)						Bool _hx_tmp;
HXDLIN( 403)						Bool _hx_tmp1 = hx::IsNotNull( button );
HXDLIN( 403)						if (_hx_tmp1) {
HXLINE( 403)							_hx_tmp = this->checkInput(::flixel::FlxG_obj::mouse,button,button->justPressedPosition,camera);
            						}
            						else {
HXLINE( 403)							_hx_tmp = false;
            						}
HXDLIN( 403)						if (_hx_tmp) {
HXLINE( 405)							return true;
            						}
            					}
            				}
            			}
            		}
HXLINE( 411)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,checkMouseOverlap,return )

Bool FlxTypedButton_obj::checkTouchOverlap(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","checkTouchOverlap",0x36c79014,"flixel.ui.FlxTypedButton.checkTouchOverlap","flixel/ui/FlxButton.hx",429,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 429)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,checkTouchOverlap,return )

Bool FlxTypedButton_obj::checkInput( ::flixel::input::FlxPointer pointer,::Dynamic input, ::flixel::math::FlxPoint justPressedPosition, ::flixel::FlxCamera camera){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","checkInput",0xf7b933fe,"flixel.ui.FlxTypedButton.checkInput","flixel/ui/FlxButton.hx",433,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pointer,"pointer")
            	HX_STACK_ARG(input,"input")
            	HX_STACK_ARG(justPressedPosition,"justPressedPosition")
            	HX_STACK_ARG(camera,"camera")
HXLINE( 434)		Bool _hx_tmp;
HXDLIN( 434)		Bool _hx_tmp1;
HXDLIN( 434)		Bool _hx_tmp2 = (this->maxInputMovement != ::Math_obj::POSITIVE_INFINITY);
HXDLIN( 434)		if (_hx_tmp2) {
HXLINE( 435)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 435)			point->_inPool = false;
HXDLIN( 435)			point->_weak = true;
HXDLIN( 435)			 ::flixel::math::FlxPoint _hx_tmp3 = pointer->getScreenPosition(null(),point);
HXDLIN( 435)			Float _hx_tmp4 = justPressedPosition->distanceTo(_hx_tmp3);
HXLINE( 434)			_hx_tmp1 = (_hx_tmp4 > this->maxInputMovement);
            		}
            		else {
HXLINE( 434)			_hx_tmp1 = false;
            		}
HXDLIN( 434)		if (_hx_tmp1) {
HXLINE( 434)			_hx_tmp = hx::IsEq( input,this->currentInput );
            		}
            		else {
HXLINE( 434)			_hx_tmp = false;
            		}
HXDLIN( 434)		if (!(_hx_tmp)) {
HXLINE( 440)			 ::flixel::math::FlxPoint _hx_tmp5 = pointer->getWorldPosition(camera,this->_point);
HXDLIN( 440)			Bool _hx_tmp6 = this->overlapsPoint(_hx_tmp5,true,camera);
HXDLIN( 440)			if (_hx_tmp6) {
HXLINE( 442)				this->updateStatus(input);
HXLINE( 443)				return true;
            			}
            		}
HXLINE( 446)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTypedButton_obj,checkInput,return )

void FlxTypedButton_obj::updateStatus(::Dynamic input){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","updateStatus",0x83872af7,"flixel.ui.FlxTypedButton.updateStatus","flixel/ui/FlxButton.hx",454,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(input,"input")
HXLINE( 454)		Bool _hx_tmp = ::flixel::input::IFlxInput_obj::get_justPressed(input);
HXDLIN( 454)		if (_hx_tmp) {
HXLINE( 456)			this->currentInput = input;
HXLINE( 457)			this->onDownHandler();
            		}
            		else {
HXLINE( 459)			Bool _hx_tmp1 = (this->status == (int)0);
HXDLIN( 459)			if (_hx_tmp1) {
HXLINE( 462)				Bool _hx_tmp2;
HXDLIN( 462)				Bool _hx_tmp3 = this->allowSwiping;
HXDLIN( 462)				if (_hx_tmp3) {
HXLINE( 462)					_hx_tmp2 = ::flixel::input::IFlxInput_obj::get_pressed(input);
            				}
            				else {
HXLINE( 462)					_hx_tmp2 = false;
            				}
HXDLIN( 462)				if (_hx_tmp2) {
HXLINE( 464)					this->onDownHandler();
            				}
            				else {
HXLINE( 468)					this->onOverHandler();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,updateStatus,(void))

void FlxTypedButton_obj::updateLabelPosition(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","updateLabelPosition",0x7d4d6d98,"flixel.ui.FlxTypedButton.updateLabelPosition","flixel/ui/FlxButton.hx",475,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 475)		Bool _hx_tmp = hx::IsNotNull( this->_spriteLabel );
HXDLIN( 475)		if (_hx_tmp) {
HXLINE( 477)			Float _hx_tmp1;
HXDLIN( 477)			Bool _hx_tmp2 = this->pixelPerfectPosition;
HXDLIN( 477)			if (_hx_tmp2) {
HXLINE( 477)				_hx_tmp1 = ::Math_obj::floor(this->x);
            			}
            			else {
HXLINE( 477)				_hx_tmp1 = this->x;
            			}
HXDLIN( 477)			Float _hx_tmp3 = (_hx_tmp1 + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->x);
HXDLIN( 477)			this->_spriteLabel->set_x(_hx_tmp3);
HXLINE( 478)			Float _hx_tmp4;
HXDLIN( 478)			Bool _hx_tmp5 = this->pixelPerfectPosition;
HXDLIN( 478)			if (_hx_tmp5) {
HXLINE( 478)				_hx_tmp4 = ::Math_obj::floor(this->y);
            			}
            			else {
HXLINE( 478)				_hx_tmp4 = this->y;
            			}
HXDLIN( 478)			Float _hx_tmp6 = (_hx_tmp4 + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->y);
HXDLIN( 478)			this->_spriteLabel->set_y(_hx_tmp6);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,updateLabelPosition,(void))

void FlxTypedButton_obj::updateLabelAlpha(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","updateLabelAlpha",0x2352ff0f,"flixel.ui.FlxTypedButton.updateLabelAlpha","flixel/ui/FlxButton.hx",484,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 484)		Bool _hx_tmp;
HXDLIN( 484)		Bool _hx_tmp1 = hx::IsNotNull( this->_spriteLabel );
HXDLIN( 484)		if (_hx_tmp1) {
HXLINE( 484)			_hx_tmp = (this->labelAlphas->length > this->status);
            		}
            		else {
HXLINE( 484)			_hx_tmp = false;
            		}
HXDLIN( 484)		if (_hx_tmp) {
HXLINE( 486)			Float _hx_tmp2 = (this->alpha * this->labelAlphas->__get(this->status));
HXDLIN( 486)			this->_spriteLabel->set_alpha(_hx_tmp2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,updateLabelAlpha,(void))

void FlxTypedButton_obj::onUpEventListener( ::Dynamic _){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","onUpEventListener",0x0f960298,"flixel.ui.FlxTypedButton.onUpEventListener","flixel/ui/FlxButton.hx",497,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 497)		Bool _hx_tmp;
HXDLIN( 497)		Bool _hx_tmp1;
HXDLIN( 497)		Bool _hx_tmp2;
HXDLIN( 497)		if (this->visible) {
HXLINE( 497)			_hx_tmp2 = this->exists;
            		}
            		else {
HXLINE( 497)			_hx_tmp2 = false;
            		}
HXDLIN( 497)		if (_hx_tmp2) {
HXLINE( 497)			_hx_tmp1 = this->active;
            		}
            		else {
HXLINE( 497)			_hx_tmp1 = false;
            		}
HXDLIN( 497)		if (_hx_tmp1) {
HXLINE( 497)			_hx_tmp = (this->status == (int)2);
            		}
            		else {
HXLINE( 497)			_hx_tmp = false;
            		}
HXDLIN( 497)		if (_hx_tmp) {
HXLINE( 499)			this->onUpHandler();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,onUpEventListener,(void))

void FlxTypedButton_obj::onUpHandler(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","onUpHandler",0xf0255834,"flixel.ui.FlxTypedButton.onUpHandler","flixel/ui/FlxButton.hx",508,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 509)		this->set_status((int)0);
HXLINE( 510)		this->input->release();
HXLINE( 511)		this->currentInput = null();
HXLINE( 513)		{
HXLINE( 513)			HX_VARI(  ::flixel::ui::_FlxButton::FlxButtonEvent,_this) = this->onUp;
HXDLIN( 513)			Bool _hx_tmp = hx::IsNotNull( _this->callback );
HXDLIN( 513)			if (_hx_tmp) {
HXLINE( 513)				_this->callback();
            			}
HXDLIN( 513)			Bool _hx_tmp1 = hx::IsNotNull( _this->sound );
HXDLIN( 513)			if (_hx_tmp1) {
HXLINE( 513)				_this->sound->play(true,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,onUpHandler,(void))

void FlxTypedButton_obj::onDownHandler(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","onDownHandler",0x6003504d,"flixel.ui.FlxTypedButton.onDownHandler","flixel/ui/FlxButton.hx",520,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 521)		this->set_status((int)2);
HXLINE( 522)		this->input->press();
HXLINE( 524)		{
HXLINE( 524)			HX_VARI(  ::flixel::ui::_FlxButton::FlxButtonEvent,_this) = this->onDown;
HXDLIN( 524)			Bool _hx_tmp = hx::IsNotNull( _this->callback );
HXDLIN( 524)			if (_hx_tmp) {
HXLINE( 524)				_this->callback();
            			}
HXDLIN( 524)			Bool _hx_tmp1 = hx::IsNotNull( _this->sound );
HXDLIN( 524)			if (_hx_tmp1) {
HXLINE( 524)				_this->sound->play(true,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,onDownHandler,(void))

void FlxTypedButton_obj::onOverHandler(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","onOverHandler",0x3b6b999b,"flixel.ui.FlxTypedButton.onOverHandler","flixel/ui/FlxButton.hx",531,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 532)		this->set_status((int)1);
HXLINE( 534)		{
HXLINE( 534)			HX_VARI(  ::flixel::ui::_FlxButton::FlxButtonEvent,_this) = this->onOver;
HXDLIN( 534)			Bool _hx_tmp = hx::IsNotNull( _this->callback );
HXDLIN( 534)			if (_hx_tmp) {
HXLINE( 534)				_this->callback();
            			}
HXDLIN( 534)			Bool _hx_tmp1 = hx::IsNotNull( _this->sound );
HXDLIN( 534)			if (_hx_tmp1) {
HXLINE( 534)				_this->sound->play(true,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,onOverHandler,(void))

void FlxTypedButton_obj::onOutHandler(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","onOutHandler",0x1cacc3b7,"flixel.ui.FlxTypedButton.onOutHandler","flixel/ui/FlxButton.hx",541,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 542)		this->set_status((int)0);
HXLINE( 543)		this->input->release();
HXLINE( 545)		{
HXLINE( 545)			HX_VARI(  ::flixel::ui::_FlxButton::FlxButtonEvent,_this) = this->onOut;
HXDLIN( 545)			Bool _hx_tmp = hx::IsNotNull( _this->callback );
HXDLIN( 545)			if (_hx_tmp) {
HXLINE( 545)				_this->callback();
            			}
HXDLIN( 545)			Bool _hx_tmp1 = hx::IsNotNull( _this->sound );
HXDLIN( 545)			if (_hx_tmp1) {
HXLINE( 545)				_this->sound->play(true,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,onOutHandler,(void))

 ::Dynamic FlxTypedButton_obj::set_label( ::Dynamic Value){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","set_label",0xd03f57fb,"flixel.ui.FlxTypedButton.set_label","flixel/ui/FlxButton.hx",549,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 550)		Bool _hx_tmp = hx::IsNotNull( Value );
HXDLIN( 550)		if (_hx_tmp) {
HXLINE( 553)			( ( ::flixel::FlxObject)(Value) )->scrollFactor->put();
HXLINE( 554)			( ( ::flixel::FlxObject)(Value) )->scrollFactor = this->scrollFactor;
            		}
HXLINE( 557)		this->label = Value;
HXLINE( 558)		this->_spriteLabel = this->label;
HXLINE( 560)		this->updateLabelPosition();
HXLINE( 562)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,set_label,return )

Int FlxTypedButton_obj::set_status(Int Value){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","set_status",0x23ac634b,"flixel.ui.FlxTypedButton.set_status","flixel/ui/FlxButton.hx",566,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 567)		this->status = Value;
HXLINE( 568)		this->updateLabelAlpha();
HXLINE( 569)		return this->status;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedButton_obj,set_status,return )

Float FlxTypedButton_obj::set_alpha(Float Value){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","set_alpha",0x8226f165,"flixel.ui.FlxTypedButton.set_alpha","flixel/ui/FlxButton.hx",573,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 574)		this->super::set_alpha(Value);
HXLINE( 575)		this->updateLabelAlpha();
HXLINE( 576)		return this->alpha;
            	}


Float FlxTypedButton_obj::set_x(Float Value){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","set_x",0xd772faff,"flixel.ui.FlxTypedButton.set_x","flixel/ui/FlxButton.hx",580,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 581)		this->super::set_x(Value);
HXLINE( 582)		this->updateLabelPosition();
HXLINE( 583)		return this->x;
            	}


Float FlxTypedButton_obj::set_y(Float Value){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","set_y",0xd772fb00,"flixel.ui.FlxTypedButton.set_y","flixel/ui/FlxButton.hx",587,0xc64cf442)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 588)		this->super::set_y(Value);
HXLINE( 589)		this->updateLabelPosition();
HXLINE( 590)		return this->y;
            	}


Bool FlxTypedButton_obj::get_justReleased(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","get_justReleased",0x06e7426e,"flixel.ui.FlxTypedButton.get_justReleased","flixel/ui/FlxButton.hx",595,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 595)		return (this->input->current == (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,get_justReleased,return )

Bool FlxTypedButton_obj::get_released(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","get_released",0xa9c8d9a2,"flixel.ui.FlxTypedButton.get_released","flixel/ui/FlxButton.hx",600,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 600)		HX_VARI(  ::flixel::input::FlxInput,_this) = this->input;
HXDLIN( 600)		if ((_this->current != (int)0)) {
HXLINE( 600)			return (_this->current == (int)-1);
            		}
            		else {
HXLINE( 600)			return true;
            		}
HXDLIN( 600)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,get_released,return )

Bool FlxTypedButton_obj::get_pressed(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","get_pressed",0x0c35e55d,"flixel.ui.FlxTypedButton.get_pressed","flixel/ui/FlxButton.hx",605,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 605)		HX_VARI(  ::flixel::input::FlxInput,_this) = this->input;
HXDLIN( 605)		if ((_this->current != (int)1)) {
HXLINE( 605)			return (_this->current == (int)2);
            		}
            		else {
HXLINE( 605)			return true;
            		}
HXDLIN( 605)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,get_pressed,return )

Bool FlxTypedButton_obj::get_justPressed(){
            	HX_STACK_FRAME("flixel.ui.FlxTypedButton","get_justPressed",0x7ad59a11,"flixel.ui.FlxTypedButton.get_justPressed","flixel/ui/FlxButton.hx",610,0xc64cf442)
            	HX_STACK_THIS(this)
HXLINE( 610)		return (this->input->current == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedButton_obj,get_justPressed,return )


FlxTypedButton_obj::FlxTypedButton_obj()
{
}

void FlxTypedButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedButton);
	HX_MARK_MEMBER_NAME(label,"label");
	HX_MARK_MEMBER_NAME(labelOffsets,"labelOffsets");
	HX_MARK_MEMBER_NAME(labelAlphas,"labelAlphas");
	HX_MARK_MEMBER_NAME(statusAnimations,"statusAnimations");
	HX_MARK_MEMBER_NAME(allowSwiping,"allowSwiping");
	HX_MARK_MEMBER_NAME(mouseButtons,"mouseButtons");
	HX_MARK_MEMBER_NAME(maxInputMovement,"maxInputMovement");
	HX_MARK_MEMBER_NAME(status,"status");
	HX_MARK_MEMBER_NAME(onUp,"onUp");
	HX_MARK_MEMBER_NAME(onDown,"onDown");
	HX_MARK_MEMBER_NAME(onOver,"onOver");
	HX_MARK_MEMBER_NAME(onOut,"onOut");
	HX_MARK_MEMBER_NAME(_spriteLabel,"_spriteLabel");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(currentInput,"currentInput");
	HX_MARK_MEMBER_NAME(lastStatus,"lastStatus");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypedButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(label,"label");
	HX_VISIT_MEMBER_NAME(labelOffsets,"labelOffsets");
	HX_VISIT_MEMBER_NAME(labelAlphas,"labelAlphas");
	HX_VISIT_MEMBER_NAME(statusAnimations,"statusAnimations");
	HX_VISIT_MEMBER_NAME(allowSwiping,"allowSwiping");
	HX_VISIT_MEMBER_NAME(mouseButtons,"mouseButtons");
	HX_VISIT_MEMBER_NAME(maxInputMovement,"maxInputMovement");
	HX_VISIT_MEMBER_NAME(status,"status");
	HX_VISIT_MEMBER_NAME(onUp,"onUp");
	HX_VISIT_MEMBER_NAME(onDown,"onDown");
	HX_VISIT_MEMBER_NAME(onOver,"onOver");
	HX_VISIT_MEMBER_NAME(onOut,"onOut");
	HX_VISIT_MEMBER_NAME(_spriteLabel,"_spriteLabel");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(currentInput,"currentInput");
	HX_VISIT_MEMBER_NAME(lastStatus,"lastStatus");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTypedButton_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"onUp") ) { return hx::Val( onUp); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { return hx::Val( label); }
		if (HX_FIELD_EQ(inName,"onOut") ) { return hx::Val( onOut); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { return hx::Val( status); }
		if (HX_FIELD_EQ(inName,"onDown") ) { return hx::Val( onDown); }
		if (HX_FIELD_EQ(inName,"onOver") ) { return hx::Val( onOver); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_pressed()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"released") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_released()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_label") ) { return hx::Val( set_label_dyn()); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastStatus") ) { return hx::Val( lastStatus); }
		if (HX_FIELD_EQ(inName,"checkInput") ) { return hx::Val( checkInput_dyn()); }
		if (HX_FIELD_EQ(inName,"set_status") ) { return hx::Val( set_status_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"labelAlphas") ) { return hx::Val( labelAlphas); }
		if (HX_FIELD_EQ(inName,"justPressed") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_justPressed()); }
		if (HX_FIELD_EQ(inName,"onUpHandler") ) { return hx::Val( onUpHandler_dyn()); }
		if (HX_FIELD_EQ(inName,"get_pressed") ) { return hx::Val( get_pressed_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"labelOffsets") ) { return hx::Val( labelOffsets); }
		if (HX_FIELD_EQ(inName,"allowSwiping") ) { return hx::Val( allowSwiping); }
		if (HX_FIELD_EQ(inName,"mouseButtons") ) { return hx::Val( mouseButtons); }
		if (HX_FIELD_EQ(inName,"justReleased") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_justReleased()); }
		if (HX_FIELD_EQ(inName,"_spriteLabel") ) { return hx::Val( _spriteLabel); }
		if (HX_FIELD_EQ(inName,"currentInput") ) { return hx::Val( currentInput); }
		if (HX_FIELD_EQ(inName,"stampOnAtlas") ) { return hx::Val( stampOnAtlas_dyn()); }
		if (HX_FIELD_EQ(inName,"updateButton") ) { return hx::Val( updateButton_dyn()); }
		if (HX_FIELD_EQ(inName,"updateStatus") ) { return hx::Val( updateStatus_dyn()); }
		if (HX_FIELD_EQ(inName,"onOutHandler") ) { return hx::Val( onOutHandler_dyn()); }
		if (HX_FIELD_EQ(inName,"get_released") ) { return hx::Val( get_released_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"graphicLoaded") ) { return hx::Val( graphicLoaded_dyn()); }
		if (HX_FIELD_EQ(inName,"onDownHandler") ) { return hx::Val( onDownHandler_dyn()); }
		if (HX_FIELD_EQ(inName,"onOverHandler") ) { return hx::Val( onOverHandler_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setupAnimation") ) { return hx::Val( setupAnimation_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_justPressed") ) { return hx::Val( get_justPressed_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"statusAnimations") ) { return hx::Val( statusAnimations); }
		if (HX_FIELD_EQ(inName,"maxInputMovement") ) { return hx::Val( maxInputMovement); }
		if (HX_FIELD_EQ(inName,"updateLabelAlpha") ) { return hx::Val( updateLabelAlpha_dyn()); }
		if (HX_FIELD_EQ(inName,"get_justReleased") ) { return hx::Val( get_justReleased_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"checkMouseOverlap") ) { return hx::Val( checkMouseOverlap_dyn()); }
		if (HX_FIELD_EQ(inName,"checkTouchOverlap") ) { return hx::Val( checkTouchOverlap_dyn()); }
		if (HX_FIELD_EQ(inName,"onUpEventListener") ) { return hx::Val( onUpEventListener_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"loadDefaultGraphic") ) { return hx::Val( loadDefaultGraphic_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateLabelPosition") ) { return hx::Val( updateLabelPosition_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"updateStatusAnimation") ) { return hx::Val( updateStatusAnimation_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTypedButton_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"onUp") ) { onUp=inValue.Cast<  ::flixel::ui::_FlxButton::FlxButtonEvent >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_label(inValue) );label=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onOut") ) { onOut=inValue.Cast<  ::flixel::ui::_FlxButton::FlxButtonEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::flixel::input::FlxInput >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_status(inValue) );status=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onDown") ) { onDown=inValue.Cast<  ::flixel::ui::_FlxButton::FlxButtonEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onOver") ) { onOver=inValue.Cast<  ::flixel::ui::_FlxButton::FlxButtonEvent >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastStatus") ) { lastStatus=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"labelAlphas") ) { labelAlphas=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"labelOffsets") ) { labelOffsets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowSwiping") ) { allowSwiping=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseButtons") ) { mouseButtons=inValue.Cast< ::Array< Int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_spriteLabel") ) { _spriteLabel=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentInput") ) { currentInput=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"statusAnimations") ) { statusAnimations=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxInputMovement") ) { maxInputMovement=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"));
	outFields->push(HX_HCSTRING("labelOffsets","\xec","\x89","\xc7","\x2c"));
	outFields->push(HX_HCSTRING("labelAlphas","\x69","\x3c","\x3c","\x8d"));
	outFields->push(HX_HCSTRING("statusAnimations","\xc1","\xd2","\xc0","\xc5"));
	outFields->push(HX_HCSTRING("allowSwiping","\xae","\x3a","\x40","\x43"));
	outFields->push(HX_HCSTRING("mouseButtons","\x9c","\xa2","\x1a","\xac"));
	outFields->push(HX_HCSTRING("maxInputMovement","\x15","\x8e","\xe1","\x5a"));
	outFields->push(HX_HCSTRING("status","\x32","\xe7","\xfb","\x05"));
	outFields->push(HX_HCSTRING("onUp","\x5a","\x71","\xb2","\x49"));
	outFields->push(HX_HCSTRING("onDown","\x21","\x01","\xf8","\xe4"));
	outFields->push(HX_HCSTRING("onOver","\x13","\x9a","\x42","\xec"));
	outFields->push(HX_HCSTRING("onOut","\xaf","\x34","\x6c","\x32"));
	outFields->push(HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66"));
	outFields->push(HX_HCSTRING("released","\xbd","\x88","\xe7","\x76"));
	outFields->push(HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"));
	outFields->push(HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2"));
	outFields->push(HX_HCSTRING("_spriteLabel","\xb0","\x9d","\x5b","\x0c"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("currentInput","\x11","\xa9","\x29","\x05"));
	outFields->push(HX_HCSTRING("lastStatus","\x28","\xca","\xd6","\xd0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypedButton_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypedButton_obj,label),HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTypedButton_obj,labelOffsets),HX_HCSTRING("labelOffsets","\xec","\x89","\xc7","\x2c")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxTypedButton_obj,labelAlphas),HX_HCSTRING("labelAlphas","\x69","\x3c","\x3c","\x8d")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxTypedButton_obj,statusAnimations),HX_HCSTRING("statusAnimations","\xc1","\xd2","\xc0","\xc5")},
	{hx::fsBool,(int)offsetof(FlxTypedButton_obj,allowSwiping),HX_HCSTRING("allowSwiping","\xae","\x3a","\x40","\x43")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxTypedButton_obj,mouseButtons),HX_HCSTRING("mouseButtons","\x9c","\xa2","\x1a","\xac")},
	{hx::fsFloat,(int)offsetof(FlxTypedButton_obj,maxInputMovement),HX_HCSTRING("maxInputMovement","\x15","\x8e","\xe1","\x5a")},
	{hx::fsInt,(int)offsetof(FlxTypedButton_obj,status),HX_HCSTRING("status","\x32","\xe7","\xfb","\x05")},
	{hx::fsObject /*::flixel::ui::_FlxButton::FlxButtonEvent*/ ,(int)offsetof(FlxTypedButton_obj,onUp),HX_HCSTRING("onUp","\x5a","\x71","\xb2","\x49")},
	{hx::fsObject /*::flixel::ui::_FlxButton::FlxButtonEvent*/ ,(int)offsetof(FlxTypedButton_obj,onDown),HX_HCSTRING("onDown","\x21","\x01","\xf8","\xe4")},
	{hx::fsObject /*::flixel::ui::_FlxButton::FlxButtonEvent*/ ,(int)offsetof(FlxTypedButton_obj,onOver),HX_HCSTRING("onOver","\x13","\x9a","\x42","\xec")},
	{hx::fsObject /*::flixel::ui::_FlxButton::FlxButtonEvent*/ ,(int)offsetof(FlxTypedButton_obj,onOut),HX_HCSTRING("onOut","\xaf","\x34","\x6c","\x32")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxTypedButton_obj,_spriteLabel),HX_HCSTRING("_spriteLabel","\xb0","\x9d","\x5b","\x0c")},
	{hx::fsObject /*::flixel::input::FlxInput*/ ,(int)offsetof(FlxTypedButton_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsObject /*::flixel::input::IFlxInput*/ ,(int)offsetof(FlxTypedButton_obj,currentInput),HX_HCSTRING("currentInput","\x11","\xa9","\x29","\x05")},
	{hx::fsInt,(int)offsetof(FlxTypedButton_obj,lastStatus),HX_HCSTRING("lastStatus","\x28","\xca","\xd6","\xd0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTypedButton_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedButton_obj_sMemberFields[] = {
	HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"),
	HX_HCSTRING("labelOffsets","\xec","\x89","\xc7","\x2c"),
	HX_HCSTRING("labelAlphas","\x69","\x3c","\x3c","\x8d"),
	HX_HCSTRING("statusAnimations","\xc1","\xd2","\xc0","\xc5"),
	HX_HCSTRING("allowSwiping","\xae","\x3a","\x40","\x43"),
	HX_HCSTRING("mouseButtons","\x9c","\xa2","\x1a","\xac"),
	HX_HCSTRING("maxInputMovement","\x15","\x8e","\xe1","\x5a"),
	HX_HCSTRING("status","\x32","\xe7","\xfb","\x05"),
	HX_HCSTRING("onUp","\x5a","\x71","\xb2","\x49"),
	HX_HCSTRING("onDown","\x21","\x01","\xf8","\xe4"),
	HX_HCSTRING("onOver","\x13","\x9a","\x42","\xec"),
	HX_HCSTRING("onOut","\xaf","\x34","\x6c","\x32"),
	HX_HCSTRING("_spriteLabel","\xb0","\x9d","\x5b","\x0c"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("currentInput","\x11","\xa9","\x29","\x05"),
	HX_HCSTRING("lastStatus","\x28","\xca","\xd6","\xd0"),
	HX_HCSTRING("graphicLoaded","\xcd","\x84","\x20","\x16"),
	HX_HCSTRING("loadDefaultGraphic","\xad","\x18","\x08","\x83"),
	HX_HCSTRING("setupAnimation","\xc7","\xe8","\xce","\xb6"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateStatusAnimation","\x69","\x25","\xc1","\x4d"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("stampOnAtlas","\xe9","\xf9","\x45","\x2b"),
	HX_HCSTRING("updateButton","\xdb","\x08","\xa4","\xd9"),
	HX_HCSTRING("checkMouseOverlap","\xca","\x84","\x64","\x1a"),
	HX_HCSTRING("checkTouchOverlap","\x70","\x4a","\x21","\x63"),
	HX_HCSTRING("checkInput","\x22","\xc6","\x0d","\xce"),
	HX_HCSTRING("updateStatus","\x1b","\x8e","\xbf","\x05"),
	HX_HCSTRING("updateLabelPosition","\xf4","\x76","\x4f","\xbf"),
	HX_HCSTRING("updateLabelAlpha","\x33","\xc4","\x65","\x87"),
	HX_HCSTRING("onUpEventListener","\xf4","\xbc","\xef","\x3b"),
	HX_HCSTRING("onUpHandler","\x90","\xa5","\xd0","\xa3"),
	HX_HCSTRING("onDownHandler","\xa9","\xac","\x21","\xcf"),
	HX_HCSTRING("onOverHandler","\xf7","\xf5","\x89","\xaa"),
	HX_HCSTRING("onOutHandler","\xdb","\x26","\xe5","\x9e"),
	HX_HCSTRING("set_label","\x57","\x56","\xa9","\x96"),
	HX_HCSTRING("set_status","\x6f","\xf5","\x00","\xfa"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_justReleased","\x92","\x07","\xfa","\x6a"),
	HX_HCSTRING("get_released","\xc6","\x3c","\x01","\x2c"),
	HX_HCSTRING("get_pressed","\xb9","\x32","\xe1","\xbf"),
	HX_HCSTRING("get_justPressed","\x6d","\xc5","\x88","\xb3"),
	::String(null()) };

static void FlxTypedButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypedButton_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypedButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypedButton_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTypedButton_obj::__mClass;

void FlxTypedButton_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.ui.FlxTypedButton","\x12","\xad","\x96","\xf6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTypedButton_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypedButton_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypedButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypedButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedButton_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace ui
