// Generated by Haxe 3.3.0
#ifndef INCLUDED_openfl__legacy_Lib
#define INCLUDED_openfl__legacy_Lib

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,_legacy,Lib)
HX_DECLARE_CLASS3(openfl,_legacy,display,BitmapData)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObjectContainer)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,_legacy,display,InteractiveObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,ManagedStage)
HX_DECLARE_CLASS3(openfl,_legacy,display,MovieClip)
HX_DECLARE_CLASS3(openfl,_legacy,display,Sprite)
HX_DECLARE_CLASS3(openfl,_legacy,display,Stage)
HX_DECLARE_CLASS3(openfl,_legacy,events,Event)
HX_DECLARE_CLASS3(openfl,_legacy,events,EventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,events,IEventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,net,URLRequest)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,events,UncaughtErrorEvent)

namespace openfl{
namespace _legacy{


class HXCPP_CLASS_ATTRIBUTES Lib_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Lib_obj OBJ_;
		Lib_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="openfl._legacy.Lib")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"openfl._legacy.Lib"); }
		static hx::ObjectPtr< Lib_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Lib_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Lib","\x25","\x07","\x3a","\x00"); }

		static void __boot();
		static Int FULLSCREEN;
		static Int BORDERLESS;
		static Int RESIZABLE;
		static Int HARDWARE;
		static Int VSYNC;
		static Int HW_AA;
		static Int HW_AA_HIRES;
		static Int ALLOW_SHADERS;
		static Int REQUIRE_SHADERS;
		static Int DEPTH_BUFFER;
		static Int STENCIL_BUFFER;
		static ::String company;
		static  ::openfl::_legacy::display::MovieClip current;
		static ::String file;
		static Int initHeight;
		static Int initWidth;
		static ::String packageName;
		static Bool silentRecreate;
		static  ::openfl::_legacy::display::Stage stage;
		static ::String version;
		static  ::openfl::_legacy::display::MovieClip _hx___current;
		static Bool _hx___isInit;
		static Bool _hx___loadedNekoAPI;
		static  ::Dynamic _hx___mainFrame;
		static  ::haxe::ds::StringMap _hx___moduleNames;
		static  ::haxe::ds::StringMap _hx___sentWarnings;
		static  ::openfl::_legacy::display::Stage _hx___stage;
		static  ::Dynamic _hx___uncaughtExceptionHandler;
		static  ::Dynamic &_hx___uncaughtExceptionHandler_dyn() { return _hx___uncaughtExceptionHandler;}
		static  ::Dynamic as( ::Dynamic v,hx::Class c);
		static ::Dynamic as_dyn();

		static  ::openfl::_legacy::display::MovieClip attach(::String name);
		static ::Dynamic attach_dyn();

		static void close();
		static ::Dynamic close_dyn();

		static void create( ::Dynamic onLoaded,Int width,Int height,hx::Null< Float >  frameRate,hx::Null< Int >  color,hx::Null< Int >  flags,::String title, ::openfl::_legacy::display::BitmapData icon,hx::Class stageClass);
		static ::Dynamic create_dyn();

		static  ::openfl::_legacy::display::ManagedStage createManagedStage(Int width,Int height,hx::Null< Int >  flags);
		static ::Dynamic createManagedStage_dyn();

		static ::String findHaxeLib(::String library);
		static ::Dynamic findHaxeLib_dyn();

		static  ::Dynamic load(::String library,::String method,hx::Null< Int >  args);
		static ::Dynamic load_dyn();

		static void loaderTrace(::String message);
		static ::Dynamic loaderTrace_dyn();

		static void notImplemented(::String api);
		static ::Dynamic notImplemented_dyn();

		static void rethrow( ::Dynamic error);
		static ::Dynamic rethrow_dyn();

		static void setUncaughtExceptionHandler( ::Dynamic f);
		static ::Dynamic setUncaughtExceptionHandler_dyn();

		static ::String sysName();
		static ::Dynamic sysName_dyn();

		static  ::Dynamic tryLoad(::String name,::String library,::String func,Int args);
		static ::Dynamic tryLoad_dyn();

		static void exit();
		static ::Dynamic exit_dyn();

		static void forceClose();
		static ::Dynamic forceClose_dyn();

		static Int getTimer();
		static ::Dynamic getTimer_dyn();

		static void getURL( ::openfl::_legacy::net::URLRequest url,::String target);
		static ::Dynamic getURL_dyn();

		static void pause();
		static ::Dynamic pause_dyn();

		static void postUICallback( ::Dynamic inCallback);
		static ::Dynamic postUICallback_dyn();

		static void resume();
		static ::Dynamic resume_dyn();

		static void setIcon(::String path);
		static ::Dynamic setIcon_dyn();

		static void setPackage(::String company,::String file,::String packageName,::String version);
		static ::Dynamic setPackage_dyn();

		static void _hx___setCurrentStage( ::openfl::_legacy::display::Stage stage);
		static ::Dynamic _hx___setCurrentStage_dyn();

		static void trace( ::Dynamic arg);
		static ::Dynamic trace_dyn();

		static  ::openfl::_legacy::display::MovieClip get_current();
		static ::Dynamic get_current_dyn();

		static  ::openfl::_legacy::display::Stage get_stage();
		static ::Dynamic get_stage_dyn();

		static  ::Dynamic lime_set_package;
		static  ::Dynamic &lime_set_package_dyn() { return lime_set_package;}
		static  ::Dynamic lime_get_frame_stage;
		static  ::Dynamic &lime_get_frame_stage_dyn() { return lime_get_frame_stage;}
		static  ::Dynamic lime_get_url;
		static  ::Dynamic &lime_get_url_dyn() { return lime_get_url;}
		static  ::Dynamic lime_pause_animation;
		static  ::Dynamic &lime_pause_animation_dyn() { return lime_pause_animation;}
		static  ::Dynamic lime_resume_animation;
		static  ::Dynamic &lime_resume_animation_dyn() { return lime_resume_animation;}
};

} // end namespace openfl
} // end namespace _legacy

#endif /* INCLUDED_openfl__legacy_Lib */ 
