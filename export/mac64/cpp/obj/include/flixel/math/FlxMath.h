// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_math_FlxMath
#define INCLUDED_flixel_math_FlxMath

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,math,FlxMath)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS3(openfl,_legacy,geom,Rectangle)

namespace flixel{
namespace math{


class HXCPP_CLASS_ATTRIBUTES FlxMath_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxMath_obj OBJ_;
		FlxMath_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.math.FlxMath")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"flixel.math.FlxMath"); }
		static hx::ObjectPtr< FlxMath_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxMath_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("FlxMath","\x3a","\x7b","\xae","\xd8"); }

		static void __boot();
		static Float MIN_VALUE_FLOAT;
		static Float MAX_VALUE_FLOAT;
		static Int MIN_VALUE_INT;
		static Int MAX_VALUE_INT;
		static Float SQUARE_ROOT_OF_TWO;
		static Float EPSILON;
		static Float roundDecimal(Float Value,Int Precision);
		static ::Dynamic roundDecimal_dyn();

		static Float bound(Float Value, ::Dynamic Min, ::Dynamic Max);
		static ::Dynamic bound_dyn();

		static Float lerp(Float a,Float b,Float ratio);
		static ::Dynamic lerp_dyn();

		static Bool inBounds(Float Value, ::Dynamic Min, ::Dynamic Max);
		static ::Dynamic inBounds_dyn();

		static Bool isOdd(Float n);
		static ::Dynamic isOdd_dyn();

		static Bool isEven(Float n);
		static ::Dynamic isEven_dyn();

		static Int numericComparison(Float a,Float b);
		static ::Dynamic numericComparison_dyn();

		static Bool pointInCoordinates(Float pointX,Float pointY,Float rectX,Float rectY,Float rectWidth,Float rectHeight);
		static ::Dynamic pointInCoordinates_dyn();

		static Bool pointInFlxRect(Float pointX,Float pointY, ::flixel::math::FlxRect rect);
		static ::Dynamic pointInFlxRect_dyn();

		static Bool mouseInFlxRect(Bool useWorldCoords, ::flixel::math::FlxRect rect);
		static ::Dynamic mouseInFlxRect_dyn();

		static Bool pointInRectangle(Float pointX,Float pointY, ::openfl::_legacy::geom::Rectangle rect);
		static ::Dynamic pointInRectangle_dyn();

		static Int maxAdd(Int value,Int amount,Int max,hx::Null< Int >  min);
		static ::Dynamic maxAdd_dyn();

		static Int wrap(Int value,Int min,Int max);
		static ::Dynamic wrap_dyn();

		static Float remapToRange(Float value,Float start1,Float stop1,Float start2,Float stop2);
		static ::Dynamic remapToRange_dyn();

		static Float dotProduct(Float ax,Float ay,Float bx,Float by);
		static ::Dynamic dotProduct_dyn();

		static Float vectorLength(Float dx,Float dy);
		static ::Dynamic vectorLength_dyn();

		static Int distanceBetween( ::flixel::FlxSprite SpriteA, ::flixel::FlxSprite SpriteB);
		static ::Dynamic distanceBetween_dyn();

		static Bool isDistanceWithin( ::flixel::FlxSprite SpriteA, ::flixel::FlxSprite SpriteB,Float Distance,hx::Null< Bool >  IncludeEqual);
		static ::Dynamic isDistanceWithin_dyn();

		static Int distanceToPoint( ::flixel::FlxSprite Sprite, ::flixel::math::FlxPoint Target);
		static ::Dynamic distanceToPoint_dyn();

		static Bool isDistanceToPointWithin( ::flixel::FlxSprite Sprite, ::flixel::math::FlxPoint Target,Float Distance,hx::Null< Bool >  IncludeEqual);
		static ::Dynamic isDistanceToPointWithin_dyn();

		static Int distanceToMouse( ::flixel::FlxSprite Sprite);
		static ::Dynamic distanceToMouse_dyn();

		static Bool isDistanceToMouseWithin( ::flixel::FlxSprite Sprite,Float Distance,hx::Null< Bool >  IncludeEqual);
		static ::Dynamic isDistanceToMouseWithin_dyn();

		static Int getDecimals(Float n);
		static ::Dynamic getDecimals_dyn();

		static Bool equal(Float aValueA,Float aValueB,hx::Null< Float >  aDiff);
		static ::Dynamic equal_dyn();

		static Int signOf(Float n);
		static ::Dynamic signOf_dyn();

		static Bool sameSign(Float a,Float b);
		static ::Dynamic sameSign_dyn();

		static Float fastSin(Float n);
		static ::Dynamic fastSin_dyn();

		static Float fastCos(Float n);
		static ::Dynamic fastCos_dyn();

		static Float sinh(Float n);
		static ::Dynamic sinh_dyn();

		static Int maxInt(Int a,Int b);
		static ::Dynamic maxInt_dyn();

		static Int minInt(Int a,Int b);
		static ::Dynamic minInt_dyn();

		static Int absInt(Int n);
		static ::Dynamic absInt_dyn();

};

} // end namespace flixel
} // end namespace math

#endif /* INCLUDED_flixel_math_FlxMath */ 
