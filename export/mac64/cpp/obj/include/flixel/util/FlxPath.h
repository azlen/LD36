// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_util_FlxPath
#define INCLUDED_flixel_util_FlxPath

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,util,FlxPath)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace util{


class HXCPP_CLASS_ATTRIBUTES FlxPath_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxPath_obj OBJ_;
		FlxPath_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.util.FlxPath")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.util.FlxPath"); }
		static hx::ObjectPtr< FlxPath_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxPath_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("FlxPath","\x17","\x1f","\xaa","\xda"); }

		static void __boot();
		static Int FORWARD;
		static Int BACKWARD;
		static Int LOOP_FORWARD;
		static Int LOOP_BACKWARD;
		static Int YOYO;
		static Int HORIZONTAL_ONLY;
		static Int VERTICAL_ONLY;
		static  ::flixel::math::FlxPoint _point;
		::Array< ::Dynamic> nodes;
		Float speed;
		Float angle;
		Bool autoCenter;
		Bool active;
		 ::Dynamic onComplete;
		 ::Dynamic &onComplete_dyn() { return onComplete;}
		Int nodeIndex;
		Bool finished;
		Int _mode;
		Int _inc;
		Bool _autoRotate;
		 ::Dynamic _wasObjectImmovable;
		Bool _firstUpdate;
		 ::flixel::FlxObject object;
		 ::flixel::util::FlxPath reset();
		::Dynamic reset_dyn();

		 ::flixel::util::FlxPath start(::Array< ::Dynamic> Nodes,hx::Null< Float >  Speed,hx::Null< Int >  Mode,hx::Null< Bool >  AutoRotate);
		::Dynamic start_dyn();

		 ::flixel::util::FlxPath restart();
		::Dynamic restart_dyn();

		void setNode(Int NodeIndex);
		::Dynamic setNode_dyn();

		void update(Float elapsed);
		::Dynamic update_dyn();

		void calculateVelocity( ::flixel::math::FlxPoint node,Bool horizontalOnly,Bool verticalOnly);
		::Dynamic calculateVelocity_dyn();

		 ::flixel::math::FlxPoint advancePath(hx::Null< Bool >  Snap);
		::Dynamic advancePath_dyn();

		void cancel();
		::Dynamic cancel_dyn();

		void onEnd();
		::Dynamic onEnd_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		 ::flixel::util::FlxPath add(Float X,Float Y);
		::Dynamic add_dyn();

		 ::flixel::util::FlxPath addAt(Float X,Float Y,Int Index);
		::Dynamic addAt_dyn();

		 ::flixel::util::FlxPath addPoint( ::flixel::math::FlxPoint Node,hx::Null< Bool >  AsReference);
		::Dynamic addPoint_dyn();

		 ::flixel::util::FlxPath addPointAt( ::flixel::math::FlxPoint Node,Int Index,hx::Null< Bool >  AsReference);
		::Dynamic addPointAt_dyn();

		 ::flixel::math::FlxPoint remove( ::flixel::math::FlxPoint Node);
		::Dynamic remove_dyn();

		 ::flixel::math::FlxPoint removeAt(Int Index);
		::Dynamic removeAt_dyn();

		 ::flixel::math::FlxPoint head();
		::Dynamic head_dyn();

		 ::flixel::math::FlxPoint tail();
		::Dynamic tail_dyn();

};

} // end namespace flixel
} // end namespace util

#endif /* INCLUDED_flixel_util_FlxPath */ 
