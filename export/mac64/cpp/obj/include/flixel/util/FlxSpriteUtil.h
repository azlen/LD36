// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#define INCLUDED_flixel_util_FlxSpriteUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,effects,FlxFlicker)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,tweens,FlxTween)
HX_DECLARE_CLASS2(flixel,util,FlxSpriteUtil)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObjectContainer)
HX_DECLARE_CLASS3(openfl,_legacy,display,Graphics)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,_legacy,display,InteractiveObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,Sprite)
HX_DECLARE_CLASS3(openfl,_legacy,events,EventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,events,IEventDispatcher)

namespace flixel{
namespace util{


class HXCPP_CLASS_ATTRIBUTES FlxSpriteUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxSpriteUtil_obj OBJ_;
		FlxSpriteUtil_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.util.FlxSpriteUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"flixel.util.FlxSpriteUtil"); }
		static hx::ObjectPtr< FlxSpriteUtil_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxSpriteUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("FlxSpriteUtil","\x99","\x21","\x94","\x21"); }

		static void __boot();
		static  ::openfl::_legacy::display::Sprite flashGfxSprite;
		static  ::openfl::_legacy::display::Graphics flashGfx;
		static  ::flixel::FlxSprite alphaMask( ::flixel::FlxSprite output, ::Dynamic source, ::Dynamic mask);
		static ::Dynamic alphaMask_dyn();

		static  ::flixel::FlxSprite alphaMaskFlxSprite( ::flixel::FlxSprite sprite, ::flixel::FlxSprite mask, ::flixel::FlxSprite output);
		static ::Dynamic alphaMaskFlxSprite_dyn();

		static  ::flixel::FlxSprite screenWrap( ::flixel::FlxSprite sprite,hx::Null< Bool >  Left,hx::Null< Bool >  Right,hx::Null< Bool >  Top,hx::Null< Bool >  Bottom);
		static ::Dynamic screenWrap_dyn();

		static  ::flixel::FlxSprite bound( ::flixel::FlxSprite sprite,hx::Null< Float >  MinX,hx::Null< Float >  MaxX,hx::Null< Float >  MinY,hx::Null< Float >  MaxY);
		static ::Dynamic bound_dyn();

		static void space(::Array< ::Dynamic> objects,Int startX,Int startY,hx::Null< Int >  horizontalSpacing,hx::Null< Int >  verticalSpacing,hx::Null< Bool >  spaceFromBounds);
		static ::Dynamic space_dyn();

		static  ::flixel::FlxSprite drawLine( ::flixel::FlxSprite sprite,Float StartX,Float StartY,Float EndX,Float EndY, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawLine_dyn();

		static  ::flixel::FlxSprite drawCurve( ::flixel::FlxSprite sprite,Float StartX,Float StartY,Float EndX,Float EndY,Float ControlX,Float ControlY,hx::Null< Int >  FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawCurve_dyn();

		static  ::flixel::FlxSprite drawRect( ::flixel::FlxSprite sprite,Float X,Float Y,Float Width,Float Height,hx::Null< Int >  FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawRect_dyn();

		static  ::flixel::FlxSprite drawRoundRect( ::flixel::FlxSprite sprite,Float X,Float Y,Float Width,Float Height,Float EllipseWidth,Float EllipseHeight,hx::Null< Int >  FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawRoundRect_dyn();

		static  ::flixel::FlxSprite drawCircle( ::flixel::FlxSprite sprite,hx::Null< Float >  X,hx::Null< Float >  Y,hx::Null< Float >  Radius,hx::Null< Int >  FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawCircle_dyn();

		static  ::flixel::FlxSprite drawEllipse( ::flixel::FlxSprite sprite,Float X,Float Y,Float Width,Float Height,hx::Null< Int >  FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawEllipse_dyn();

		static  ::flixel::FlxSprite drawTriangle( ::flixel::FlxSprite sprite,Float X,Float Y,Float Height,hx::Null< Int >  FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawTriangle_dyn();

		static  ::flixel::FlxSprite drawPolygon( ::flixel::FlxSprite sprite,::Array< ::Dynamic> Vertices,hx::Null< Int >  FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawPolygon_dyn();

		static void beginDraw(Int FillColor, ::Dynamic lineStyle);
		static ::Dynamic beginDraw_dyn();

		static  ::flixel::FlxSprite endDraw( ::flixel::FlxSprite sprite, ::Dynamic drawStyle);
		static ::Dynamic endDraw_dyn();

		static  ::flixel::FlxSprite updateSpriteGraphic( ::flixel::FlxSprite sprite, ::Dynamic drawStyle);
		static ::Dynamic updateSpriteGraphic_dyn();

		static void setLineStyle( ::Dynamic lineStyle);
		static ::Dynamic setLineStyle_dyn();

		static  ::Dynamic getDefaultLineStyle( ::Dynamic lineStyle);
		static ::Dynamic getDefaultLineStyle_dyn();

		static  ::flixel::FlxSprite fill( ::flixel::FlxSprite sprite,Int FillColor);
		static ::Dynamic fill_dyn();

		static  ::flixel::effects::FlxFlicker flicker( ::flixel::FlxObject Object,hx::Null< Float >  Duration,hx::Null< Float >  Interval,hx::Null< Bool >  EndVisibility,hx::Null< Bool >  ForceRestart, ::Dynamic CompletionCallback, ::Dynamic ProgressCallback);
		static ::Dynamic flicker_dyn();

		static Bool isFlickering( ::flixel::FlxObject Object);
		static ::Dynamic isFlickering_dyn();

		static  ::flixel::FlxObject stopFlickering( ::flixel::FlxObject Object);
		static ::Dynamic stopFlickering_dyn();

		static  ::flixel::FlxSprite fadeIn( ::flixel::FlxSprite sprite,hx::Null< Float >  Duration, ::Dynamic ResetAlpha, ::Dynamic OnComplete);
		static ::Dynamic fadeIn_dyn();

		static  ::flixel::FlxSprite fadeOut( ::flixel::FlxSprite sprite,hx::Null< Float >  Duration, ::Dynamic OnComplete);
		static ::Dynamic fadeOut_dyn();

		static void alphaTween( ::flixel::FlxSprite sprite,Float f);
		static ::Dynamic alphaTween_dyn();

};

} // end namespace flixel
} // end namespace util

#endif /* INCLUDED_flixel_util_FlxSpriteUtil */ 
