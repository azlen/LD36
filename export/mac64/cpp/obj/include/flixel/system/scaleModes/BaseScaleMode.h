// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#define INCLUDED_flixel_system_scaleModes_BaseScaleMode

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS3(flixel,_hx_system,scaleModes,BaseScaleMode)
HX_DECLARE_CLASS2(flixel,util,FlxHorizontalAlign)
HX_DECLARE_CLASS2(flixel,util,FlxVerticalAlign)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace _hx_system{
namespace scaleModes{


class HXCPP_CLASS_ATTRIBUTES BaseScaleMode_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BaseScaleMode_obj OBJ_;
		BaseScaleMode_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.scaleModes.BaseScaleMode")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.system.scaleModes.BaseScaleMode"); }
		static hx::ObjectPtr< BaseScaleMode_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BaseScaleMode_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("BaseScaleMode","\x9c","\x18","\x1b","\x74"); }

		 ::flixel::math::FlxPoint deviceSize;
		 ::flixel::math::FlxPoint gameSize;
		 ::flixel::math::FlxPoint scale;
		 ::flixel::math::FlxPoint offset;
		::hx::EnumBase horizontalAlign;
		::hx::EnumBase verticalAlign;
		void onMeasure(Int Width,Int Height);
		::Dynamic onMeasure_dyn();

		virtual void updateGameSize(Int Width,Int Height);
		::Dynamic updateGameSize_dyn();

		void updateDeviceSize(Int Width,Int Height);
		::Dynamic updateDeviceSize_dyn();

		void updateScaleOffset();
		::Dynamic updateScaleOffset_dyn();

		void updateOffsetX();
		::Dynamic updateOffsetX_dyn();

		void updateOffsetY();
		::Dynamic updateOffsetY_dyn();

		void updateGamePosition();
		::Dynamic updateGamePosition_dyn();

		::hx::EnumBase set_horizontalAlign(::hx::EnumBase value);
		::Dynamic set_horizontalAlign_dyn();

		::hx::EnumBase set_verticalAlign(::hx::EnumBase value);
		::Dynamic set_verticalAlign_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace scaleModes

#endif /* INCLUDED_flixel_system_scaleModes_BaseScaleMode */ 
