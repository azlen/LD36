// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#define INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(flixel,input,keyboard,_FlxKey,FlxKey_Impl_)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace flixel{
namespace input{
namespace keyboard{
namespace _FlxKey{


class HXCPP_CLASS_ATTRIBUTES FlxKey_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxKey_Impl__obj OBJ_;
		FlxKey_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.input.keyboard._FlxKey.FlxKey_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"flixel.input.keyboard._FlxKey.FlxKey_Impl_"); }
		static hx::ObjectPtr< FlxKey_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxKey_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("FlxKey_Impl_","\xcd","\x90","\xe4","\xcc"); }

		static void __boot();
		static  ::haxe::ds::StringMap fromStringMap;
		static  ::haxe::ds::IntMap toStringMap;
		static Int ANY;
		static Int NONE;
		static Int A;
		static Int B;
		static Int C;
		static Int D;
		static Int E;
		static Int F;
		static Int G;
		static Int H;
		static Int I;
		static Int J;
		static Int K;
		static Int L;
		static Int M;
		static Int N;
		static Int O;
		static Int P;
		static Int Q;
		static Int R;
		static Int S;
		static Int T;
		static Int U;
		static Int V;
		static Int W;
		static Int X;
		static Int Y;
		static Int Z;
		static Int ZERO;
		static Int ONE;
		static Int TWO;
		static Int THREE;
		static Int FOUR;
		static Int FIVE;
		static Int SIX;
		static Int SEVEN;
		static Int EIGHT;
		static Int NINE;
		static Int PAGEUP;
		static Int PAGEDOWN;
		static Int HOME;
		static Int END;
		static Int INSERT;
		static Int ESCAPE;
		static Int MINUS;
		static Int PLUS;
		static Int DELETE;
		static Int BACKSPACE;
		static Int LBRACKET;
		static Int RBRACKET;
		static Int BACKSLASH;
		static Int CAPSLOCK;
		static Int SEMICOLON;
		static Int QUOTE;
		static Int ENTER;
		static Int SHIFT;
		static Int COMMA;
		static Int PERIOD;
		static Int SLASH;
		static Int GRAVEACCENT;
		static Int CONTROL;
		static Int ALT;
		static Int SPACE;
		static Int UP;
		static Int DOWN;
		static Int LEFT;
		static Int RIGHT;
		static Int TAB;
		static Int PRINTSCREEN;
		static Int F1;
		static Int F2;
		static Int F3;
		static Int F4;
		static Int F5;
		static Int F6;
		static Int F7;
		static Int F8;
		static Int F9;
		static Int F10;
		static Int F11;
		static Int F12;
		static Int NUMPADZERO;
		static Int NUMPADONE;
		static Int NUMPADTWO;
		static Int NUMPADTHREE;
		static Int NUMPADFOUR;
		static Int NUMPADFIVE;
		static Int NUMPADSIX;
		static Int NUMPADSEVEN;
		static Int NUMPADEIGHT;
		static Int NUMPADNINE;
		static Int NUMPADMINUS;
		static Int NUMPADPLUS;
		static Int NUMPADPERIOD;
		static Int NUMPADMULTIPLY;
		static Int fromString(::String s);
		static ::Dynamic fromString_dyn();

		static ::String toString(Int this1);
		static ::Dynamic toString_dyn();

};

} // end namespace flixel
} // end namespace input
} // end namespace keyboard
} // end namespace _FlxKey

#endif /* INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_ */ 
