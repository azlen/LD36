// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#define INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadAnalogStick)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadAttachment)
HX_DECLARE_CLASS4(flixel,input,gamepad,mappings,FlxGamepadMapping)
HX_DECLARE_CLASS4(flixel,input,gamepad,mappings,Manufacturer)

namespace flixel{
namespace input{
namespace gamepad{
namespace mappings{


class HXCPP_CLASS_ATTRIBUTES FlxGamepadMapping_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxGamepadMapping_obj OBJ_;
		FlxGamepadMapping_obj();

	public:
		void __construct(::hx::EnumBase attachment);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.input.gamepad.mappings.FlxGamepadMapping")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.input.gamepad.mappings.FlxGamepadMapping"); }
		static hx::ObjectPtr< FlxGamepadMapping_obj > __new(::hx::EnumBase attachment);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxGamepadMapping_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("FlxGamepadMapping","\x5f","\xc4","\xc0","\x66"); }

		Bool supportsMotion;
		Bool supportsPointer;
		 ::flixel::input::gamepad::FlxGamepadAnalogStick leftStick;
		 ::flixel::input::gamepad::FlxGamepadAnalogStick rightStick;
		::hx::EnumBase attachment;
		::hx::EnumBase manufacturer;
		virtual void initValues();
		::Dynamic initValues_dyn();

		 ::flixel::input::gamepad::FlxGamepadAnalogStick getAnalogStick(Int ID);
		::Dynamic getAnalogStick_dyn();

		virtual Int getID(Int rawID);
		::Dynamic getID_dyn();

		virtual Int getRawID(Int ID);
		::Dynamic getRawID_dyn();

		virtual Bool isAxisForMotion(Int ID);
		::Dynamic isAxisForMotion_dyn();

		virtual Bool isAxisFlipped(Int axisID);
		::Dynamic isAxisFlipped_dyn();

		virtual Int axisIndexToRawID(Int axisID);
		::Dynamic axisIndexToRawID_dyn();

		virtual Int checkForFakeAxis(Int ID);
		::Dynamic checkForFakeAxis_dyn();

		virtual ::hx::EnumBase set_attachment(::hx::EnumBase attachment);
		::Dynamic set_attachment_dyn();

};

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
} // end namespace mappings

#endif /* INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping */ 
