// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#define INCLUDED_flixel_input_gamepad_FlxGamepad

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
HX_DECLARE_CLASS2(flixel,input,FlxInput)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,input,IFlxInputManager)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepad)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadAnalogStick)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadAttachment)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadButton)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadDeadZoneMode)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadManager)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadModel)
HX_DECLARE_CLASS4(flixel,input,gamepad,lists,FlxBaseGamepadList)
HX_DECLARE_CLASS4(flixel,input,gamepad,lists,FlxGamepadAnalogList)
HX_DECLARE_CLASS4(flixel,input,gamepad,lists,FlxGamepadButtonList)
HX_DECLARE_CLASS4(flixel,input,gamepad,lists,FlxGamepadMotionValueList)
HX_DECLARE_CLASS4(flixel,input,gamepad,lists,FlxGamepadPointerValueList)
HX_DECLARE_CLASS4(flixel,input,gamepad,mappings,FlxGamepadMapping)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace input{
namespace gamepad{


class HXCPP_CLASS_ATTRIBUTES FlxGamepad_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxGamepad_obj OBJ_;
		FlxGamepad_obj();

	public:
		void __construct(Int ID, ::flixel::input::gamepad::FlxGamepadManager Manager,::hx::EnumBase Model,::hx::EnumBase Attachment);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.input.gamepad.FlxGamepad")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.input.gamepad.FlxGamepad"); }
		static hx::ObjectPtr< FlxGamepad_obj > __new(Int ID, ::flixel::input::gamepad::FlxGamepadManager Manager,::hx::EnumBase Model,::hx::EnumBase Attachment);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxGamepad_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("FlxGamepad","\x6f","\x9a","\xb1","\xb8"); }

		Int id;
		::hx::EnumBase model;
		::hx::EnumBase detectedModel;
		 ::flixel::input::gamepad::mappings::FlxGamepadMapping mapping;
		Bool connected;
		::hx::EnumBase attachment;
		::hx::EnumBase deadZoneMode;
		 ::flixel::input::gamepad::lists::FlxGamepadButtonList pressed;
		 ::flixel::input::gamepad::lists::FlxGamepadButtonList justPressed;
		 ::flixel::input::gamepad::lists::FlxGamepadButtonList justReleased;
		 ::flixel::input::gamepad::lists::FlxGamepadAnalogList analog;
		 ::flixel::input::gamepad::lists::FlxGamepadMotionValueList motion;
		 ::flixel::input::gamepad::lists::FlxGamepadPointerValueList pointer;
		 ::flixel::math::FlxPoint hat;
		 ::flixel::math::FlxPoint ball;
		::Array< Float > axis;
		Bool axisActive;
		 ::flixel::input::gamepad::FlxGamepadManager manager;
		Float _deadZone;
		::Array< ::Dynamic> buttons;
		 ::flixel::input::gamepad::FlxGamepadButton getButton(Int RawID);
		::Dynamic getButton_dyn();

		Float applyAxisFlip(Float axisValue,Int axisID);
		::Dynamic applyAxisFlip_dyn();

		void update();
		::Dynamic update_dyn();

		void reset();
		::Dynamic reset_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		Bool checkStatus(Int ID,Int Status);
		::Dynamic checkStatus_dyn();

		Bool checkStatusRaw(Int RawID,Int Status);
		::Dynamic checkStatusRaw_dyn();

		Bool anyPressed(::Array< Int > IDArray);
		::Dynamic anyPressed_dyn();

		Bool anyPressedRaw(::Array< Int > RawIDArray);
		::Dynamic anyPressedRaw_dyn();

		Bool anyJustPressed(::Array< Int > IDArray);
		::Dynamic anyJustPressed_dyn();

		Bool anyJustPressedRaw(::Array< Int > RawIDArray);
		::Dynamic anyJustPressedRaw_dyn();

		Bool anyJustReleased(::Array< Int > IDArray);
		::Dynamic anyJustReleased_dyn();

		Bool anyJustReleasedRaw(::Array< Int > RawIDArray);
		::Dynamic anyJustReleasedRaw_dyn();

		Int firstPressedID();
		::Dynamic firstPressedID_dyn();

		Int firstPressedRawID();
		::Dynamic firstPressedRawID_dyn();

		Int firstJustPressedID();
		::Dynamic firstJustPressedID_dyn();

		Int firstJustPressedRawID();
		::Dynamic firstJustPressedRawID_dyn();

		Int firstJustReleasedID();
		::Dynamic firstJustReleasedID_dyn();

		Int firstJustReleasedRawID();
		::Dynamic firstJustReleasedRawID_dyn();

		Float getAxis(Int AxisButtonID);
		::Dynamic getAxis_dyn();

		Float getAxisRaw(Int RawAxisID);
		::Dynamic getAxisRaw_dyn();

		Bool isAxisForAnalogStick(Int AxisIndex);
		::Dynamic isAxisForAnalogStick_dyn();

		 ::flixel::input::gamepad::FlxGamepadAnalogStick getAnalogStickByAxis(Int AxisIndex);
		::Dynamic getAnalogStickByAxis_dyn();

		Float getXAxis(Int AxesButtonID);
		::Dynamic getXAxis_dyn();

		Float getXAxisRaw( ::flixel::input::gamepad::FlxGamepadAnalogStick Stick);
		::Dynamic getXAxisRaw_dyn();

		Float getYAxis(Int AxesButtonID);
		::Dynamic getYAxis_dyn();

		Float getYAxisRaw( ::flixel::input::gamepad::FlxGamepadAnalogStick Stick);
		::Dynamic getYAxisRaw_dyn();

		Bool anyButton(hx::Null< Int >  state);
		::Dynamic anyButton_dyn();

		Bool anyInput();
		::Dynamic anyInput_dyn();

		Float getAxisValue(Int AxisID);
		::Dynamic getAxisValue_dyn();

		Float getAnalogXAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick);
		::Dynamic getAnalogXAxisValue_dyn();

		Float getAnalogYAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick);
		::Dynamic getAnalogYAxisValue_dyn();

		Float getAnalogAxisValueCircular( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,Int axisID);
		::Dynamic getAnalogAxisValueCircular_dyn();

		Float getAnalogAxisValueIndependant(Int axisID);
		::Dynamic getAnalogAxisValueIndependant_dyn();

		void handleAxisMove(Int axis,Float newValue,Float oldValue);
		::Dynamic handleAxisMove_dyn();

		void handleAxisMoveSub( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,Int axis,Float value,Float oldValue,hx::Null< Float >  sign);
		::Dynamic handleAxisMoveSub_dyn();

		 ::flixel::input::gamepad::mappings::FlxGamepadMapping createMappingForModel(::hx::EnumBase model);
		::Dynamic createMappingForModel_dyn();

		::hx::EnumBase set_model(::hx::EnumBase Model);
		::Dynamic set_model_dyn();

		::hx::EnumBase set_attachment(::hx::EnumBase Attachment);
		::Dynamic set_attachment_dyn();

		Float get_deadZone();
		::Dynamic get_deadZone_dyn();

		Float set_deadZone(Float deadZone);
		::Dynamic set_deadZone_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace flixel
} // end namespace input
} // end namespace gamepad

#endif /* INCLUDED_flixel_input_gamepad_FlxGamepad */ 
