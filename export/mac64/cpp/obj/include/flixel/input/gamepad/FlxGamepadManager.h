// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#define INCLUDED_flixel_input_gamepad_FlxGamepadManager

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
HX_DECLARE_CLASS2(flixel,input,IFlxInputManager)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepad)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadAnalogStick)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadManager)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepadModel)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS3(openfl,_legacy,events,Event)
HX_DECLARE_CLASS3(openfl,_legacy,events,JoystickEvent)

namespace flixel{
namespace input{
namespace gamepad{


class HXCPP_CLASS_ATTRIBUTES FlxGamepadManager_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxGamepadManager_obj OBJ_;
		FlxGamepadManager_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.input.gamepad.FlxGamepadManager")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.input.gamepad.FlxGamepadManager"); }
		static hx::ObjectPtr< FlxGamepadManager_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxGamepadManager_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("FlxGamepadManager","\xbe","\xdb","\x07","\x36"); }

		 ::flixel::input::gamepad::FlxGamepad firstActive;
		 ::flixel::input::gamepad::FlxGamepad lastActive;
		Int numActiveGamepads;
		 ::Dynamic globalDeadZone;
		::Array< ::Dynamic> _gamepads;
		::Array< ::Dynamic> _activeGamepads;
		 ::flixel::input::gamepad::FlxGamepad getByID(Int GamepadID);
		::Dynamic getByID_dyn();

		void removeByID(Int GamepadID);
		::Dynamic removeByID_dyn();

		 ::flixel::input::gamepad::FlxGamepad createByID(Int GamepadID,::hx::EnumBase Model);
		::Dynamic createByID_dyn();

		::Array< Int > getActiveGamepadIDs(::Array< Int > IDsArray);
		::Dynamic getActiveGamepadIDs_dyn();

		::Array< ::Dynamic> getActiveGamepads(::Array< ::Dynamic> GamepadArray);
		::Dynamic getActiveGamepads_dyn();

		Int getFirstActiveGamepadID();
		::Dynamic getFirstActiveGamepadID_dyn();

		 ::flixel::input::gamepad::FlxGamepad getFirstActiveGamepad();
		::Dynamic getFirstActiveGamepad_dyn();

		Bool anyButton(hx::Null< Int >  state);
		::Dynamic anyButton_dyn();

		Bool anyInput();
		::Dynamic anyInput_dyn();

		Bool anyPressed(Int buttonID);
		::Dynamic anyPressed_dyn();

		Bool anyJustPressed(Int buttonID);
		::Dynamic anyJustPressed_dyn();

		Bool anyJustReleased(Int buttonID);
		::Dynamic anyJustReleased_dyn();

		Bool anyHasState(Int buttonID,Int state);
		::Dynamic anyHasState_dyn();

		Float anyMovedXAxis( ::flixel::input::gamepad::FlxGamepadAnalogStick RawAxisID);
		::Dynamic anyMovedXAxis_dyn();

		Float anyMovedYAxis( ::flixel::input::gamepad::FlxGamepadAnalogStick RawAxisID);
		::Dynamic anyMovedYAxis_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		void reset();
		::Dynamic reset_dyn();

		::hx::EnumBase getModelFromJoystick(Float id);
		::Dynamic getModelFromJoystick_dyn();

		void handleButtonDownEvent( ::openfl::_legacy::events::JoystickEvent event);
		::Dynamic handleButtonDownEvent_dyn();

		void handleButtonDown(Int device,Int id);
		::Dynamic handleButtonDown_dyn();

		void handleButtonUpEvent( ::openfl::_legacy::events::JoystickEvent event);
		::Dynamic handleButtonUpEvent_dyn();

		void handleButtonUp(Int device,Int id);
		::Dynamic handleButtonUp_dyn();

		void handleAxisMove( ::openfl::_legacy::events::JoystickEvent event);
		::Dynamic handleAxisMove_dyn();

		void copyToPointWithDeadzone( ::flixel::input::gamepad::FlxGamepad gamepad, ::flixel::math::FlxPoint point, ::openfl::_legacy::events::JoystickEvent event);
		::Dynamic copyToPointWithDeadzone_dyn();

		void handleBallMove( ::openfl::_legacy::events::JoystickEvent event);
		::Dynamic handleBallMove_dyn();

		void handleHatMove( ::openfl::_legacy::events::JoystickEvent event);
		::Dynamic handleHatMove_dyn();

		void checkDpadAxisChange(Int device,Float oldValue,Float newValue,Int negativeID,Int positiveID);
		::Dynamic checkDpadAxisChange_dyn();

		void handleDeviceAdded( ::openfl::_legacy::events::JoystickEvent event);
		::Dynamic handleDeviceAdded_dyn();

		void handleDeviceRemoved( ::openfl::_legacy::events::JoystickEvent event);
		::Dynamic handleDeviceRemoved_dyn();

		void update();
		::Dynamic update_dyn();

		void onFocus();
		::Dynamic onFocus_dyn();

		void onFocusLost();
		::Dynamic onFocusLost_dyn();

		Int get_numActiveGamepads();
		::Dynamic get_numActiveGamepads_dyn();

};

} // end namespace flixel
} // end namespace input
} // end namespace gamepad

#endif /* INCLUDED_flixel_input_gamepad_FlxGamepadManager */ 
