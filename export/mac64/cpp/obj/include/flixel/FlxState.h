// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_FlxState
#define INCLUDED_flixel_FlxState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace flixel{


class HXCPP_CLASS_ATTRIBUTES FlxState_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef FlxState_obj OBJ_;
		FlxState_obj();

	public:
		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.FlxState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.FlxState"); }
		static hx::ObjectPtr< FlxState_obj > __new( ::Dynamic MaxSize);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("FlxState","\x5f","\x80","\xe5","\x40"); }

		Bool persistentUpdate;
		Bool persistentDraw;
		Bool destroySubStates;
		 ::flixel::FlxSubState subState;
		 ::flixel::FlxSubState _requestedSubState;
		Bool _requestSubStateReset;
		virtual void create();
		::Dynamic create_dyn();

		virtual void draw();

		void openSubState( ::flixel::FlxSubState SubState);
		::Dynamic openSubState_dyn();

		void closeSubState();
		::Dynamic closeSubState_dyn();

		void resetSubState();
		::Dynamic resetSubState_dyn();

		virtual void destroy();

		Bool switchTo( ::flixel::FlxState nextState);
		::Dynamic switchTo_dyn();

		void onFocusLost();
		::Dynamic onFocusLost_dyn();

		void onFocus();
		::Dynamic onFocus_dyn();

		virtual void onResize(Int Width,Int Height);
		::Dynamic onResize_dyn();

		void tryUpdate(Float elapsed);
		::Dynamic tryUpdate_dyn();

		virtual Int get_bgColor();
		::Dynamic get_bgColor_dyn();

		virtual Int set_bgColor(Int Value);
		::Dynamic set_bgColor_dyn();

};

} // end namespace flixel

#endif /* INCLUDED_flixel_FlxState */ 
